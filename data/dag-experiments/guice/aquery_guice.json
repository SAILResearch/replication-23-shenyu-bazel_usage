{
  "artifacts": [{
    "id": 1,
    "pathFragmentId": 1
  }, {
    "id": 2,
    "pathFragmentId": 5
  }, {
    "id": 3,
    "pathFragmentId": 6
  }, {
    "id": 4,
    "pathFragmentId": 7
  }, {
    "id": 5,
    "pathFragmentId": 8
  }, {
    "id": 6,
    "pathFragmentId": 9
  }, {
    "id": 7,
    "pathFragmentId": 10
  }, {
    "id": 8,
    "pathFragmentId": 11
  }, {
    "id": 9,
    "pathFragmentId": 12
  }, {
    "id": 10,
    "pathFragmentId": 13
  }, {
    "id": 11,
    "pathFragmentId": 14
  }, {
    "id": 12,
    "pathFragmentId": 15
  }, {
    "id": 13,
    "pathFragmentId": 16
  }, {
    "id": 14,
    "pathFragmentId": 17
  }, {
    "id": 15,
    "pathFragmentId": 18
  }, {
    "id": 16,
    "pathFragmentId": 19
  }, {
    "id": 17,
    "pathFragmentId": 20
  }, {
    "id": 18,
    "pathFragmentId": 21
  }, {
    "id": 19,
    "pathFragmentId": 22
  }, {
    "id": 20,
    "pathFragmentId": 23
  }, {
    "id": 21,
    "pathFragmentId": 24
  }, {
    "id": 22,
    "pathFragmentId": 25
  }, {
    "id": 23,
    "pathFragmentId": 26
  }, {
    "id": 24,
    "pathFragmentId": 27
  }, {
    "id": 25,
    "pathFragmentId": 28
  }, {
    "id": 26,
    "pathFragmentId": 29
  }, {
    "id": 27,
    "pathFragmentId": 30
  }, {
    "id": 28,
    "pathFragmentId": 31
  }, {
    "id": 29,
    "pathFragmentId": 32
  }, {
    "id": 30,
    "pathFragmentId": 33
  }, {
    "id": 31,
    "pathFragmentId": 34
  }, {
    "id": 32,
    "pathFragmentId": 35
  }, {
    "id": 33,
    "pathFragmentId": 36
  }, {
    "id": 34,
    "pathFragmentId": 37
  }, {
    "id": 35,
    "pathFragmentId": 39
  }, {
    "id": 36,
    "pathFragmentId": 41
  }, {
    "id": 37,
    "pathFragmentId": 42
  }, {
    "id": 38,
    "pathFragmentId": 43
  }, {
    "id": 39,
    "pathFragmentId": 44
  }, {
    "id": 40,
    "pathFragmentId": 46
  }, {
    "id": 41,
    "pathFragmentId": 47
  }, {
    "id": 42,
    "pathFragmentId": 49
  }, {
    "id": 43,
    "pathFragmentId": 51
  }, {
    "id": 44,
    "pathFragmentId": 52
  }, {
    "id": 45,
    "pathFragmentId": 53
  }, {
    "id": 46,
    "pathFragmentId": 55
  }, {
    "id": 47,
    "pathFragmentId": 56
  }, {
    "id": 48,
    "pathFragmentId": 57
  }, {
    "id": 49,
    "pathFragmentId": 59
  }, {
    "id": 50,
    "pathFragmentId": 60
  }, {
    "id": 51,
    "pathFragmentId": 61
  }, {
    "id": 52,
    "pathFragmentId": 62
  }, {
    "id": 53,
    "pathFragmentId": 63
  }, {
    "id": 54,
    "pathFragmentId": 64
  }, {
    "id": 55,
    "pathFragmentId": 66
  }, {
    "id": 56,
    "pathFragmentId": 67
  }, {
    "id": 57,
    "pathFragmentId": 69
  }, {
    "id": 58,
    "pathFragmentId": 70
  }, {
    "id": 59,
    "pathFragmentId": 71
  }, {
    "id": 60,
    "pathFragmentId": 73
  }, {
    "id": 61,
    "pathFragmentId": 74
  }, {
    "id": 62,
    "pathFragmentId": 76
  }, {
    "id": 63,
    "pathFragmentId": 77
  }, {
    "id": 64,
    "pathFragmentId": 78
  }, {
    "id": 65,
    "pathFragmentId": 79
  }, {
    "id": 66,
    "pathFragmentId": 80
  }, {
    "id": 67,
    "pathFragmentId": 81
  }, {
    "id": 68,
    "pathFragmentId": 82
  }, {
    "id": 69,
    "pathFragmentId": 83
  }, {
    "id": 70,
    "pathFragmentId": 84
  }, {
    "id": 71,
    "pathFragmentId": 85
  }, {
    "id": 72,
    "pathFragmentId": 86
  }, {
    "id": 73,
    "pathFragmentId": 87
  }, {
    "id": 74,
    "pathFragmentId": 88
  }, {
    "id": 75,
    "pathFragmentId": 89
  }, {
    "id": 76,
    "pathFragmentId": 90
  }, {
    "id": 77,
    "pathFragmentId": 91
  }, {
    "id": 78,
    "pathFragmentId": 92
  }, {
    "id": 79,
    "pathFragmentId": 93
  }, {
    "id": 80,
    "pathFragmentId": 94
  }, {
    "id": 81,
    "pathFragmentId": 95
  }, {
    "id": 82,
    "pathFragmentId": 96
  }, {
    "id": 83,
    "pathFragmentId": 97
  }, {
    "id": 84,
    "pathFragmentId": 98
  }, {
    "id": 85,
    "pathFragmentId": 99
  }, {
    "id": 86,
    "pathFragmentId": 100
  }, {
    "id": 87,
    "pathFragmentId": 101
  }, {
    "id": 88,
    "pathFragmentId": 102
  }, {
    "id": 89,
    "pathFragmentId": 103
  }, {
    "id": 90,
    "pathFragmentId": 104
  }, {
    "id": 91,
    "pathFragmentId": 105
  }, {
    "id": 92,
    "pathFragmentId": 106
  }, {
    "id": 93,
    "pathFragmentId": 107
  }, {
    "id": 94,
    "pathFragmentId": 108
  }, {
    "id": 95,
    "pathFragmentId": 109
  }, {
    "id": 96,
    "pathFragmentId": 110
  }, {
    "id": 97,
    "pathFragmentId": 111
  }, {
    "id": 98,
    "pathFragmentId": 112
  }, {
    "id": 99,
    "pathFragmentId": 113
  }, {
    "id": 100,
    "pathFragmentId": 114
  }, {
    "id": 101,
    "pathFragmentId": 115
  }, {
    "id": 102,
    "pathFragmentId": 116
  }, {
    "id": 103,
    "pathFragmentId": 117
  }, {
    "id": 104,
    "pathFragmentId": 118
  }, {
    "id": 105,
    "pathFragmentId": 120
  }, {
    "id": 106,
    "pathFragmentId": 121
  }, {
    "id": 107,
    "pathFragmentId": 122
  }, {
    "id": 108,
    "pathFragmentId": 123
  }, {
    "id": 109,
    "pathFragmentId": 125
  }, {
    "id": 110,
    "pathFragmentId": 126
  }, {
    "id": 111,
    "pathFragmentId": 127
  }, {
    "id": 112,
    "pathFragmentId": 128
  }, {
    "id": 113,
    "pathFragmentId": 129
  }, {
    "id": 114,
    "pathFragmentId": 132
  }, {
    "id": 115,
    "pathFragmentId": 140
  }, {
    "id": 116,
    "pathFragmentId": 148
  }, {
    "id": 117,
    "pathFragmentId": 149
  }, {
    "id": 118,
    "pathFragmentId": 150
  }, {
    "id": 119,
    "pathFragmentId": 151
  }, {
    "id": 120,
    "pathFragmentId": 152
  }, {
    "id": 121,
    "pathFragmentId": 153
  }, {
    "id": 122,
    "pathFragmentId": 154
  }, {
    "id": 123,
    "pathFragmentId": 155
  }, {
    "id": 124,
    "pathFragmentId": 156
  }, {
    "id": 125,
    "pathFragmentId": 157
  }, {
    "id": 126,
    "pathFragmentId": 158
  }, {
    "id": 127,
    "pathFragmentId": 159
  }, {
    "id": 128,
    "pathFragmentId": 160
  }, {
    "id": 129,
    "pathFragmentId": 161
  }, {
    "id": 130,
    "pathFragmentId": 162
  }, {
    "id": 131,
    "pathFragmentId": 163
  }, {
    "id": 132,
    "pathFragmentId": 164
  }, {
    "id": 133,
    "pathFragmentId": 165
  }, {
    "id": 134,
    "pathFragmentId": 166
  }, {
    "id": 135,
    "pathFragmentId": 167
  }, {
    "id": 136,
    "pathFragmentId": 168
  }, {
    "id": 137,
    "pathFragmentId": 169
  }, {
    "id": 138,
    "pathFragmentId": 171
  }, {
    "id": 139,
    "pathFragmentId": 172
  }, {
    "id": 140,
    "pathFragmentId": 173
  }, {
    "id": 141,
    "pathFragmentId": 174
  }, {
    "id": 142,
    "pathFragmentId": 175
  }, {
    "id": 143,
    "pathFragmentId": 176
  }, {
    "id": 144,
    "pathFragmentId": 177
  }, {
    "id": 145,
    "pathFragmentId": 178
  }, {
    "id": 146,
    "pathFragmentId": 179
  }, {
    "id": 147,
    "pathFragmentId": 180
  }, {
    "id": 148,
    "pathFragmentId": 181
  }, {
    "id": 149,
    "pathFragmentId": 182
  }, {
    "id": 150,
    "pathFragmentId": 188
  }, {
    "id": 151,
    "pathFragmentId": 189
  }, {
    "id": 152,
    "pathFragmentId": 190
  }, {
    "id": 153,
    "pathFragmentId": 191
  }, {
    "id": 154,
    "pathFragmentId": 192
  }, {
    "id": 155,
    "pathFragmentId": 203
  }, {
    "id": 156,
    "pathFragmentId": 207
  }, {
    "id": 157,
    "pathFragmentId": 212
  }, {
    "id": 158,
    "pathFragmentId": 215
  }, {
    "id": 159,
    "pathFragmentId": 219
  }, {
    "id": 160,
    "pathFragmentId": 224
  }, {
    "id": 161,
    "pathFragmentId": 229
  }, {
    "id": 162,
    "pathFragmentId": 232
  }, {
    "id": 163,
    "pathFragmentId": 236
  }, {
    "id": 164,
    "pathFragmentId": 241
  }, {
    "id": 165,
    "pathFragmentId": 242
  }, {
    "id": 166,
    "pathFragmentId": 243
  }, {
    "id": 167,
    "pathFragmentId": 244
  }, {
    "id": 168,
    "pathFragmentId": 245
  }, {
    "id": 169,
    "pathFragmentId": 246
  }, {
    "id": 170,
    "pathFragmentId": 254
  }, {
    "id": 171,
    "pathFragmentId": 255
  }, {
    "id": 172,
    "pathFragmentId": 256
  }, {
    "id": 173,
    "pathFragmentId": 257
  }, {
    "id": 174,
    "pathFragmentId": 258
  }, {
    "id": 175,
    "pathFragmentId": 259
  }, {
    "id": 176,
    "pathFragmentId": 260
  }, {
    "id": 177,
    "pathFragmentId": 266
  }, {
    "id": 178,
    "pathFragmentId": 267
  }, {
    "id": 179,
    "pathFragmentId": 274
  }, {
    "id": 180,
    "pathFragmentId": 275
  }, {
    "id": 181,
    "pathFragmentId": 276
  }, {
    "id": 182,
    "pathFragmentId": 277
  }, {
    "id": 183,
    "pathFragmentId": 278
  }, {
    "id": 184,
    "pathFragmentId": 282
  }, {
    "id": 185,
    "pathFragmentId": 286
  }, {
    "id": 186,
    "pathFragmentId": 291
  }, {
    "id": 187,
    "pathFragmentId": 294
  }, {
    "id": 188,
    "pathFragmentId": 299
  }, {
    "id": 189,
    "pathFragmentId": 306
  }, {
    "id": 190,
    "pathFragmentId": 309
  }, {
    "id": 191,
    "pathFragmentId": 312
  }, {
    "id": 192,
    "pathFragmentId": 317
  }, {
    "id": 193,
    "pathFragmentId": 318
  }, {
    "id": 194,
    "pathFragmentId": 319
  }, {
    "id": 195,
    "pathFragmentId": 325
  }, {
    "id": 196,
    "pathFragmentId": 326
  }, {
    "id": 197,
    "pathFragmentId": 327
  }, {
    "id": 198,
    "pathFragmentId": 328
  }, {
    "id": 199,
    "pathFragmentId": 329
  }, {
    "id": 200,
    "pathFragmentId": 330
  }, {
    "id": 201,
    "pathFragmentId": 331
  }, {
    "id": 202,
    "pathFragmentId": 337
  }, {
    "id": 203,
    "pathFragmentId": 338
  }, {
    "id": 204,
    "pathFragmentId": 339
  }, {
    "id": 205,
    "pathFragmentId": 340
  }, {
    "id": 206,
    "pathFragmentId": 341
  }, {
    "id": 207,
    "pathFragmentId": 342
  }, {
    "id": 208,
    "pathFragmentId": 343
  }, {
    "id": 209,
    "pathFragmentId": 344
  }, {
    "id": 210,
    "pathFragmentId": 352
  }, {
    "id": 211,
    "pathFragmentId": 353
  }, {
    "id": 212,
    "pathFragmentId": 357
  }, {
    "id": 213,
    "pathFragmentId": 364
  }, {
    "id": 214,
    "pathFragmentId": 365
  }, {
    "id": 215,
    "pathFragmentId": 366
  }, {
    "id": 216,
    "pathFragmentId": 367
  }, {
    "id": 217,
    "pathFragmentId": 368
  }, {
    "id": 218,
    "pathFragmentId": 369
  }, {
    "id": 219,
    "pathFragmentId": 370
  }, {
    "id": 220,
    "pathFragmentId": 371
  }, {
    "id": 221,
    "pathFragmentId": 372
  }, {
    "id": 222,
    "pathFragmentId": 373
  }, {
    "id": 223,
    "pathFragmentId": 374
  }, {
    "id": 224,
    "pathFragmentId": 375
  }, {
    "id": 225,
    "pathFragmentId": 376
  }, {
    "id": 226,
    "pathFragmentId": 380
  }, {
    "id": 227,
    "pathFragmentId": 382
  }, {
    "id": 228,
    "pathFragmentId": 383
  }, {
    "id": 229,
    "pathFragmentId": 384
  }, {
    "id": 230,
    "pathFragmentId": 385
  }, {
    "id": 231,
    "pathFragmentId": 386
  }, {
    "id": 232,
    "pathFragmentId": 387
  }, {
    "id": 233,
    "pathFragmentId": 389
  }, {
    "id": 234,
    "pathFragmentId": 390
  }, {
    "id": 235,
    "pathFragmentId": 391
  }, {
    "id": 236,
    "pathFragmentId": 392
  }, {
    "id": 237,
    "pathFragmentId": 393
  }, {
    "id": 238,
    "pathFragmentId": 394
  }, {
    "id": 239,
    "pathFragmentId": 395
  }, {
    "id": 240,
    "pathFragmentId": 396
  }, {
    "id": 241,
    "pathFragmentId": 397
  }, {
    "id": 242,
    "pathFragmentId": 408
  }, {
    "id": 243,
    "pathFragmentId": 413
  }, {
    "id": 244,
    "pathFragmentId": 417
  }, {
    "id": 245,
    "pathFragmentId": 420
  }, {
    "id": 246,
    "pathFragmentId": 424
  }, {
    "id": 247,
    "pathFragmentId": 429
  }, {
    "id": 248,
    "pathFragmentId": 434
  }, {
    "id": 249,
    "pathFragmentId": 437
  }, {
    "id": 250,
    "pathFragmentId": 441
  }, {
    "id": 251,
    "pathFragmentId": 446
  }, {
    "id": 252,
    "pathFragmentId": 450
  }, {
    "id": 253,
    "pathFragmentId": 454
  }, {
    "id": 254,
    "pathFragmentId": 457
  }, {
    "id": 255,
    "pathFragmentId": 460
  }, {
    "id": 256,
    "pathFragmentId": 464
  }, {
    "id": 257,
    "pathFragmentId": 469
  }, {
    "id": 258,
    "pathFragmentId": 473
  }, {
    "id": 259,
    "pathFragmentId": 474
  }, {
    "id": 260,
    "pathFragmentId": 477
  }, {
    "id": 261,
    "pathFragmentId": 478
  }, {
    "id": 262,
    "pathFragmentId": 479
  }, {
    "id": 263,
    "pathFragmentId": 480
  }, {
    "id": 264,
    "pathFragmentId": 481
  }, {
    "id": 265,
    "pathFragmentId": 482
  }, {
    "id": 266,
    "pathFragmentId": 483
  }, {
    "id": 267,
    "pathFragmentId": 484
  }, {
    "id": 268,
    "pathFragmentId": 485
  }, {
    "id": 269,
    "pathFragmentId": 486
  }, {
    "id": 270,
    "pathFragmentId": 487
  }, {
    "id": 271,
    "pathFragmentId": 488
  }, {
    "id": 272,
    "pathFragmentId": 489
  }, {
    "id": 273,
    "pathFragmentId": 490
  }, {
    "id": 274,
    "pathFragmentId": 491
  }, {
    "id": 275,
    "pathFragmentId": 492
  }, {
    "id": 276,
    "pathFragmentId": 493
  }, {
    "id": 277,
    "pathFragmentId": 494
  }, {
    "id": 278,
    "pathFragmentId": 495
  }, {
    "id": 279,
    "pathFragmentId": 496
  }, {
    "id": 280,
    "pathFragmentId": 497
  }, {
    "id": 281,
    "pathFragmentId": 498
  }, {
    "id": 282,
    "pathFragmentId": 499
  }, {
    "id": 283,
    "pathFragmentId": 500
  }, {
    "id": 284,
    "pathFragmentId": 501
  }, {
    "id": 285,
    "pathFragmentId": 502
  }, {
    "id": 286,
    "pathFragmentId": 503
  }, {
    "id": 287,
    "pathFragmentId": 504
  }, {
    "id": 288,
    "pathFragmentId": 506
  }, {
    "id": 289,
    "pathFragmentId": 507
  }, {
    "id": 290,
    "pathFragmentId": 509
  }, {
    "id": 291,
    "pathFragmentId": 510
  }, {
    "id": 292,
    "pathFragmentId": 511
  }, {
    "id": 293,
    "pathFragmentId": 513
  }, {
    "id": 294,
    "pathFragmentId": 514
  }, {
    "id": 295,
    "pathFragmentId": 515
  }, {
    "id": 296,
    "pathFragmentId": 517
  }, {
    "id": 297,
    "pathFragmentId": 519
  }, {
    "id": 298,
    "pathFragmentId": 520
  }, {
    "id": 299,
    "pathFragmentId": 521
  }, {
    "id": 300,
    "pathFragmentId": 523
  }, {
    "id": 301,
    "pathFragmentId": 524
  }, {
    "id": 302,
    "pathFragmentId": 525
  }, {
    "id": 303,
    "pathFragmentId": 526
  }, {
    "id": 304,
    "pathFragmentId": 528
  }, {
    "id": 305,
    "pathFragmentId": 529
  }, {
    "id": 306,
    "pathFragmentId": 530
  }, {
    "id": 307,
    "pathFragmentId": 531
  }, {
    "id": 308,
    "pathFragmentId": 532
  }, {
    "id": 309,
    "pathFragmentId": 533
  }, {
    "id": 310,
    "pathFragmentId": 535
  }, {
    "id": 311,
    "pathFragmentId": 536
  }, {
    "id": 312,
    "pathFragmentId": 538
  }, {
    "id": 313,
    "pathFragmentId": 539
  }, {
    "id": 314,
    "pathFragmentId": 540
  }, {
    "id": 315,
    "pathFragmentId": 541
  }, {
    "id": 316,
    "pathFragmentId": 543
  }, {
    "id": 317,
    "pathFragmentId": 544
  }, {
    "id": 318,
    "pathFragmentId": 545
  }, {
    "id": 319,
    "pathFragmentId": 546
  }, {
    "id": 320,
    "pathFragmentId": 547
  }, {
    "id": 321,
    "pathFragmentId": 548
  }, {
    "id": 322,
    "pathFragmentId": 549
  }, {
    "id": 323,
    "pathFragmentId": 550
  }, {
    "id": 324,
    "pathFragmentId": 551
  }, {
    "id": 325,
    "pathFragmentId": 552
  }, {
    "id": 326,
    "pathFragmentId": 553
  }, {
    "id": 327,
    "pathFragmentId": 554
  }, {
    "id": 328,
    "pathFragmentId": 555
  }, {
    "id": 329,
    "pathFragmentId": 556
  }, {
    "id": 330,
    "pathFragmentId": 557
  }, {
    "id": 331,
    "pathFragmentId": 558
  }, {
    "id": 332,
    "pathFragmentId": 559
  }, {
    "id": 333,
    "pathFragmentId": 560
  }, {
    "id": 334,
    "pathFragmentId": 561
  }, {
    "id": 335,
    "pathFragmentId": 562
  }, {
    "id": 336,
    "pathFragmentId": 563
  }, {
    "id": 337,
    "pathFragmentId": 564
  }, {
    "id": 338,
    "pathFragmentId": 565
  }, {
    "id": 339,
    "pathFragmentId": 566
  }, {
    "id": 340,
    "pathFragmentId": 567
  }, {
    "id": 341,
    "pathFragmentId": 568
  }, {
    "id": 342,
    "pathFragmentId": 569
  }, {
    "id": 343,
    "pathFragmentId": 570
  }, {
    "id": 344,
    "pathFragmentId": 571
  }, {
    "id": 345,
    "pathFragmentId": 572
  }, {
    "id": 346,
    "pathFragmentId": 573
  }, {
    "id": 347,
    "pathFragmentId": 574
  }, {
    "id": 348,
    "pathFragmentId": 575
  }, {
    "id": 349,
    "pathFragmentId": 576
  }, {
    "id": 350,
    "pathFragmentId": 577
  }, {
    "id": 351,
    "pathFragmentId": 578
  }, {
    "id": 352,
    "pathFragmentId": 579
  }, {
    "id": 353,
    "pathFragmentId": 580
  }, {
    "id": 354,
    "pathFragmentId": 581
  }, {
    "id": 355,
    "pathFragmentId": 582
  }, {
    "id": 356,
    "pathFragmentId": 583
  }, {
    "id": 357,
    "pathFragmentId": 584
  }, {
    "id": 358,
    "pathFragmentId": 585
  }, {
    "id": 359,
    "pathFragmentId": 586
  }, {
    "id": 360,
    "pathFragmentId": 587
  }, {
    "id": 361,
    "pathFragmentId": 588
  }, {
    "id": 362,
    "pathFragmentId": 590
  }, {
    "id": 363,
    "pathFragmentId": 591
  }, {
    "id": 364,
    "pathFragmentId": 592
  }, {
    "id": 365,
    "pathFragmentId": 593
  }, {
    "id": 366,
    "pathFragmentId": 595
  }, {
    "id": 367,
    "pathFragmentId": 596
  }, {
    "id": 368,
    "pathFragmentId": 597
  }, {
    "id": 369,
    "pathFragmentId": 598
  }, {
    "id": 370,
    "pathFragmentId": 599
  }, {
    "id": 371,
    "pathFragmentId": 602
  }, {
    "id": 372,
    "pathFragmentId": 604
  }, {
    "id": 373,
    "pathFragmentId": 605
  }, {
    "id": 374,
    "pathFragmentId": 606
  }, {
    "id": 375,
    "pathFragmentId": 610
  }, {
    "id": 376,
    "pathFragmentId": 611
  }, {
    "id": 377,
    "pathFragmentId": 622
  }, {
    "id": 378,
    "pathFragmentId": 623
  }, {
    "id": 379,
    "pathFragmentId": 631
  }, {
    "id": 380,
    "pathFragmentId": 633
  }, {
    "id": 381,
    "pathFragmentId": 634
  }, {
    "id": 382,
    "pathFragmentId": 636
  }, {
    "id": 383,
    "pathFragmentId": 637
  }, {
    "id": 384,
    "pathFragmentId": 638
  }, {
    "id": 385,
    "pathFragmentId": 639
  }, {
    "id": 386,
    "pathFragmentId": 640
  }, {
    "id": 387,
    "pathFragmentId": 641
  }, {
    "id": 388,
    "pathFragmentId": 642
  }, {
    "id": 389,
    "pathFragmentId": 649
  }, {
    "id": 390,
    "pathFragmentId": 650
  }, {
    "id": 391,
    "pathFragmentId": 651
  }, {
    "id": 392,
    "pathFragmentId": 652
  }, {
    "id": 393,
    "pathFragmentId": 653
  }, {
    "id": 394,
    "pathFragmentId": 655
  }, {
    "id": 395,
    "pathFragmentId": 656
  }, {
    "id": 396,
    "pathFragmentId": 657
  }, {
    "id": 397,
    "pathFragmentId": 658
  }, {
    "id": 398,
    "pathFragmentId": 659
  }, {
    "id": 399,
    "pathFragmentId": 661
  }, {
    "id": 400,
    "pathFragmentId": 662
  }, {
    "id": 401,
    "pathFragmentId": 663
  }, {
    "id": 402,
    "pathFragmentId": 664
  }, {
    "id": 403,
    "pathFragmentId": 665
  }, {
    "id": 404,
    "pathFragmentId": 666
  }, {
    "id": 405,
    "pathFragmentId": 667
  }, {
    "id": 406,
    "pathFragmentId": 668
  }, {
    "id": 407,
    "pathFragmentId": 675
  }, {
    "id": 408,
    "pathFragmentId": 679
  }, {
    "id": 409,
    "pathFragmentId": 683
  }, {
    "id": 410,
    "pathFragmentId": 684
  }, {
    "id": 411,
    "pathFragmentId": 685
  }, {
    "id": 412,
    "pathFragmentId": 686
  }, {
    "id": 413,
    "pathFragmentId": 687
  }, {
    "id": 414,
    "pathFragmentId": 688
  }, {
    "id": 415,
    "pathFragmentId": 689
  }, {
    "id": 416,
    "pathFragmentId": 690
  }, {
    "id": 417,
    "pathFragmentId": 691
  }, {
    "id": 418,
    "pathFragmentId": 692
  }, {
    "id": 419,
    "pathFragmentId": 693
  }, {
    "id": 420,
    "pathFragmentId": 694
  }, {
    "id": 421,
    "pathFragmentId": 695
  }, {
    "id": 422,
    "pathFragmentId": 696
  }, {
    "id": 423,
    "pathFragmentId": 698
  }, {
    "id": 424,
    "pathFragmentId": 699
  }, {
    "id": 425,
    "pathFragmentId": 700
  }, {
    "id": 426,
    "pathFragmentId": 701
  }, {
    "id": 427,
    "pathFragmentId": 702
  }, {
    "id": 428,
    "pathFragmentId": 709
  }, {
    "id": 429,
    "pathFragmentId": 710
  }, {
    "id": 430,
    "pathFragmentId": 716
  }, {
    "id": 431,
    "pathFragmentId": 717
  }, {
    "id": 432,
    "pathFragmentId": 719
  }, {
    "id": 433,
    "pathFragmentId": 720
  }, {
    "id": 434,
    "pathFragmentId": 721
  }, {
    "id": 435,
    "pathFragmentId": 722
  }, {
    "id": 436,
    "pathFragmentId": 723
  }, {
    "id": 437,
    "pathFragmentId": 724
  }, {
    "id": 438,
    "pathFragmentId": 725
  }, {
    "id": 439,
    "pathFragmentId": 726
  }, {
    "id": 440,
    "pathFragmentId": 727
  }, {
    "id": 441,
    "pathFragmentId": 728
  }, {
    "id": 442,
    "pathFragmentId": 729
  }, {
    "id": 443,
    "pathFragmentId": 730
  }, {
    "id": 444,
    "pathFragmentId": 731
  }, {
    "id": 445,
    "pathFragmentId": 732
  }, {
    "id": 446,
    "pathFragmentId": 733
  }, {
    "id": 447,
    "pathFragmentId": 734
  }, {
    "id": 448,
    "pathFragmentId": 735
  }, {
    "id": 449,
    "pathFragmentId": 736
  }, {
    "id": 450,
    "pathFragmentId": 752
  }, {
    "id": 451,
    "pathFragmentId": 756
  }, {
    "id": 452,
    "pathFragmentId": 760
  }, {
    "id": 453,
    "pathFragmentId": 764
  }, {
    "id": 454,
    "pathFragmentId": 768
  }, {
    "id": 455,
    "pathFragmentId": 773
  }, {
    "id": 456,
    "pathFragmentId": 778
  }, {
    "id": 457,
    "pathFragmentId": 783
  }, {
    "id": 458,
    "pathFragmentId": 788
  }, {
    "id": 459,
    "pathFragmentId": 792
  }, {
    "id": 460,
    "pathFragmentId": 795
  }, {
    "id": 461,
    "pathFragmentId": 798
  }, {
    "id": 462,
    "pathFragmentId": 802
  }, {
    "id": 463,
    "pathFragmentId": 805
  }, {
    "id": 464,
    "pathFragmentId": 809
  }, {
    "id": 465,
    "pathFragmentId": 814
  }, {
    "id": 466,
    "pathFragmentId": 818
  }, {
    "id": 467,
    "pathFragmentId": 822
  }, {
    "id": 468,
    "pathFragmentId": 826
  }, {
    "id": 469,
    "pathFragmentId": 829
  }, {
    "id": 470,
    "pathFragmentId": 833
  }, {
    "id": 471,
    "pathFragmentId": 834
  }, {
    "id": 472,
    "pathFragmentId": 835
  }, {
    "id": 473,
    "pathFragmentId": 836
  }, {
    "id": 474,
    "pathFragmentId": 837
  }, {
    "id": 475,
    "pathFragmentId": 838
  }, {
    "id": 476,
    "pathFragmentId": 839
  }, {
    "id": 477,
    "pathFragmentId": 840
  }, {
    "id": 478,
    "pathFragmentId": 841
  }, {
    "id": 479,
    "pathFragmentId": 842
  }, {
    "id": 480,
    "pathFragmentId": 843
  }, {
    "id": 481,
    "pathFragmentId": 844
  }, {
    "id": 482,
    "pathFragmentId": 845
  }, {
    "id": 483,
    "pathFragmentId": 846
  }, {
    "id": 484,
    "pathFragmentId": 847
  }, {
    "id": 485,
    "pathFragmentId": 848
  }, {
    "id": 486,
    "pathFragmentId": 849
  }, {
    "id": 487,
    "pathFragmentId": 850
  }, {
    "id": 488,
    "pathFragmentId": 852
  }, {
    "id": 489,
    "pathFragmentId": 853
  }, {
    "id": 490,
    "pathFragmentId": 854
  }, {
    "id": 491,
    "pathFragmentId": 855
  }, {
    "id": 492,
    "pathFragmentId": 857
  }, {
    "id": 493,
    "pathFragmentId": 858
  }, {
    "id": 494,
    "pathFragmentId": 865
  }, {
    "id": 495,
    "pathFragmentId": 866
  }, {
    "id": 496,
    "pathFragmentId": 873
  }, {
    "id": 497,
    "pathFragmentId": 874
  }, {
    "id": 498,
    "pathFragmentId": 877
  }, {
    "id": 499,
    "pathFragmentId": 881
  }, {
    "id": 500,
    "pathFragmentId": 882
  }, {
    "id": 501,
    "pathFragmentId": 883
  }, {
    "id": 502,
    "pathFragmentId": 884
  }, {
    "id": 503,
    "pathFragmentId": 891
  }, {
    "id": 504,
    "pathFragmentId": 892
  }, {
    "id": 505,
    "pathFragmentId": 893
  }, {
    "id": 506,
    "pathFragmentId": 900
  }, {
    "id": 507,
    "pathFragmentId": 901
  }, {
    "id": 508,
    "pathFragmentId": 902
  }, {
    "id": 509,
    "pathFragmentId": 903
  }, {
    "id": 510,
    "pathFragmentId": 904
  }, {
    "id": 511,
    "pathFragmentId": 905
  }, {
    "id": 512,
    "pathFragmentId": 906
  }, {
    "id": 513,
    "pathFragmentId": 907
  }, {
    "id": 514,
    "pathFragmentId": 908
  }, {
    "id": 515,
    "pathFragmentId": 909
  }, {
    "id": 516,
    "pathFragmentId": 910
  }, {
    "id": 517,
    "pathFragmentId": 911
  }, {
    "id": 518,
    "pathFragmentId": 912
  }, {
    "id": 519,
    "pathFragmentId": 919
  }, {
    "id": 520,
    "pathFragmentId": 920
  }, {
    "id": 521,
    "pathFragmentId": 921
  }, {
    "id": 522,
    "pathFragmentId": 922
  }, {
    "id": 523,
    "pathFragmentId": 923
  }, {
    "id": 524,
    "pathFragmentId": 924
  }, {
    "id": 525,
    "pathFragmentId": 925
  }, {
    "id": 526,
    "pathFragmentId": 926
  }, {
    "id": 527,
    "pathFragmentId": 927
  }, {
    "id": 528,
    "pathFragmentId": 928
  }, {
    "id": 529,
    "pathFragmentId": 929
  }, {
    "id": 530,
    "pathFragmentId": 930
  }, {
    "id": 531,
    "pathFragmentId": 931
  }, {
    "id": 532,
    "pathFragmentId": 932
  }, {
    "id": 533,
    "pathFragmentId": 933
  }, {
    "id": 534,
    "pathFragmentId": 934
  }, {
    "id": 535,
    "pathFragmentId": 935
  }, {
    "id": 536,
    "pathFragmentId": 936
  }, {
    "id": 537,
    "pathFragmentId": 937
  }, {
    "id": 538,
    "pathFragmentId": 938
  }, {
    "id": 539,
    "pathFragmentId": 939
  }, {
    "id": 540,
    "pathFragmentId": 940
  }, {
    "id": 541,
    "pathFragmentId": 941
  }, {
    "id": 542,
    "pathFragmentId": 942
  }, {
    "id": 543,
    "pathFragmentId": 943
  }, {
    "id": 544,
    "pathFragmentId": 944
  }, {
    "id": 545,
    "pathFragmentId": 945
  }, {
    "id": 546,
    "pathFragmentId": 946
  }, {
    "id": 547,
    "pathFragmentId": 947
  }, {
    "id": 548,
    "pathFragmentId": 948
  }, {
    "id": 549,
    "pathFragmentId": 949
  }, {
    "id": 550,
    "pathFragmentId": 950
  }, {
    "id": 551,
    "pathFragmentId": 951
  }, {
    "id": 552,
    "pathFragmentId": 952
  }, {
    "id": 553,
    "pathFragmentId": 953
  }, {
    "id": 554,
    "pathFragmentId": 954
  }, {
    "id": 555,
    "pathFragmentId": 955
  }, {
    "id": 556,
    "pathFragmentId": 956
  }, {
    "id": 557,
    "pathFragmentId": 957
  }, {
    "id": 558,
    "pathFragmentId": 958
  }, {
    "id": 559,
    "pathFragmentId": 959
  }, {
    "id": 560,
    "pathFragmentId": 960
  }, {
    "id": 561,
    "pathFragmentId": 961
  }, {
    "id": 562,
    "pathFragmentId": 962
  }, {
    "id": 563,
    "pathFragmentId": 963
  }, {
    "id": 564,
    "pathFragmentId": 964
  }, {
    "id": 565,
    "pathFragmentId": 965
  }, {
    "id": 566,
    "pathFragmentId": 967
  }, {
    "id": 567,
    "pathFragmentId": 968
  }, {
    "id": 568,
    "pathFragmentId": 969
  }, {
    "id": 569,
    "pathFragmentId": 970
  }, {
    "id": 570,
    "pathFragmentId": 971
  }, {
    "id": 571,
    "pathFragmentId": 972
  }, {
    "id": 572,
    "pathFragmentId": 974
  }, {
    "id": 573,
    "pathFragmentId": 975
  }, {
    "id": 574,
    "pathFragmentId": 976
  }, {
    "id": 575,
    "pathFragmentId": 977
  }, {
    "id": 576,
    "pathFragmentId": 978
  }, {
    "id": 577,
    "pathFragmentId": 979
  }, {
    "id": 578,
    "pathFragmentId": 980
  }, {
    "id": 579,
    "pathFragmentId": 981
  }, {
    "id": 580,
    "pathFragmentId": 982
  }, {
    "id": 581,
    "pathFragmentId": 983
  }, {
    "id": 582,
    "pathFragmentId": 984
  }, {
    "id": 583,
    "pathFragmentId": 985
  }, {
    "id": 584,
    "pathFragmentId": 986
  }, {
    "id": 585,
    "pathFragmentId": 987
  }, {
    "id": 586,
    "pathFragmentId": 989
  }, {
    "id": 587,
    "pathFragmentId": 991
  }, {
    "id": 588,
    "pathFragmentId": 992
  }, {
    "id": 589,
    "pathFragmentId": 994
  }, {
    "id": 590,
    "pathFragmentId": 996
  }, {
    "id": 591,
    "pathFragmentId": 998
  }, {
    "id": 592,
    "pathFragmentId": 999
  }, {
    "id": 593,
    "pathFragmentId": 1001
  }, {
    "id": 594,
    "pathFragmentId": 1002
  }, {
    "id": 595,
    "pathFragmentId": 1003
  }, {
    "id": 596,
    "pathFragmentId": 1004
  }, {
    "id": 597,
    "pathFragmentId": 1005
  }, {
    "id": 598,
    "pathFragmentId": 1006
  }, {
    "id": 599,
    "pathFragmentId": 1007
  }, {
    "id": 600,
    "pathFragmentId": 1008
  }, {
    "id": 601,
    "pathFragmentId": 1009
  }, {
    "id": 602,
    "pathFragmentId": 1010
  }, {
    "id": 603,
    "pathFragmentId": 1011
  }, {
    "id": 604,
    "pathFragmentId": 1012
  }, {
    "id": 605,
    "pathFragmentId": 1013
  }, {
    "id": 606,
    "pathFragmentId": 1014
  }, {
    "id": 607,
    "pathFragmentId": 1015
  }, {
    "id": 608,
    "pathFragmentId": 1016
  }, {
    "id": 609,
    "pathFragmentId": 1017
  }, {
    "id": 610,
    "pathFragmentId": 1018
  }, {
    "id": 611,
    "pathFragmentId": 1019
  }, {
    "id": 612,
    "pathFragmentId": 1021
  }, {
    "id": 613,
    "pathFragmentId": 1022
  }, {
    "id": 614,
    "pathFragmentId": 1023
  }, {
    "id": 615,
    "pathFragmentId": 1024
  }, {
    "id": 616,
    "pathFragmentId": 1025
  }, {
    "id": 617,
    "pathFragmentId": 1026
  }, {
    "id": 618,
    "pathFragmentId": 1027
  }, {
    "id": 619,
    "pathFragmentId": 1028
  }, {
    "id": 620,
    "pathFragmentId": 1034
  }, {
    "id": 621,
    "pathFragmentId": 1035
  }, {
    "id": 622,
    "pathFragmentId": 1036
  }, {
    "id": 623,
    "pathFragmentId": 1037
  }, {
    "id": 624,
    "pathFragmentId": 1038
  }, {
    "id": 625,
    "pathFragmentId": 1039
  }, {
    "id": 626,
    "pathFragmentId": 1040
  }, {
    "id": 627,
    "pathFragmentId": 1041
  }, {
    "id": 628,
    "pathFragmentId": 1042
  }, {
    "id": 629,
    "pathFragmentId": 1043
  }, {
    "id": 630,
    "pathFragmentId": 1044
  }, {
    "id": 631,
    "pathFragmentId": 1045
  }, {
    "id": 632,
    "pathFragmentId": 1046
  }, {
    "id": 633,
    "pathFragmentId": 1048
  }, {
    "id": 634,
    "pathFragmentId": 1049
  }, {
    "id": 635,
    "pathFragmentId": 1050
  }, {
    "id": 636,
    "pathFragmentId": 1051
  }, {
    "id": 637,
    "pathFragmentId": 1052
  }, {
    "id": 638,
    "pathFragmentId": 1053
  }, {
    "id": 639,
    "pathFragmentId": 1061
  }, {
    "id": 640,
    "pathFragmentId": 1062
  }, {
    "id": 641,
    "pathFragmentId": 1069
  }, {
    "id": 642,
    "pathFragmentId": 1070
  }, {
    "id": 643,
    "pathFragmentId": 1071
  }, {
    "id": 644,
    "pathFragmentId": 1072
  }, {
    "id": 645,
    "pathFragmentId": 1073
  }, {
    "id": 646,
    "pathFragmentId": 1076
  }, {
    "id": 647,
    "pathFragmentId": 1077
  }, {
    "id": 648,
    "pathFragmentId": 1078
  }, {
    "id": 649,
    "pathFragmentId": 1079
  }, {
    "id": 650,
    "pathFragmentId": 1080
  }, {
    "id": 651,
    "pathFragmentId": 1081
  }, {
    "id": 652,
    "pathFragmentId": 1082
  }, {
    "id": 653,
    "pathFragmentId": 1083
  }, {
    "id": 654,
    "pathFragmentId": 1084
  }, {
    "id": 655,
    "pathFragmentId": 1085
  }, {
    "id": 656,
    "pathFragmentId": 1087
  }, {
    "id": 657,
    "pathFragmentId": 1088
  }, {
    "id": 658,
    "pathFragmentId": 1089
  }, {
    "id": 659,
    "pathFragmentId": 1090
  }, {
    "id": 660,
    "pathFragmentId": 1092
  }, {
    "id": 661,
    "pathFragmentId": 1093
  }, {
    "id": 662,
    "pathFragmentId": 1094
  }, {
    "id": 663,
    "pathFragmentId": 1095
  }, {
    "id": 664,
    "pathFragmentId": 1101
  }, {
    "id": 665,
    "pathFragmentId": 1109
  }, {
    "id": 666,
    "pathFragmentId": 1110
  }, {
    "id": 667,
    "pathFragmentId": 1111
  }, {
    "id": 668,
    "pathFragmentId": 1112
  }, {
    "id": 669,
    "pathFragmentId": 1118
  }, {
    "id": 670,
    "pathFragmentId": 1119
  }, {
    "id": 671,
    "pathFragmentId": 1123
  }, {
    "id": 672,
    "pathFragmentId": 1128
  }, {
    "id": 673,
    "pathFragmentId": 1129
  }, {
    "id": 674,
    "pathFragmentId": 1132
  }, {
    "id": 675,
    "pathFragmentId": 1135
  }, {
    "id": 676,
    "pathFragmentId": 1138
  }, {
    "id": 677,
    "pathFragmentId": 1139
  }, {
    "id": 678,
    "pathFragmentId": 1140
  }, {
    "id": 679,
    "pathFragmentId": 1141
  }, {
    "id": 680,
    "pathFragmentId": 1142
  }, {
    "id": 681,
    "pathFragmentId": 1143
  }, {
    "id": 682,
    "pathFragmentId": 1144
  }, {
    "id": 683,
    "pathFragmentId": 1145
  }, {
    "id": 684,
    "pathFragmentId": 1146
  }, {
    "id": 685,
    "pathFragmentId": 1147
  }, {
    "id": 686,
    "pathFragmentId": 1148
  }, {
    "id": 687,
    "pathFragmentId": 1149
  }, {
    "id": 688,
    "pathFragmentId": 1151
  }, {
    "id": 689,
    "pathFragmentId": 1152
  }, {
    "id": 690,
    "pathFragmentId": 1156
  }, {
    "id": 691,
    "pathFragmentId": 1161
  }, {
    "id": 692,
    "pathFragmentId": 1164
  }, {
    "id": 693,
    "pathFragmentId": 1167
  }, {
    "id": 694,
    "pathFragmentId": 1170
  }, {
    "id": 695,
    "pathFragmentId": 1171
  }, {
    "id": 696,
    "pathFragmentId": 1172
  }, {
    "id": 697,
    "pathFragmentId": 1173
  }, {
    "id": 698,
    "pathFragmentId": 1181
  }, {
    "id": 699,
    "pathFragmentId": 1182
  }, {
    "id": 700,
    "pathFragmentId": 1183
  }, {
    "id": 701,
    "pathFragmentId": 1184
  }, {
    "id": 702,
    "pathFragmentId": 1185
  }, {
    "id": 703,
    "pathFragmentId": 1186
  }, {
    "id": 704,
    "pathFragmentId": 1192
  }, {
    "id": 705,
    "pathFragmentId": 1193
  }, {
    "id": 706,
    "pathFragmentId": 1194
  }, {
    "id": 707,
    "pathFragmentId": 1195
  }, {
    "id": 708,
    "pathFragmentId": 1197
  }, {
    "id": 709,
    "pathFragmentId": 1198
  }, {
    "id": 710,
    "pathFragmentId": 1199
  }, {
    "id": 711,
    "pathFragmentId": 1200
  }, {
    "id": 712,
    "pathFragmentId": 1201
  }, {
    "id": 713,
    "pathFragmentId": 1202
  }, {
    "id": 714,
    "pathFragmentId": 1203
  }, {
    "id": 715,
    "pathFragmentId": 1204
  }, {
    "id": 716,
    "pathFragmentId": 1205
  }, {
    "id": 717,
    "pathFragmentId": 1206
  }, {
    "id": 718,
    "pathFragmentId": 1207
  }, {
    "id": 719,
    "pathFragmentId": 1208
  }, {
    "id": 720,
    "pathFragmentId": 1209
  }, {
    "id": 721,
    "pathFragmentId": 1210
  }, {
    "id": 722,
    "pathFragmentId": 1211
  }, {
    "id": 723,
    "pathFragmentId": 1212
  }, {
    "id": 724,
    "pathFragmentId": 1213
  }, {
    "id": 725,
    "pathFragmentId": 1214
  }, {
    "id": 726,
    "pathFragmentId": 1215
  }, {
    "id": 727,
    "pathFragmentId": 1216
  }, {
    "id": 728,
    "pathFragmentId": 1217
  }, {
    "id": 729,
    "pathFragmentId": 1218
  }, {
    "id": 730,
    "pathFragmentId": 1219
  }, {
    "id": 731,
    "pathFragmentId": 1220
  }, {
    "id": 732,
    "pathFragmentId": 1221
  }, {
    "id": 733,
    "pathFragmentId": 1222
  }, {
    "id": 734,
    "pathFragmentId": 1223
  }, {
    "id": 735,
    "pathFragmentId": 1224
  }, {
    "id": 736,
    "pathFragmentId": 1225
  }, {
    "id": 737,
    "pathFragmentId": 1226
  }, {
    "id": 738,
    "pathFragmentId": 1227
  }, {
    "id": 739,
    "pathFragmentId": 1230
  }, {
    "id": 740,
    "pathFragmentId": 1233
  }, {
    "id": 741,
    "pathFragmentId": 1234
  }, {
    "id": 742,
    "pathFragmentId": 1235
  }, {
    "id": 743,
    "pathFragmentId": 1236
  }, {
    "id": 744,
    "pathFragmentId": 1237
  }, {
    "id": 745,
    "pathFragmentId": 1238
  }, {
    "id": 746,
    "pathFragmentId": 1239
  }, {
    "id": 747,
    "pathFragmentId": 1240
  }, {
    "id": 748,
    "pathFragmentId": 1247
  }, {
    "id": 749,
    "pathFragmentId": 1248
  }, {
    "id": 750,
    "pathFragmentId": 1249
  }, {
    "id": 751,
    "pathFragmentId": 1250
  }, {
    "id": 752,
    "pathFragmentId": 1251
  }, {
    "id": 753,
    "pathFragmentId": 1252
  }, {
    "id": 754,
    "pathFragmentId": 1253
  }, {
    "id": 755,
    "pathFragmentId": 1254
  }, {
    "id": 756,
    "pathFragmentId": 1255
  }, {
    "id": 757,
    "pathFragmentId": 1256
  }, {
    "id": 758,
    "pathFragmentId": 1257
  }, {
    "id": 759,
    "pathFragmentId": 1258
  }, {
    "id": 760,
    "pathFragmentId": 1259
  }, {
    "id": 761,
    "pathFragmentId": 1260
  }, {
    "id": 762,
    "pathFragmentId": 1261
  }, {
    "id": 763,
    "pathFragmentId": 1262
  }, {
    "id": 764,
    "pathFragmentId": 1263
  }, {
    "id": 765,
    "pathFragmentId": 1264
  }, {
    "id": 766,
    "pathFragmentId": 1265
  }, {
    "id": 767,
    "pathFragmentId": 1266
  }, {
    "id": 768,
    "pathFragmentId": 1267
  }, {
    "id": 769,
    "pathFragmentId": 1268
  }, {
    "id": 770,
    "pathFragmentId": 1269
  }, {
    "id": 771,
    "pathFragmentId": 1270
  }, {
    "id": 772,
    "pathFragmentId": 1271
  }, {
    "id": 773,
    "pathFragmentId": 1272
  }, {
    "id": 774,
    "pathFragmentId": 1273
  }, {
    "id": 775,
    "pathFragmentId": 1274
  }, {
    "id": 776,
    "pathFragmentId": 1275
  }, {
    "id": 777,
    "pathFragmentId": 1276
  }, {
    "id": 778,
    "pathFragmentId": 1283
  }, {
    "id": 779,
    "pathFragmentId": 1284
  }, {
    "id": 780,
    "pathFragmentId": 1285
  }, {
    "id": 781,
    "pathFragmentId": 1286
  }, {
    "id": 782,
    "pathFragmentId": 1292
  }, {
    "id": 783,
    "pathFragmentId": 1293
  }, {
    "id": 784,
    "pathFragmentId": 1294
  }, {
    "id": 785,
    "pathFragmentId": 1295
  }, {
    "id": 786,
    "pathFragmentId": 1296
  }, {
    "id": 787,
    "pathFragmentId": 1297
  }, {
    "id": 788,
    "pathFragmentId": 1298
  }, {
    "id": 789,
    "pathFragmentId": 1304
  }, {
    "id": 790,
    "pathFragmentId": 1311
  }, {
    "id": 791,
    "pathFragmentId": 1312
  }, {
    "id": 792,
    "pathFragmentId": 1313
  }, {
    "id": 793,
    "pathFragmentId": 1314
  }, {
    "id": 794,
    "pathFragmentId": 1315
  }, {
    "id": 795,
    "pathFragmentId": 1316
  }, {
    "id": 796,
    "pathFragmentId": 1317
  }, {
    "id": 797,
    "pathFragmentId": 1318
  }, {
    "id": 798,
    "pathFragmentId": 1319
  }, {
    "id": 799,
    "pathFragmentId": 1320
  }, {
    "id": 800,
    "pathFragmentId": 1321
  }, {
    "id": 801,
    "pathFragmentId": 1322
  }, {
    "id": 802,
    "pathFragmentId": 1323
  }, {
    "id": 803,
    "pathFragmentId": 1324
  }, {
    "id": 804,
    "pathFragmentId": 1325
  }, {
    "id": 805,
    "pathFragmentId": 1326
  }, {
    "id": 806,
    "pathFragmentId": 1327
  }, {
    "id": 807,
    "pathFragmentId": 1328
  }, {
    "id": 808,
    "pathFragmentId": 1329
  }, {
    "id": 809,
    "pathFragmentId": 1330
  }, {
    "id": 810,
    "pathFragmentId": 1331
  }, {
    "id": 811,
    "pathFragmentId": 1332
  }, {
    "id": 812,
    "pathFragmentId": 1333
  }, {
    "id": 813,
    "pathFragmentId": 1334
  }, {
    "id": 814,
    "pathFragmentId": 1336
  }, {
    "id": 815,
    "pathFragmentId": 1337
  }, {
    "id": 816,
    "pathFragmentId": 1338
  }, {
    "id": 817,
    "pathFragmentId": 1339
  }, {
    "id": 818,
    "pathFragmentId": 1340
  }, {
    "id": 819,
    "pathFragmentId": 1348
  }, {
    "id": 820,
    "pathFragmentId": 1349
  }, {
    "id": 821,
    "pathFragmentId": 1350
  }, {
    "id": 822,
    "pathFragmentId": 1351
  }, {
    "id": 823,
    "pathFragmentId": 1352
  }, {
    "id": 824,
    "pathFragmentId": 1353
  }, {
    "id": 825,
    "pathFragmentId": 1354
  }, {
    "id": 826,
    "pathFragmentId": 1355
  }, {
    "id": 827,
    "pathFragmentId": 1356
  }, {
    "id": 828,
    "pathFragmentId": 1357
  }, {
    "id": 829,
    "pathFragmentId": 1358
  }, {
    "id": 830,
    "pathFragmentId": 1359
  }, {
    "id": 831,
    "pathFragmentId": 1360
  }, {
    "id": 832,
    "pathFragmentId": 1361
  }, {
    "id": 833,
    "pathFragmentId": 1362
  }, {
    "id": 834,
    "pathFragmentId": 1363
  }, {
    "id": 835,
    "pathFragmentId": 1364
  }, {
    "id": 836,
    "pathFragmentId": 1366
  }, {
    "id": 837,
    "pathFragmentId": 1367
  }, {
    "id": 838,
    "pathFragmentId": 1368
  }, {
    "id": 839,
    "pathFragmentId": 1369
  }, {
    "id": 840,
    "pathFragmentId": 1371
  }, {
    "id": 841,
    "pathFragmentId": 1372
  }, {
    "id": 842,
    "pathFragmentId": 1373
  }, {
    "id": 843,
    "pathFragmentId": 1374
  }, {
    "id": 844,
    "pathFragmentId": 1375
  }, {
    "id": 845,
    "pathFragmentId": 1376
  }, {
    "id": 846,
    "pathFragmentId": 1377
  }, {
    "id": 847,
    "pathFragmentId": 1378
  }, {
    "id": 848,
    "pathFragmentId": 1379
  }, {
    "id": 849,
    "pathFragmentId": 1380
  }, {
    "id": 850,
    "pathFragmentId": 1381
  }, {
    "id": 851,
    "pathFragmentId": 1383
  }, {
    "id": 852,
    "pathFragmentId": 1385
  }, {
    "id": 853,
    "pathFragmentId": 1389
  }, {
    "id": 854,
    "pathFragmentId": 1393
  }, {
    "id": 855,
    "pathFragmentId": 1398
  }, {
    "id": 856,
    "pathFragmentId": 1403
  }, {
    "id": 857,
    "pathFragmentId": 1408
  }, {
    "id": 858,
    "pathFragmentId": 1413
  }, {
    "id": 859,
    "pathFragmentId": 1418
  }, {
    "id": 860,
    "pathFragmentId": 1422
  }, {
    "id": 861,
    "pathFragmentId": 1425
  }, {
    "id": 862,
    "pathFragmentId": 1428
  }, {
    "id": 863,
    "pathFragmentId": 1431
  }, {
    "id": 864,
    "pathFragmentId": 1435
  }, {
    "id": 865,
    "pathFragmentId": 1438
  }, {
    "id": 866,
    "pathFragmentId": 1442
  }, {
    "id": 867,
    "pathFragmentId": 1447
  }, {
    "id": 868,
    "pathFragmentId": 1451
  }, {
    "id": 869,
    "pathFragmentId": 1455
  }, {
    "id": 870,
    "pathFragmentId": 1459
  }, {
    "id": 871,
    "pathFragmentId": 1463
  }, {
    "id": 872,
    "pathFragmentId": 1466
  }, {
    "id": 873,
    "pathFragmentId": 1470
  }, {
    "id": 874,
    "pathFragmentId": 1474
  }, {
    "id": 875,
    "pathFragmentId": 1475
  }, {
    "id": 876,
    "pathFragmentId": 1476
  }, {
    "id": 877,
    "pathFragmentId": 1477
  }, {
    "id": 878,
    "pathFragmentId": 1485
  }, {
    "id": 879,
    "pathFragmentId": 1486
  }, {
    "id": 880,
    "pathFragmentId": 1487
  }, {
    "id": 881,
    "pathFragmentId": 1488
  }, {
    "id": 882,
    "pathFragmentId": 1496
  }, {
    "id": 883,
    "pathFragmentId": 1497
  }, {
    "id": 884,
    "pathFragmentId": 1498
  }, {
    "id": 885,
    "pathFragmentId": 1499
  }, {
    "id": 886,
    "pathFragmentId": 1500
  }, {
    "id": 887,
    "pathFragmentId": 1501
  }, {
    "id": 888,
    "pathFragmentId": 1508
  }, {
    "id": 889,
    "pathFragmentId": 1509
  }, {
    "id": 890,
    "pathFragmentId": 1511
  }, {
    "id": 891,
    "pathFragmentId": 1512
  }, {
    "id": 892,
    "pathFragmentId": 1513
  }, {
    "id": 893,
    "pathFragmentId": 1514
  }, {
    "id": 894,
    "pathFragmentId": 1515
  }, {
    "id": 895,
    "pathFragmentId": 1516
  }, {
    "id": 896,
    "pathFragmentId": 1517
  }, {
    "id": 897,
    "pathFragmentId": 1519
  }, {
    "id": 898,
    "pathFragmentId": 1520
  }, {
    "id": 899,
    "pathFragmentId": 1521
  }, {
    "id": 900,
    "pathFragmentId": 1522
  }, {
    "id": 901,
    "pathFragmentId": 1523
  }, {
    "id": 902,
    "pathFragmentId": 1524
  }, {
    "id": 903,
    "pathFragmentId": 1525
  }, {
    "id": 904,
    "pathFragmentId": 1526
  }, {
    "id": 905,
    "pathFragmentId": 1527
  }, {
    "id": 906,
    "pathFragmentId": 1528
  }, {
    "id": 907,
    "pathFragmentId": 1529
  }, {
    "id": 908,
    "pathFragmentId": 1530
  }, {
    "id": 909,
    "pathFragmentId": 1531
  }, {
    "id": 910,
    "pathFragmentId": 1532
  }, {
    "id": 911,
    "pathFragmentId": 1533
  }, {
    "id": 912,
    "pathFragmentId": 1534
  }, {
    "id": 913,
    "pathFragmentId": 1535
  }, {
    "id": 914,
    "pathFragmentId": 1536
  }, {
    "id": 915,
    "pathFragmentId": 1537
  }, {
    "id": 916,
    "pathFragmentId": 1538
  }, {
    "id": 917,
    "pathFragmentId": 1539
  }, {
    "id": 918,
    "pathFragmentId": 1540
  }, {
    "id": 919,
    "pathFragmentId": 1541
  }, {
    "id": 920,
    "pathFragmentId": 1542
  }, {
    "id": 921,
    "pathFragmentId": 1544
  }, {
    "id": 922,
    "pathFragmentId": 1545
  }, {
    "id": 923,
    "pathFragmentId": 1546
  }, {
    "id": 924,
    "pathFragmentId": 1547
  }, {
    "id": 925,
    "pathFragmentId": 1548
  }, {
    "id": 926,
    "pathFragmentId": 1549
  }, {
    "id": 927,
    "pathFragmentId": 1557
  }, {
    "id": 928,
    "pathFragmentId": 1558
  }, {
    "id": 929,
    "pathFragmentId": 1564
  }, {
    "id": 930,
    "pathFragmentId": 1565
  }, {
    "id": 931,
    "pathFragmentId": 1566
  }, {
    "id": 932,
    "pathFragmentId": 1567
  }, {
    "id": 933,
    "pathFragmentId": 1568
  }, {
    "id": 934,
    "pathFragmentId": 1569
  }, {
    "id": 935,
    "pathFragmentId": 1570
  }, {
    "id": 936,
    "pathFragmentId": 1571
  }, {
    "id": 937,
    "pathFragmentId": 1572
  }, {
    "id": 938,
    "pathFragmentId": 1573
  }, {
    "id": 939,
    "pathFragmentId": 1574
  }, {
    "id": 940,
    "pathFragmentId": 1575
  }, {
    "id": 941,
    "pathFragmentId": 1576
  }, {
    "id": 942,
    "pathFragmentId": 1577
  }, {
    "id": 943,
    "pathFragmentId": 1578
  }, {
    "id": 944,
    "pathFragmentId": 1579
  }, {
    "id": 945,
    "pathFragmentId": 1580
  }, {
    "id": 946,
    "pathFragmentId": 1581
  }, {
    "id": 947,
    "pathFragmentId": 1582
  }, {
    "id": 948,
    "pathFragmentId": 1583
  }, {
    "id": 949,
    "pathFragmentId": 1584
  }, {
    "id": 950,
    "pathFragmentId": 1585
  }, {
    "id": 951,
    "pathFragmentId": 1586
  }, {
    "id": 952,
    "pathFragmentId": 1587
  }, {
    "id": 953,
    "pathFragmentId": 1588
  }, {
    "id": 954,
    "pathFragmentId": 1589
  }, {
    "id": 955,
    "pathFragmentId": 1590
  }, {
    "id": 956,
    "pathFragmentId": 1592
  }, {
    "id": 957,
    "pathFragmentId": 1593
  }, {
    "id": 958,
    "pathFragmentId": 1594
  }, {
    "id": 959,
    "pathFragmentId": 1595
  }, {
    "id": 960,
    "pathFragmentId": 1603
  }, {
    "id": 961,
    "pathFragmentId": 1604
  }, {
    "id": 962,
    "pathFragmentId": 1605
  }, {
    "id": 963,
    "pathFragmentId": 1609
  }, {
    "id": 964,
    "pathFragmentId": 1612
  }, {
    "id": 965,
    "pathFragmentId": 1615
  }, {
    "id": 966,
    "pathFragmentId": 1616
  }, {
    "id": 967,
    "pathFragmentId": 1617
  }, {
    "id": 968,
    "pathFragmentId": 1618
  }, {
    "id": 969,
    "pathFragmentId": 1619
  }, {
    "id": 970,
    "pathFragmentId": 1620
  }, {
    "id": 971,
    "pathFragmentId": 1621
  }, {
    "id": 972,
    "pathFragmentId": 1622
  }, {
    "id": 973,
    "pathFragmentId": 1623
  }, {
    "id": 974,
    "pathFragmentId": 1625
  }, {
    "id": 975,
    "pathFragmentId": 1626
  }, {
    "id": 976,
    "pathFragmentId": 1627
  }, {
    "id": 977,
    "pathFragmentId": 1628
  }, {
    "id": 978,
    "pathFragmentId": 1630
  }, {
    "id": 979,
    "pathFragmentId": 1631
  }, {
    "id": 980,
    "pathFragmentId": 1632
  }, {
    "id": 981,
    "pathFragmentId": 1636
  }, {
    "id": 982,
    "pathFragmentId": 1639
  }, {
    "id": 983,
    "pathFragmentId": 1642
  }, {
    "id": 984,
    "pathFragmentId": 1643
  }, {
    "id": 985,
    "pathFragmentId": 1644
  }, {
    "id": 986,
    "pathFragmentId": 1645
  }, {
    "id": 987,
    "pathFragmentId": 1653
  }, {
    "id": 988,
    "pathFragmentId": 1654
  }, {
    "id": 989,
    "pathFragmentId": 1655
  }, {
    "id": 990,
    "pathFragmentId": 1656
  }, {
    "id": 991,
    "pathFragmentId": 1657
  }, {
    "id": 992,
    "pathFragmentId": 1658
  }, {
    "id": 993,
    "pathFragmentId": 1659
  }, {
    "id": 994,
    "pathFragmentId": 1660
  }, {
    "id": 995,
    "pathFragmentId": 1661
  }, {
    "id": 996,
    "pathFragmentId": 1662
  }, {
    "id": 997,
    "pathFragmentId": 1663
  }, {
    "id": 998,
    "pathFragmentId": 1664
  }, {
    "id": 999,
    "pathFragmentId": 1665
  }, {
    "id": 1000,
    "pathFragmentId": 1666
  }, {
    "id": 1001,
    "pathFragmentId": 1667
  }, {
    "id": 1002,
    "pathFragmentId": 1668
  }, {
    "id": 1003,
    "pathFragmentId": 1669
  }, {
    "id": 1004,
    "pathFragmentId": 1670
  }, {
    "id": 1005,
    "pathFragmentId": 1671
  }, {
    "id": 1006,
    "pathFragmentId": 1672
  }, {
    "id": 1007,
    "pathFragmentId": 1673
  }, {
    "id": 1008,
    "pathFragmentId": 1674
  }, {
    "id": 1009,
    "pathFragmentId": 1675
  }, {
    "id": 1010,
    "pathFragmentId": 1677
  }, {
    "id": 1011,
    "pathFragmentId": 1678
  }, {
    "id": 1012,
    "pathFragmentId": 1679
  }, {
    "id": 1013,
    "pathFragmentId": 1680
  }, {
    "id": 1014,
    "pathFragmentId": 1681
  }, {
    "id": 1015,
    "pathFragmentId": 1682
  }, {
    "id": 1016,
    "pathFragmentId": 1683
  }, {
    "id": 1017,
    "pathFragmentId": 1684
  }, {
    "id": 1018,
    "pathFragmentId": 1685
  }, {
    "id": 1019,
    "pathFragmentId": 1686
  }, {
    "id": 1020,
    "pathFragmentId": 1687
  }, {
    "id": 1021,
    "pathFragmentId": 1688
  }, {
    "id": 1022,
    "pathFragmentId": 1689
  }, {
    "id": 1023,
    "pathFragmentId": 1690
  }, {
    "id": 1024,
    "pathFragmentId": 1691
  }, {
    "id": 1025,
    "pathFragmentId": 1692
  }, {
    "id": 1026,
    "pathFragmentId": 1693
  }, {
    "id": 1027,
    "pathFragmentId": 1694
  }, {
    "id": 1028,
    "pathFragmentId": 1695
  }, {
    "id": 1029,
    "pathFragmentId": 1696
  }, {
    "id": 1030,
    "pathFragmentId": 1697
  }, {
    "id": 1031,
    "pathFragmentId": 1698
  }, {
    "id": 1032,
    "pathFragmentId": 1699
  }, {
    "id": 1033,
    "pathFragmentId": 1700
  }, {
    "id": 1034,
    "pathFragmentId": 1701
  }, {
    "id": 1035,
    "pathFragmentId": 1702
  }, {
    "id": 1036,
    "pathFragmentId": 1703
  }, {
    "id": 1037,
    "pathFragmentId": 1704
  }, {
    "id": 1038,
    "pathFragmentId": 1705
  }, {
    "id": 1039,
    "pathFragmentId": 1706
  }, {
    "id": 1040,
    "pathFragmentId": 1707
  }, {
    "id": 1041,
    "pathFragmentId": 1708
  }, {
    "id": 1042,
    "pathFragmentId": 1709
  }, {
    "id": 1043,
    "pathFragmentId": 1710
  }, {
    "id": 1044,
    "pathFragmentId": 1711
  }, {
    "id": 1045,
    "pathFragmentId": 1712
  }, {
    "id": 1046,
    "pathFragmentId": 1713
  }, {
    "id": 1047,
    "pathFragmentId": 1714
  }, {
    "id": 1048,
    "pathFragmentId": 1715
  }, {
    "id": 1049,
    "pathFragmentId": 1716
  }, {
    "id": 1050,
    "pathFragmentId": 1717
  }, {
    "id": 1051,
    "pathFragmentId": 1718
  }, {
    "id": 1052,
    "pathFragmentId": 1719
  }, {
    "id": 1053,
    "pathFragmentId": 1720
  }, {
    "id": 1054,
    "pathFragmentId": 1721
  }, {
    "id": 1055,
    "pathFragmentId": 1722
  }, {
    "id": 1056,
    "pathFragmentId": 1723
  }, {
    "id": 1057,
    "pathFragmentId": 1724
  }, {
    "id": 1058,
    "pathFragmentId": 1725
  }, {
    "id": 1059,
    "pathFragmentId": 1726
  }, {
    "id": 1060,
    "pathFragmentId": 1727
  }, {
    "id": 1061,
    "pathFragmentId": 1728
  }, {
    "id": 1062,
    "pathFragmentId": 1729
  }, {
    "id": 1063,
    "pathFragmentId": 1730
  }, {
    "id": 1064,
    "pathFragmentId": 1731
  }, {
    "id": 1065,
    "pathFragmentId": 1732
  }, {
    "id": 1066,
    "pathFragmentId": 1733
  }, {
    "id": 1067,
    "pathFragmentId": 1734
  }, {
    "id": 1068,
    "pathFragmentId": 1735
  }, {
    "id": 1069,
    "pathFragmentId": 1736
  }, {
    "id": 1070,
    "pathFragmentId": 1737
  }, {
    "id": 1071,
    "pathFragmentId": 1738
  }, {
    "id": 1072,
    "pathFragmentId": 1739
  }, {
    "id": 1073,
    "pathFragmentId": 1740
  }, {
    "id": 1074,
    "pathFragmentId": 1741
  }, {
    "id": 1075,
    "pathFragmentId": 1742
  }, {
    "id": 1076,
    "pathFragmentId": 1743
  }, {
    "id": 1077,
    "pathFragmentId": 1744
  }, {
    "id": 1078,
    "pathFragmentId": 1745
  }, {
    "id": 1079,
    "pathFragmentId": 1746
  }, {
    "id": 1080,
    "pathFragmentId": 1747
  }, {
    "id": 1081,
    "pathFragmentId": 1748
  }, {
    "id": 1082,
    "pathFragmentId": 1749
  }, {
    "id": 1083,
    "pathFragmentId": 1750
  }, {
    "id": 1084,
    "pathFragmentId": 1751
  }, {
    "id": 1085,
    "pathFragmentId": 1752
  }, {
    "id": 1086,
    "pathFragmentId": 1753
  }, {
    "id": 1087,
    "pathFragmentId": 1754
  }, {
    "id": 1088,
    "pathFragmentId": 1755
  }, {
    "id": 1089,
    "pathFragmentId": 1756
  }, {
    "id": 1090,
    "pathFragmentId": 1757
  }, {
    "id": 1091,
    "pathFragmentId": 1758
  }, {
    "id": 1092,
    "pathFragmentId": 1759
  }, {
    "id": 1093,
    "pathFragmentId": 1760
  }, {
    "id": 1094,
    "pathFragmentId": 1761
  }, {
    "id": 1095,
    "pathFragmentId": 1762
  }, {
    "id": 1096,
    "pathFragmentId": 1763
  }, {
    "id": 1097,
    "pathFragmentId": 1764
  }, {
    "id": 1098,
    "pathFragmentId": 1765
  }, {
    "id": 1099,
    "pathFragmentId": 1766
  }, {
    "id": 1100,
    "pathFragmentId": 1767
  }, {
    "id": 1101,
    "pathFragmentId": 1768
  }, {
    "id": 1102,
    "pathFragmentId": 1769
  }, {
    "id": 1103,
    "pathFragmentId": 1770
  }, {
    "id": 1104,
    "pathFragmentId": 1771
  }, {
    "id": 1105,
    "pathFragmentId": 1772
  }, {
    "id": 1106,
    "pathFragmentId": 1773
  }, {
    "id": 1107,
    "pathFragmentId": 1774
  }, {
    "id": 1108,
    "pathFragmentId": 1775
  }, {
    "id": 1109,
    "pathFragmentId": 1776
  }, {
    "id": 1110,
    "pathFragmentId": 1777
  }, {
    "id": 1111,
    "pathFragmentId": 1778
  }, {
    "id": 1112,
    "pathFragmentId": 1779
  }, {
    "id": 1113,
    "pathFragmentId": 1780
  }, {
    "id": 1114,
    "pathFragmentId": 1781
  }, {
    "id": 1115,
    "pathFragmentId": 1782
  }, {
    "id": 1116,
    "pathFragmentId": 1783
  }, {
    "id": 1117,
    "pathFragmentId": 1784
  }, {
    "id": 1118,
    "pathFragmentId": 1785
  }, {
    "id": 1119,
    "pathFragmentId": 1786
  }, {
    "id": 1120,
    "pathFragmentId": 1787
  }, {
    "id": 1121,
    "pathFragmentId": 1788
  }, {
    "id": 1122,
    "pathFragmentId": 1789
  }, {
    "id": 1123,
    "pathFragmentId": 1790
  }, {
    "id": 1124,
    "pathFragmentId": 1791
  }, {
    "id": 1125,
    "pathFragmentId": 1792
  }, {
    "id": 1126,
    "pathFragmentId": 1793
  }, {
    "id": 1127,
    "pathFragmentId": 1794
  }, {
    "id": 1128,
    "pathFragmentId": 1795
  }, {
    "id": 1129,
    "pathFragmentId": 1796
  }, {
    "id": 1130,
    "pathFragmentId": 1797
  }, {
    "id": 1131,
    "pathFragmentId": 1798
  }, {
    "id": 1132,
    "pathFragmentId": 1800
  }, {
    "id": 1133,
    "pathFragmentId": 1801
  }, {
    "id": 1134,
    "pathFragmentId": 1802
  }, {
    "id": 1135,
    "pathFragmentId": 1803
  }, {
    "id": 1136,
    "pathFragmentId": 1804
  }, {
    "id": 1137,
    "pathFragmentId": 1805
  }, {
    "id": 1138,
    "pathFragmentId": 1806
  }, {
    "id": 1139,
    "pathFragmentId": 1807
  }, {
    "id": 1140,
    "pathFragmentId": 1808
  }, {
    "id": 1141,
    "pathFragmentId": 1809
  }, {
    "id": 1142,
    "pathFragmentId": 1810
  }, {
    "id": 1143,
    "pathFragmentId": 1811
  }, {
    "id": 1144,
    "pathFragmentId": 1812
  }, {
    "id": 1145,
    "pathFragmentId": 1813
  }, {
    "id": 1146,
    "pathFragmentId": 1814
  }, {
    "id": 1147,
    "pathFragmentId": 1815
  }, {
    "id": 1148,
    "pathFragmentId": 1816
  }, {
    "id": 1149,
    "pathFragmentId": 1817
  }, {
    "id": 1150,
    "pathFragmentId": 1818
  }, {
    "id": 1151,
    "pathFragmentId": 1819
  }, {
    "id": 1152,
    "pathFragmentId": 1820
  }, {
    "id": 1153,
    "pathFragmentId": 1821
  }, {
    "id": 1154,
    "pathFragmentId": 1822
  }, {
    "id": 1155,
    "pathFragmentId": 1824
  }, {
    "id": 1156,
    "pathFragmentId": 1825
  }, {
    "id": 1157,
    "pathFragmentId": 1826
  }, {
    "id": 1158,
    "pathFragmentId": 1827
  }, {
    "id": 1159,
    "pathFragmentId": 1829
  }, {
    "id": 1160,
    "pathFragmentId": 1830
  }, {
    "id": 1161,
    "pathFragmentId": 1831
  }, {
    "id": 1162,
    "pathFragmentId": 1832
  }, {
    "id": 1163,
    "pathFragmentId": 1833
  }, {
    "id": 1164,
    "pathFragmentId": 1834
  }, {
    "id": 1165,
    "pathFragmentId": 1835
  }, {
    "id": 1166,
    "pathFragmentId": 1836
  }, {
    "id": 1167,
    "pathFragmentId": 1837
  }, {
    "id": 1168,
    "pathFragmentId": 1838
  }, {
    "id": 1169,
    "pathFragmentId": 1839
  }, {
    "id": 1170,
    "pathFragmentId": 1840
  }, {
    "id": 1171,
    "pathFragmentId": 1841
  }, {
    "id": 1172,
    "pathFragmentId": 1842
  }, {
    "id": 1173,
    "pathFragmentId": 1843
  }, {
    "id": 1174,
    "pathFragmentId": 1845
  }, {
    "id": 1175,
    "pathFragmentId": 1846
  }, {
    "id": 1176,
    "pathFragmentId": 1847
  }, {
    "id": 1177,
    "pathFragmentId": 1848
  }, {
    "id": 1178,
    "pathFragmentId": 1849
  }, {
    "id": 1179,
    "pathFragmentId": 1851
  }, {
    "id": 1180,
    "pathFragmentId": 1852
  }, {
    "id": 1181,
    "pathFragmentId": 1853
  }, {
    "id": 1182,
    "pathFragmentId": 1854
  }, {
    "id": 1183,
    "pathFragmentId": 1855
  }, {
    "id": 1184,
    "pathFragmentId": 1856
  }, {
    "id": 1185,
    "pathFragmentId": 1857
  }, {
    "id": 1186,
    "pathFragmentId": 1858
  }, {
    "id": 1187,
    "pathFragmentId": 1859
  }, {
    "id": 1188,
    "pathFragmentId": 1860
  }, {
    "id": 1189,
    "pathFragmentId": 1861
  }, {
    "id": 1190,
    "pathFragmentId": 1862
  }, {
    "id": 1191,
    "pathFragmentId": 1863
  }, {
    "id": 1192,
    "pathFragmentId": 1864
  }, {
    "id": 1193,
    "pathFragmentId": 1865
  }, {
    "id": 1194,
    "pathFragmentId": 1866
  }, {
    "id": 1195,
    "pathFragmentId": 1867
  }, {
    "id": 1196,
    "pathFragmentId": 1868
  }, {
    "id": 1197,
    "pathFragmentId": 1869
  }, {
    "id": 1198,
    "pathFragmentId": 1870
  }, {
    "id": 1199,
    "pathFragmentId": 1871
  }, {
    "id": 1200,
    "pathFragmentId": 1872
  }, {
    "id": 1201,
    "pathFragmentId": 1873
  }, {
    "id": 1202,
    "pathFragmentId": 1874
  }, {
    "id": 1203,
    "pathFragmentId": 1875
  }, {
    "id": 1204,
    "pathFragmentId": 1876
  }, {
    "id": 1205,
    "pathFragmentId": 1877
  }, {
    "id": 1206,
    "pathFragmentId": 1878
  }, {
    "id": 1207,
    "pathFragmentId": 1879
  }, {
    "id": 1208,
    "pathFragmentId": 1880
  }, {
    "id": 1209,
    "pathFragmentId": 1881
  }, {
    "id": 1210,
    "pathFragmentId": 1882
  }, {
    "id": 1211,
    "pathFragmentId": 1883
  }, {
    "id": 1212,
    "pathFragmentId": 1884
  }, {
    "id": 1213,
    "pathFragmentId": 1885
  }, {
    "id": 1214,
    "pathFragmentId": 1886
  }, {
    "id": 1215,
    "pathFragmentId": 1887
  }, {
    "id": 1216,
    "pathFragmentId": 1888
  }, {
    "id": 1217,
    "pathFragmentId": 1889
  }, {
    "id": 1218,
    "pathFragmentId": 1890
  }, {
    "id": 1219,
    "pathFragmentId": 1891
  }, {
    "id": 1220,
    "pathFragmentId": 1892
  }, {
    "id": 1221,
    "pathFragmentId": 1893
  }, {
    "id": 1222,
    "pathFragmentId": 1894
  }, {
    "id": 1223,
    "pathFragmentId": 1895
  }, {
    "id": 1224,
    "pathFragmentId": 1896
  }, {
    "id": 1225,
    "pathFragmentId": 1897
  }, {
    "id": 1226,
    "pathFragmentId": 1898
  }, {
    "id": 1227,
    "pathFragmentId": 1899
  }, {
    "id": 1228,
    "pathFragmentId": 1900
  }, {
    "id": 1229,
    "pathFragmentId": 1901
  }, {
    "id": 1230,
    "pathFragmentId": 1902
  }, {
    "id": 1231,
    "pathFragmentId": 1904
  }, {
    "id": 1232,
    "pathFragmentId": 1905
  }, {
    "id": 1233,
    "pathFragmentId": 1906
  }, {
    "id": 1234,
    "pathFragmentId": 1907
  }, {
    "id": 1235,
    "pathFragmentId": 1908
  }, {
    "id": 1236,
    "pathFragmentId": 1909
  }, {
    "id": 1237,
    "pathFragmentId": 1910
  }, {
    "id": 1238,
    "pathFragmentId": 1911
  }, {
    "id": 1239,
    "pathFragmentId": 1912
  }, {
    "id": 1240,
    "pathFragmentId": 1913
  }, {
    "id": 1241,
    "pathFragmentId": 1914
  }, {
    "id": 1242,
    "pathFragmentId": 1915
  }, {
    "id": 1243,
    "pathFragmentId": 1916
  }, {
    "id": 1244,
    "pathFragmentId": 1917
  }, {
    "id": 1245,
    "pathFragmentId": 1918
  }, {
    "id": 1246,
    "pathFragmentId": 1919
  }, {
    "id": 1247,
    "pathFragmentId": 1920
  }, {
    "id": 1248,
    "pathFragmentId": 1922
  }, {
    "id": 1249,
    "pathFragmentId": 1923
  }, {
    "id": 1250,
    "pathFragmentId": 1924
  }, {
    "id": 1251,
    "pathFragmentId": 1925
  }, {
    "id": 1252,
    "pathFragmentId": 1927
  }, {
    "id": 1253,
    "pathFragmentId": 1928
  }, {
    "id": 1254,
    "pathFragmentId": 1934
  }, {
    "id": 1255,
    "pathFragmentId": 1935
  }, {
    "id": 1256,
    "pathFragmentId": 1936
  }, {
    "id": 1257,
    "pathFragmentId": 1937
  }, {
    "id": 1258,
    "pathFragmentId": 1938
  }, {
    "id": 1259,
    "pathFragmentId": 1939
  }, {
    "id": 1260,
    "pathFragmentId": 1940
  }, {
    "id": 1261,
    "pathFragmentId": 1941
  }, {
    "id": 1262,
    "pathFragmentId": 1942
  }, {
    "id": 1263,
    "pathFragmentId": 1943
  }, {
    "id": 1264,
    "pathFragmentId": 1944
  }, {
    "id": 1265,
    "pathFragmentId": 1945
  }, {
    "id": 1266,
    "pathFragmentId": 1947
  }, {
    "id": 1267,
    "pathFragmentId": 1953
  }, {
    "id": 1268,
    "pathFragmentId": 1958
  }, {
    "id": 1269,
    "pathFragmentId": 1962
  }, {
    "id": 1270,
    "pathFragmentId": 1964
  }, {
    "id": 1271,
    "pathFragmentId": 1965
  }, {
    "id": 1272,
    "pathFragmentId": 1966
  }, {
    "id": 1273,
    "pathFragmentId": 1967
  }, {
    "id": 1274,
    "pathFragmentId": 1968
  }, {
    "id": 1275,
    "pathFragmentId": 1969
  }, {
    "id": 1276,
    "pathFragmentId": 1970
  }, {
    "id": 1277,
    "pathFragmentId": 1971
  }, {
    "id": 1278,
    "pathFragmentId": 1973
  }, {
    "id": 1279,
    "pathFragmentId": 1979
  }, {
    "id": 1280,
    "pathFragmentId": 1983
  }, {
    "id": 1281,
    "pathFragmentId": 1988
  }, {
    "id": 1282,
    "pathFragmentId": 602
  }, {
    "id": 1283,
    "pathFragmentId": 1989
  }, {
    "id": 1284,
    "pathFragmentId": 1990
  }, {
    "id": 1285,
    "pathFragmentId": 1991
  }, {
    "id": 1286,
    "pathFragmentId": 1992
  }, {
    "id": 1287,
    "pathFragmentId": 1993
  }, {
    "id": 1288,
    "pathFragmentId": 1994
  }, {
    "id": 1289,
    "pathFragmentId": 1995
  }, {
    "id": 1290,
    "pathFragmentId": 1996
  }, {
    "id": 1291,
    "pathFragmentId": 1997
  }, {
    "id": 1292,
    "pathFragmentId": 1998
  }, {
    "id": 1293,
    "pathFragmentId": 1999
  }, {
    "id": 1294,
    "pathFragmentId": 2001
  }, {
    "id": 1295,
    "pathFragmentId": 2002
  }, {
    "id": 1296,
    "pathFragmentId": 2003
  }, {
    "id": 1297,
    "pathFragmentId": 2004
  }, {
    "id": 1298,
    "pathFragmentId": 2006
  }, {
    "id": 1299,
    "pathFragmentId": 2007
  }, {
    "id": 1300,
    "pathFragmentId": 2008
  }, {
    "id": 1301,
    "pathFragmentId": 2009
  }, {
    "id": 1302,
    "pathFragmentId": 2010
  }, {
    "id": 1303,
    "pathFragmentId": 2011
  }, {
    "id": 1304,
    "pathFragmentId": 2012
  }, {
    "id": 1305,
    "pathFragmentId": 2013
  }, {
    "id": 1306,
    "pathFragmentId": 2014
  }, {
    "id": 1307,
    "pathFragmentId": 2015
  }, {
    "id": 1308,
    "pathFragmentId": 2016
  }, {
    "id": 1309,
    "pathFragmentId": 2017
  }, {
    "id": 1310,
    "pathFragmentId": 2018
  }, {
    "id": 1311,
    "pathFragmentId": 2019
  }, {
    "id": 1312,
    "pathFragmentId": 2020
  }, {
    "id": 1313,
    "pathFragmentId": 2021
  }, {
    "id": 1314,
    "pathFragmentId": 2023
  }, {
    "id": 1315,
    "pathFragmentId": 2024
  }, {
    "id": 1316,
    "pathFragmentId": 2025
  }, {
    "id": 1317,
    "pathFragmentId": 2026
  }, {
    "id": 1318,
    "pathFragmentId": 2027
  }, {
    "id": 1319,
    "pathFragmentId": 2029
  }, {
    "id": 1320,
    "pathFragmentId": 2030
  }, {
    "id": 1321,
    "pathFragmentId": 2037
  }, {
    "id": 1322,
    "pathFragmentId": 2038
  }, {
    "id": 1323,
    "pathFragmentId": 2039
  }, {
    "id": 1324,
    "pathFragmentId": 2040
  }, {
    "id": 1325,
    "pathFragmentId": 2041
  }, {
    "id": 1326,
    "pathFragmentId": 2042
  }, {
    "id": 1327,
    "pathFragmentId": 2048
  }, {
    "id": 1328,
    "pathFragmentId": 2049
  }, {
    "id": 1329,
    "pathFragmentId": 2050
  }, {
    "id": 1330,
    "pathFragmentId": 2051
  }, {
    "id": 1331,
    "pathFragmentId": 2052
  }, {
    "id": 1332,
    "pathFragmentId": 2059
  }, {
    "id": 1333,
    "pathFragmentId": 2060
  }, {
    "id": 1334,
    "pathFragmentId": 2061
  }, {
    "id": 1335,
    "pathFragmentId": 2062
  }, {
    "id": 1336,
    "pathFragmentId": 2063
  }, {
    "id": 1337,
    "pathFragmentId": 2064
  }, {
    "id": 1338,
    "pathFragmentId": 2065
  }, {
    "id": 1339,
    "pathFragmentId": 2066
  }, {
    "id": 1340,
    "pathFragmentId": 2067
  }, {
    "id": 1341,
    "pathFragmentId": 2068
  }, {
    "id": 1342,
    "pathFragmentId": 2070
  }, {
    "id": 1343,
    "pathFragmentId": 2071
  }, {
    "id": 1344,
    "pathFragmentId": 2072
  }, {
    "id": 1345,
    "pathFragmentId": 2073
  }, {
    "id": 1346,
    "pathFragmentId": 2075
  }, {
    "id": 1347,
    "pathFragmentId": 2076
  }, {
    "id": 1348,
    "pathFragmentId": 2077
  }, {
    "id": 1349,
    "pathFragmentId": 2078
  }, {
    "id": 1350,
    "pathFragmentId": 2080
  }, {
    "id": 1351,
    "pathFragmentId": 2081
  }, {
    "id": 1352,
    "pathFragmentId": 2082
  }, {
    "id": 1353,
    "pathFragmentId": 2083
  }, {
    "id": 1354,
    "pathFragmentId": 2084
  }, {
    "id": 1355,
    "pathFragmentId": 2085
  }, {
    "id": 1356,
    "pathFragmentId": 2086
  }, {
    "id": 1357,
    "pathFragmentId": 2087
  }, {
    "id": 1358,
    "pathFragmentId": 2088
  }, {
    "id": 1359,
    "pathFragmentId": 2089
  }, {
    "id": 1360,
    "pathFragmentId": 2090
  }, {
    "id": 1361,
    "pathFragmentId": 2091
  }, {
    "id": 1362,
    "pathFragmentId": 2093
  }, {
    "id": 1363,
    "pathFragmentId": 2094
  }, {
    "id": 1364,
    "pathFragmentId": 2095
  }, {
    "id": 1365,
    "pathFragmentId": 2096
  }, {
    "id": 1366,
    "pathFragmentId": 2097
  }, {
    "id": 1367,
    "pathFragmentId": 2100
  }, {
    "id": 1368,
    "pathFragmentId": 2101
  }, {
    "id": 1369,
    "pathFragmentId": 2102
  }, {
    "id": 1370,
    "pathFragmentId": 2103
  }, {
    "id": 1371,
    "pathFragmentId": 2104
  }, {
    "id": 1372,
    "pathFragmentId": 2105
  }, {
    "id": 1373,
    "pathFragmentId": 2106
  }, {
    "id": 1374,
    "pathFragmentId": 2107
  }, {
    "id": 1375,
    "pathFragmentId": 2108
  }, {
    "id": 1376,
    "pathFragmentId": 2109
  }, {
    "id": 1377,
    "pathFragmentId": 2110
  }, {
    "id": 1378,
    "pathFragmentId": 2111
  }, {
    "id": 1379,
    "pathFragmentId": 2112
  }, {
    "id": 1380,
    "pathFragmentId": 2113
  }, {
    "id": 1381,
    "pathFragmentId": 2114
  }, {
    "id": 1382,
    "pathFragmentId": 2115
  }, {
    "id": 1383,
    "pathFragmentId": 2116
  }, {
    "id": 1384,
    "pathFragmentId": 2117
  }, {
    "id": 1385,
    "pathFragmentId": 2118
  }, {
    "id": 1386,
    "pathFragmentId": 2119
  }, {
    "id": 1387,
    "pathFragmentId": 2120
  }, {
    "id": 1388,
    "pathFragmentId": 2121
  }, {
    "id": 1389,
    "pathFragmentId": 2122
  }, {
    "id": 1390,
    "pathFragmentId": 2123
  }, {
    "id": 1391,
    "pathFragmentId": 2124
  }, {
    "id": 1392,
    "pathFragmentId": 2125
  }, {
    "id": 1393,
    "pathFragmentId": 2126
  }, {
    "id": 1394,
    "pathFragmentId": 2127
  }, {
    "id": 1395,
    "pathFragmentId": 2128
  }, {
    "id": 1396,
    "pathFragmentId": 2129
  }, {
    "id": 1397,
    "pathFragmentId": 2130
  }, {
    "id": 1398,
    "pathFragmentId": 2131
  }, {
    "id": 1399,
    "pathFragmentId": 2132
  }, {
    "id": 1400,
    "pathFragmentId": 2133
  }, {
    "id": 1401,
    "pathFragmentId": 2134
  }, {
    "id": 1402,
    "pathFragmentId": 2135
  }, {
    "id": 1403,
    "pathFragmentId": 2136
  }, {
    "id": 1404,
    "pathFragmentId": 2137
  }, {
    "id": 1405,
    "pathFragmentId": 2138
  }, {
    "id": 1406,
    "pathFragmentId": 2139
  }, {
    "id": 1407,
    "pathFragmentId": 2141
  }, {
    "id": 1408,
    "pathFragmentId": 2146
  }, {
    "id": 1409,
    "pathFragmentId": 2147
  }, {
    "id": 1410,
    "pathFragmentId": 2148
  }, {
    "id": 1411,
    "pathFragmentId": 2149
  }, {
    "id": 1412,
    "pathFragmentId": 2150
  }, {
    "id": 1413,
    "pathFragmentId": 2151
  }, {
    "id": 1414,
    "pathFragmentId": 2152
  }, {
    "id": 1415,
    "pathFragmentId": 2153
  }, {
    "id": 1416,
    "pathFragmentId": 2154
  }, {
    "id": 1417,
    "pathFragmentId": 2155
  }, {
    "id": 1418,
    "pathFragmentId": 2156
  }, {
    "id": 1419,
    "pathFragmentId": 2158
  }, {
    "id": 1420,
    "pathFragmentId": 2159
  }, {
    "id": 1421,
    "pathFragmentId": 2161
  }, {
    "id": 1422,
    "pathFragmentId": 2166
  }, {
    "id": 1423,
    "pathFragmentId": 2167
  }, {
    "id": 1424,
    "pathFragmentId": 2168
  }, {
    "id": 1425,
    "pathFragmentId": 2169
  }, {
    "id": 1426,
    "pathFragmentId": 2173
  }, {
    "id": 1427,
    "pathFragmentId": 2174
  }, {
    "id": 1428,
    "pathFragmentId": 2175
  }, {
    "id": 1429,
    "pathFragmentId": 2177
  }, {
    "id": 1430,
    "pathFragmentId": 2178
  }, {
    "id": 1431,
    "pathFragmentId": 2179
  }, {
    "id": 1432,
    "pathFragmentId": 2180
  }, {
    "id": 1433,
    "pathFragmentId": 2181
  }, {
    "id": 1434,
    "pathFragmentId": 2182
  }, {
    "id": 1435,
    "pathFragmentId": 2183
  }, {
    "id": 1436,
    "pathFragmentId": 2184
  }, {
    "id": 1437,
    "pathFragmentId": 2185
  }, {
    "id": 1438,
    "pathFragmentId": 2186
  }, {
    "id": 1439,
    "pathFragmentId": 2187
  }, {
    "id": 1440,
    "pathFragmentId": 2188
  }, {
    "id": 1441,
    "pathFragmentId": 2189
  }, {
    "id": 1442,
    "pathFragmentId": 2190
  }, {
    "id": 1443,
    "pathFragmentId": 2191
  }, {
    "id": 1444,
    "pathFragmentId": 2192
  }, {
    "id": 1445,
    "pathFragmentId": 2193
  }, {
    "id": 1446,
    "pathFragmentId": 2194
  }, {
    "id": 1447,
    "pathFragmentId": 2195
  }, {
    "id": 1448,
    "pathFragmentId": 2197
  }, {
    "id": 1449,
    "pathFragmentId": 2200
  }, {
    "id": 1450,
    "pathFragmentId": 2201
  }, {
    "id": 1451,
    "pathFragmentId": 2202
  }, {
    "id": 1452,
    "pathFragmentId": 2203
  }, {
    "id": 1453,
    "pathFragmentId": 2205
  }, {
    "id": 1454,
    "pathFragmentId": 2206
  }, {
    "id": 1455,
    "pathFragmentId": 2207
  }, {
    "id": 1456,
    "pathFragmentId": 2208
  }, {
    "id": 1457,
    "pathFragmentId": 2209
  }, {
    "id": 1458,
    "pathFragmentId": 2210
  }, {
    "id": 1459,
    "pathFragmentId": 2211
  }, {
    "id": 1460,
    "pathFragmentId": 2212
  }, {
    "id": 1461,
    "pathFragmentId": 2213
  }, {
    "id": 1462,
    "pathFragmentId": 2214
  }, {
    "id": 1463,
    "pathFragmentId": 2215
  }, {
    "id": 1464,
    "pathFragmentId": 2217
  }, {
    "id": 1465,
    "pathFragmentId": 2218
  }, {
    "id": 1466,
    "pathFragmentId": 2219
  }, {
    "id": 1467,
    "pathFragmentId": 2220
  }, {
    "id": 1468,
    "pathFragmentId": 2222
  }, {
    "id": 1469,
    "pathFragmentId": 2223
  }, {
    "id": 1470,
    "pathFragmentId": 2225
  }, {
    "id": 1471,
    "pathFragmentId": 2226
  }, {
    "id": 1472,
    "pathFragmentId": 2229
  }, {
    "id": 1473,
    "pathFragmentId": 2231
  }, {
    "id": 1474,
    "pathFragmentId": 2238
  }, {
    "id": 1475,
    "pathFragmentId": 2239
  }, {
    "id": 1476,
    "pathFragmentId": 2246
  }, {
    "id": 1477,
    "pathFragmentId": 2247
  }, {
    "id": 1478,
    "pathFragmentId": 2248
  }, {
    "id": 1479,
    "pathFragmentId": 2249
  }, {
    "id": 1480,
    "pathFragmentId": 2250
  }, {
    "id": 1481,
    "pathFragmentId": 2251
  }, {
    "id": 1482,
    "pathFragmentId": 2252
  }, {
    "id": 1483,
    "pathFragmentId": 2253
  }, {
    "id": 1484,
    "pathFragmentId": 2254
  }, {
    "id": 1485,
    "pathFragmentId": 2255
  }, {
    "id": 1486,
    "pathFragmentId": 2256
  }, {
    "id": 1487,
    "pathFragmentId": 2257
  }, {
    "id": 1488,
    "pathFragmentId": 2258
  }, {
    "id": 1489,
    "pathFragmentId": 2259
  }, {
    "id": 1490,
    "pathFragmentId": 2260
  }, {
    "id": 1491,
    "pathFragmentId": 2262
  }, {
    "id": 1492,
    "pathFragmentId": 2263
  }, {
    "id": 1493,
    "pathFragmentId": 2264
  }, {
    "id": 1494,
    "pathFragmentId": 2265
  }, {
    "id": 1495,
    "pathFragmentId": 2267
  }, {
    "id": 1496,
    "pathFragmentId": 2268
  }, {
    "id": 1497,
    "pathFragmentId": 2269
  }, {
    "id": 1498,
    "pathFragmentId": 2270
  }, {
    "id": 1499,
    "pathFragmentId": 2271
  }, {
    "id": 1500,
    "pathFragmentId": 2272
  }, {
    "id": 1501,
    "pathFragmentId": 2273
  }, {
    "id": 1502,
    "pathFragmentId": 2274
  }, {
    "id": 1503,
    "pathFragmentId": 2275
  }, {
    "id": 1504,
    "pathFragmentId": 2276
  }, {
    "id": 1505,
    "pathFragmentId": 2277
  }, {
    "id": 1506,
    "pathFragmentId": 2278
  }, {
    "id": 1507,
    "pathFragmentId": 2279
  }, {
    "id": 1508,
    "pathFragmentId": 2280
  }, {
    "id": 1509,
    "pathFragmentId": 2281
  }, {
    "id": 1510,
    "pathFragmentId": 2282
  }, {
    "id": 1511,
    "pathFragmentId": 2283
  }, {
    "id": 1512,
    "pathFragmentId": 2284
  }, {
    "id": 1513,
    "pathFragmentId": 2285
  }, {
    "id": 1514,
    "pathFragmentId": 2287
  }, {
    "id": 1515,
    "pathFragmentId": 2288
  }, {
    "id": 1516,
    "pathFragmentId": 2289
  }, {
    "id": 1517,
    "pathFragmentId": 2290
  }, {
    "id": 1518,
    "pathFragmentId": 2292
  }, {
    "id": 1519,
    "pathFragmentId": 2293
  }, {
    "id": 1520,
    "pathFragmentId": 2294
  }, {
    "id": 1521,
    "pathFragmentId": 2295
  }, {
    "id": 1522,
    "pathFragmentId": 2296
  }, {
    "id": 1523,
    "pathFragmentId": 2297
  }, {
    "id": 1524,
    "pathFragmentId": 2298
  }, {
    "id": 1525,
    "pathFragmentId": 2300
  }, {
    "id": 1526,
    "pathFragmentId": 2301
  }, {
    "id": 1527,
    "pathFragmentId": 2302
  }, {
    "id": 1528,
    "pathFragmentId": 2303
  }, {
    "id": 1529,
    "pathFragmentId": 2304
  }, {
    "id": 1530,
    "pathFragmentId": 2305
  }, {
    "id": 1531,
    "pathFragmentId": 2306
  }, {
    "id": 1532,
    "pathFragmentId": 2307
  }, {
    "id": 1533,
    "pathFragmentId": 2308
  }, {
    "id": 1534,
    "pathFragmentId": 2309
  }, {
    "id": 1535,
    "pathFragmentId": 2310
  }, {
    "id": 1536,
    "pathFragmentId": 2311
  }, {
    "id": 1537,
    "pathFragmentId": 2313
  }, {
    "id": 1538,
    "pathFragmentId": 2314
  }, {
    "id": 1539,
    "pathFragmentId": 2315
  }, {
    "id": 1540,
    "pathFragmentId": 2316
  }, {
    "id": 1541,
    "pathFragmentId": 2318
  }, {
    "id": 1542,
    "pathFragmentId": 2319
  }, {
    "id": 1543,
    "pathFragmentId": 2320
  }, {
    "id": 1544,
    "pathFragmentId": 2321
  }, {
    "id": 1545,
    "pathFragmentId": 2322
  }, {
    "id": 1546,
    "pathFragmentId": 2323
  }, {
    "id": 1547,
    "pathFragmentId": 2324
  }, {
    "id": 1548,
    "pathFragmentId": 2325
  }, {
    "id": 1549,
    "pathFragmentId": 2326
  }, {
    "id": 1550,
    "pathFragmentId": 2333
  }, {
    "id": 1551,
    "pathFragmentId": 2334
  }, {
    "id": 1552,
    "pathFragmentId": 2335
  }, {
    "id": 1553,
    "pathFragmentId": 2336
  }, {
    "id": 1554,
    "pathFragmentId": 2342
  }, {
    "id": 1555,
    "pathFragmentId": 2343
  }, {
    "id": 1556,
    "pathFragmentId": 2344
  }, {
    "id": 1557,
    "pathFragmentId": 2345
  }, {
    "id": 1558,
    "pathFragmentId": 2346
  }, {
    "id": 1559,
    "pathFragmentId": 2347
  }, {
    "id": 1560,
    "pathFragmentId": 2349
  }, {
    "id": 1561,
    "pathFragmentId": 2350
  }, {
    "id": 1562,
    "pathFragmentId": 2351
  }, {
    "id": 1563,
    "pathFragmentId": 2352
  }, {
    "id": 1564,
    "pathFragmentId": 2353
  }, {
    "id": 1565,
    "pathFragmentId": 2354
  }, {
    "id": 1566,
    "pathFragmentId": 2355
  }, {
    "id": 1567,
    "pathFragmentId": 2356
  }, {
    "id": 1568,
    "pathFragmentId": 2357
  }, {
    "id": 1569,
    "pathFragmentId": 2358
  }, {
    "id": 1570,
    "pathFragmentId": 2359
  }, {
    "id": 1571,
    "pathFragmentId": 2360
  }, {
    "id": 1572,
    "pathFragmentId": 2361
  }, {
    "id": 1573,
    "pathFragmentId": 2362
  }, {
    "id": 1574,
    "pathFragmentId": 2363
  }, {
    "id": 1575,
    "pathFragmentId": 2364
  }, {
    "id": 1576,
    "pathFragmentId": 2365
  }, {
    "id": 1577,
    "pathFragmentId": 2366
  }, {
    "id": 1578,
    "pathFragmentId": 2367
  }, {
    "id": 1579,
    "pathFragmentId": 2368
  }, {
    "id": 1580,
    "pathFragmentId": 2369
  }, {
    "id": 1581,
    "pathFragmentId": 2370
  }, {
    "id": 1582,
    "pathFragmentId": 2371
  }, {
    "id": 1583,
    "pathFragmentId": 2372
  }, {
    "id": 1584,
    "pathFragmentId": 2373
  }, {
    "id": 1585,
    "pathFragmentId": 2375
  }, {
    "id": 1586,
    "pathFragmentId": 2376
  }, {
    "id": 1587,
    "pathFragmentId": 2377
  }, {
    "id": 1588,
    "pathFragmentId": 2378
  }, {
    "id": 1589,
    "pathFragmentId": 2380
  }, {
    "id": 1590,
    "pathFragmentId": 2381
  }, {
    "id": 1591,
    "pathFragmentId": 2382
  }, {
    "id": 1592,
    "pathFragmentId": 2383
  }, {
    "id": 1593,
    "pathFragmentId": 2384
  }, {
    "id": 1594,
    "pathFragmentId": 2385
  }, {
    "id": 1595,
    "pathFragmentId": 2386
  }, {
    "id": 1596,
    "pathFragmentId": 2387
  }, {
    "id": 1597,
    "pathFragmentId": 2388
  }, {
    "id": 1598,
    "pathFragmentId": 2389
  }, {
    "id": 1599,
    "pathFragmentId": 2390
  }, {
    "id": 1600,
    "pathFragmentId": 2391
  }, {
    "id": 1601,
    "pathFragmentId": 2392
  }, {
    "id": 1602,
    "pathFragmentId": 2394
  }, {
    "id": 1603,
    "pathFragmentId": 2395
  }, {
    "id": 1604,
    "pathFragmentId": 2396
  }, {
    "id": 1605,
    "pathFragmentId": 2397
  }, {
    "id": 1606,
    "pathFragmentId": 2399
  }, {
    "id": 1607,
    "pathFragmentId": 2400
  }, {
    "id": 1608,
    "pathFragmentId": 2401
  }, {
    "id": 1609,
    "pathFragmentId": 2402
  }, {
    "id": 1610,
    "pathFragmentId": 2403
  }, {
    "id": 1611,
    "pathFragmentId": 2404
  }, {
    "id": 1612,
    "pathFragmentId": 2405
  }, {
    "id": 1613,
    "pathFragmentId": 2406
  }, {
    "id": 1614,
    "pathFragmentId": 2407
  }, {
    "id": 1615,
    "pathFragmentId": 2408
  }, {
    "id": 1616,
    "pathFragmentId": 2409
  }, {
    "id": 1617,
    "pathFragmentId": 2411
  }, {
    "id": 1618,
    "pathFragmentId": 2412
  }, {
    "id": 1619,
    "pathFragmentId": 2413
  }, {
    "id": 1620,
    "pathFragmentId": 2414
  }, {
    "id": 1621,
    "pathFragmentId": 2417
  }, {
    "id": 1622,
    "pathFragmentId": 2418
  }, {
    "id": 1623,
    "pathFragmentId": 2420
  }, {
    "id": 1624,
    "pathFragmentId": 2421
  }, {
    "id": 1625,
    "pathFragmentId": 2422
  }, {
    "id": 1626,
    "pathFragmentId": 2423
  }, {
    "id": 1627,
    "pathFragmentId": 2424
  }, {
    "id": 1628,
    "pathFragmentId": 2425
  }, {
    "id": 1629,
    "pathFragmentId": 2426
  }, {
    "id": 1630,
    "pathFragmentId": 2427
  }, {
    "id": 1631,
    "pathFragmentId": 2428
  }, {
    "id": 1632,
    "pathFragmentId": 2429
  }, {
    "id": 1633,
    "pathFragmentId": 2430
  }, {
    "id": 1634,
    "pathFragmentId": 2431
  }, {
    "id": 1635,
    "pathFragmentId": 2432
  }, {
    "id": 1636,
    "pathFragmentId": 2433
  }, {
    "id": 1637,
    "pathFragmentId": 2434
  }, {
    "id": 1638,
    "pathFragmentId": 2435
  }, {
    "id": 1639,
    "pathFragmentId": 2436
  }, {
    "id": 1640,
    "pathFragmentId": 2439
  }, {
    "id": 1641,
    "pathFragmentId": 2440
  }, {
    "id": 1642,
    "pathFragmentId": 2441
  }, {
    "id": 1643,
    "pathFragmentId": 2442
  }, {
    "id": 1644,
    "pathFragmentId": 2443
  }, {
    "id": 1645,
    "pathFragmentId": 2444
  }, {
    "id": 1646,
    "pathFragmentId": 2445
  }, {
    "id": 1647,
    "pathFragmentId": 2446
  }, {
    "id": 1648,
    "pathFragmentId": 2447
  }, {
    "id": 1649,
    "pathFragmentId": 2448
  }, {
    "id": 1650,
    "pathFragmentId": 2449
  }, {
    "id": 1651,
    "pathFragmentId": 2450
  }, {
    "id": 1652,
    "pathFragmentId": 2451
  }, {
    "id": 1653,
    "pathFragmentId": 2452
  }, {
    "id": 1654,
    "pathFragmentId": 2453
  }, {
    "id": 1655,
    "pathFragmentId": 2454
  }, {
    "id": 1656,
    "pathFragmentId": 2455
  }, {
    "id": 1657,
    "pathFragmentId": 2456
  }, {
    "id": 1658,
    "pathFragmentId": 2457
  }, {
    "id": 1659,
    "pathFragmentId": 2458
  }, {
    "id": 1660,
    "pathFragmentId": 2459
  }, {
    "id": 1661,
    "pathFragmentId": 2460
  }, {
    "id": 1662,
    "pathFragmentId": 2461
  }, {
    "id": 1663,
    "pathFragmentId": 2462
  }, {
    "id": 1664,
    "pathFragmentId": 2463
  }, {
    "id": 1665,
    "pathFragmentId": 2464
  }, {
    "id": 1666,
    "pathFragmentId": 2465
  }, {
    "id": 1667,
    "pathFragmentId": 2466
  }, {
    "id": 1668,
    "pathFragmentId": 2467
  }, {
    "id": 1669,
    "pathFragmentId": 2468
  }, {
    "id": 1670,
    "pathFragmentId": 2469
  }, {
    "id": 1671,
    "pathFragmentId": 2470
  }, {
    "id": 1672,
    "pathFragmentId": 2471
  }, {
    "id": 1673,
    "pathFragmentId": 2472
  }, {
    "id": 1674,
    "pathFragmentId": 2473
  }, {
    "id": 1675,
    "pathFragmentId": 2474
  }, {
    "id": 1676,
    "pathFragmentId": 2475
  }, {
    "id": 1677,
    "pathFragmentId": 2476
  }, {
    "id": 1678,
    "pathFragmentId": 2477
  }, {
    "id": 1679,
    "pathFragmentId": 2478
  }, {
    "id": 1680,
    "pathFragmentId": 2479
  }, {
    "id": 1681,
    "pathFragmentId": 2480
  }, {
    "id": 1682,
    "pathFragmentId": 2481
  }, {
    "id": 1683,
    "pathFragmentId": 2482
  }, {
    "id": 1684,
    "pathFragmentId": 2483
  }, {
    "id": 1685,
    "pathFragmentId": 2484
  }, {
    "id": 1686,
    "pathFragmentId": 2485
  }, {
    "id": 1687,
    "pathFragmentId": 2486
  }, {
    "id": 1688,
    "pathFragmentId": 2487
  }, {
    "id": 1689,
    "pathFragmentId": 2488
  }, {
    "id": 1690,
    "pathFragmentId": 2489
  }, {
    "id": 1691,
    "pathFragmentId": 2490
  }, {
    "id": 1692,
    "pathFragmentId": 2491
  }, {
    "id": 1693,
    "pathFragmentId": 2492
  }, {
    "id": 1694,
    "pathFragmentId": 2493
  }, {
    "id": 1695,
    "pathFragmentId": 2494
  }, {
    "id": 1696,
    "pathFragmentId": 2496
  }, {
    "id": 1697,
    "pathFragmentId": 2497
  }, {
    "id": 1698,
    "pathFragmentId": 2498
  }, {
    "id": 1699,
    "pathFragmentId": 2499
  }, {
    "id": 1700,
    "pathFragmentId": 2501
  }, {
    "id": 1701,
    "pathFragmentId": 2502
  }, {
    "id": 1702,
    "pathFragmentId": 2503
  }, {
    "id": 1703,
    "pathFragmentId": 2504
  }, {
    "id": 1704,
    "pathFragmentId": 2505
  }, {
    "id": 1705,
    "pathFragmentId": 2506
  }, {
    "id": 1706,
    "pathFragmentId": 2507
  }, {
    "id": 1707,
    "pathFragmentId": 2508
  }, {
    "id": 1708,
    "pathFragmentId": 2509
  }, {
    "id": 1709,
    "pathFragmentId": 2510
  }, {
    "id": 1710,
    "pathFragmentId": 2511
  }, {
    "id": 1711,
    "pathFragmentId": 2512
  }, {
    "id": 1712,
    "pathFragmentId": 2513
  }, {
    "id": 1713,
    "pathFragmentId": 2514
  }, {
    "id": 1714,
    "pathFragmentId": 2515
  }, {
    "id": 1715,
    "pathFragmentId": 2517
  }, {
    "id": 1716,
    "pathFragmentId": 2518
  }, {
    "id": 1717,
    "pathFragmentId": 2519
  }, {
    "id": 1718,
    "pathFragmentId": 2520
  }, {
    "id": 1719,
    "pathFragmentId": 2522
  }, {
    "id": 1720,
    "pathFragmentId": 2523
  }, {
    "id": 1721,
    "pathFragmentId": 2529
  }, {
    "id": 1722,
    "pathFragmentId": 2530
  }, {
    "id": 1723,
    "pathFragmentId": 2531
  }, {
    "id": 1724,
    "pathFragmentId": 2532
  }, {
    "id": 1725,
    "pathFragmentId": 2533
  }, {
    "id": 1726,
    "pathFragmentId": 2534
  }, {
    "id": 1727,
    "pathFragmentId": 2535
  }, {
    "id": 1728,
    "pathFragmentId": 2536
  }, {
    "id": 1729,
    "pathFragmentId": 2537
  }, {
    "id": 1730,
    "pathFragmentId": 2538
  }, {
    "id": 1731,
    "pathFragmentId": 2539
  }, {
    "id": 1732,
    "pathFragmentId": 2540
  }, {
    "id": 1733,
    "pathFragmentId": 2541
  }, {
    "id": 1734,
    "pathFragmentId": 2543
  }, {
    "id": 1735,
    "pathFragmentId": 2544
  }, {
    "id": 1736,
    "pathFragmentId": 2545
  }, {
    "id": 1737,
    "pathFragmentId": 2546
  }, {
    "id": 1738,
    "pathFragmentId": 2548
  }, {
    "id": 1739,
    "pathFragmentId": 2549
  }, {
    "id": 1740,
    "pathFragmentId": 2550
  }, {
    "id": 1741,
    "pathFragmentId": 2551
  }, {
    "id": 1742,
    "pathFragmentId": 2552
  }, {
    "id": 1743,
    "pathFragmentId": 2553
  }, {
    "id": 1744,
    "pathFragmentId": 2554
  }, {
    "id": 1745,
    "pathFragmentId": 2555
  }, {
    "id": 1746,
    "pathFragmentId": 2556
  }, {
    "id": 1747,
    "pathFragmentId": 2557
  }, {
    "id": 1748,
    "pathFragmentId": 2558
  }, {
    "id": 1749,
    "pathFragmentId": 2560
  }, {
    "id": 1750,
    "pathFragmentId": 2561
  }, {
    "id": 1751,
    "pathFragmentId": 2562
  }, {
    "id": 1752,
    "pathFragmentId": 2563
  }, {
    "id": 1753,
    "pathFragmentId": 2564
  }, {
    "id": 1754,
    "pathFragmentId": 2565
  }, {
    "id": 1755,
    "pathFragmentId": 2566
  }, {
    "id": 1756,
    "pathFragmentId": 2567
  }, {
    "id": 1757,
    "pathFragmentId": 2568
  }, {
    "id": 1758,
    "pathFragmentId": 2569
  }, {
    "id": 1759,
    "pathFragmentId": 2570
  }, {
    "id": 1760,
    "pathFragmentId": 2571
  }, {
    "id": 1761,
    "pathFragmentId": 2573
  }, {
    "id": 1762,
    "pathFragmentId": 2574
  }, {
    "id": 1763,
    "pathFragmentId": 2575
  }, {
    "id": 1764,
    "pathFragmentId": 2576
  }, {
    "id": 1765,
    "pathFragmentId": 2578
  }, {
    "id": 1766,
    "pathFragmentId": 2579
  }, {
    "id": 1767,
    "pathFragmentId": 2580
  }, {
    "id": 1768,
    "pathFragmentId": 2581
  }, {
    "id": 1769,
    "pathFragmentId": 2582
  }, {
    "id": 1770,
    "pathFragmentId": 2583
  }, {
    "id": 1771,
    "pathFragmentId": 2584
  }, {
    "id": 1772,
    "pathFragmentId": 2585
  }, {
    "id": 1773,
    "pathFragmentId": 2586
  }, {
    "id": 1774,
    "pathFragmentId": 2587
  }, {
    "id": 1775,
    "pathFragmentId": 2589
  }, {
    "id": 1776,
    "pathFragmentId": 2590
  }, {
    "id": 1777,
    "pathFragmentId": 2591
  }, {
    "id": 1778,
    "pathFragmentId": 2592
  }, {
    "id": 1779,
    "pathFragmentId": 2594
  }, {
    "id": 1780,
    "pathFragmentId": 2595
  }, {
    "id": 1781,
    "pathFragmentId": 2596
  }, {
    "id": 1782,
    "pathFragmentId": 2597
  }, {
    "id": 1783,
    "pathFragmentId": 2598
  }, {
    "id": 1784,
    "pathFragmentId": 2599
  }, {
    "id": 1785,
    "pathFragmentId": 2600
  }, {
    "id": 1786,
    "pathFragmentId": 2601
  }, {
    "id": 1787,
    "pathFragmentId": 2602
  }, {
    "id": 1788,
    "pathFragmentId": 2603
  }, {
    "id": 1789,
    "pathFragmentId": 2604
  }, {
    "id": 1790,
    "pathFragmentId": 2605
  }, {
    "id": 1791,
    "pathFragmentId": 2606
  }, {
    "id": 1792,
    "pathFragmentId": 2607
  }, {
    "id": 1793,
    "pathFragmentId": 2608
  }, {
    "id": 1794,
    "pathFragmentId": 2609
  }, {
    "id": 1795,
    "pathFragmentId": 2610
  }, {
    "id": 1796,
    "pathFragmentId": 2611
  }, {
    "id": 1797,
    "pathFragmentId": 2612
  }, {
    "id": 1798,
    "pathFragmentId": 2613
  }, {
    "id": 1799,
    "pathFragmentId": 2614
  }, {
    "id": 1800,
    "pathFragmentId": 2615
  }, {
    "id": 1801,
    "pathFragmentId": 2616
  }, {
    "id": 1802,
    "pathFragmentId": 2617
  }, {
    "id": 1803,
    "pathFragmentId": 2618
  }, {
    "id": 1804,
    "pathFragmentId": 2619
  }, {
    "id": 1805,
    "pathFragmentId": 2620
  }, {
    "id": 1806,
    "pathFragmentId": 2621
  }, {
    "id": 1807,
    "pathFragmentId": 2622
  }, {
    "id": 1808,
    "pathFragmentId": 2623
  }, {
    "id": 1809,
    "pathFragmentId": 2624
  }, {
    "id": 1810,
    "pathFragmentId": 2625
  }, {
    "id": 1811,
    "pathFragmentId": 2626
  }, {
    "id": 1812,
    "pathFragmentId": 2627
  }, {
    "id": 1813,
    "pathFragmentId": 2628
  }, {
    "id": 1814,
    "pathFragmentId": 2630
  }, {
    "id": 1815,
    "pathFragmentId": 2631
  }, {
    "id": 1816,
    "pathFragmentId": 2632
  }, {
    "id": 1817,
    "pathFragmentId": 2633
  }, {
    "id": 1818,
    "pathFragmentId": 2635
  }, {
    "id": 1819,
    "pathFragmentId": 2636
  }, {
    "id": 1820,
    "pathFragmentId": 2645
  }, {
    "id": 1821,
    "pathFragmentId": 2646
  }, {
    "id": 1822,
    "pathFragmentId": 2647
  }, {
    "id": 1823,
    "pathFragmentId": 2651
  }, {
    "id": 1824,
    "pathFragmentId": 2655
  }, {
    "id": 1825,
    "pathFragmentId": 2659
  }, {
    "id": 1826,
    "pathFragmentId": 2663
  }, {
    "id": 1827,
    "pathFragmentId": 2667
  }, {
    "id": 1828,
    "pathFragmentId": 2671
  }, {
    "id": 1829,
    "pathFragmentId": 2675
  }, {
    "id": 1830,
    "pathFragmentId": 2679
  }, {
    "id": 1831,
    "pathFragmentId": 2683
  }, {
    "id": 1832,
    "pathFragmentId": 2687
  }, {
    "id": 1833,
    "pathFragmentId": 2691
  }, {
    "id": 1834,
    "pathFragmentId": 2695
  }, {
    "id": 1835,
    "pathFragmentId": 2699
  }, {
    "id": 1836,
    "pathFragmentId": 2703
  }, {
    "id": 1837,
    "pathFragmentId": 2706
  }, {
    "id": 1838,
    "pathFragmentId": 2709
  }, {
    "id": 1839,
    "pathFragmentId": 2713
  }, {
    "id": 1840,
    "pathFragmentId": 2717
  }, {
    "id": 1841,
    "pathFragmentId": 2721
  }, {
    "id": 1842,
    "pathFragmentId": 2725
  }, {
    "id": 1843,
    "pathFragmentId": 2730
  }, {
    "id": 1844,
    "pathFragmentId": 2735
  }, {
    "id": 1845,
    "pathFragmentId": 2739
  }, {
    "id": 1846,
    "pathFragmentId": 2743
  }, {
    "id": 1847,
    "pathFragmentId": 2745,
    "isTreeArtifact": true
  }, {
    "id": 1848,
    "pathFragmentId": 2746
  }, {
    "id": 1849,
    "pathFragmentId": 2749
  }, {
    "id": 1850,
    "pathFragmentId": 2752
  }, {
    "id": 1851,
    "pathFragmentId": 2756
  }],
  "actions": [{
    "targetId": 1,
    "actionKey": "f3655613faf733731b7867f02bcd7202f6db74b79442d8eb21063dc6735b2bad",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1],
    "outputIds": [169, 170, 171, 172],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/src/com/google/inject/grapher/libgrapher.jdeps"
    }],
    "primaryOutputId": 169,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "fdbff8beee41250cbfe41cd6ccf94021ca108e292485f264a4dadd3e733a56db",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [19],
    "outputIds": [174, 175],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/src/com/google/inject/grapher/libgrapher-hjar.jdeps"
    }],
    "primaryOutputId": 174,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "7376a107ff0f9d701cf9b110d4840ec11f6eb3300a2300563693ed4b1f824be6",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [20],
    "outputIds": [177],
    "primaryOutputId": 177,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "5e4a7efb8ef2b601eb290acfca6b4e6648c757ad364550a24583c9fed7120ac7",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [22],
    "outputIds": [194, 195, 196, 197],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/test/com/google/inject/throwingproviders/libtests.jdeps"
    }],
    "primaryOutputId": 194,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "a71251fb2e1355214b7cb90433fcaab79a1b99a55a09c229a3241ffb382e8a60",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [39],
    "outputIds": [198, 199],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/test/com/google/inject/throwingproviders/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 198,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "138250718f32a0815294a2a91508939e10167cf90aa827f94deef4484862f0d9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [40],
    "outputIds": [200],
    "primaryOutputId": 200,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "381b6d7be4b11f589bff3044a4f5886b32e0cbf1df2e2c531351d6661d8a711a",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [42],
    "outputIds": [202, 203, 204, 205],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libadd_opens_tests.jdeps"
    }],
    "primaryOutputId": 202,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "de74b0610e4857cd4f12f99fadaa8a78f471b7a4c4fc2623440e423e7478ffad",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [48],
    "outputIds": [206, 207],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libadd_opens_tests-hjar.jdeps"
    }],
    "primaryOutputId": 206,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "6be9735721b7380fe852c730bf4360c5f0021acc20b8fa3dcc7dc63adbd60a15",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [49],
    "outputIds": [208],
    "primaryOutputId": 208,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "25de45c5db8507ecc188cfe6a386fd790d332286f9eb457b910686273f2699a7",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [50],
    "outputIds": [214, 215, 216, 217],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/fieldbinder/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 214,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "b459b8c1c965cbf6755185c539e5ca7177562395b81675e108adf1a158531592",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [58],
    "outputIds": [218],
    "primaryOutputId": 218,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "10cec44184887eb7d993b88f34d51d1f7a87f5eca718c98fc79419836ea7751d",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [219],
    "primaryOutputId": 219,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/testlib/test/com/google/inject/testing/fieldbinder/AllTestsSuite.jar:${RUNPATH}extensions/testlib/test/com/google/inject/testing/fieldbinder/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/testlib/src/com/google/inject/testing/fieldbinder/libfieldbinder.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.testing.fieldbinder.gen_tests"
    }]
  }, {
    "targetId": 4,
    "actionKey": "a6e56788b1b97875b6e034c9ad0570c40ff1cf5d9c72753fa81051f85f762560",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [59],
    "outputIds": [230],
    "primaryOutputId": 230,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "8b2c7ae4e0d11e810fe2f4967a462ebf313e049b2ff43e81705db2ca5b4fedc4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [231],
    "primaryOutputId": 231,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "5800e5bdb0110811e03a2475c9e1a20cb8dc04e0d22da070e0629114679f4613",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [65],
    "outputIds": [232],
    "primaryOutputId": 232,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [66],
    "outputIds": [370],
    "primaryOutputId": 370,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "43e9fde237e8ed9e69a51ea0d6230b0e5c072e95145cb5eba4f18bec19c01c7f",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [94],
    "outputIds": [372],
    "primaryOutputId": 372,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [373],
    "primaryOutputId": 373,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [96],
    "outputIds": [376, 377],
    "primaryOutputId": 376,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "4585bfc37039d4c288ec18a88cc65cbedaeb3333067e231acc240ac3cf44e76a",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [97],
    "outputIds": [381, 382, 383, 384],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/throwingproviders/libtests.jdeps"
    }],
    "primaryOutputId": 381,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "7a7acdc1d78f17b72640c0bdd14917187f1a1987d0713f882b355780d16207ff",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [105],
    "outputIds": [385, 386],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/throwingproviders/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 385,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "a52e259f87587fa77f0f296b7ee5c18e0ec561b3fc42907dad8f1e1723e69525",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [106],
    "outputIds": [387],
    "primaryOutputId": 387,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "358c2b2e64b56d8f10de7b0f859609c3f2340840b425b8aedae53289b16af494",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [107],
    "outputIds": [409],
    "primaryOutputId": 409,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "344f967494b6ce27a9aaddcf4caaaf9d5001503d9ec147fce25f7618f3887541",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [108],
    "outputIds": [413, 414, 415, 416],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite_custom_class_loading_OFF.jdeps"
    }],
    "primaryOutputId": 413,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "a37f54003b122d185bfc27015af10919f96cde6cf48ff2d3f7247d845b1f6f76",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [117],
    "outputIds": [417],
    "primaryOutputId": 417,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "7aa511b6cad7b9cddbf89d10bc59e04dc256ecdb2afc5eda026ad2f9330e858b",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [418],
    "primaryOutputId": 418,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite_custom_class_loading_OFF.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests_class_loading_OFF_custom_class_loading_OFF"
    }]
  }, {
    "targetId": 7,
    "actionKey": "74713a2ad21060aed226c34032b19f50278844c36206ca5689ca19e1cd4edb7f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [118],
    "outputIds": [420],
    "primaryOutputId": 420,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "7b47334478a8c4ab23635d48fabbdb0ab77c5b0bf7096cd3105a907a3c76ad75",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [421],
    "primaryOutputId": 421,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "61af14d38edb26df5785d259a7a14b5a517becf7537f520ecb65dad66d1098a5",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [122],
    "outputIds": [422],
    "primaryOutputId": 422,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [123],
    "outputIds": [424],
    "primaryOutputId": 424,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "a50c9c72a1c94861ec7fc1ead7a4b95da349afa111d5e02ee684b51f9b2234f1",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [132],
    "outputIds": [425],
    "primaryOutputId": 425,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [426],
    "primaryOutputId": 426,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [134],
    "outputIds": [427, 428],
    "primaryOutputId": 427,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "a265992ed858ce43d0178e367eef9a8ce569a2df567fc1235a07000b1f26cbed",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [135],
    "outputIds": [471, 472, 473, 474],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/test/com/google/inject/persist/libtests.jdeps"
    }],
    "primaryOutputId": 471,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "62146389c5ba701606f663584666e41fcfc03acf3e6776adcc9ee6a2ba43ba39",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [149],
    "outputIds": [475, 476],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/test/com/google/inject/persist/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 475,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b977cf79edcbb42e025fe435aa8441cfb02166a11c440cf7deeb6c5533152435",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [150],
    "outputIds": [477],
    "primaryOutputId": 477,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "0223112d244f4ee2111e24e10243f536c3ecbc64bacbe0b37b9767baf971219e",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [152],
    "outputIds": [479, 480, 481, 482],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/fieldbinder/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 479,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "395740d472cfe26dea3cf02ab4908cffd9da9779c96e35a2504f44219cfd79c8",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [158],
    "outputIds": [483],
    "primaryOutputId": 483,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "cd68ca63e2f104ccbf01963442f4e24ed8c55ab44445a9fc4174f6a6b25fe47b",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [484],
    "primaryOutputId": 484,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/testlib/test/com/google/inject/testing/fieldbinder/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/testlib/test/com/google/inject/testing/fieldbinder/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/testlib/src/com/google/inject/testing/fieldbinder/libfieldbinder.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.testing.fieldbinder.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 9,
    "actionKey": "6b564a3428a23710a6ecacbc003ee5678e4a42f8a12551eabe7e1890489d5b34",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [159],
    "outputIds": [485],
    "primaryOutputId": 485,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "c3dd666ae99fc8b59da04a387db26d2a4b4e1abbdb923439d232696f98b32a97",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [486],
    "primaryOutputId": 486,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "5581db842ef4beac7529d33301ed87c1e416e218c4084060502aa3e467b03160",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [161],
    "outputIds": [487],
    "primaryOutputId": 487,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [162],
    "outputIds": [488],
    "primaryOutputId": 488,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "47d4c0fecf79eae41336e3193244febc0a21f20c8b78ce1172fcf6146aa60f16",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [167],
    "outputIds": [489],
    "primaryOutputId": 489,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [490],
    "primaryOutputId": 490,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [169],
    "outputIds": [491, 492],
    "primaryOutputId": 491,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [493],
    "primaryOutputId": 493,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "a67f7e22f2309f06dab95d1713a11bc2844fa1d34103ef4ebf10266c76f633aa",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [170],
    "outputIds": [501],
    "primaryOutputId": 501,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [502],
    "primaryOutputId": 502,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "ede30e22af4d5fecf5e4abb38dd0fef4d2a1d389900168298a8276f2e58db005",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [177],
    "outputIds": [504],
    "primaryOutputId": 504,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "78dfb61f3850370825961176a5b695441dc3e433c49ff5289111807b3a5de2dc",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [410],
    "primaryOutputId": 410,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "6d041dff8e24761df60ab70924b0d472e7bd141c2c2a0f7bb838802b51c10144",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [180],
    "outputIds": [519],
    "primaryOutputId": 519,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "6e2d12c503460f0f8beb4087934e4491975cb1c499acb8677a4b53adc1399e6c",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [181],
    "outputIds": [423, 616, 617, 618],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libtests.jdeps"
    }],
    "primaryOutputId": 423,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "30b9b9155f75f6dc466ee5db346523990bc2836190aabc758b7adad90432037a",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [188],
    "outputIds": [411, 412],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 411,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "c71ec445654a1855989f9000147f479650578d6da06c14dc7373cece3ab5b6c6",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [189],
    "outputIds": [419],
    "primaryOutputId": 419,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "4d92dc02a2b4d8d31703858aac9d4f9fbc19ba6ecbb670d6d962d7161bb437ca",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [191],
    "outputIds": [622, 623, 624, 625],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/test/com/google/inject/grapher/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 622,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "32b5dd0836c22b70b5b5314dd29a8af117f789ff9447fc0b21a4d0087f781542",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [200],
    "outputIds": [626],
    "primaryOutputId": 626,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "9ab5973f4891e6a669eb4365f678008afc121fbcda7e33083bb5f7d0e37698e1",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [627],
    "primaryOutputId": 627,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/grapher/test/com/google/inject/grapher/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/grapher/test/com/google/inject/grapher/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}extensions/grapher/src/com/google/inject/grapher/libgrapher.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.grapher.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 15,
    "actionKey": "8c3ceeb501f228963d1cc67552d70756b960d9318b403c6ff89688e6a03afc4b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [201],
    "outputIds": [630],
    "primaryOutputId": 630,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "4bdb94669f2e8b13dc17b1a1e21f975b04201be853bedd51a6ecc27fc7349f92",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [631],
    "primaryOutputId": 631,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "401a17f15365a1b4142a291c2645bda9abb2293c45f5170cedc0b11efd4c6afc",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [206],
    "outputIds": [632],
    "primaryOutputId": 632,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [207],
    "outputIds": [635],
    "primaryOutputId": 635,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "9f8f1b1307b62a9382dfbb83d172f12eb6892a40faceeff4dc8942887f4c4d19",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [218],
    "outputIds": [636],
    "primaryOutputId": 636,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [637],
    "primaryOutputId": 637,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [220],
    "outputIds": [638, 639],
    "primaryOutputId": 638,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "60adf7760bbfea8c1a7a952dc89fdfea2b03afbdbe41e81d225c78c3b88f77fa",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [221],
    "outputIds": [234, 642, 643, 644],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libcaller_finder_common.jdeps"
    }],
    "primaryOutputId": 234,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "4ea3f74b8eda3bd1bc3a5dc365d744648e5767954d01fa7f7ee303348c11d2cb",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [223],
    "outputIds": [153, 167],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libcaller_finder_common-hjar.jdeps"
    }],
    "primaryOutputId": 153,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "dcc584233d38497714250228e1ff8d10712bdd14ad650a1caf7caf3c09ba6e64",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [224],
    "outputIds": [223],
    "primaryOutputId": 223,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "23aefd31c3be61e72e2997d0251035b7946d909def62385c36c27f326690431a",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [645],
    "primaryOutputId": 645,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "9483b016f68d8df44c86ede68419f428a434da113d43439e51b85a47872be2c1",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [226],
    "outputIds": [647, 648, 649, 650],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite_custom_class_loading_CHILD.jdeps"
    }],
    "primaryOutputId": 647,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "10057de41d54022609c67fb3dcd6021da80865592a80ecf1d12efcb607d8dd2b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [233],
    "outputIds": [651],
    "primaryOutputId": 651,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "bad4234ef8717ad5adc18ea9ef8e8bcb72352557b71ab787fc43df6e43958f71",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [652],
    "primaryOutputId": 652,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite_custom_class_loading_CHILD.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dCHILD -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests_class_loading_CHILD_custom_class_loading_CHILD"
    }]
  }, {
    "targetId": 18,
    "actionKey": "95e54b72cbebf5ac70feea355933458017a03ba17fc86d2218b6f38e4457f3c4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [234],
    "outputIds": [653],
    "primaryOutputId": 653,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "7edbdb82e2eae30706bde530ea37428641e33732ac8ccced103454f7e48a80b0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [654],
    "primaryOutputId": 654,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "ea2dea8432e545175694431ca8ba6ac1f548348d8e5aedfd5074ecd2b56eb6ec",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [236],
    "outputIds": [655],
    "primaryOutputId": 655,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [237],
    "outputIds": [656],
    "primaryOutputId": 656,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "93620cd1344a9a9c7eb2f0fe5760992d322792eccee6f0e33a98faf3d6e53eb6",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [242],
    "outputIds": [657],
    "primaryOutputId": 657,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [658],
    "primaryOutputId": 658,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [244],
    "outputIds": [659, 660],
    "primaryOutputId": 659,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "2a24b727b2d8a5bbe1b39f258db6c7c1f0d38f49821e62dd84b1c8c06209a8b6",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [662],
    "primaryOutputId": 662,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Core Library"
    }, {
      "key": "{artifact_id}",
      "value": "guice"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.code.findbugs\u003c/groupId\u003e\n  \u003cartifactId\u003ejsr305\u003c/artifactId\u003e\n  \u003cversion\u003e3.0.2\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.errorprone\u003c/groupId\u003e\n  \u003cartifactId\u003eerror_prone_annotations\u003c/artifactId\u003e\n  \u003cversion\u003e2.18.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003eaopalliance\u003c/groupId\u003e\n  \u003cartifactId\u003eaopalliance\u003c/artifactId\u003e\n  \u003cversion\u003e1.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003eorg.ow2.asm\u003c/groupId\u003e\n  \u003cartifactId\u003easm\u003c/artifactId\u003e\n  \u003cversion\u003e9.5\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 20,
    "actionKey": "dac4c0f0ff02a6cef3608cc11a1daf3108358297fa4c288adf3679487ffea4bd",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [663],
    "primaryOutputId": 663,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [664],
    "primaryOutputId": 664,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "7cf98490951e46861d419921eca901af5918ee2eda87856286bee3b11e55566f",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [246],
    "outputIds": [666],
    "primaryOutputId": 666,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "38ae6c99428075bd728a3c2abe02d1c71e7fd0a37fcc542759f79c33abc08fa6",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [667],
    "primaryOutputId": 667,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "b01dc0a6164ab284b537f6d8c5e40b999215da9efd2311f0c03f5f539e3c89fd",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [249],
    "outputIds": [677, 678, 679, 680],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/test/com/google/inject/daggeradapter/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 677,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "71c6419a04e21131e84715e97d615519cda7ffc5ddcba3db79f7383c18dc56e2",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [259],
    "outputIds": [681],
    "primaryOutputId": 681,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "c05744cb0151cbf0afdcea8463d9aa20a797deaeb307eb9d8c0e8c2f9b618ccd",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [682],
    "primaryOutputId": 682,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/dagger-adapter/test/com/google/inject/daggeradapter/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/dagger-adapter/test/com/google/inject/daggeradapter/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/dagger-adapter/src/com/google/inject/daggeradapter/libdaggeradapter.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/dagger/dagger/2.22.1/dagger-2.22.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value/1.6.3/auto-value-1.6.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/dagger/dagger-producers/2.22.1/dagger-producers-2.22.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-compat-qual/2.5.3/checker-compat-qual-2.5.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.daggeradapter.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 23,
    "actionKey": "489ecb26404b0fbaf4fdf1b2a2e21d480273d863e066048300f499c72f31f5dd",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [260],
    "outputIds": [685],
    "primaryOutputId": 685,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "2140530def9f212cd705b8f2b6d2aed13c701b60e7ecb3567572235f4d12175d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [686],
    "primaryOutputId": 686,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "85be78d328329e3bf355a11355662890e746ea633b8aff1efcc79c0eccd771ef",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [264],
    "outputIds": [687],
    "primaryOutputId": 687,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [265],
    "outputIds": [694],
    "primaryOutputId": 694,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "93cb2cf9a735a6fa2df7a614d9f9c8973361d16c947a90007e3e176673e67e1d",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [276],
    "outputIds": [695],
    "primaryOutputId": 695,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [696],
    "primaryOutputId": 696,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [278],
    "outputIds": [697, 698],
    "primaryOutputId": 697,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "4eccf7c1b704a6c97644f0dea48c5740d9569e7bfa24b77f82107cf2ee869cc3",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [279],
    "outputIds": [235, 700, 701, 702],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libimplemented_by.jdeps"
    }],
    "primaryOutputId": 235,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "1d841b28de9e3434a524a47b94994185773c14346057022a8518abca72601f78",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [281],
    "outputIds": [151, 165],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libimplemented_by-hjar.jdeps"
    }],
    "primaryOutputId": 151,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "98d694f010b52a1960c2444637da6f184684a01fa3857d6d8c26e01dcd6f282f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [282],
    "outputIds": [221],
    "primaryOutputId": 221,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "ec3b97e7908d95a00a98ed72d7b50db12516e0a7cb89066bf0ec0d0021d0a32f",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [283],
    "outputIds": [634, 732, 733, 734],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/test/com/google/inject/grapher/libtests.jdeps"
    }],
    "primaryOutputId": 634,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "16fa1313df77187aa13c799c754d28372e4efe6b6e87b5c1daa091cd15539bfa",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [290],
    "outputIds": [620, 621],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/test/com/google/inject/grapher/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 620,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "638dabf36d5dcf6fac6dff73b545069089e5458548ec709ecdddf18319094959",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [291],
    "outputIds": [629],
    "primaryOutputId": 629,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [735],
    "primaryOutputId": 735,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "09351a332177f8404d8e0a8ef9cf6d41689329da2966131a50507d63a7876c50",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [293],
    "outputIds": [737],
    "primaryOutputId": 737,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "8236ca988da02d74a0054fbb5f0758c22e770a077dbe5f9b6fed469c1f7b3512",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [296],
    "outputIds": [740, 741, 742, 743],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/libjakarta_tck_test.jdeps"
    }],
    "primaryOutputId": 740,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "a254c706d02c4ebf044ee2fa8bf92f8e9905383f77cdf7030fb7aad109251b7a",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [303],
    "outputIds": [744, 745],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/libjakarta_tck_test-hjar.jdeps"
    }],
    "primaryOutputId": 744,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "f0d294d9450bc4b036227c7c28e8827a27f08f1229e4598bd5a37efbc1dedcaa",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [304],
    "outputIds": [746],
    "primaryOutputId": 746,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "36a47436bcd33ae30dbc77c24c02d24defb1f08b3b8c9bad14c6125e7f9457b7",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [305],
    "outputIds": [781, 782, 783, 784],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/test/com/google/inject/servlet/libtests.jdeps"
    }],
    "primaryOutputId": 781,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "73f242aa670091d99b36a91f7aabb9a68a35f4a3e29cb90b606a2b57d08ea643",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [317],
    "outputIds": [785, 786],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/test/com/google/inject/servlet/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 785,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "7a336fefdb554292bcaeacfa85d965d3347b0b0910b6bdcacc91dee2dcd04105",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [318],
    "outputIds": [787],
    "primaryOutputId": 787,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "2aaa6ddb716cf50a94f01e37d3989b776896a1ae8ae00e4340c9abb3da871651",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [788],
    "primaryOutputId": 788,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "6cdb3d6dcd8b80d037cee1e28f485f71a6a5ba1728c0bf24a0e60bdb43980d3c",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [320],
    "outputIds": [688, 798, 799, 800],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/test/com/google/inject/daggeradapter/libtests.jdeps"
    }],
    "primaryOutputId": 688,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "bc9d4d2ce1b4742e9326de90344aab38ab215dab4170dd151b3e1888d4c474a7",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [327],
    "outputIds": [669, 676],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/test/com/google/inject/daggeradapter/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 669,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "b343ada9cd74b3e1933bf5e48b8cd2cab42bf8bbc2771092bc0532d282d0f74d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [328],
    "outputIds": [684],
    "primaryOutputId": 684,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "a956f880b51d8aafe4d41104193a293ddc34404850261faaf71d80f0cac1516b",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [330],
    "outputIds": [804, 805, 806, 807],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 804,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "d866911f9e1d60870d22b1b100dbe9777ddfeb9cc7778fcdf52e343b5959b6d0",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [337],
    "outputIds": [808],
    "primaryOutputId": 808,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "ac9b075c6fb7f4b75b9e32d5f4c8bd284491eec104f17de692b546a5a0911e64",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [809],
    "primaryOutputId": 809,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.assistedinject.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 31,
    "actionKey": "a980e12671ef9f5a424e7b35f633ec731a48e8669cf40dd59a7576e5ded45460",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [338],
    "outputIds": [811],
    "primaryOutputId": 811,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "d5897bbd1881ab462eb90aaaa93c2c53dc3e8f7eabed1f7aedd216359f4c13ec",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [812],
    "primaryOutputId": 812,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "baafc7568c968c1aef4742301b3ff79e78a3ba13764565ee3171cd674c5e5131",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [341],
    "outputIds": [813],
    "primaryOutputId": 813,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [342],
    "outputIds": [815],
    "primaryOutputId": 815,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "c94b3af6fb2697c184cfc6d0f06336097eb7ce7839a091f99e0ea63b1ac979a8",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [349],
    "outputIds": [816],
    "primaryOutputId": 816,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [817],
    "primaryOutputId": 817,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [351],
    "outputIds": [818, 819],
    "primaryOutputId": 818,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [820],
    "primaryOutputId": 820,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "873762f5f1ce4f92195762a6532ea05dd68a08575c425e31355216f112353f5b",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [352],
    "outputIds": [822],
    "primaryOutputId": 822,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [823],
    "primaryOutputId": 823,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "6750605a5b7d445cddd3fbfa4c65bc7bfa6cde5ab58b45459c703694da294ab8",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [355],
    "outputIds": [825],
    "primaryOutputId": 825,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "09098ff04391b9924a1de08355753d23905292d2b5bc99fe1daf83556d7d1ee6",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [646],
    "primaryOutputId": 646,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "76da7b237605a60f004e1394772c1b353904733e2d127fbab895c88f74d16344",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [358],
    "outputIds": [827, 828, 829, 830],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite_custom_class_loading_ANONYMOUS.jdeps"
    }],
    "primaryOutputId": 827,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "d23b0d553df3114a372a98027222402637c3fb862f09d1b6579865e019e209c4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [365],
    "outputIds": [831],
    "primaryOutputId": 831,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "52a3b8ba7073a05cc0f9c0b1293b3ea5669f03c0eedb0227809d96a96abb00f3",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [832],
    "primaryOutputId": 832,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite_custom_class_loading_ANONYMOUS.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dANONYMOUS -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS"
    }]
  }, {
    "targetId": 35,
    "actionKey": "4b6c7336bea1d6b2569efe6d4ad4d2d1300139b4bd1169f0377f86e711cb13df",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [366],
    "outputIds": [833],
    "primaryOutputId": 833,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "1f055f2815a5c56b9e85cc618a2c3c27102ab9908dc6ef75db7de2253110d155",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [834],
    "primaryOutputId": 834,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "45662d8181521214ccf5f7b7b031e3549d3b766f18d71c681282d52e12d2e142",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [368],
    "outputIds": [835],
    "primaryOutputId": 835,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [369],
    "outputIds": [836],
    "primaryOutputId": 836,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "56aeab1a8099cf99934cf94eb10619e0de9c8d68d52b8f611bd5beabea233e3b",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [374],
    "outputIds": [837],
    "primaryOutputId": 837,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [838],
    "primaryOutputId": 838,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [376],
    "outputIds": [839, 840],
    "primaryOutputId": 839,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "4f6445dcfbe80f6aab1e269705b021a0748afb796957362c379a544ff377bc47",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [377],
    "outputIds": [842, 843, 844, 845],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/test/com/google/inject/persist/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 842,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "f8c40a052fdf88144466893df668c696e4d4da0826ec67feb49ebeb6b75c66bc",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [384],
    "outputIds": [846],
    "primaryOutputId": 846,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "ad34f6b983044bdd5330e11e4c07a592d46dda0e2161859052409b28b78e4633",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [847],
    "primaryOutputId": 847,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/persist/test/com/google/inject/persist/AllTestsSuite.jar:${RUNPATH}extensions/persist/test/com/google/inject/persist/libtests.jar:${RUNPATH}extensions/persist/test/com/google/inject/persist/config/jpa-manifest.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/persist/src/com/google/inject/persist/libpersist.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/persistence/jakarta.persistence-api/3.0.0/jakarta.persistence-api-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hibernate/hibernate-core-jakarta/5.6.15.Final/hibernate-core-jakarta-5.6.15.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/activation/jakarta.activation-api/2.0.1/jakarta.activation-api-2.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/jboss/jandex/2.4.2.Final/jandex-2.4.2.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy/1.12.18/byte-buddy-1.12.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.0/jakarta.transaction-api-2.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-runtime/3.0.0/jaxb-runtime-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/sun/activation/jakarta.activation/2.0.1/jakarta.activation-2.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-core/3.0.0/jaxb-core-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/sun/istack/istack-commons-runtime/4.0.0/istack-commons-runtime-4.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/3.0.1/jakarta.xml.bind-api-3.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/txw2/3.0.0/txw2-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hsqldb/hsqldb-j5/2.0.0/hsqldb-j5-2.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/mockito/mockito-core/4.2.0/mockito-core-4.2.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy-agent/1.12.4/byte-buddy-agent-1.12.4.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/objenesis/objenesis/3.2/objenesis-3.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.persist.gen_tests"
    }]
  }, {
    "targetId": 36,
    "actionKey": "3c8dbde67bbe143307185858fe02dd5883b0a7381fede457e0faadea863b0195",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [385],
    "outputIds": [848],
    "primaryOutputId": 848,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "5165d601f6e6dd9aea0da6b5c2ac3c2e8c9f2ad84d0db3135aa7bb3ecb29523f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [849],
    "primaryOutputId": 849,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "846391712114222aac2c63dd7f69615f84aab987eb5a8aed07d5021e30f8d6c0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [389],
    "outputIds": [850],
    "primaryOutputId": 850,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [390],
    "outputIds": [874],
    "primaryOutputId": 874,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "c2cd6f7ac6527774e2923f03d7a5eed33b664ae19802db46a1a71210fbab92df",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [405],
    "outputIds": [875],
    "primaryOutputId": 875,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [876],
    "primaryOutputId": 876,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [407],
    "outputIds": [877, 878],
    "primaryOutputId": 877,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [879],
    "primaryOutputId": 879,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "41c26673df8f62959754d5875906cf6ee3b7f9930a2557deaf74d747d41b176c",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [408],
    "outputIds": [880],
    "primaryOutputId": 880,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 38,
    "actionKey": "3ae938a26b1776e6077fc55792b71b0c1cf3d8d75f160d6bff16f59fc8512a80",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [411],
    "outputIds": [886],
    "primaryOutputId": 886,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "1c6ae65fda6fc9b02f2934e731c4f29d5088603aef3f4a10873e1852bb983b15",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [412],
    "outputIds": [890],
    "primaryOutputId": 890,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 40,
    "actionKey": "ab3a66a7fc2bcc9c7321cba835f8c999b89fdde686a2d131226739b31746c3e2",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [891],
    "primaryOutputId": 891,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 41,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [892],
    "primaryOutputId": 892,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 41,
    "actionKey": "331e595727e13bfab12e2dddffdc2f68d7f31c248e3f27ec0e3aa28f421e9c6c",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [413],
    "outputIds": [895],
    "primaryOutputId": 895,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "d6e59b9f0b900e79ed03ce197ee058794b11c0efef105c46f07774e67aafc40f",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [416],
    "outputIds": [240, 899, 900, 901],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/fieldbinder/libtests.jdeps"
    }],
    "primaryOutputId": 240,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "f1a8f8c5fbe56677c2420607c58827d3f29c7387d5f1ca1bcf84b61b14f639f6",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [423],
    "outputIds": [210, 213],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/fieldbinder/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 210,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "b9d1e062cf518aba464a4ce6f2f385bdaea32c91470fba2e4fb9117a9b6f07e3",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [424],
    "outputIds": [229],
    "primaryOutputId": 229,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "4ff45c80d15e06b24bbb5bef938295b21a0edf54f5f63677e4f919d66865f74a",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [902],
    "primaryOutputId": 902,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - ThrowingProviders"
    }, {
      "key": "{artifact_id}",
      "value": "guice-throwingproviders"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.code.findbugs\u003c/groupId\u003e\n  \u003cartifactId\u003ejsr305\u003c/artifactId\u003e\n  \u003cversion\u003e3.0.2\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.errorprone\u003c/groupId\u003e\n  \u003cartifactId\u003eerror_prone_annotations\u003c/artifactId\u003e\n  \u003cversion\u003e2.18.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 44,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [903],
    "primaryOutputId": 903,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "23f060be95f18529d1a6f0aac59afc1a0ad3cf5516133ab5d96b39d41ed625a6",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [426],
    "outputIds": [906],
    "primaryOutputId": 906,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [907],
    "primaryOutputId": 907,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "210f0328f986559e1354c7ab0c9d5d38dceb4da3f467ef3e5c13b2140226ba0a",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [429],
    "outputIds": [908],
    "primaryOutputId": 908,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "807170acb2e260c4536aec9394b524c01572c44b43d234ebf9ebab23835e04ec",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [432],
    "outputIds": [910, 911, 912, 913],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/test/com/google/inject/servlet/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 910,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "ec9cc1daf1478fbef63b151443d15f915df26280f2bc66576cfeb05ffdcdf5b0",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [439],
    "outputIds": [914],
    "primaryOutputId": 914,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "f8c53b5429e0efedb159f968154e8529e5bac5c0595c370d38e2117836b1c145",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [915],
    "primaryOutputId": 915,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/servlet/test/com/google/inject/servlet/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/servlet/test/com/google/inject/servlet/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/servlet/src/com/google/inject/servlet/libservlet.jar:${RUNPATH}extensions/servlet/src/com/google/inject/servlet/librequest-scoped-annotation.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/mockito/mockito-core/4.2.0/mockito-core-4.2.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy/1.12.18/byte-buddy-1.12.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy-agent/1.12.4/byte-buddy-agent-1.12.4.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/objenesis/objenesis/3.2/objenesis-3.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.servlet.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 46,
    "actionKey": "22e5b741798c26d4751474be0bff80d632f6cc35ade6be16e54337f33f6534f1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [440],
    "outputIds": [918],
    "primaryOutputId": 918,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "6977fcc657bc760b3eccb2de75778624d469fc987c41e509dbff276305b6ef9b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [919],
    "primaryOutputId": 919,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "69f42c6b347301f2f6eb7f7d6a0bb1301f284e434fb86451c0f92a30e48c4f1b",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [444],
    "outputIds": [920],
    "primaryOutputId": 920,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [445],
    "outputIds": [923],
    "primaryOutputId": 923,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "0724bfdf17465b92e34cace472b06e3044e9ea59d28803703d26e28f86f4f0f6",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [456],
    "outputIds": [924],
    "primaryOutputId": 924,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [925],
    "primaryOutputId": 925,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [458],
    "outputIds": [926, 927],
    "primaryOutputId": 926,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "cea77a359631dd543f7ab973297a2bcabf55086e9a4c93b50876e83b9063a90b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [459],
    "outputIds": [940, 941, 942, 943],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/src/com/google/inject/throwingproviders/libthrowingproviders.jdeps"
    }],
    "primaryOutputId": 940,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "d5ef63b63a039a8583931b01a5889423df32c8bb92874b2fad08d1aa43d12739",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [465],
    "outputIds": [188, 193],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/src/com/google/inject/throwingproviders/libthrowingproviders-hjar.jdeps"
    }],
    "primaryOutputId": 188,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "7df82420b3fb4d5e3d0f395ca892504ce497e911ee43844c2f0d457b2cc8c3df",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [466],
    "outputIds": [736],
    "primaryOutputId": 736,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 48,
    "actionKey": "f2783a9f257fbc8d91832ab23ba2287a9951b857eb8a959b5781b99226724d41",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [909],
    "primaryOutputId": 909,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "dbdc2e4e2202fe5f5baf54a70c3b4563dd9d0145711c45d0ed1541b6a7c1ac5e",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [944],
    "primaryOutputId": 944,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - TestLib"
    }, {
      "key": "{artifact_id}",
      "value": "guice-testlib"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-throwingproviders\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.code.findbugs\u003c/groupId\u003e\n  \u003cartifactId\u003ejsr305\u003c/artifactId\u003e\n  \u003cversion\u003e3.0.2\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.errorprone\u003c/groupId\u003e\n  \u003cartifactId\u003eerror_prone_annotations\u003c/artifactId\u003e\n  \u003cversion\u003e2.18.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.truth\u003c/groupId\u003e\n  \u003cartifactId\u003etruth\u003c/artifactId\u003e\n  \u003cversion\u003e1.1.3\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.truth.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003etruth-java8-extension\u003c/artifactId\u003e\n  \u003cversion\u003e1.1.3\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 50,
    "actionKey": "aa551c99727237b3599083e67f49435ece55650dd8c8ce74bad9dfb68fc91c0f",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [945],
    "primaryOutputId": 945,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "daf21f1ec57040d95a71d2fb7675e1e3b2adec843887702851df18cb6ff9f354",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [468],
    "outputIds": [947, 948, 949, 950],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/test/com/google/inject/throwingproviders/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 947,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "8cdc3c1f92b8690ad5f830c7d9df1a5f4526e15ed6e327452233fcd023640168",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [475],
    "outputIds": [951],
    "primaryOutputId": 951,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "5e2029c00f0747d4af41814c7f89a42b02636801593a370818572cc929ca541a",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [952],
    "primaryOutputId": 952,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/throwingproviders/test/com/google/inject/throwingproviders/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/throwingproviders/test/com/google/inject/throwingproviders/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/throwingproviders/src/com/google/inject/throwingproviders/libthrowingproviders.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.throwingproviders.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 51,
    "actionKey": "1133a68db2a2d90fa384b7c6cf5dd2aac2dcadd2e9235779deae3c2909508373",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [476],
    "outputIds": [953],
    "primaryOutputId": 953,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "d1de6a109a69dde108a9938c38e2c4d51fe00825e5c753fbd40b261ac87d99d0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [954],
    "primaryOutputId": 954,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "d2bf9419b3120422d41628bebbab61829018c74b7014281291ec60b5f649e8f2",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [480],
    "outputIds": [955],
    "primaryOutputId": 955,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [481],
    "outputIds": [956],
    "primaryOutputId": 956,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "29598a044214184fa56dd596ae17822816141f7bc75bc966fdeb636c2924e2c2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [490],
    "outputIds": [957],
    "primaryOutputId": 957,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [958],
    "primaryOutputId": 958,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [492],
    "outputIds": [959, 960],
    "primaryOutputId": 959,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "0d3134f82573aad47abd86363c17654049a3220fa78804e229468cb8d38bb22a",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [493],
    "outputIds": [967, 968, 969, 970],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/test/com/google/inject/spring/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 967,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "ac102f62ac18b289b9923f7ec30580dc15f9ea696df7afdb702ceecc3b5c0624",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [504],
    "outputIds": [971],
    "primaryOutputId": 971,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "048a89211416106e6bc21d43b3034da454e64e5cd7685e289e627de40f1b9ffa",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [972],
    "primaryOutputId": 972,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/spring/test/com/google/inject/spring/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/spring/test/com/google/inject/spring/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/spring/src/com/google/inject/spring/libspring.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-beans/5.3.18/spring-beans-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-core/5.3.18/spring-core-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-jcl/5.3.18/spring-jcl-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.spring.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 52,
    "actionKey": "0d9260c8de571a53e7f412bbe963d731a3dedf0c67b37d5de0ded33016d09835",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [505],
    "outputIds": [975],
    "primaryOutputId": 975,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "d69df77824cf452dd0bf31673de68b21703bd179bf69471fde7214eff1d93d00",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [976],
    "primaryOutputId": 976,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "d872356baea16f8718e63d52cc9470a15c9a4fbefeb04ca2461099f4c7fdedd9",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [509],
    "outputIds": [977],
    "primaryOutputId": 977,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [510],
    "outputIds": [983],
    "primaryOutputId": 983,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "107ca3a9a96eb2d370129c591d4bc7f9d5121704325630670ba191a91999bcc4",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [522],
    "outputIds": [984],
    "primaryOutputId": 984,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [985],
    "primaryOutputId": 985,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [524],
    "outputIds": [986, 987],
    "primaryOutputId": 986,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 53,
    "actionKey": "d6cedbeb533d914a6e01c67565a6429bfbc5616d81ca416ca9fdee7950e606cd",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [988],
    "primaryOutputId": 988,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - Persist"
    }, {
      "key": "{artifact_id}",
      "value": "guice-persist"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003eaopalliance\u003c/groupId\u003e\n  \u003cartifactId\u003eaopalliance\u003c/artifactId\u003e\n  \u003cversion\u003e1.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n  \u003cversion\u003e3.0.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.servlet\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.servlet-api\u003c/artifactId\u003e\n  \u003cversion\u003e5.0.0\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 54,
    "actionKey": "4e4c7747fbd923e07c41e80efb1affae15d8cc1e9d128262814e32a6bb98c928",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [525],
    "outputIds": [237, 1235, 1236, 1237],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libinject.jdeps"
    }],
    "primaryOutputId": 237,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "fd92c309d5b6ef5acfd00e5d62cb16d9671c98e21ba11d1e631bbc507d3e4a61",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [532],
    "outputIds": [149, 168],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libinject-hjar.jdeps"
    }],
    "primaryOutputId": 149,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "0880b429120e60827088b6ab788847e5015fe4919d85753f2892a5903f21e9c3",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [533],
    "outputIds": [224],
    "primaryOutputId": 224,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "23f6149289115af95cc2f1ea6017f0d427044d9a4eb9253e8a97919c966babe8",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [946],
    "primaryOutputId": 946,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "619ffa03c8e2f526d90aba21c70fb56aa37f7e7fa75aa502aa61d3ead7a126f4",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [535],
    "outputIds": [1239, 1240, 1241, 1242],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/test/com/google/inject/daggeradapter/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1239,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "fa51d9fe049b5d6a00e5a6ee8c82e053d2b0e9ac09664c6b7582bcc24fbf1f06",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [541],
    "outputIds": [1243],
    "primaryOutputId": 1243,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "577c51e5220038130c943c1279d8499d30f5ad59b02f3643871352b4912815a4",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1244],
    "primaryOutputId": 1244,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/dagger-adapter/test/com/google/inject/daggeradapter/AllTestsSuite.jar:${RUNPATH}extensions/dagger-adapter/test/com/google/inject/daggeradapter/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/dagger-adapter/src/com/google/inject/daggeradapter/libdaggeradapter.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/dagger/dagger/2.22.1/dagger-2.22.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value/1.6.3/auto-value-1.6.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/dagger/dagger-producers/2.22.1/dagger-producers-2.22.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-compat-qual/2.5.3/checker-compat-qual-2.5.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.daggeradapter.gen_tests"
    }]
  }, {
    "targetId": 56,
    "actionKey": "c0cd9ddccb9a7db15f5eb864088823359eb3e69ec0a2ce69c2aad5e6b9e7e7d2",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [542],
    "outputIds": [1245],
    "primaryOutputId": 1245,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "e8dc1a623fa75226cf12a20282cd90253c5044dc992eb60559f53fe534d73781",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1246],
    "primaryOutputId": 1246,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "2c0e2bbea99e1a16aedcd4d55b5416f042698edf5f3072f6103b9d15427800fb",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [544],
    "outputIds": [1247],
    "primaryOutputId": 1247,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [545],
    "outputIds": [1248],
    "primaryOutputId": 1248,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "ac2b6a07116b25cc1e25d2326dadf717faafbf3b86e6284cc5d3317c0cf7483d",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [550],
    "outputIds": [1249],
    "primaryOutputId": 1249,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1250],
    "primaryOutputId": 1250,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [552],
    "outputIds": [1251, 1252],
    "primaryOutputId": 1251,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "7ede683507a763f17f499db20dbeba168030dedabc799a26f6fe113e4105b064",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [553],
    "outputIds": [1258],
    "primaryOutputId": 1258,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "d8753891316013bab6ca34791f7d2acb10d708af8cde95f40ab07a3417a50199",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [554],
    "outputIds": [238, 1261, 1262, 1263],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libtestsupport.jdeps"
    }],
    "primaryOutputId": 238,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "96edc0f88af55a74ccdd943345749daf44fa6950f573fefc8a45e52538414307",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [560],
    "outputIds": [187, 192],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libtestsupport-hjar.jdeps"
    }],
    "primaryOutputId": 187,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "c972e9f39f7abe66134b923c4f985999aaa6b591a87628cb9d81b97f14aff2b9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [561],
    "outputIds": [227],
    "primaryOutputId": 227,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "86fcdd0534a83037e868e0475c0cbfb6d284c79d49d2c292260d0cf8a1c34a64",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1264],
    "primaryOutputId": 1264,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - Spring"
    }, {
      "key": "{artifact_id}",
      "value": "guice-spring"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n  \u003cartifactId\u003espring-beans\u003c/artifactId\u003e\n  \u003cversion\u003e5.3.18\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n  \u003cartifactId\u003espring-core\u003c/artifactId\u003e\n  \u003cversion\u003e5.3.18\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 60,
    "actionKey": "5d8605fec875490a2daa5b4f52a8dc3d522bc2488243e1b0f8e3b03b42e6e157",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [563],
    "outputIds": [1269, 1270, 1271, 1272],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/tools/osgi_wrapper.jdeps"
    }],
    "primaryOutputId": 1269,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "d8c26aa7587947b3c267522c4458b87bc1fddc01420504c2780dd553e63a564c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [570],
    "outputIds": [1273],
    "primaryOutputId": 1273,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "002c4448603c4b5f11dcfd0b31d26609665ef43c7eb9d2e08dff054ff68118a0",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1274],
    "primaryOutputId": 1274,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}tools/osgi_wrapper.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/biz/aQute/bnd/bndlib/2.4.0/bndlib-2.4.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/osgi/org.osgi.core/4.3.1/org.osgi.core-4.3.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/info/picocli/picocli/4.6.3/picocli-4.6.3.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.inject.tools.OsgiWrapper"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 60,
    "actionKey": "e629d9cedfe832743102d6ec70dee5aba4ce06c361de52a149c36a37a4c474ce",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [571],
    "outputIds": [1275],
    "primaryOutputId": 1275,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "e325718d2e50fc05c9abf48f555b0f545b8412c8c3797da7e416016ea4cf99e8",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1276],
    "primaryOutputId": 1276,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "0066b07f96c9ec4cef7169d72a4f4329dbd00486e57660702f09d5dffbe604f0",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [572],
    "outputIds": [1277],
    "primaryOutputId": 1277,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [573],
    "outputIds": [1281],
    "primaryOutputId": 1281,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "59b0d69adec67769f07d83a2f06983471eac319fdb5d446ac215de45501f4799",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [580],
    "outputIds": [1283],
    "primaryOutputId": 1283,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1284],
    "primaryOutputId": 1284,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "dc7b8f20e6e135b42d0905d0676b4fcb06f20c39123432d118892bfa18fd269f",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [582],
    "outputIds": [1285, 1286, 1287, 1288],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1285,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "6b4fd1cb613262c792c5e26330d76bd64d05d75378ca1c5aa0ba49015027ec8a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [588],
    "outputIds": [1289],
    "primaryOutputId": 1289,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "71ecf9e3468db501e58ea89825bc0811b03287d184770a4f6c9aad079ca9544f",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1290],
    "primaryOutputId": 1290,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite.jar:${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.assistedinject.gen_tests"
    }]
  }, {
    "targetId": 61,
    "actionKey": "a640479295a741aed1b39c7571c41d0d688339a3d7b13bd142a377dccaf6d4ec",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [589],
    "outputIds": [1291],
    "primaryOutputId": 1291,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "babb1c73f693a91b6dbde582235452faa1ffdc69625b7b8908a30f0d41cbe974",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1292],
    "primaryOutputId": 1292,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "75567e876cc32d7a7b9966bb2564d692a3049ad184592983ab8a2a98d7f2867c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [591],
    "outputIds": [1293],
    "primaryOutputId": 1293,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [592],
    "outputIds": [1294],
    "primaryOutputId": 1294,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "8b0e3783e1252a08c8bfac864e51a508f67617c29f216db1dc5acdd8eb88f50a",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [597],
    "outputIds": [1295],
    "primaryOutputId": 1295,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1296],
    "primaryOutputId": 1296,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [599],
    "outputIds": [1297, 1298],
    "primaryOutputId": 1297,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "baa9858c9e6cb49e26283890719fb7eb86e135a56b2f19ae18c42dc8b086bb1d",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1299],
    "primaryOutputId": 1299,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - Grapher"
    }, {
      "key": "{artifact_id}",
      "value": "guice-grapher"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 63,
    "actionKey": "c65eed11ba0e7be48dfdf3b3c1d9ee2d28ce3ff7e84adcfefa221cd7a8f50983",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1300],
    "primaryOutputId": 1300,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "4ebdbe2cce1a484673e8b8f9fc54990534039a5c16bb44c9f0582385982a3ce9",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [600],
    "outputIds": [1304, 1305, 1306, 1307],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuiteSubpackageTestPrivateFallbackOnly.jdeps"
    }],
    "primaryOutputId": 1304,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "61a656f5d7e8b25021573d5d4b0f97f0e05c753a7b05f54b8c10d39c9e2f95bb",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [607],
    "outputIds": [1308],
    "primaryOutputId": 1308,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "30a916a9f80880e95337a7d3369b58070f27341fa0ab38bb7b3e64c261c73e89",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1309],
    "primaryOutputId": 1309,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuiteSubpackageTestPrivateFallbackOnly.jar:${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/libSubpackageTestPrivateFallbackOnly.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.assistedinject.gen_SubpackageTestPrivateFallbackOnly_testsSubpackageTestPrivateFallbackOnly"
    }]
  }, {
    "targetId": 64,
    "actionKey": "7fe6b7b30245b823f8a3b479561f4c0138b79e11523f7db055674bc15b231114",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [608],
    "outputIds": [1311],
    "primaryOutputId": 1311,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "4471383026bfce86905fb81f16fc86cbb4bced46c83d9c1e5a1d086e91a77dbd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1312],
    "primaryOutputId": 1312,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "b6e2a1662a05452af87370f35265da82e238a395e1d18dd86a543019efd60362",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [611],
    "outputIds": [1313],
    "primaryOutputId": 1313,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [612],
    "outputIds": [1315],
    "primaryOutputId": 1315,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "3b1eb29879d50b089ec0b70fa0ee81db645eef9c1dccf5fde70e24bb433e94d0",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [619],
    "outputIds": [1316],
    "primaryOutputId": 1316,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1317],
    "primaryOutputId": 1317,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [621],
    "outputIds": [1318, 1319],
    "primaryOutputId": 1318,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 65,
    "actionKey": "f65bc2036fe91121262dfd42aed1fae98a4d4ff3e97a86148d1ba5307fcc6ec8",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [622],
    "outputIds": [1322],
    "primaryOutputId": 1322,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "3dc6f3aa131b9b346de671722b92873b125e98a7b0638ede044f8fd22d7783db",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1323],
    "primaryOutputId": 1323,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "2fe289946622b8e3f137bc62ed0cbd5ee9eca670b1b16f6c5d62b6d902e182a4",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [623],
    "outputIds": [1324],
    "primaryOutputId": 1324,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 68,
    "actionKey": "1273c496524bbafb78efa5147eada779af903fff3c2bfed011224a7fca4c68a4",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1325],
    "primaryOutputId": 1325,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "066f2b92b7ef29f605417318ddcc410eb96d5967894305e8b7fb17b25347c87e",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [624],
    "outputIds": [921, 1327, 1328, 1329],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/src/com/google/inject/servlet/librequest-scoped-annotation.jdeps"
    }],
    "primaryOutputId": 921,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "d5b6d664d025626e1f4a5c424381109e66a9da41581f56ced7faf970d447e045",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [627],
    "outputIds": [778, 779],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/src/com/google/inject/servlet/librequest-scoped-annotation-hjar.jdeps"
    }],
    "primaryOutputId": 778,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "8e7ee614e71e96dbb10064c114dafdbabe22d97f2ad19b1ac698f843456f60ff",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [628],
    "outputIds": [916],
    "primaryOutputId": 916,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "f998609dfe894e870bad951878b2a0e6293ab826c487a95043f6d8e0fa32a1b3",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1330],
    "primaryOutputId": 1330,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "3518d2f4987e8c9f580e40fcca4c92588d29bd4a49ccc599c4b2c6f8502d0c98",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1331],
    "primaryOutputId": 1331,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - JNDI"
    }, {
      "key": "{artifact_id}",
      "value": "guice-jndi"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 72,
    "actionKey": "22e10bc52ce06bec12aee1e7352a101631a72d5299e1dfb60ff7c23766fc7e44",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [629],
    "outputIds": [1333, 1334, 1335, 1336],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/grapher/test/com/google/inject/grapher/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1333,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "958c45abd8577b4956486f5055692dcf39859a7edfa4e5aac45c1e85b80908d1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [635],
    "outputIds": [1337],
    "primaryOutputId": 1337,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "5601f67a09aaa85ecf6f92bf74928515ff756725c73bf5ef25eda08a45ec0485",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1338],
    "primaryOutputId": 1338,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/grapher/test/com/google/inject/grapher/AllTestsSuite.jar:${RUNPATH}extensions/grapher/test/com/google/inject/grapher/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}extensions/grapher/src/com/google/inject/grapher/libgrapher.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.grapher.gen_tests"
    }]
  }, {
    "targetId": 72,
    "actionKey": "3cd34718e79d76b1c0a3eed24e3f0ec9cc7a5723ac8f73db9f8c100f7753505f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [636],
    "outputIds": [1339],
    "primaryOutputId": 1339,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "4a6b5856bb2ac034bf01053ef69e14656e951019ada6e9c4134b44bb8a82956f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1340],
    "primaryOutputId": 1340,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "ac85aa1b62491220584616881211d2d5a9382946b80bf75cdff836f11fec8ed9",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [638],
    "outputIds": [1341],
    "primaryOutputId": 1341,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [639],
    "outputIds": [1342],
    "primaryOutputId": 1342,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "9448c2f368540015820d146e7d182da70e9991936fa519cb65a14f20f1e82330",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [644],
    "outputIds": [1343],
    "primaryOutputId": 1343,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1344],
    "primaryOutputId": 1344,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [646],
    "outputIds": [1345, 1346],
    "primaryOutputId": 1345,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "ddb324f2efc90e888daa3a5ee95e2f6d666dcaad153a05fdf91b28e48c21e242",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1347],
    "primaryOutputId": 1347,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - JMX"
    }, {
      "key": "{artifact_id}",
      "value": "guice-jmx"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 74,
    "actionKey": "9f08f42dc40e986553fbad9c037e5c29129f05a52b546fbd69d3c2fb4900449a",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1348],
    "primaryOutputId": 1348,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "3131dc1d135eb66a17dc9c4a585774a263af95f9903861d81641b4f75a24bd05",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [647],
    "outputIds": [1352, 1353, 1354, 1355],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/errors/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 1352,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "10b423dbb3f07dd7eeeaef74f05f4080d7a6ab73030affc064cc34725a9773a8",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [654],
    "outputIds": [1356],
    "primaryOutputId": 1356,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "6eaa7e23a650a73d910dd9337215b1f6181ee13f04622eb2960c6124048940cf",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1357],
    "primaryOutputId": 1357,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/errors/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}core/test/com/google/inject/errors/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.errors.gen_tests_stack_traceOFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 75,
    "actionKey": "afd821718648d7c821be905cbb012bace29fcf952c8a8f9407a894ce3337ebcc",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [655],
    "outputIds": [1359],
    "primaryOutputId": 1359,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "3a71f9588609eb4e2c34b80b4fcd59ce041e1da8eb24deb73683441ba4acbf1e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1360],
    "primaryOutputId": 1360,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "2191ed99699dd0f0facc52a042374672c21f30e06de3c8f812725e585810c26a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [658],
    "outputIds": [1361],
    "primaryOutputId": 1361,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [659],
    "outputIds": [1363],
    "primaryOutputId": 1363,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "2182a7f41ff3fc3ba45b210f1d420fb58bb57cdabe47d1df8ebf416b24c36ad9",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [666],
    "outputIds": [1364],
    "primaryOutputId": 1364,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1365],
    "primaryOutputId": 1365,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [668],
    "outputIds": [1366, 1367],
    "primaryOutputId": 1366,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "69b8b55e5460957061d1f2e7104fa2c78aecfe458795bfdd6c3fd03ef8aa1ca3",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [668],
    "primaryOutputId": 668,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "a418013cf166ad36ab0c1e3b92fd156fdb429b0c4281a13f86f11f207a5fe3e2",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1368],
    "primaryOutputId": 1368,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "53dd8bc4ed14fc2ff1a565f9802088a4c0a0f28773a2762f05213366a32ab598",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [669],
    "outputIds": [1404],
    "primaryOutputId": 1404,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "bcbb25e552487496bb745d8675eb2473fd6e396b6d100cb3eef59bd2f9c0904f",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [670],
    "outputIds": [1409, 1410, 1411, 1412],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_ANONYMOUS.jdeps"
    }],
    "primaryOutputId": 1409,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "5bf15ab5561c17565e0e7b38e5396a1ec711d56ed199076bbea51fc97295a9e0",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [677],
    "outputIds": [1413],
    "primaryOutputId": 1413,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "2df0b30c686473aaf67f3f993c1e86a9643e176fb57eda5d4f1ec36745796edb",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1414],
    "primaryOutputId": 1414,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_ANONYMOUS.jar:${RUNPATH}core/test/com/googlecode/guice/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/apache/felix/org.apache.felix.framework/3.0.5/org.apache.felix.framework-3.0.5.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dANONYMOUS -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.googlecode.guice.gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS"
    }]
  }, {
    "targetId": 79,
    "actionKey": "d56a236bcd06a604dead4ec59525b1ea45a537477d138be5002f573cb611a44a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [678],
    "outputIds": [1416],
    "primaryOutputId": 1416,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "b9aa37b442e4fff3bcf5747c8190098f632fccc370cad2e7a596dcbf54695e43",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1417],
    "primaryOutputId": 1417,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "54309edfab26c2a6366778e7785d09c77f31324a330e43383d7ec5d35f4246ce",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [681],
    "outputIds": [1418],
    "primaryOutputId": 1418,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [682],
    "outputIds": [1422],
    "primaryOutputId": 1422,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "54c10291d8182aaf840cd62cffebba02ae7091cbaf4c0d9cb416a118b8a698be",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [689],
    "outputIds": [1423],
    "primaryOutputId": 1423,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1424],
    "primaryOutputId": 1424,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [691],
    "outputIds": [1425, 1426],
    "primaryOutputId": 1425,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "ebe6157fc091e77880b2bd981a360993cd646be5dac58ad84a897db691531926",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1427],
    "primaryOutputId": 1427,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 81,
    "actionKey": "2eed396ab62ad181f47215c85dc6c84dec5ffbeb2d3aa64e326cdb5349be4f60",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [692],
    "outputIds": [1428, 1429, 1430],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1428,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 81,
    "actionKey": "b959ae2014a4eec0acc424f5cffa9687ca95043a81c2c282924c18bf22de4bea",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [1431],
    "primaryOutputId": 1431,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 82,
    "actionKey": "9d60c22431172e85e5e17a2fb5c02a8a5501ffeb3a6c26ae25d9e6b7a6c59705",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1432],
    "primaryOutputId": 1432,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "a423c070a373cf86b63e3d96532df98dd1cb4d93ea957227a532a0713101a9e7",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1433],
    "primaryOutputId": 1433,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1434],
    "primaryOutputId": 1434,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "109d7d20c85bf4825f2ce50bd730fc7a2cc0675ab9a5c1ab455732d4855b54dc",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [695],
    "outputIds": [1435],
    "primaryOutputId": 1435,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "02a490637de8676b6512ac3a8e7a1033f0bf51489015e3cdb8656d5d97608bb0",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [698],
    "outputIds": [821, 1436, 1437, 1438],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/src/com/google/inject/persist/libpersist.jdeps"
    }],
    "primaryOutputId": 821,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "44073916296f0f74bca7326e8fb8cacb50723cec1bad46fd2e2dc248799f7133",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [704],
    "outputIds": [406, 470],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/src/com/google/inject/persist/libpersist-hjar.jdeps"
    }],
    "primaryOutputId": 406,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "ba34faf293020e3fca665d988641ffc10756d3848717de466f3463498381aa56",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [705],
    "outputIds": [824],
    "primaryOutputId": 824,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 86,
    "actionKey": "0dfb1e289fa4a8db1daaaf9a2b3450a53520a13779bd4883a403234493d08d46",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [619],
    "primaryOutputId": 619,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "bf84b46b205d10b0fbdbd38a98ac65a4091219ba383ef2ee24f81146af085fb9",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [707],
    "outputIds": [1439, 1440, 1441, 1442],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/AllTestsSuite_jakarta_tck.jdeps"
    }],
    "primaryOutputId": 1439,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "5bf93db0022c87a502a29c89114a12e069d45fd81e866bf4be54344c69b65413",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [714],
    "outputIds": [1443],
    "primaryOutputId": 1443,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "d4c66d11bff6694a89396632c1a3f6d291bd2bf71e476ec89746c4ccca6c060d",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1444],
    "primaryOutputId": 1444,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/googlecode/guice/AllTestsSuite_jakarta_tck.jar:${RUNPATH}core/test/com/googlecode/guice/libjakarta_tck_test.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-tck/2.0.1/jakarta.inject-tck-2.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.googlecode.guice.gen_jakarta_tck_tests_jakarta_tck"
    }]
  }, {
    "targetId": 87,
    "actionKey": "eb0c8329a25f1cdb4e64b45fc4638d4d34f342d26f608e2dacc87309d342a19c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [715],
    "outputIds": [1445],
    "primaryOutputId": 1445,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "567759e01c6595779bb3ab4c1fa52ff0d63125a8d636e33b1598c886dd2149e4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1446],
    "primaryOutputId": 1446,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "07906daa2d6b5f4299a02bcaa475c7a476cb3f9584e9b8cb9974f10e133a8738",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [718],
    "outputIds": [1447],
    "primaryOutputId": 1447,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [719],
    "outputIds": [1449],
    "primaryOutputId": 1449,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "48483c3bba616c286d9a724c5944a680afefd6ed9674d4c27225967fbaf47e4d",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [727],
    "outputIds": [1450],
    "primaryOutputId": 1450,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1451],
    "primaryOutputId": 1451,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [729],
    "outputIds": [1452, 1453],
    "primaryOutputId": 1452,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "38bb5a1888853a04720550468d42c46e33b97047696d3ffe29f5ac1a31efd0ae",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [730],
    "outputIds": [1455, 1456, 1457, 1458],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_OFF.jdeps"
    }],
    "primaryOutputId": 1455,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "1b52983528133670c65c6a29f2cf89a465888735929699051d4179c1b9593d39",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [736],
    "outputIds": [1459],
    "primaryOutputId": 1459,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "5eeed1c62dd54f6c707318828e91ec60e61eb77a753a7aa1748243a389ddc725",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1460],
    "primaryOutputId": 1460,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_OFF.jar:${RUNPATH}core/test/com/googlecode/guice/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/apache/felix/org.apache.felix.framework/3.0.5/org.apache.felix.framework-3.0.5.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.googlecode.guice.gen_tests_class_loading_OFF_custom_class_loading_OFF"
    }]
  }, {
    "targetId": 88,
    "actionKey": "d3bbce2e89187474d863dec19ec87d384268aba07e6fff8315149b308c37c154",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [737],
    "outputIds": [1461],
    "primaryOutputId": 1461,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "4faf64b2f40e8c8ccb78dbf4b5e28f2e4b71840c73d695b15bf6ec77fc5ae5c9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1462],
    "primaryOutputId": 1462,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "1eb36c405fd49bc604348603ad9fa41a38f998ae59ad5155bb1296693ea62d32",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [739],
    "outputIds": [1463],
    "primaryOutputId": 1463,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [740],
    "outputIds": [1464],
    "primaryOutputId": 1464,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "e0e50530e585778f3a9b656d4e37b0157009ca7b04a7227a55db81254fcb15e4",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [745],
    "outputIds": [1465],
    "primaryOutputId": 1465,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1466],
    "primaryOutputId": 1466,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [747],
    "outputIds": [1467, 1468],
    "primaryOutputId": 1467,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "569a25c41823eba375a9b87205f24224725485d2f445c121569f8e3f370a0549",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1469],
    "primaryOutputId": 1469,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Bill of Materials"
    }, {
      "key": "{artifact_id}",
      "value": "guice-bom"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject"
    }, {
      "key": "{packaging}",
      "value": "pom"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-assitedinject\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-dagger-adapter\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-grapher\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-jmx\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-jndi\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-persist\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-servlet\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-spring\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-testlib\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject.extensions\u003c/groupId\u003e\n  \u003cartifactId\u003eguice-throwingproviders\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 90,
    "actionKey": "c6a12748f8bfef022a13f9695828a3feecd7d833558b92124b7a27fe3eb59c6b",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1470],
    "primaryOutputId": 1470,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "b88f02a0c27ed0492cdbf142e855ecd583248ac04be40845cf2927131cad181a",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [748],
    "outputIds": [851],
    "primaryOutputId": 851,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "508629be716e98f2483510219fcf87986e6d50072b164be4a463de11ee1e55e7",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [749],
    "outputIds": [1475, 1476, 1477, 1478],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jmx/test/com/google/inject/tools/jmx/libtests.jdeps"
    }],
    "primaryOutputId": 1475,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "1d646a8f7edde446dfda1faf6124ee5a42fcc08f45f5be13e32f07950835b155",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [757],
    "outputIds": [1479, 1480],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jmx/test/com/google/inject/tools/jmx/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 1479,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "eb49adbdf5909b58bbd45981327d3aef5370aa54e8b01ce2a5d1d11011fb48b7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [758],
    "outputIds": [1481],
    "primaryOutputId": 1481,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "099d0ac2dc0a0b9659f5eea7b1a470824f75641202432b222a819e9d44665ae7",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [759],
    "outputIds": [1482, 1483, 1484, 1485],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite_with_windows_separator.jdeps"
    }],
    "primaryOutputId": 1482,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "509ab126b6da1113288c451e8a5106b691cf610ccb7c9fc2f33d26ec6c757ab4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [766],
    "outputIds": [1486],
    "primaryOutputId": 1486,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "f1c8805d9261f03728b408d12807a94cab9398044d3aed3a504fa031f6840463",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1487],
    "primaryOutputId": 1487,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite_with_windows_separator.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dline.separator\u003d\u0027\r\n\u0027 -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests_with_windows_separator_with_windows_separator"
    }]
  }, {
    "targetId": 93,
    "actionKey": "bd8f2f85c0b196b2feefabad415da550899707c3d119ba500a5a0a28502e45b1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [767],
    "outputIds": [1488],
    "primaryOutputId": 1488,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "2f375f26f6b1d5dc1580c3ff91086357b806d5346c390b56572ce791f6aed5fd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1489],
    "primaryOutputId": 1489,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "c88dcafa82202d42cfd4e1d5af727d25cb04d2d8ee6ac903d1e58459f0a881ae",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [769],
    "outputIds": [1490],
    "primaryOutputId": 1490,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [770],
    "outputIds": [1491],
    "primaryOutputId": 1491,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "964620e748237db90a490c0f79c68d28cf382dec0b1b94bbc923e44f953b6749",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [775],
    "outputIds": [1492],
    "primaryOutputId": 1492,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1493],
    "primaryOutputId": 1493,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [777],
    "outputIds": [1494, 1495],
    "primaryOutputId": 1494,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1496],
    "primaryOutputId": 1496,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "180cf2d6cb7f2af85f13fbaa21fe5d45f04025ea663929117a86180bba50e1f4",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [778],
    "outputIds": [1497],
    "primaryOutputId": 1497,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "6f482c7f0f3eaa2b16507b7d508a6c7bebcb257596d50263677de3578d5ef502",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [781],
    "outputIds": [1498, 1499, 1500],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1498,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "b9f332e103e79dabe9a38bb32875573c57d386ffd1f4adc1df257992bbde52f4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [1501],
    "primaryOutputId": 1501,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1502],
    "primaryOutputId": 1502,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "614b408f08afb43fa9f0bc071d99462b2e53bbd0510709a35c063fec5c803565",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [783],
    "outputIds": [1504],
    "primaryOutputId": 1504,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "0ceb53fd55e80a6d9e443478a8cd7fdea442d9ff15356a9ac4a2cc9c45417f7d",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [786],
    "outputIds": [1505, 1506, 1507, 1508],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_CHILD.jdeps"
    }],
    "primaryOutputId": 1505,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "e151336e104a38c22c74b26ad4cba701a6a43cf639abe5ef8c47887a22116df1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [792],
    "outputIds": [1509],
    "primaryOutputId": 1509,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "ed2d71cbf0b4cf66b96616eae72a07c0acc20582154f477ea792c6dc78ab53c8",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1510],
    "primaryOutputId": 1510,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/googlecode/guice/AllTestsSuite_custom_class_loading_CHILD.jar:${RUNPATH}core/test/com/googlecode/guice/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/apache/felix/org.apache.felix.framework/3.0.5/org.apache.felix.framework-3.0.5.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_custom_class_loading\u003dCHILD -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.googlecode.guice.gen_tests_class_loading_CHILD_custom_class_loading_CHILD"
    }]
  }, {
    "targetId": 97,
    "actionKey": "65390ea9bf38611574e7312d113b2b3cae17fdb7506695669051db018c5f5804",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [793],
    "outputIds": [1511],
    "primaryOutputId": 1511,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "26a92c5a6ab0b1f961bd79e85a857767ebe14f33e525f5310884a14912c6cfd3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1512],
    "primaryOutputId": 1512,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "59b91eddf7dfdbdd21177b190a63fdd03e6a2b9b1b3ceadf7c77e997d527376c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [795],
    "outputIds": [1513],
    "primaryOutputId": 1513,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [796],
    "outputIds": [1514],
    "primaryOutputId": 1514,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "eb77b75f765746ff217c1ac07a6df4038181bc0d0199bd029ccaa960e9bd37f5",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [801],
    "outputIds": [1515],
    "primaryOutputId": 1515,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1516],
    "primaryOutputId": 1516,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [803],
    "outputIds": [1517, 1518],
    "primaryOutputId": 1517,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1519],
    "primaryOutputId": 1519,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "89ee7c9eb3d6a4f0e22f5818f162d067ed333e03be425de9fc8d7fb57b9c8003",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [804],
    "outputIds": [1520],
    "primaryOutputId": 1520,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 99,
    "actionKey": "daeff694adeb99032b8f9d9315c2c2e7d4b93617e4123498a86d944a7b94cdae",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1521],
    "primaryOutputId": 1521,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - Dagger"
    }, {
      "key": "{artifact_id}",
      "value": "guice-dagger-adapter"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.dagger\u003c/groupId\u003e\n  \u003cartifactId\u003edagger\u003c/artifactId\u003e\n  \u003cversion\u003e2.22.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 100,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1522],
    "primaryOutputId": 1522,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "894566ce10d9dd59e75477ad97ba85f617b29afb2b39e7032e4e0c4ae6b827e1",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [807],
    "outputIds": [1523],
    "primaryOutputId": 1523,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 101,
    "actionKey": "76bc677bcffb8f2631df27ebf5246851dd820e1baa90e2c62952950d4a88dd02",
    "mnemonic": "JavaIjar",
    "configurationId": 1,
    "inputDepSetIds": [810],
    "outputIds": [449],
    "primaryOutputId": 449,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "4ee2c8052dd2e47f0c9dfbc88a604061a3c0f4628c917a9023da32a33f5f3b6b",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1238],
    "primaryOutputId": 1238,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "de172c85375b3ac00e666f05017996bab637133b3afb79019c059c04992c6ca2",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [826],
    "primaryOutputId": 826,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "2bd787318be9f3aaf8fcc7f7971384c85110a58f05c676a8f8937ee40d13c22f",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [811],
    "outputIds": [1525, 1526, 1527],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1525,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "225c091cb1a1dd54adf2fa2fac3cf282bf89e9f1219168c2e0a4fe768ffccd5a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [225],
    "primaryOutputId": 225,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "6c4db23500a706d6dfa9beeede58b3123427e635a5a76a0db0146d54bde26221",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [813],
    "outputIds": [1528, 1529, 1530, 1531],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1528,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "c2c00a69a3d14d80241830799f4e53d8daa768e0c931cd1d3a341b420492f6df",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [820],
    "outputIds": [1532],
    "primaryOutputId": 1532,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "40334d45145e1a1ed1cbe2c3f7d3190153f5617d1259df71755aae2a60d3cfd0",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1533],
    "primaryOutputId": 1533,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests"
    }]
  }, {
    "targetId": 105,
    "actionKey": "84fed1eab2ac893fefe3ba29af0f9f47b74bf3852c4b087513378e5d602f281f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [821],
    "outputIds": [1534],
    "primaryOutputId": 1534,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "e5fe2568c6cd9f366fa46ccd6f46c5cca226c4602cddafa48d3815b117f866a4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1535],
    "primaryOutputId": 1535,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "f95052224e3114a6e751ae0f390212cc0ee02fd17d044f80dab4c2a9489fd3c4",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [823],
    "outputIds": [1536],
    "primaryOutputId": 1536,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [824],
    "outputIds": [1537],
    "primaryOutputId": 1537,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "e69ffede04a36b58a2034c1ca1c085c377041af575ba0a01188f6e4232e52a65",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [829],
    "outputIds": [1538],
    "primaryOutputId": 1538,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1539],
    "primaryOutputId": 1539,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [831],
    "outputIds": [1540, 1541],
    "primaryOutputId": 1540,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "0f08218038a767faf45188d864cd9b9c5a6a18fca995987cafbcab5685179623",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [832],
    "outputIds": [1552],
    "primaryOutputId": 1552,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "c885546dc4cba94ef7d87c2bf177eb874effaf2b8ba2ee478d3e66eb557c2b34",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [833],
    "outputIds": [814, 1560, 1561, 1562],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/libtests.jdeps"
    }],
    "primaryOutputId": 814,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "f925df7baba9fc2d790142aba64abe5cdb3f8f858d960f124c987768960a48be",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [840],
    "outputIds": [802, 803],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 802,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "17132214ba82d1755903d47f4f315c9e773387b875e3ae069506133aed318950",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [841],
    "outputIds": [810],
    "primaryOutputId": 810,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "c3a6a5f2fadfa2249cd610c7a6f5f48297d1fb0dc2be5979c128e554745682ba",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [843],
    "outputIds": [1563, 1564, 1565, 1566],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jndi/src/com/google/inject/jndi/libjndi.jdeps"
    }],
    "primaryOutputId": 1563,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "44638d40caf99f44686b32b4a71825501325b9c6eba549819dee2a603395cbdf",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [847],
    "outputIds": [1551, 1567],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jndi/src/com/google/inject/jndi/libjndi-hjar.jdeps"
    }],
    "primaryOutputId": 1551,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "12dfbc5514503559cc9c2b90f7cd5db44ed713c3e8729a72c32559da9a2ed72e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [848],
    "outputIds": [1568],
    "primaryOutputId": 1568,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "ed8457682469a39310aef07c7643a8b169dac631b2c10b813c44aa0764851091",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [850],
    "outputIds": [1569],
    "primaryOutputId": 1569,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 110,
    "actionKey": "df88d66b4296a86fec92267c43c2a9c9a1bcc2aab779870e48184b034c7bcb8b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [851],
    "outputIds": [1503, 1570, 1571, 1572],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jmx/src/com/google/inject/tools/jmx/libjmx.jdeps"
    }],
    "primaryOutputId": 1503,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 110,
    "actionKey": "59ee5972fd0fb6eb02c8dae107619fe45385a2e2d6478f0a93427be2aa3cba42",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [855],
    "outputIds": [885, 1474],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/jmx/src/com/google/inject/tools/jmx/libjmx-hjar.jdeps"
    }],
    "primaryOutputId": 885,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 110,
    "actionKey": "db3c9ae46c74aba16a40a74b73d0e80215969ef85cd3d4ad409a1fd545ef7edc",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [856],
    "outputIds": [665],
    "primaryOutputId": 665,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "aefca0688a0fa42aa7eb12f6936d240a6662937f3b57c4224ff1bc942cf37e4d",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [858],
    "outputIds": [1573],
    "primaryOutputId": 1573,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1574],
    "primaryOutputId": 1574,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "521b713d03f0a1c2c183fad3fc4b215e7abe2f6fc506e2d1356547330cb2d2d1",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [859],
    "outputIds": [1575],
    "primaryOutputId": 1575,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "ab65e785ce207fcb2f56a2945c3efbe941c189ddd78b24d03f1dccd07b1f184c",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [862],
    "outputIds": [1576, 1577, 1578, 1579],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/throwingproviders/test/com/google/inject/throwingproviders/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1576,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "2348e983ce783d979c027e8ccf446ed96677d145f0c6f14f952a66515372ac1e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [868],
    "outputIds": [1580],
    "primaryOutputId": 1580,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "082d3eb9503de9d19a23f3e3f801b216f0cf0b927dbb34de55b43a8ef9f7afd0",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1581],
    "primaryOutputId": 1581,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/throwingproviders/test/com/google/inject/throwingproviders/AllTestsSuite.jar:${RUNPATH}extensions/throwingproviders/test/com/google/inject/throwingproviders/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/throwingproviders/src/com/google/inject/throwingproviders/libthrowingproviders.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.throwingproviders.gen_tests"
    }]
  }, {
    "targetId": 113,
    "actionKey": "55698e01cb8f1c87e571a0d371b6825c31d27dddabe0f12bb3e7c9fb89c5ad02",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [869],
    "outputIds": [1582],
    "primaryOutputId": 1582,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "74f94d922536e95c0e10292e3525193fb27faa4b52974c2876998c7e9d3ecb8d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1583],
    "primaryOutputId": 1583,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "62a76bf317cb293f215a8cbf7ebffeb4faa533310491ef1100f57b2dc191fc8a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [871],
    "outputIds": [1584],
    "primaryOutputId": 1584,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [872],
    "outputIds": [1585],
    "primaryOutputId": 1585,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "bc4e2d47d113d2b3439d67eacef22449e9d1710f9a8b26792db618cbe6e97a0a",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [877],
    "outputIds": [1586],
    "primaryOutputId": 1586,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1587],
    "primaryOutputId": 1587,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [879],
    "outputIds": [1588, 1589],
    "primaryOutputId": 1588,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "35c397a7ab0c4f4c51b37e676b02d08a35c955ed69501f92f3e7318b92e0c2a1",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [880],
    "outputIds": [922, 1590, 1591, 1592],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/src/com/google/inject/servlet/libservlet.jdeps"
    }],
    "primaryOutputId": 922,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "b6fe9e174c03b0279b68679145b5ff32e3b094865f3daed8d08f942f5bac2093",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [887],
    "outputIds": [777, 780],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/src/com/google/inject/servlet/libservlet-hjar.jdeps"
    }],
    "primaryOutputId": 777,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "1837e3adaaaa3f26d387c560bc60ba5760cf516be450f2a97b3954705f372e3b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [888],
    "outputIds": [917],
    "primaryOutputId": 917,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "ac705198b79512e0f00727f8e12667120c56d21c6f88f54dad15de041f496371",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [890],
    "outputIds": [1593, 1594, 1595, 1596],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 1593,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "604936034fc921d6a447e5716c49da22783c9a2e5eecb4bb1a9acf88322535e4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [897],
    "outputIds": [1597],
    "primaryOutputId": 1597,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "0935d963e400cc45a7c6e7eb9e86659a8ab1a3031c398c058f1cef1205ad64fc",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1598],
    "primaryOutputId": 1598,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}core/test/com/google/inject/libadd_opens_tests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}core/test/com/google/inject/libtests.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.gen_tests_stack_trace_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 115,
    "actionKey": "27017ffdac5fe68054134bbec91a0ba87983049917dc5534575e666395991c3c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [898],
    "outputIds": [1599],
    "primaryOutputId": 1599,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "2d1004855b02178b8a12611b135e430b200b51265e9968d010cb7dfa91c77470",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1600],
    "primaryOutputId": 1600,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "1ff0b1498a60ea1907b16c888657898c0755e710460dbb525c6feb145a0c2a6e",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [900],
    "outputIds": [1601],
    "primaryOutputId": 1601,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [901],
    "outputIds": [1602],
    "primaryOutputId": 1602,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "403d7ebc1e628003dd8afcb6b4259f0adbfb7cd802a94cf704b0bef7f8b9b696",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [906],
    "outputIds": [1603],
    "primaryOutputId": 1603,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1604],
    "primaryOutputId": 1604,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [908],
    "outputIds": [1605, 1606],
    "primaryOutputId": 1605,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "45fd35daf3e464b85436e49bd00eef30b043d910e0d4ab3c7fb0ce72f6ad8f80",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [909],
    "outputIds": [1607],
    "primaryOutputId": 1607,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "a0b1e8af195f04c33649fce01f3fb23e9859097f0bff3090e70dd4df22cf673d",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [910],
    "outputIds": [1608, 1609, 1610, 1611],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/test/com/google/inject/testing/throwingproviders/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1608,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "758cf50f5f3cd6fc7cef667ff623cbcca606c69370a8584b81fc4889d5be551a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [917],
    "outputIds": [1612],
    "primaryOutputId": 1612,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "3fa1f555922a012cd71f3629c7949481f48e946eeab6e18c02b0b95c2b70b112",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1613],
    "primaryOutputId": 1613,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/testlib/test/com/google/inject/testing/throwingproviders/AllTestsSuite.jar:${RUNPATH}extensions/testlib/test/com/google/inject/testing/throwingproviders/libtests.jar:${RUNPATH}extensions/testlib/src/com/google/inject/testing/throwingproviders/libthrowingproviders.jar:${RUNPATH}extensions/throwingproviders/src/com/google/inject/throwingproviders/libthrowingproviders.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.testing.throwingproviders.gen_tests"
    }]
  }, {
    "targetId": 117,
    "actionKey": "295d6fbb7a909dab7cc37425feee4ad64579d0971bd6e1019da0a3f22b1faa1f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [918],
    "outputIds": [1614],
    "primaryOutputId": 1614,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "54190265248646877a3020f61105ab562fe6b19cf8499ac2a2c7d2e160810ef9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1615],
    "primaryOutputId": 1615,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "719b05e96bd991ddc8b9758e2be0ba6145cb7a30287465c86a8e39cf2fc365b4",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [922],
    "outputIds": [1616],
    "primaryOutputId": 1616,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [923],
    "outputIds": [1617],
    "primaryOutputId": 1617,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "b97f75218a3ff2f1be4820c5ea06b0748e6b67fc19ec290af90495eede083486",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [932],
    "outputIds": [1618],
    "primaryOutputId": 1618,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1619],
    "primaryOutputId": 1619,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [934],
    "outputIds": [1620, 1621],
    "primaryOutputId": 1620,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 118,
    "actionKey": "8c0b5ee6f2e907b891c4223bec2f519405e73af22cd6aec41cfb5ba37dd4efa6",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1332],
    "primaryOutputId": 1332,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "a2d39d93008f19050d442f847f9089c7546c90615a601949a7a720374ffeceb9",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [935],
    "outputIds": [633, 1623, 1624, 1625],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jdeps"
    }],
    "primaryOutputId": 633,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "6e02325720d006a31cb41e887bb4cb63a4f080b23c90586cc259cbd4ca37b807",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [941],
    "outputIds": [518, 731],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject-hjar.jdeps"
    }],
    "primaryOutputId": 518,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "91b47f04c74aa96176f36b0c1b6fa89032b125a578c92306ca8515749d6d692b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [942],
    "outputIds": [628],
    "primaryOutputId": 628,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1626],
    "primaryOutputId": 1626,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "c69fd3cb865a444cd0cd0b3fe0a5f2f211fc58b3955d3b446a53fe74e33d2007",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [944],
    "outputIds": [1627],
    "primaryOutputId": 1627,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 121,
    "actionKey": "0c315e8b1a278cf40279024c1458dc3f1d159082606a2dd5efd440e2db012216",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [947],
    "outputIds": [1629, 1630, 1631, 1632],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libAllTests.jdeps"
    }],
    "primaryOutputId": 1629,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 121,
    "actionKey": "a3404e20bd2a9fc16bad7e11f6fb5f51004ec0b39260b45637ded82e4f9970f9",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [954],
    "outputIds": [1633, 1634],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/libAllTests-hjar.jdeps"
    }],
    "primaryOutputId": 1633,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 121,
    "actionKey": "fedfc598fb98a4461ee4fd6d3020462502d4156ee71af48119df511f24297b45",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [955],
    "outputIds": [1635],
    "primaryOutputId": 1635,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1636],
    "primaryOutputId": 1636,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "abf0efdf79a4b3e6aa2611f0080ca205b98c432b8986630480f74de87a0a2708",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [956],
    "outputIds": [1637],
    "primaryOutputId": 1637,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "f70fabf81835325e6eb030bb921e0f691805d96adda16dfc06db898e42e02ae7",
    "mnemonic": "JavaResourceJar",
    "configurationId": 1,
    "inputDepSetIds": [959],
    "outputIds": [1362],
    "primaryOutputId": 1362,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "818fd274e8d696578773c18401bb3aebfab2112c5a0b38339d0d7d939a26b866",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [961],
    "outputIds": [1638, 1679, 1680, 1681],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/errors/libtests.jdeps"
    }],
    "primaryOutputId": 1638,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "01ceb2c6c94dab17070a1ec63d22aefa36a0da2dd726d0729d98dcae41084b88",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [967],
    "outputIds": [1350, 1351],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/errors/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 1350,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "4916874441f1ce51fcb6254499a617838996ab3e696724f59c3102a43d9e3f7d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [968],
    "outputIds": [1358],
    "primaryOutputId": 1358,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "df28660e56c81e7b3c24927525616b758701712d42aa81615bb9ed75c82a4ca6",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [970],
    "outputIds": [236, 1682, 1683, 1684],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libprovided_by.jdeps"
    }],
    "primaryOutputId": 236,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "82efaf1d021f6db98c3d0c85cf26f49777067a3d20d6b482d9b670de2f51cef5",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [973],
    "outputIds": [152, 166],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libprovided_by-hjar.jdeps"
    }],
    "primaryOutputId": 152,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "ae345d6e502e8e0707f7838743ff164eb998f1f1dc1e0b1e9de813d994e6b80f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [974],
    "outputIds": [222],
    "primaryOutputId": 222,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1685],
    "primaryOutputId": 1685,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "d7e37a779e209e414262bafae547753d881e41c4b31064506cba1f897f724f90",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [975],
    "outputIds": [1686],
    "primaryOutputId": 1686,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 126,
    "actionKey": "6e96429f0a5b61a4906a2674f1cf8682d38185a8ae64db1a3d21aa2ba9438b8a",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1349],
    "primaryOutputId": 1349,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "3051de4fac42a6cafe2efef5786fa688102ea3909985ce0c314943f9d0b973c6",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1301],
    "primaryOutputId": 1301,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 128,
    "actionKey": "b9fa15c05f4cc30c43bc7519c08a34e3a5645a15a097afb4b1fb0dcc321f8a69",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [801],
    "primaryOutputId": 801,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "acaaffca5b3763c4c9b17cf10bea8bd21e3a5c5b194db2d6312e9289e58fd448",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [978],
    "outputIds": [1687, 1688, 1689, 1690],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/persist/test/com/google/inject/persist/AllTestsSuite_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 1687,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "3deb76444784db8daa4ad9bc6a3edb2ab2acebbc346b73d72c4a8f99331f2b2f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [984],
    "outputIds": [1691],
    "primaryOutputId": 1691,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "9fb6cf8e254b5fe75e140b07eb0bc612c200bf9b17e238d6adbe5bc89736f644",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1692],
    "primaryOutputId": 1692,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/persist/test/com/google/inject/persist/AllTestsSuite_stack_trace_OFF.jar:${RUNPATH}extensions/persist/test/com/google/inject/persist/libtests.jar:${RUNPATH}extensions/persist/test/com/google/inject/persist/config/jpa-manifest.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/persist/src/com/google/inject/persist/libpersist.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/persistence/jakarta.persistence-api/3.0.0/jakarta.persistence-api-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hibernate/hibernate-core-jakarta/5.6.15.Final/hibernate-core-jakarta-5.6.15.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/activation/jakarta.activation-api/2.0.1/jakarta.activation-api-2.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/jboss/jandex/2.4.2.Final/jandex-2.4.2.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy/1.12.18/byte-buddy-1.12.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/transaction/jakarta.transaction-api/2.0.0/jakarta.transaction-api-2.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-runtime/3.0.0/jaxb-runtime-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/sun/activation/jakarta.activation/2.0.1/jakarta.activation-2.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-core/3.0.0/jaxb-core-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/sun/istack/istack-commons-runtime/4.0.0/istack-commons-runtime-4.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/3.0.1/jakarta.xml.bind-api-3.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/glassfish/jaxb/txw2/3.0.0/txw2-3.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hsqldb/hsqldb-j5/2.0.0/hsqldb-j5-2.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/mockito/mockito-core/4.2.0/mockito-core-4.2.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy-agent/1.12.4/byte-buddy-agent-1.12.4.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/objenesis/objenesis/3.2/objenesis-3.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.persist.gen_tests_OFF_stack_trace_OFF"
    }]
  }, {
    "targetId": 129,
    "actionKey": "3f13f1972fc75fcc28c934abd9f0a148e5a11b271a1c08885c8507f6daad0e2a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [985],
    "outputIds": [1693],
    "primaryOutputId": 1693,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "d4a3d9f841f65b49566e815ac4dca12ba65538656356e1452253552def21de26",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1694],
    "primaryOutputId": 1694,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "45e2b591a463ffb64f71073b448296d6b8b6d344c9fdba283773b6112cd14c09",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [987],
    "outputIds": [1695],
    "primaryOutputId": 1695,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [988],
    "outputIds": [1696],
    "primaryOutputId": 1696,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "cf51efa8f06a0f6da4bd0eb7dea80dbc235aed55fb19e1065145f38ac6a783f2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [993],
    "outputIds": [1697],
    "primaryOutputId": 1697,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1698],
    "primaryOutputId": 1698,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [995],
    "outputIds": [1699, 1700],
    "primaryOutputId": 1699,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 130,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1701],
    "primaryOutputId": 1701,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 130,
    "actionKey": "8e85e1d5c2e3967d921cd2ee5c7fc3f7dccc2a879ce04427eeef996b066ca765",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [996],
    "outputIds": [1702],
    "primaryOutputId": 1702,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 131,
    "actionKey": "538f5429d048b6c793a42502fc0e5d45577844fa643767610aec874dcd08c226",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [999],
    "outputIds": [1703, 1704, 1705],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1703,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 131,
    "actionKey": "0c282b4f961301bd12d3a75ca28c9cb1909be6281659f55aa45b7bf8a353f8a9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [973],
    "primaryOutputId": 973,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "56f327e1864cf8acad2a0a3ea3bac5d6408cb0a01519ba756fb879df503b2445",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1001],
    "outputIds": [1706, 1707, 1708, 1709],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.jdeps"
    }],
    "primaryOutputId": 1706,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "4537c96075539cf7824249cc969e0af3c800f8be62d1ca4dc47e82028f5d5825",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1007],
    "outputIds": [1710],
    "primaryOutputId": 1710,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "453e2d7e735dcc4ec861b84c5c179556e2065431f1c2e8c0603370c26d24c0e7",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1711],
    "primaryOutputId": 1711,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.jar:${RUNPATH}extensions/assistedinject/test/com/google/inject/assistedinject/libSubpackageTestPrivateFallbackOnly.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/assistedinject/src/com/google/inject/assistedinject/libassistedinject.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dOFF -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.assistedinject.gen_SubpackageTestPrivateFallbackOnly_tests_OFF_SubpackageTestPrivateFallbackOnly_stack_trace_OFF"
    }]
  }, {
    "targetId": 132,
    "actionKey": "4acf74a2060b7505adc796cbd6fcc1610e56cecdf19cd3d5add3f6eb3598ddff",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1008],
    "outputIds": [1712],
    "primaryOutputId": 1712,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "9203db3641d2eb4e0afabbbdc2a2f35a68886c2bd5d40f3878d071124f55a5da",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1713],
    "primaryOutputId": 1713,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "474936a869939a09167c655407ccaecc52aa3b87cb0ec5451f590126e1b21400",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [1010],
    "outputIds": [1714],
    "primaryOutputId": 1714,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [1011],
    "outputIds": [1715],
    "primaryOutputId": 1715,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "20e123739621f9cf8803054f00f3f29ebab963afc37fc08cf2dfd166354fea90",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [1016],
    "outputIds": [1716],
    "primaryOutputId": 1716,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1717],
    "primaryOutputId": 1717,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [1018],
    "outputIds": [1718, 1719],
    "primaryOutputId": 1718,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "c0c2faf6cd631fbcf2dc2eeafd9bca8e68737ef6e7a39d1c012f4a0ba755d07f",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1019],
    "outputIds": [979, 1722, 1723, 1724],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/test/com/google/inject/spring/libtests.jdeps"
    }],
    "primaryOutputId": 979,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "caa6d78db1d0aeb04b9a3297e73f3326a4fbca381fe2d7e9f2052781278acadd",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1027],
    "outputIds": [961, 966],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/test/com/google/inject/spring/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 961,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "0c732e90b488b7bc9ee9630e1a8fea9afe1cc147bd870b91dc375ae7cea1b085",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1028],
    "outputIds": [974],
    "primaryOutputId": 974,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "1d20f3b9daab52935c8ccb4381ff85d5cd4a7b8d1056ad8114738e7e79a72bdf",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1029],
    "outputIds": [1725, 1726, 1727, 1728],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/google/inject/errors/AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.jdeps"
    }],
    "primaryOutputId": 1725,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "04e2ba398218f287c880b336601b644121efe227a5124db06cfc6986d03ecf8d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1035],
    "outputIds": [1729],
    "primaryOutputId": 1729,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "591a8b26ea2e80feb8de7c4fbcb4ecba662d6fc26534abdfbd3757fa0c189375",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1730],
    "primaryOutputId": 1730,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/google/inject/errors/AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.jar:${RUNPATH}core/test/com/google/inject/errors/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Dguice_include_stack_traces\u003dONLY_FOR_DECLARING_SOURCE -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.errors.gen_tests_stack_traceONLY_FOR_DECLARING_SOURCE_stack_trace_ONLY_FOR_DECLARING_SOURCE"
    }]
  }, {
    "targetId": 134,
    "actionKey": "b7d077ef58c560a444066f3e7ea8e51f87ef85b41fbc583cd9573b433935acd4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1036],
    "outputIds": [1731],
    "primaryOutputId": 1731,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "d28c6725126a0592d427f949ba07bff6bcad65f49508f0f9f085e49008ad31e3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1732],
    "primaryOutputId": 1732,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "7afce3e3d69b9090e90e239c1fa3bf0c6cd19a4d17eef71c5b3298faa855a126",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [1038],
    "outputIds": [1733],
    "primaryOutputId": 1733,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [1039],
    "outputIds": [1734],
    "primaryOutputId": 1734,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "7b620dee81cef15f1359224a6ddd93ff2c5e9173c0952fe524f988b42498003d",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [1044],
    "outputIds": [1735],
    "primaryOutputId": 1735,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1736],
    "primaryOutputId": 1736,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [1046],
    "outputIds": [1737, 1738],
    "primaryOutputId": 1737,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 135,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1739],
    "primaryOutputId": 1739,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 135,
    "actionKey": "61616f3f0c0d5ca33c0f83f6bc8e8c659d7fe3c3b131040096e4479f57cb287e",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [1047],
    "outputIds": [1740],
    "primaryOutputId": 1740,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "e98f3af9a36e5aabdb4da72456504a8a0d4ad471d47b7ec578e20030f741697d",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1050],
    "outputIds": [905, 1741, 1742, 1743],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/src/com/google/inject/testing/throwingproviders/libthrowingproviders.jdeps"
    }],
    "primaryOutputId": 905,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "048bea5753a1e8fcec06f93b7d06d9071bed3d2c2591291e11dda740a342468d",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1056],
    "outputIds": [379, 380],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/src/com/google/inject/testing/throwingproviders/libthrowingproviders-hjar.jdeps"
    }],
    "primaryOutputId": 379,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "43c37b82542d50433f07738e22da1a2c2291d015f9bd4f00982d17606f123a0c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1057],
    "outputIds": [894],
    "primaryOutputId": 894,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "055cb2be3c25a4d133c8460c733e38b2553a40bc3afb122905d9fc025ea6076c",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [478],
    "primaryOutputId": 478,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "50af33fe59f75a1496acd293cd14335378583672d288072796aa2e4c85ace6b5",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1058],
    "outputIds": [1419, 1749, 1750, 1751],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/libtests.jdeps"
    }],
    "primaryOutputId": 1419,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "9ae6411a3abfa3a16e2a708d1b6178eacda1e8638b20f4a100dea0cab8922cdd",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1065],
    "outputIds": [1405, 1408],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/libtests-hjar.jdeps"
    }],
    "primaryOutputId": 1405,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "0d2d70185e24f028e488b92a5feb6091cba4fe22adde05d403d5b1b49ac79312",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1066],
    "outputIds": [1415],
    "primaryOutputId": 1415,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "e2479982e1d174571e1143c14287c369b5762bcaa0779d3b0face79b5dccdf00",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1068],
    "outputIds": [1752, 1753, 1754, 1755],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/test/com/googlecode/guice/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1752,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "e4c52ddfe4637b776b9e12a7468162beb4b306b53bdc04b0da2ba81ad57b82fc",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1074],
    "outputIds": [1756],
    "primaryOutputId": 1756,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "a17d9a48759b15f893f765769e6703851ac4fffc16a9e407ac737a5ca97cc15b",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1757],
    "primaryOutputId": 1757,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}core/test/com/googlecode/guice/AllTestsSuite.jar:${RUNPATH}core/test/com/googlecode/guice/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/apache/felix/org.apache.felix.framework/3.0.5/org.apache.felix.framework-3.0.5.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.googlecode.guice.gen_tests"
    }]
  }, {
    "targetId": 139,
    "actionKey": "c416450a2d7a62840808cee49710dbc2076a03642d5592361ebe810dc6132ced",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1075],
    "outputIds": [1758],
    "primaryOutputId": 1758,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "337f8a4c4adfe0d04ede01dfdaff9612826da5ccc465eaf388344b61ced05736",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1759],
    "primaryOutputId": 1759,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "708b33e9360b8b1360a4c305d70c3909b3451ecca023834b3fc9ce5c9461f44a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [1077],
    "outputIds": [1760],
    "primaryOutputId": 1760,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [1078],
    "outputIds": [1761],
    "primaryOutputId": 1761,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "c49c40fa6a555216fefce583969bf61e237791bbb4c9fbfbed758a14b22d682e",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [1083],
    "outputIds": [1762],
    "primaryOutputId": 1762,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1763],
    "primaryOutputId": 1763,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [1085],
    "outputIds": [1764, 1765],
    "primaryOutputId": 1764,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 140,
    "actionKey": "dca4b0ffc94252709e2d08206010199b6412ea324b88a307bdd2a90a2359009b",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1454],
    "primaryOutputId": 1454,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "cb04163516bd58ea5c8ac56dd48b6076ae4e8440af29bb270f1b6467eb428a57",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1086],
    "outputIds": [1766, 1767, 1768, 1769],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/test/com/google/inject/spring/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1766,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "11535074284f90b47165fdf8d9ca19a9bf9b505636973b309218f79399f005be",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1092],
    "outputIds": [1770],
    "primaryOutputId": 1770,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "df0df176681a640604bd85a56d1e8d524b2e70393d706bf626ab129f9c57681f",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1771],
    "primaryOutputId": 1771,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/spring/test/com/google/inject/spring/AllTestsSuite.jar:${RUNPATH}extensions/spring/test/com/google/inject/spring/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}extensions/spring/src/com/google/inject/spring/libspring.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-beans/5.3.18/spring-beans-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-core/5.3.18/spring-core-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/springframework/spring-jcl/5.3.18/spring-jcl-5.3.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.spring.gen_tests"
    }]
  }, {
    "targetId": 141,
    "actionKey": "5a11cd28154adf3d23c84dd04c9f57939565b5a4b592558e9cdd9110aab2b2b8",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1093],
    "outputIds": [1772],
    "primaryOutputId": 1772,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "c8db5c6c60768ecfc8d3bf7a3d1a02c786dd27518a77e06daa372d5106e099d2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1773],
    "primaryOutputId": 1773,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "8fa9309d210bedb7f8768a628cfd54a526f1efdcc6249df9662e48889fecef57",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [1095],
    "outputIds": [1774],
    "primaryOutputId": 1774,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [1096],
    "outputIds": [1775],
    "primaryOutputId": 1775,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "9ce03fd5356049586ae9ff27315f8fe021ac46b956660b1277c7bdcb579f2f38",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [1101],
    "outputIds": [1776],
    "primaryOutputId": 1776,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1777],
    "primaryOutputId": 1777,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [1103],
    "outputIds": [1778, 1779],
    "primaryOutputId": 1778,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "d3921438d5b90fb65e8f0d4b2dbb1ce6b8450b0c7e7d72a8d559f86d1822644a",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1104],
    "outputIds": [1314, 1781, 1782, 1783],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/libSubpackageTestPrivateFallbackOnly.jdeps"
    }],
    "primaryOutputId": 1314,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "dd6edb8ebdb7bdcc99da8e66f8f7eb4695cbad6d2752a89890954f6899fd723c",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1111],
    "outputIds": [1302, 1303],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/assistedinject/test/com/google/inject/assistedinject/libSubpackageTestPrivateFallbackOnly-hjar.jdeps"
    }],
    "primaryOutputId": 1302,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "8921c35601870f30884968d1f0fb23a9e7e50b2cd8eed68ffa285b3dc46554b3",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1112],
    "outputIds": [1310],
    "primaryOutputId": 1310,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "351587c9e28fdb39a3a0c18b585ae809e63aa83bcea68b91b16e89dae8fab532",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1113],
    "outputIds": [233, 1784, 1785, 1786],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libannotations.jdeps"
    }],
    "primaryOutputId": 233,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "825c4e8959937950ce1e28ea48fe789aafc4a65c451e067b0b9dc5f54fde5755",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1119],
    "outputIds": [150, 164],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/core/src/com/google/inject/libannotations-hjar.jdeps"
    }],
    "primaryOutputId": 150,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "19b19acfff7f8867ed08dc5a9604bd7cbf8fd04e982dcf5607622d115b440181",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1120],
    "outputIds": [220],
    "primaryOutputId": 220,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "471a1b254f36eff465a02c84c8ac60978c5c683c1f61eac11fc81bb93288a4f5",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1122],
    "outputIds": [494, 1787, 1788, 1789],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/src/com/google/inject/daggeradapter/libdaggeradapter.jdeps"
    }],
    "primaryOutputId": 494,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "69d99cce7f42dbe04f0194676d3120d6d39a76d9dda7ff94e43791adcdc42c00",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1128],
    "outputIds": [672, 797],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/dagger-adapter/src/com/google/inject/daggeradapter/libdaggeradapter-hjar.jdeps"
    }],
    "primaryOutputId": 672,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "2b69ffb58173b6eea342a6f1ddcad55241b35f23f44490a2cddcfbd081e1b996",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1129],
    "outputIds": [683],
    "primaryOutputId": 683,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "1ecfccc2ed6e64f94e4f1165c5e3ee7689194065a031b469d89381b5ee7aaf09",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1131],
    "outputIds": [978, 1790, 1791, 1792],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/src/com/google/inject/spring/libspring.jdeps"
    }],
    "primaryOutputId": 978,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "6e199246733606a8b0b59801288b62fdb7ec80e4ac54cd501416129d5a9412d0",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1137],
    "outputIds": [965, 1721],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/spring/src/com/google/inject/spring/libspring-hjar.jdeps"
    }],
    "primaryOutputId": 965,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "bc091a04aa7c2b040eb9e7f7f18fc121955e7ee3ad4a88616c7e1c774d701efb",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1138],
    "outputIds": [503],
    "primaryOutputId": 503,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 146,
    "actionKey": "4038ebfd1b55118400b24a83bf803bd2d41b69beff7ff54227a1338491e51f03",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [841],
    "primaryOutputId": 841,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 147,
    "actionKey": "9cb8a32a9862f798f0b0d82fbbd7c5f6f8411bcef8b569302745a0fb96ccd307",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1793],
    "primaryOutputId": 1793,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - AssistedInject"
    }, {
      "key": "{artifact_id}",
      "value": "guice-assistedinject"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.errorprone\u003c/groupId\u003e\n  \u003cartifactId\u003eerror_prone_annotations\u003c/artifactId\u003e\n  \u003cversion\u003e2.18.0\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 148,
    "actionKey": "780bb59fe573110de946228e03c131796731d3d804ba5795647a0774377d1e46",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1140],
    "outputIds": [904, 1794, 1795],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 904,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "434f08f97bd3427923fba32b8fdb717fc994ef4832d83d4cb944bb9158bfbea1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [893],
    "primaryOutputId": 893,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 149,
    "actionKey": "d45640cca8392c2d6013b1ff4b630a89c101557940810876691438c5f781d0cb",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [209],
    "primaryOutputId": 209,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 150,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1796],
    "primaryOutputId": 1796,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 150,
    "actionKey": "216c94eeaad8124b53567184558dc8b85da86abaca1c3eb7e7a549b53a0e72a5",
    "mnemonic": "Action",
    "configurationId": 1,
    "inputDepSetIds": [1142],
    "outputIds": [1797],
    "primaryOutputId": 1797,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "500bad2d4d9442cd060949ca0fce9fb87e97a4d914f34e63fef569796a8cf449",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1145],
    "outputIds": [1798, 1799, 1800],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1798,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "4d4135126e765459052e8fc34721569f6fdc7817caf1300e09363b31a3328608",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [226],
    "primaryOutputId": 226,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "f1766d5e5167fe8b4282670658e97b906f57677f55a2b63a63424e21f2b9e0cf",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [1801],
    "primaryOutputId": 1801,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: pom-template.xml",
    "substitutions": [{
      "key": "{artifact_name}",
      "value": "Google Guice - Extensions - Servlet"
    }, {
      "key": "{artifact_id}",
      "value": "guice-servlet"
    }, {
      "key": "{artifact_group_id}",
      "value": "com.google.inject.extensions"
    }, {
      "key": "{packaging}",
      "value": "jar"
    }, {
      "key": "{generated_bzl_deps}",
      "value": "\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.inject\u003c/groupId\u003e\n  \u003cartifactId\u003eguice\u003c/artifactId\u003e\n  \u003cversion\u003e${project.version}\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n  \u003cartifactId\u003eguava\u003c/artifactId\u003e\n  \u003cversion\u003e32.0.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.inject\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.inject-api\u003c/artifactId\u003e\n  \u003cversion\u003e2.0.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n  \u003cgroupId\u003ejakarta.servlet\u003c/groupId\u003e\n  \u003cartifactId\u003ejakarta.servlet-api\u003c/artifactId\u003e\n  \u003cversion\u003e5.0.0\u003c/version\u003e\n\u003c/dependency\u003e"
    }, {
      "key": "{pom_version}",
      "value": "LOCAL-SNAPSHOT"
    }]
  }, {
    "targetId": 153,
    "actionKey": "9cb28e21cc70406acac72135ec912cf015c48aca6e80e378ccce100f6a1eb910",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1147],
    "outputIds": [239, 1802, 1803, 1804],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/src/com/google/inject/testing/fieldbinder/libfieldbinder.jdeps"
    }],
    "primaryOutputId": 239,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 153,
    "actionKey": "e68dc010d372fcca7c1f8b1ae9517eeb8db55f870940a71eb3ba41e368af607c",
    "mnemonic": "Turbine",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1153],
    "outputIds": [212, 898],
    "executionInfo": [{
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/testlib/src/com/google/inject/testing/fieldbinder/libfieldbinder-hjar.jdeps"
    }],
    "primaryOutputId": 212,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 153,
    "actionKey": "b65477034e4477126bd23af124a1c74edd735e0cf2566dfc7276105f61eb90b3",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [1154],
    "outputIds": [228],
    "primaryOutputId": 228,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "1d23971c4af6df123598c44affc72a4665a4bc5fe46c40accd11fecddfb94c12",
    "mnemonic": "Javac",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1156],
    "outputIds": [1805, 1806, 1807, 1808],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }, {
      "key": "internal-inline-outputs",
      "value": "bazel-out/k8-fastbuild/bin/extensions/servlet/test/com/google/inject/servlet/AllTestsSuite.jdeps"
    }],
    "primaryOutputId": 1805,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "b28516ed6caaed553e8c66511e2f25760b9b6995cc84b9820a596337809e7258",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1162],
    "outputIds": [1809],
    "primaryOutputId": 1809,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "0f8b40ebbd56abe19c1f154fc814fa0965528b2bbaf4b19696558d5c5ef846f4",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "outputIds": [1810],
    "primaryOutputId": 1810,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "__main__/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}extensions/servlet/test/com/google/inject/servlet/AllTestsSuite.jar:${RUNPATH}extensions/servlet/test/com/google/inject/servlet/libtests.jar:${RUNPATH}core/src/com/google/inject/libinject.jar:${RUNPATH}core/src/com/google/inject/libannotations.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:${RUNPATH}core/src/com/google/inject/libimplemented_by.jar:${RUNPATH}core/src/com/google/inject/libprovided_by.jar:${RUNPATH}core/src/com/google/inject/libcaller_finder_common.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava/32.0.0-jre/guava-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/9.5/asm-9.5.jar:${RUNPATH}core/test/com/google/inject/libtestsupport.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/guava/guava-testlib/32.0.0-jre/guava-testlib-32.0.0-jre.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/extensions/truth-java8-extension/1.1.3/truth-java8-extension-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/truth/truth/1.1.3/truth-1.1.3.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/com/google/auto/value/auto-value-annotations/1.8.1/auto-value-annotations-1.8.1.jar:${RUNPATH}extensions/servlet/src/com/google/inject/servlet/libservlet.jar:${RUNPATH}extensions/servlet/src/com/google/inject/servlet/librequest-scoped-annotation.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/mockito/mockito-core/4.2.0/mockito-core-4.2.0.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy/1.12.18/byte-buddy-1.12.18.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/net/bytebuddy/byte-buddy-agent/1.12.4/byte-buddy-agent-1.12.4.jar:${RUNPATH}../maven/v1/https/repo1.maven.org/maven2/org/objenesis/objenesis/3.2/objenesis-3.2.jar:${RUNPATH}../remote_java_tools/java_tools/Runner_deploy.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.testing.junit.runner.BazelTestRunner"
    }, {
      "key": "%jvm_flags%",
      "value": "-Djava.security.manager\u003dallow -ea -Dbazel.test_suite\u003dcom.google.inject.servlet.gen_tests"
    }]
  }, {
    "targetId": 154,
    "actionKey": "2e155c1f941003fd153d11a860ddcfc56b7073bb581ee1cba8de45e44eea5c3f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 2,
    "inputDepSetIds": [1163],
    "outputIds": [1811],
    "primaryOutputId": 1811,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "ae3a7aa0f6442bb88046776e331230f737b0faa9607814cfe11dd7a51e6c86a2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1812],
    "primaryOutputId": 1812,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "8807f1433f0c4ea0bde97a539b81d4be7262f0a8f34ef9d58cffce22dc8174a6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [1165],
    "outputIds": [1813],
    "primaryOutputId": 1813,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [1166],
    "outputIds": [1814],
    "primaryOutputId": 1814,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "e906a6c6050595f0a3a2739fcdca4b6ac623f9dcd81aa0f969853d429360c624",
    "mnemonic": "JavaDeployJar",
    "configurationId": 2,
    "inputDepSetIds": [1171],
    "outputIds": [1815],
    "primaryOutputId": 1815,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1816],
    "primaryOutputId": 1816,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [1173],
    "outputIds": [1817, 1818],
    "primaryOutputId": 1817,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "278efc475c1d7278744a3f0f7618524de2d32c2cfcc9f67f9282c1caf5eea47d",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1174],
    "outputIds": [159],
    "primaryOutputId": 159,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 156,
    "actionKey": "189d3a7b98b5177349e3972e8d1bafa3095fd7bf1c05ec5b3a1dc5d219997962",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1177],
    "outputIds": [450],
    "primaryOutputId": 450,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "5bdfc39bfe46e3c51233ad611b2da79d4df470a61ac1441ed265b739441fb10d",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1178],
    "outputIds": [1823],
    "primaryOutputId": 1823,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "7c1e1980a339c4344d100d280e43a874884cc01b19b4a37d4b2b1a90f1892c96",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1179],
    "outputIds": [185],
    "primaryOutputId": 185,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "b33cd650355222ca7bfab22ae4dbdf2cd0e4c6628631f1c51d44dd8eaa67037a",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1180],
    "outputIds": [962],
    "primaryOutputId": 962,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "7a3bb43a25ed34a36869b6a961c676ad8f0bf0e8d2dabb28bc44c1626a410eaf",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1181],
    "outputIds": [163],
    "primaryOutputId": 163,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 161,
    "actionKey": "c376aec4345caace555985601416a126c8f2134ef5155a26bd825473fbd5f6cb",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1182],
    "outputIds": [162],
    "primaryOutputId": 162,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "6f95d6f6b54ceb2371bfd54d54618e763927b60bac5437fadf0d5e2bcfff9362",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1183],
    "outputIds": [1406],
    "primaryOutputId": 1406,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 163,
    "actionKey": "602db840effa04c188fb42d6a70125579f995204149e0915f81a7c66d8fc7ae0",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1184],
    "outputIds": [190],
    "primaryOutputId": 190,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "4578818a638a995f7ae1b68de806445aeb8126a57973b66f27a317aba03cda00",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1185],
    "outputIds": [670],
    "primaryOutputId": 670,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "db699f7143c2ec98b48f7966b651e803dcb236ca897eea67409ac7d18f3db131",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1186],
    "outputIds": [408],
    "primaryOutputId": 408,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 166,
    "actionKey": "853f08c455430bda7e9b01c761e3cc898c56a23e6a808370ce92625cf2ac73f3",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1187],
    "outputIds": [675],
    "primaryOutputId": 675,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "ed844597b4fdaf8e29519dc9ed8043b5c0619f8108942b5b2bc9d0c8ed5b6150",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1188],
    "outputIds": [407],
    "primaryOutputId": 407,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "c1f244bab1f1f72d0aff4943fc622dc9738fa5b693be941b7710014c9e2ddc46",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1189],
    "outputIds": [1825],
    "primaryOutputId": 1825,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 169,
    "actionKey": "0ad63a4b29aa639abe859e1c4654041c8472489972572259f3af512fce1e31af",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1190],
    "outputIds": [186],
    "primaryOutputId": 186,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 170,
    "actionKey": "ff8f3a9e559fdf626fac10283e20c296b7e14578e3f0fc1565ffeaa4834b27b6",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1191],
    "outputIds": [156],
    "primaryOutputId": 156,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "2039a810afa0f5d316adeca43afa50a2786f498d687b3ed069f253e4b264be2f",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1192],
    "outputIds": [739],
    "primaryOutputId": 739,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "0fa1e28ded70e5daaaceb6be8510d243fac047797cdc3ea65e28f9dad68728e8",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1193],
    "outputIds": [1827],
    "primaryOutputId": 1827,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "e9793931617c7b29a600ced9a22266882b72491d46f1b49d4d96ff480eb8a33e",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1194],
    "outputIds": [451],
    "primaryOutputId": 451,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "afd3040f61e75589ddf8e1d802639d454b20afd8008ab7e445a60f0bed579f2e",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1195],
    "outputIds": [183],
    "primaryOutputId": 183,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "e54ad62d0b56f791060f7634f0649897705d3a4e4a8a7eb967aadfcf77cc4e48",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1196],
    "outputIds": [964],
    "primaryOutputId": 964,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "8f19916f6b8baaba61cc3d5d071ec7558aefa092ba7ab7593e45e00f4b46af38",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1197],
    "outputIds": [673],
    "primaryOutputId": 673,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "7f4fabacdd63a64584c3d6bd083aa367179c69607222500fd582d01ec580825c",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1198],
    "outputIds": [1267],
    "primaryOutputId": 1267,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "4aea30be1b47d88c8931b94d524ee5257dd22f345805f2829fc22148be06c4d2",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1199],
    "outputIds": [1407],
    "primaryOutputId": 1407,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "323cc1dd7a8bcf65f4018640af3d6f0ed15d382d1c38b16a717d779bda631ad2",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1200],
    "outputIds": [1266],
    "primaryOutputId": 1266,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "bc387bdba21ce6dd60fa1aff7b749da4e1c6ab4387a1cec311f5928e7c1a03f0",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1201],
    "outputIds": [452],
    "primaryOutputId": 452,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "982aba2bd344397228ebbbcbebfbf77bf147d7571aa8f205a97103cd64ac0a25",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1202],
    "outputIds": [184],
    "primaryOutputId": 184,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "f61a598cecddcdbe6cc781a33fefa4862b278a690a6269f0a206747644ebe085",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1203],
    "outputIds": [155],
    "primaryOutputId": 155,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 183,
    "actionKey": "0284380c6c43d15ba160fe38a0e00a6985886dc553cfbb3b8c518ef82eca34db",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1204],
    "outputIds": [154],
    "primaryOutputId": 154,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "4bb95f41ec5cff3d68732355fe0049d2785ac635c90cd51d8a4593ac681f7d6e",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1205],
    "outputIds": [453],
    "primaryOutputId": 453,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "787b61e57820ea767fa52c0bfbf8faf5c215f38b994119a4eeb525a8ca92cd67",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1206],
    "outputIds": [1829],
    "primaryOutputId": 1829,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "b51a31339bee32b36019a6dac800825719d759f0e3982f7a17bc76c1b7b82753",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1207],
    "outputIds": [461],
    "primaryOutputId": 461,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 187,
    "actionKey": "c9b2a7dff332bcf76b430a949e05c0385588550f3583c2c9737e0c0ccfaac287",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1208],
    "outputIds": [963],
    "primaryOutputId": 963,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "c134621117b7aac05ab1e48cabb769a5bdb59396ce2646d40860c92cf04ff027",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1209],
    "outputIds": [1831],
    "primaryOutputId": 1831,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "4e974da16ab2a1d4a7585be6d3df4f4f7842fcbe74403fbca513590788a40db8",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1210],
    "outputIds": [189],
    "primaryOutputId": 189,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 190,
    "actionKey": "3b13cd8ebbe746849b59ae72b7faaba8645efc4f2dc678919a6fd5513f9892e6",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1211],
    "outputIds": [469],
    "primaryOutputId": 469,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "eca5280c6e03b69a665d8c2b06a98f111c60f4b0b21b46e44676b2f5d1850011",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1212],
    "outputIds": [157],
    "primaryOutputId": 157,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "89ff2f311b5e46294f6701421827540de60bedc6aa3772b1daa933643116b023",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1213],
    "outputIds": [462],
    "primaryOutputId": 462,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "442e65f3c0159ed7e5c657b6f50d9aceacec4db1327496add727e1b9d7d70788",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1214],
    "outputIds": [1833],
    "primaryOutputId": 1833,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "993f979ff129463f046059c8c3113e3d44eef1efdbcee3c604a4d5cc2463cb25",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1215],
    "outputIds": [464],
    "primaryOutputId": 464,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "845c66e3acf57f31c85d06df5c848467b095ca165fffd3a52719532b40e9d619",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1216],
    "outputIds": [1835],
    "primaryOutputId": 1835,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "171710f8a68c6c99a5af4d11d246179f06d07cf365ecf49651aad89bc621b6b1",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1217],
    "outputIds": [465],
    "primaryOutputId": 465,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 197,
    "actionKey": "6ccdb7aa6505b2a8fa6e60fc2c993ff91758ffc8bd1dcec4c38405baee1c1f9c",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1218],
    "outputIds": [467],
    "primaryOutputId": 467,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "bf9ac82a5b5631147e071a9dc7f894cdd0fc588131a8e5936e6eed6ec5e5bac3",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1219],
    "outputIds": [1268],
    "primaryOutputId": 1268,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "4cfff69c638bacec2b30794a3e5cebdaf0a7b1ee322a6b7b7a10d183d87a695f",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1220],
    "outputIds": [454],
    "primaryOutputId": 454,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "15678797993c9f7a15d658e7abc9f179565589fcf471669508c479eaf9e5f909",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1221],
    "outputIds": [1837],
    "primaryOutputId": 1837,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "6ea33e167e7da17a619c99b00fcb880f7503503855b72b49efff5e29959a88f5",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1222],
    "outputIds": [671],
    "primaryOutputId": 671,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "67d4e318286ac6d46c1065ba03372ab9c9f11a917003284fdf9cdda979776e62",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1223],
    "outputIds": [455],
    "primaryOutputId": 455,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "6125ea03345571313a0895d4e6191f1b4899e3171bb05984e95b5e96bf10baf8",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1224],
    "outputIds": [1839],
    "primaryOutputId": 1839,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 204,
    "actionKey": "f813918443aef9858178d53d121184398aaa4c11fd31f4550ef59c743213c288",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1225],
    "outputIds": [674],
    "primaryOutputId": 674,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "ce4d669990bb8990b69a84edd0774282e4d7d54b1e82a9836c5ade60d5f8eb6b",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1226],
    "outputIds": [1841],
    "primaryOutputId": 1841,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 206,
    "actionKey": "5e7f78ef720baa0ad2c8b309669b5b208c7bf296fd7c04935931dbc7de357766",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1227],
    "outputIds": [160],
    "primaryOutputId": 160,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "ee749164e47d5f04d1b395d5df2cf929c3404f601ce25fe35ffe160c020f6a20",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1228],
    "outputIds": [191],
    "primaryOutputId": 191,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "62887530028c41058b0b559156fcb4d2fae5d8ee08e6413737f56a5d60755324",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1229],
    "outputIds": [468],
    "primaryOutputId": 468,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "96cac7bd5fa5e0d56610e74178c6007c16e2069be99d88924c460a88de7adb35",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1230],
    "outputIds": [1843],
    "primaryOutputId": 1843,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "c18829eeadbbc98217d0eb0ca163981812206a4f05c6f4a8b801a92515300bdb",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1231],
    "outputIds": [158],
    "primaryOutputId": 158,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 211,
    "actionKey": "41c0d89eb3212ef777335f4f845672b81c6fbb269bcd4380fb5cdd99e6b53b3f",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1232],
    "outputIds": [460],
    "primaryOutputId": 460,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 212,
    "actionKey": "072909a74ee9e33897c1e3877990bc37b5f89c15862891e259f91417bb98c342",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1233],
    "outputIds": [1845],
    "primaryOutputId": 1845,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "2f3a863f327f414adefc58983df6562303fa3390523344a04c6ada87e6b39d69",
    "mnemonic": "JavaToolchainCompileClasses",
    "configurationId": 1,
    "inputDepSetIds": [1234],
    "outputIds": [1847],
    "primaryOutputId": 1847,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "7afcf4a01a960f29b2a3c74d4931272634d2c95fda72faebacb19b1835893623",
    "mnemonic": "JavaToolchainCompileBootClasspath",
    "configurationId": 1,
    "inputDepSetIds": [1235],
    "outputIds": [114],
    "primaryOutputId": 114,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 214,
    "actionKey": "e4c70a3cb1dcc256912afd56ed7f86c8815951fc8553415d5173e78ab6e97a94",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1236],
    "outputIds": [466],
    "primaryOutputId": 466,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "7e24eea59fe4bffc43f0daaa45ccf020f017544f63da7fa1904d5d0baadf9c05",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1237],
    "outputIds": [463],
    "primaryOutputId": 463,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 216,
    "actionKey": "f287ef4eee9536531908092880c1facabcfa3781c469e455b42a9106ff6e4fdc",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1238],
    "outputIds": [161],
    "primaryOutputId": 161,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 217,
    "actionKey": "5014692f37697e74bf4f799a78e8740e61f2bbbc37e9a275f02a60af1a01acd0",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1239],
    "outputIds": [1849],
    "primaryOutputId": 1849,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "ca3c487cada984b26801cad55e82db4f4d3ff09047376d4d97409de1ff28bb96",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1240],
    "outputIds": [456],
    "primaryOutputId": 456,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "c13619c40e20abcd7366dc0dd042959b72b17bcfee56e68507d97465be0c18c8",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1241],
    "outputIds": [457],
    "primaryOutputId": 457,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 220,
    "actionKey": "31115b047a32842053f199343b7212f832a7f8f7ea9ad0aca9d608237dfb7bc2",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1242],
    "outputIds": [1851],
    "primaryOutputId": 1851,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "5b73994cf15ff891fa516cd03d29db14b7a0454ec1c3be55d4755f6b24455bf9",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1243],
    "outputIds": [458],
    "primaryOutputId": 458,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "c778290525aa0c938696ca980202ea9dca5fc1e4296aff61a093d01bf802b45a",
    "mnemonic": "CreateCompileJar",
    "configurationId": 1,
    "inputDepSetIds": [1244],
    "outputIds": [459],
    "primaryOutputId": 459,
    "executionPlatform": "@local_config_platform//:host"
  }],
  "targets": [{
    "id": 1,
    "label": "//extensions/grapher/src/com/google/inject/grapher:grapher",
    "ruleClassId": 1
  }, {
    "id": 2,
    "label": "//extensions/throwingproviders/test/com/google/inject/throwingproviders:tests",
    "ruleClassId": 1
  }, {
    "id": 3,
    "label": "//core/test/com/google/inject:add_opens_tests",
    "ruleClassId": 1
  }, {
    "id": 4,
    "label": "//extensions/testlib/test/com/google/inject/testing/fieldbinder:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 5,
    "label": "//extensions/testlib/test/com/google/inject/testing/throwingproviders:tests",
    "ruleClassId": 1
  }, {
    "id": 6,
    "label": "//extensions/persist/src/com/google/inject/persist:guice-persist-javadoc",
    "ruleClassId": 3
  }, {
    "id": 7,
    "label": "//core/test/com/google/inject:AllTestsSuite_custom_class_loading_OFF",
    "ruleClassId": 2
  }, {
    "id": 8,
    "label": "//extensions/persist/test/com/google/inject/persist:tests",
    "ruleClassId": 1
  }, {
    "id": 9,
    "label": "//extensions/testlib/test/com/google/inject/testing/fieldbinder:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 10,
    "label": "//extensions/dagger-adapter/src/com/google/inject/daggeradapter:guice-dagger-adapter",
    "ruleClassId": 4
  }, {
    "id": 11,
    "label": "//extensions/spring/src/com/google/inject/spring:guice-spring-src",
    "ruleClassId": 4
  }, {
    "id": 12,
    "label": "//core/test/com/google/inject:gen_tests_class_loading_OFF_custom_class_loading_OFF",
    "ruleClassId": 5
  }, {
    "id": 13,
    "label": "//extensions/assistedinject/src/com/google/inject/assistedinject:guice-assistedinject-javadoc",
    "ruleClassId": 3
  }, {
    "id": 14,
    "label": "//core/test/com/google/inject:tests",
    "ruleClassId": 1
  }, {
    "id": 15,
    "label": "//extensions/grapher/test/com/google/inject/grapher:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 16,
    "label": "//core/src/com/google/inject:caller_finder_common",
    "ruleClassId": 1
  }, {
    "id": 17,
    "label": "//core/test/com/googlecode/guice:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 18,
    "label": "//core/test/com/google/inject:AllTestsSuite_custom_class_loading_CHILD",
    "ruleClassId": 2
  }, {
    "id": 19,
    "label": "//core/src/com/google/inject:pom",
    "ruleClassId": 6
  }, {
    "id": 20,
    "label": "//extensions/spring/test/com/google/inject/spring:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 21,
    "label": "//extensions/jmx/src/com/google/inject/tools/jmx:guice-jmx-src",
    "ruleClassId": 4
  }, {
    "id": 22,
    "label": "//core/test/com/google/inject:gen_tests_stack_trace_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 23,
    "label": "//extensions/dagger-adapter/test/com/google/inject/daggeradapter:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 24,
    "label": "//core/src/com/google/inject:implemented_by",
    "ruleClassId": 1
  }, {
    "id": 25,
    "label": "//extensions/grapher/test/com/google/inject/grapher:tests",
    "ruleClassId": 1
  }, {
    "id": 26,
    "label": "//extensions/throwingproviders/src/com/google/inject/throwingproviders:guice-throwingproviders-src",
    "ruleClassId": 4
  }, {
    "id": 27,
    "label": "//core/test/com/googlecode/guice:jakarta_tck_test",
    "ruleClassId": 1
  }, {
    "id": 28,
    "label": "//extensions/servlet/test/com/google/inject/servlet:tests",
    "ruleClassId": 1
  }, {
    "id": 29,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 30,
    "label": "//extensions/dagger-adapter/test/com/google/inject/daggeradapter:tests",
    "ruleClassId": 1
  }, {
    "id": 31,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 32,
    "label": "//extensions/persist/src/com/google/inject/persist:guice-persist",
    "ruleClassId": 4
  }, {
    "id": 33,
    "label": "//extensions/persist/src/com/google/inject/persist:guice-persist-src",
    "ruleClassId": 4
  }, {
    "id": 34,
    "label": "//core/test/com/google/inject:gen_tests_class_loading_CHILD_custom_class_loading_CHILD",
    "ruleClassId": 5
  }, {
    "id": 35,
    "label": "//core/test/com/google/inject:AllTestsSuite_custom_class_loading_ANONYMOUS",
    "ruleClassId": 2
  }, {
    "id": 36,
    "label": "//extensions/persist/test/com/google/inject/persist:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 37,
    "label": "//extensions/grapher/src/com/google/inject/grapher:guice-grapher-src",
    "ruleClassId": 4
  }, {
    "id": 38,
    "label": "//extensions/jmx/src/com/google/inject/tools/jmx:guice-jmx-javadoc",
    "ruleClassId": 3
  }, {
    "id": 39,
    "label": "//extensions/testlib/src/com/google/inject/testing:guice-testlib-javadoc",
    "ruleClassId": 3
  }, {
    "id": 40,
    "label": "//extensions/spring/test/com/google/inject/spring:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 41,
    "label": "//extensions/testlib/src/com/google/inject/testing:guice-testlib-src",
    "ruleClassId": 4
  }, {
    "id": 42,
    "label": "//extensions/testlib/test/com/google/inject/testing/fieldbinder:tests",
    "ruleClassId": 1
  }, {
    "id": 43,
    "label": "//extensions/throwingproviders/src/com/google/inject/throwingproviders:pom",
    "ruleClassId": 6
  }, {
    "id": 44,
    "label": "//extensions/testlib/src/com/google/inject/testing:guice-testlib",
    "ruleClassId": 4
  }, {
    "id": 45,
    "label": "//extensions/dagger-adapter/src/com/google/inject/daggeradapter:guice-dagger-adapter-src",
    "ruleClassId": 4
  }, {
    "id": 46,
    "label": "//extensions/servlet/test/com/google/inject/servlet:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 47,
    "label": "//extensions/throwingproviders/src/com/google/inject/throwingproviders:throwingproviders",
    "ruleClassId": 1
  }, {
    "id": 48,
    "label": "//extensions/servlet/test/com/google/inject/servlet:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 49,
    "label": "//extensions/testlib/src/com/google/inject/testing:pom",
    "ruleClassId": 6
  }, {
    "id": 50,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:gen_SubpackageTestPrivateFallbackOnly_tests_OFF_SubpackageTestPrivateFallbackOnly_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 51,
    "label": "//extensions/throwingproviders/test/com/google/inject/throwingproviders:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 52,
    "label": "//extensions/spring/test/com/google/inject/spring:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 53,
    "label": "//extensions/persist/src/com/google/inject/persist:pom",
    "ruleClassId": 6
  }, {
    "id": 54,
    "label": "//core/src/com/google/inject:inject",
    "ruleClassId": 1
  }, {
    "id": 55,
    "label": "//extensions/throwingproviders/test/com/google/inject/throwingproviders:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 56,
    "label": "//extensions/dagger-adapter/test/com/google/inject/daggeradapter:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 57,
    "label": "//extensions/dagger-adapter/src/com/google/inject/daggeradapter:guice-dagger-adapter-javadoc",
    "ruleClassId": 3
  }, {
    "id": 58,
    "label": "//core/test/com/google/inject:testsupport",
    "ruleClassId": 1
  }, {
    "id": 59,
    "label": "//extensions/spring/src/com/google/inject/spring:pom",
    "ruleClassId": 6
  }, {
    "id": 60,
    "label": "//tools:osgi_wrapper",
    "ruleClassId": 7
  }, {
    "id": 61,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 62,
    "label": "//extensions/grapher/src/com/google/inject/grapher:pom",
    "ruleClassId": 6
  }, {
    "id": 63,
    "label": "//core/test/com/google/inject:gen_tests_with_windows_separator_with_windows_separator",
    "ruleClassId": 5
  }, {
    "id": 64,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:AllTestsSuiteSubpackageTestPrivateFallbackOnly",
    "ruleClassId": 2
  }, {
    "id": 65,
    "label": "//extensions/spring/src/com/google/inject/spring:guice-spring-javadoc",
    "ruleClassId": 3
  }, {
    "id": 66,
    "label": "//core/test/com/googlecode/guice:gen_tests_class_loading_CHILD_custom_class_loading_CHILD",
    "ruleClassId": 5
  }, {
    "id": 67,
    "label": "//extensions/grapher/src/com/google/inject/grapher:guice-grapher-javadoc",
    "ruleClassId": 3
  }, {
    "id": 68,
    "label": "//core/test/com/googlecode/guice:gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS",
    "ruleClassId": 5
  }, {
    "id": 69,
    "label": "//extensions/servlet/src/com/google/inject/servlet:request-scoped-annotation",
    "ruleClassId": 1
  }, {
    "id": 70,
    "label": "//core/test/com/googlecode/guice:gen_jakarta_tck_tests_jakarta_tck",
    "ruleClassId": 5
  }, {
    "id": 71,
    "label": "//extensions/jndi/src/com/google/inject/jndi:pom",
    "ruleClassId": 6
  }, {
    "id": 72,
    "label": "//extensions/grapher/test/com/google/inject/grapher:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 73,
    "label": "//extensions/jmx/src/com/google/inject/tools/jmx:pom",
    "ruleClassId": 6
  }, {
    "id": 74,
    "label": "//core/test/com/google/inject:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 75,
    "label": "//core/test/com/google/inject/errors:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 76,
    "label": "//extensions/dagger-adapter/test/com/google/inject/daggeradapter:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 77,
    "label": "//extensions/servlet/test/com/google/inject/servlet:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 78,
    "label": "//extensions/servlet/src/com/google/inject/servlet:guice-servlet-javadoc",
    "ruleClassId": 3
  }, {
    "id": 79,
    "label": "//core/test/com/googlecode/guice:AllTestsSuite_custom_class_loading_ANONYMOUS",
    "ruleClassId": 2
  }, {
    "id": 80,
    "label": "//extensions/testlib/test/com/google/inject/testing/throwingproviders:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 81,
    "label": "//third_party/java/struts2:struts2",
    "ruleClassId": 1
  }, {
    "id": 82,
    "label": "//core/test/com/google/inject/errors:gen_tests_stack_traceONLY_FOR_DECLARING_SOURCE_stack_trace_ONLY_FOR_DECLARING_SOURCE",
    "ruleClassId": 5
  }, {
    "id": 83,
    "label": "//extensions/persist/test/com/google/inject/persist:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 84,
    "label": "//extensions/grapher/src/com/google/inject/grapher:guice-grapher",
    "ruleClassId": 4
  }, {
    "id": 85,
    "label": "//extensions/persist/src/com/google/inject/persist:persist",
    "ruleClassId": 1
  }, {
    "id": 86,
    "label": "//extensions/grapher/test/com/google/inject/grapher:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 87,
    "label": "//core/test/com/googlecode/guice:AllTestsSuite_jakarta_tck",
    "ruleClassId": 2
  }, {
    "id": 88,
    "label": "//core/test/com/googlecode/guice:AllTestsSuite_custom_class_loading_OFF",
    "ruleClassId": 2
  }, {
    "id": 89,
    "label": "//bom:pom",
    "ruleClassId": 6
  }, {
    "id": 90,
    "label": "//extensions/throwingproviders/test/com/google/inject/throwingproviders:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 91,
    "label": "//extensions/persist/test/com/google/inject/persist/config:metainf",
    "ruleClassId": 8
  }, {
    "id": 92,
    "label": "//extensions/jmx/test/com/google/inject/tools/jmx:tests",
    "ruleClassId": 1
  }, {
    "id": 93,
    "label": "//core/test/com/google/inject:AllTestsSuite_with_windows_separator",
    "ruleClassId": 2
  }, {
    "id": 94,
    "label": "//core/src/com/google/inject:guice",
    "ruleClassId": 4
  }, {
    "id": 95,
    "label": "//bom:guice-bom",
    "ruleClassId": 1
  }, {
    "id": 96,
    "label": "//extensions/jmx/src/com/google/inject/tools/jmx:guice-jmx",
    "ruleClassId": 4
  }, {
    "id": 97,
    "label": "//core/test/com/googlecode/guice:AllTestsSuite_custom_class_loading_CHILD",
    "ruleClassId": 2
  }, {
    "id": 98,
    "label": "//extensions/assistedinject/src/com/google/inject/assistedinject:guice-assistedinject",
    "ruleClassId": 4
  }, {
    "id": 99,
    "label": "//extensions/dagger-adapter/src/com/google/inject/daggeradapter:pom",
    "ruleClassId": 6
  }, {
    "id": 100,
    "label": "//core/src/com/google/inject:guice-src",
    "ruleClassId": 4
  }, {
    "id": 101,
    "label": "//extensions/persist/test/com/google/inject/persist:metainf",
    "ruleClassId": 9
  }, {
    "id": 102,
    "label": "//extensions/dagger-adapter/test/com/google/inject/daggeradapter:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 103,
    "label": "//core/test/com/google/inject:gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS",
    "ruleClassId": 5
  }, {
    "id": 104,
    "label": "//third_party/java/junit:junit",
    "ruleClassId": 1
  }, {
    "id": 105,
    "label": "//core/test/com/google/inject:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 106,
    "label": "//:javadoc",
    "ruleClassId": 3
  }, {
    "id": 107,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:tests",
    "ruleClassId": 1
  }, {
    "id": 108,
    "label": "//extensions/jndi/src/com/google/inject/jndi:jndi",
    "ruleClassId": 1
  }, {
    "id": 109,
    "label": "//core/src/com/google/inject:guice-javadoc",
    "ruleClassId": 3
  }, {
    "id": 110,
    "label": "//extensions/jmx/src/com/google/inject/tools/jmx:jmx",
    "ruleClassId": 1
  }, {
    "id": 111,
    "label": "//extensions/jndi/src/com/google/inject/jndi:guice-jndi-javadoc",
    "ruleClassId": 3
  }, {
    "id": 112,
    "label": "//extensions/jndi/src/com/google/inject/jndi:guice-jndi-src",
    "ruleClassId": 4
  }, {
    "id": 113,
    "label": "//extensions/throwingproviders/test/com/google/inject/throwingproviders:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 114,
    "label": "//extensions/servlet/src/com/google/inject/servlet:servlet",
    "ruleClassId": 1
  }, {
    "id": 115,
    "label": "//core/test/com/google/inject:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 116,
    "label": "//extensions/throwingproviders/src/com/google/inject/throwingproviders:guice-throwingproviders-javadoc",
    "ruleClassId": 3
  }, {
    "id": 117,
    "label": "//extensions/testlib/test/com/google/inject/testing/throwingproviders:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 118,
    "label": "//extensions/grapher/test/com/google/inject/grapher:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 119,
    "label": "//extensions/assistedinject/src/com/google/inject/assistedinject:assistedinject",
    "ruleClassId": 1
  }, {
    "id": 120,
    "label": "//extensions/jndi/src/com/google/inject/jndi:guice-jndi",
    "ruleClassId": 4
  }, {
    "id": 121,
    "label": "//core/test/com/google/inject:AllTests",
    "ruleClassId": 1
  }, {
    "id": 122,
    "label": "//extensions/throwingproviders/src/com/google/inject/throwingproviders:guice-throwingproviders",
    "ruleClassId": 4
  }, {
    "id": 123,
    "label": "//core/test/com/google/inject/errors:tests",
    "ruleClassId": 1
  }, {
    "id": 124,
    "label": "//core/src/com/google/inject:provided_by",
    "ruleClassId": 1
  }, {
    "id": 125,
    "label": "//extensions/servlet/src/com/google/inject/servlet:guice-servlet-src",
    "ruleClassId": 4
  }, {
    "id": 126,
    "label": "//core/test/com/google/inject/errors:gen_tests_stack_traceOFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 127,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:gen_SubpackageTestPrivateFallbackOnly_testsSubpackageTestPrivateFallbackOnly",
    "ruleClassId": 5
  }, {
    "id": 128,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 129,
    "label": "//extensions/persist/test/com/google/inject/persist:AllTestsSuite_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 130,
    "label": "//extensions/servlet/src/com/google/inject/servlet:guice-servlet",
    "ruleClassId": 4
  }, {
    "id": 131,
    "label": "//third_party/java/spring:beans",
    "ruleClassId": 1
  }, {
    "id": 132,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF",
    "ruleClassId": 2
  }, {
    "id": 133,
    "label": "//extensions/spring/test/com/google/inject/spring:tests",
    "ruleClassId": 1
  }, {
    "id": 134,
    "label": "//core/test/com/google/inject/errors:AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE",
    "ruleClassId": 2
  }, {
    "id": 135,
    "label": "//extensions/spring/src/com/google/inject/spring:guice-spring",
    "ruleClassId": 4
  }, {
    "id": 136,
    "label": "//extensions/testlib/src/com/google/inject/testing/throwingproviders:throwingproviders",
    "ruleClassId": 1
  }, {
    "id": 137,
    "label": "//extensions/testlib/test/com/google/inject/testing/fieldbinder:gen_tests_OFF_stack_trace_OFF",
    "ruleClassId": 5
  }, {
    "id": 138,
    "label": "//core/test/com/googlecode/guice:tests",
    "ruleClassId": 1
  }, {
    "id": 139,
    "label": "//core/test/com/googlecode/guice:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 140,
    "label": "//core/test/com/googlecode/guice:gen_tests_class_loading_OFF_custom_class_loading_OFF",
    "ruleClassId": 5
  }, {
    "id": 141,
    "label": "//extensions/spring/test/com/google/inject/spring:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 142,
    "label": "//extensions/assistedinject/test/com/google/inject/assistedinject:SubpackageTestPrivateFallbackOnly",
    "ruleClassId": 1
  }, {
    "id": 143,
    "label": "//core/src/com/google/inject:annotations",
    "ruleClassId": 1
  }, {
    "id": 144,
    "label": "//extensions/dagger-adapter/src/com/google/inject/daggeradapter:daggeradapter",
    "ruleClassId": 1
  }, {
    "id": 145,
    "label": "//extensions/spring/src/com/google/inject/spring:spring",
    "ruleClassId": 1
  }, {
    "id": 146,
    "label": "//extensions/persist/test/com/google/inject/persist:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 147,
    "label": "//extensions/assistedinject/src/com/google/inject/assistedinject:pom",
    "ruleClassId": 6
  }, {
    "id": 148,
    "label": "//extensions/testlib/src/com/google/inject/testing:testlib",
    "ruleClassId": 1
  }, {
    "id": 149,
    "label": "//extensions/testlib/test/com/google/inject/testing/fieldbinder:gen_tests",
    "ruleClassId": 5
  }, {
    "id": 150,
    "label": "//extensions/assistedinject/src/com/google/inject/assistedinject:guice-assistedinject-src",
    "ruleClassId": 4
  }, {
    "id": 151,
    "label": "//third_party/java/truth:truth",
    "ruleClassId": 1
  }, {
    "id": 152,
    "label": "//extensions/servlet/src/com/google/inject/servlet:pom",
    "ruleClassId": 6
  }, {
    "id": 153,
    "label": "//extensions/testlib/src/com/google/inject/testing/fieldbinder:fieldbinder",
    "ruleClassId": 1
  }, {
    "id": 154,
    "label": "//extensions/servlet/test/com/google/inject/servlet:AllTestsSuite",
    "ruleClassId": 2
  }, {
    "id": 155,
    "label": "@maven//:com_google_code_findbugs_jsr305",
    "ruleClassId": 10
  }, {
    "id": 156,
    "label": "@maven//:org_hibernate_hibernate_core_jakarta",
    "ruleClassId": 10
  }, {
    "id": 157,
    "label": "@maven//:org_apache_struts_struts2_core",
    "ruleClassId": 10
  }, {
    "id": 158,
    "label": "@maven//:com_google_truth_extensions_truth_java8_extension",
    "ruleClassId": 10
  }, {
    "id": 159,
    "label": "@maven//:org_springframework_spring_core",
    "ruleClassId": 10
  }, {
    "id": 160,
    "label": "@maven//:org_ow2_asm_asm",
    "ruleClassId": 10
  }, {
    "id": 161,
    "label": "@maven//:aopalliance_aopalliance",
    "ruleClassId": 10
  }, {
    "id": 162,
    "label": "@maven//:biz_aQute_bnd",
    "ruleClassId": 10
  }, {
    "id": 163,
    "label": "@maven//:com_google_guava_guava_testlib",
    "ruleClassId": 10
  }, {
    "id": 164,
    "label": "@maven//:com_google_dagger_dagger",
    "ruleClassId": 10
  }, {
    "id": 165,
    "label": "@maven//:jakarta_servlet_jakarta_servlet_api",
    "ruleClassId": 10
  }, {
    "id": 166,
    "label": "@maven//:com_google_auto_value_auto_value",
    "ruleClassId": 10
  }, {
    "id": 167,
    "label": "@maven//:jakarta_persistence_jakarta_persistence_api",
    "ruleClassId": 10
  }, {
    "id": 168,
    "label": "@maven//:org_easymock_easymock",
    "ruleClassId": 10
  }, {
    "id": 169,
    "label": "@maven//:com_google_truth_truth",
    "ruleClassId": 10
  }, {
    "id": 170,
    "label": "@maven//:jakarta_inject_jakarta_inject_api",
    "ruleClassId": 10
  }, {
    "id": 171,
    "label": "@maven//:jakarta_inject_jakarta_inject_tck",
    "ruleClassId": 10
  }, {
    "id": 172,
    "label": "@maven//:org_apache_struts_xwork_xwork_core",
    "ruleClassId": 10
  }, {
    "id": 173,
    "label": "@maven//:org_hsqldb_hsqldb_j5",
    "ruleClassId": 10
  }, {
    "id": 174,
    "label": "@maven//:junit_junit",
    "ruleClassId": 10
  }, {
    "id": 175,
    "label": "@maven//:org_springframework_spring_beans",
    "ruleClassId": 10
  }, {
    "id": 176,
    "label": "@maven//:com_google_dagger_dagger_producers",
    "ruleClassId": 10
  }, {
    "id": 177,
    "label": "@maven//:info_picocli_picocli",
    "ruleClassId": 10
  }, {
    "id": 178,
    "label": "@maven//:org_apache_felix_org_apache_felix_framework",
    "ruleClassId": 10
  }, {
    "id": 179,
    "label": "@maven//:biz_aQute_bnd_bndlib",
    "ruleClassId": 10
  }, {
    "id": 180,
    "label": "@maven//:org_mockito_mockito_core",
    "ruleClassId": 10
  }, {
    "id": 181,
    "label": "@maven//:org_hamcrest_hamcrest",
    "ruleClassId": 10
  }, {
    "id": 182,
    "label": "@maven//:com_google_errorprone_error_prone_annotations",
    "ruleClassId": 10
  }, {
    "id": 183,
    "label": "@maven//:com_google_guava_guava",
    "ruleClassId": 10
  }, {
    "id": 184,
    "label": "@maven//:org_hibernate_common_hibernate_commons_annotations",
    "ruleClassId": 10
  }, {
    "id": 185,
    "label": "@maven//:org_apache_commons_commons_lang3",
    "ruleClassId": 10
  }, {
    "id": 186,
    "label": "@maven//:jakarta_activation_jakarta_activation_api",
    "ruleClassId": 10
  }, {
    "id": 187,
    "label": "@maven//:org_springframework_spring_jcl",
    "ruleClassId": 10
  }, {
    "id": 188,
    "label": "@maven//:ognl_ognl",
    "ruleClassId": 10
  }, {
    "id": 189,
    "label": "@maven//:org_hamcrest_hamcrest_core",
    "ruleClassId": 10
  }, {
    "id": 190,
    "label": "@maven//:org_objenesis_objenesis",
    "ruleClassId": 10
  }, {
    "id": 191,
    "label": "@maven//:com_google_guava_listenablefuture",
    "ruleClassId": 10
  }, {
    "id": 192,
    "label": "@maven//:org_jboss_jandex",
    "ruleClassId": 10
  }, {
    "id": 193,
    "label": "@maven//:commons_fileupload_commons_fileupload",
    "ruleClassId": 10
  }, {
    "id": 194,
    "label": "@maven//:net_bytebuddy_byte_buddy",
    "ruleClassId": 10
  }, {
    "id": 195,
    "label": "@maven//:asm_asm",
    "ruleClassId": 10
  }, {
    "id": 196,
    "label": "@maven//:com_fasterxml_classmate",
    "ruleClassId": 10
  }, {
    "id": 197,
    "label": "@maven//:org_dom4j_dom4j",
    "ruleClassId": 10
  }, {
    "id": 198,
    "label": "@maven//:org_osgi_org_osgi_core",
    "ruleClassId": 10
  }, {
    "id": 199,
    "label": "@maven//:org_jboss_logging_jboss_logging",
    "ruleClassId": 10
  }, {
    "id": 200,
    "label": "@maven//:asm_asm_commons",
    "ruleClassId": 10
  }, {
    "id": 201,
    "label": "@maven//:javax_inject_javax_inject",
    "ruleClassId": 10
  }, {
    "id": 202,
    "label": "@maven//:jakarta_xml_bind_jakarta_xml_bind_api",
    "ruleClassId": 10
  }, {
    "id": 203,
    "label": "@maven//:cglib_cglib_nodep",
    "ruleClassId": 10
  }, {
    "id": 204,
    "label": "@maven//:org_checkerframework_checker_compat_qual",
    "ruleClassId": 10
  }, {
    "id": 205,
    "label": "@maven//:commons_io_commons_io",
    "ruleClassId": 10
  }, {
    "id": 206,
    "label": "@maven//:org_checkerframework_checker_qual",
    "ruleClassId": 10
  }, {
    "id": 207,
    "label": "@maven//:com_google_auto_value_auto_value_annotations",
    "ruleClassId": 10
  }, {
    "id": 208,
    "label": "@maven//:net_bytebuddy_byte_buddy_agent",
    "ruleClassId": 10
  }, {
    "id": 209,
    "label": "@maven//:org_apache_logging_log4j_log4j_api",
    "ruleClassId": 10
  }, {
    "id": 210,
    "label": "@maven//:com_google_j2objc_j2objc_annotations",
    "ruleClassId": 10
  }, {
    "id": 211,
    "label": "@maven//:org_glassfish_jaxb_jaxb_runtime",
    "ruleClassId": 10
  }, {
    "id": 212,
    "label": "@maven//:org_freemarker_freemarker",
    "ruleClassId": 10
  }, {
    "id": 213,
    "label": "@bazel_tools//tools/jdk:platformclasspath",
    "ruleClassId": 11
  }, {
    "id": 214,
    "label": "@maven//:jakarta_transaction_jakarta_transaction_api",
    "ruleClassId": 10
  }, {
    "id": 215,
    "label": "@maven//:antlr_antlr",
    "ruleClassId": 10
  }, {
    "id": 216,
    "label": "@maven//:com_google_guava_failureaccess",
    "ruleClassId": 10
  }, {
    "id": 217,
    "label": "@maven//:asm_asm_tree",
    "ruleClassId": 10
  }, {
    "id": 218,
    "label": "@maven//:com_sun_activation_jakarta_activation",
    "ruleClassId": 10
  }, {
    "id": 219,
    "label": "@maven//:org_glassfish_jaxb_jaxb_core",
    "ruleClassId": 10
  }, {
    "id": 220,
    "label": "@maven//:org_javassist_javassist",
    "ruleClassId": 10
  }, {
    "id": 221,
    "label": "@maven//:com_sun_istack_istack_commons_runtime",
    "ruleClassId": 10
  }, {
    "id": 222,
    "label": "@maven//:org_glassfish_jaxb_txw2",
    "ruleClassId": 10
  }],
  "depSetOfFiles": [{
    "id": 4,
    "directArtifactIds": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  }, {
    "id": 5,
    "directArtifactIds": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
  }, {
    "id": 6,
    "directArtifactIds": [48, 49, 50, 51, 52, 53, 54, 55]
  }, {
    "id": 7,
    "directArtifactIds": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]
  }, {
    "id": 3,
    "transitiveDepSetIds": [4, 5, 6, 7]
  }, {
    "id": 8,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 2,
    "transitiveDepSetIds": [3, 8],
    "directArtifactIds": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148]
  }, {
    "id": 11,
    "directArtifactIds": [149, 150, 151, 152, 153]
  }, {
    "id": 10,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [154]
  }, {
    "id": 14,
    "directArtifactIds": [150, 155, 156]
  }, {
    "id": 15,
    "directArtifactIds": [152, 156]
  }, {
    "id": 16,
    "directArtifactIds": [154, 157, 155, 158, 159, 160, 161]
  }, {
    "id": 13,
    "transitiveDepSetIds": [14, 15, 16],
    "directArtifactIds": [149, 151, 153, 162, 163, 155, 159, 156]
  }, {
    "id": 12,
    "transitiveDepSetIds": [13, 16]
  }, {
    "id": 9,
    "transitiveDepSetIds": [10, 12]
  }, {
    "id": 18,
    "directArtifactIds": [164, 165, 166, 167, 168]
  }, {
    "id": 17,
    "transitiveDepSetIds": [18],
    "directArtifactIds": [164, 165, 166, 167]
  }, {
    "id": 1,
    "transitiveDepSetIds": [2, 9, 17]
  }, {
    "id": 19,
    "transitiveDepSetIds": [3, 10],
    "directArtifactIds": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 173]
  }, {
    "id": 21,
    "directArtifactIds": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148]
  }, {
    "id": 20,
    "transitiveDepSetIds": [21],
    "directArtifactIds": [176]
  }, {
    "id": 24,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 23,
    "transitiveDepSetIds": [3, 24],
    "directArtifactIds": [114, 178, 179, 180, 181, 182]
  }, {
    "id": 27,
    "directArtifactIds": [183, 184]
  }, {
    "id": 28,
    "directArtifactIds": [185, 186]
  }, {
    "id": 26,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [187, 188, 154]
  }, {
    "id": 32,
    "directArtifactIds": [183, 189]
  }, {
    "id": 31,
    "transitiveDepSetIds": [16, 32],
    "directArtifactIds": [190, 155, 158, 159, 160]
  }, {
    "id": 33,
    "transitiveDepSetIds": [32],
    "directArtifactIds": [184]
  }, {
    "id": 36,
    "transitiveDepSetIds": [16, 32],
    "directArtifactIds": [186, 155, 160, 191, 163]
  }, {
    "id": 35,
    "transitiveDepSetIds": [36],
    "directArtifactIds": [185, 160]
  }, {
    "id": 34,
    "transitiveDepSetIds": [35, 36]
  }, {
    "id": 30,
    "transitiveDepSetIds": [13, 16, 31, 33, 34],
    "directArtifactIds": [187]
  }, {
    "id": 37,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [188, 155, 159]
  }, {
    "id": 29,
    "transitiveDepSetIds": [13, 30, 37, 16, 33, 34]
  }, {
    "id": 25,
    "transitiveDepSetIds": [26, 29]
  }, {
    "id": 38,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [192, 193]
  }, {
    "id": 22,
    "transitiveDepSetIds": [23, 25, 38]
  }, {
    "id": 39,
    "transitiveDepSetIds": [3, 26],
    "directArtifactIds": [114, 178, 179, 180, 181, 182, 173]
  }, {
    "id": 41,
    "directArtifactIds": [178, 179, 180, 181, 182]
  }, {
    "id": 40,
    "transitiveDepSetIds": [41],
    "directArtifactIds": [176]
  }, {
    "id": 44,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 43,
    "transitiveDepSetIds": [3, 44],
    "directArtifactIds": [114, 201]
  }, {
    "id": 46,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [154]
  }, {
    "id": 47,
    "transitiveDepSetIds": [13, 16, 33]
  }, {
    "id": 45,
    "transitiveDepSetIds": [46, 47]
  }, {
    "id": 42,
    "transitiveDepSetIds": [43, 45, 17]
  }, {
    "id": 48,
    "transitiveDepSetIds": [3, 46],
    "directArtifactIds": [114, 201, 173]
  }, {
    "id": 49,
    "directArtifactIds": [201, 176]
  }, {
    "id": 52,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 51,
    "transitiveDepSetIds": [3, 52],
    "directArtifactIds": [114, 209]
  }, {
    "id": 54,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [210, 211]
  }, {
    "id": 57,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [212, 155, 156]
  }, {
    "id": 56,
    "transitiveDepSetIds": [13, 30, 57, 16, 33],
    "directArtifactIds": [210, 156]
  }, {
    "id": 55,
    "transitiveDepSetIds": [56, 33],
    "directArtifactIds": [211]
  }, {
    "id": 53,
    "transitiveDepSetIds": [54, 55]
  }, {
    "id": 50,
    "transitiveDepSetIds": [51, 53],
    "directArtifactIds": [213]
  }, {
    "id": 58,
    "directArtifactIds": [209, 176]
  }, {
    "id": 62,
    "directArtifactIds": [220, 221, 222, 223, 224]
  }, {
    "id": 63,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [225, 226, 224, 227]
  }, {
    "id": 64,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 228]
  }, {
    "id": 61,
    "transitiveDepSetIds": [62, 63, 64],
    "directArtifactIds": [225, 224, 227, 228, 229]
  }, {
    "id": 60,
    "transitiveDepSetIds": [61],
    "directArtifactIds": [225, 218]
  }, {
    "id": 59,
    "transitiveDepSetIds": [60],
    "directArtifactIds": [176]
  }, {
    "id": 65,
    "directArtifactIds": [231]
  }, {
    "id": 68,
    "directArtifactIds": [214, 219]
  }, {
    "id": 71,
    "directArtifactIds": [233, 234, 235, 236, 237]
  }, {
    "id": 70,
    "transitiveDepSetIds": [71],
    "directArtifactIds": [233, 235, 236, 234]
  }, {
    "id": 72,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [238]
  }, {
    "id": 73,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [239]
  }, {
    "id": 69,
    "transitiveDepSetIds": [70, 72, 73],
    "directArtifactIds": [240]
  }, {
    "id": 78,
    "directArtifactIds": [233, 241, 242]
  }, {
    "id": 79,
    "directArtifactIds": [236, 242]
  }, {
    "id": 80,
    "directArtifactIds": [243, 244, 241, 245, 246, 247, 248]
  }, {
    "id": 77,
    "transitiveDepSetIds": [78, 79, 80],
    "directArtifactIds": [237, 235, 234, 249, 250, 241, 246, 242]
  }, {
    "id": 83,
    "directArtifactIds": [251, 252]
  }, {
    "id": 82,
    "transitiveDepSetIds": [80, 83],
    "directArtifactIds": [253, 241, 245, 246, 247]
  }, {
    "id": 84,
    "transitiveDepSetIds": [83],
    "directArtifactIds": [254]
  }, {
    "id": 87,
    "transitiveDepSetIds": [80, 83],
    "directArtifactIds": [255, 241, 247, 256, 250]
  }, {
    "id": 86,
    "transitiveDepSetIds": [87],
    "directArtifactIds": [257, 247]
  }, {
    "id": 85,
    "transitiveDepSetIds": [86, 87],
    "directArtifactIds": [250]
  }, {
    "id": 81,
    "transitiveDepSetIds": [77, 80, 82, 84, 85],
    "directArtifactIds": [238]
  }, {
    "id": 88,
    "transitiveDepSetIds": [77, 80],
    "directArtifactIds": [239, 241, 242]
  }, {
    "id": 76,
    "transitiveDepSetIds": [77, 81, 88, 80, 84],
    "directArtifactIds": [240, 242]
  }, {
    "id": 75,
    "transitiveDepSetIds": [76, 84],
    "directArtifactIds": [258]
  }, {
    "id": 74,
    "transitiveDepSetIds": [75],
    "directArtifactIds": [214]
  }, {
    "id": 90,
    "directArtifactIds": [259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286]
  }, {
    "id": 91,
    "directArtifactIds": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302]
  }, {
    "id": 92,
    "directArtifactIds": [303, 304, 305, 306, 307, 308, 309, 310]
  }, {
    "id": 93,
    "directArtifactIds": [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 89,
    "transitiveDepSetIds": [90, 91, 92, 93]
  }, {
    "id": 67,
    "transitiveDepSetIds": [68, 69, 74, 89],
    "directArtifactIds": [258, 214]
  }, {
    "id": 66,
    "transitiveDepSetIds": [67],
    "directArtifactIds": [232]
  }, {
    "id": 95,
    "transitiveDepSetIds": [75],
    "directArtifactIds": [214, 370, 371]
  }, {
    "id": 94,
    "transitiveDepSetIds": [95],
    "directArtifactIds": [176]
  }, {
    "id": 96,
    "directArtifactIds": [370, 374, 375]
  }, {
    "id": 99,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 98,
    "transitiveDepSetIds": [3, 99],
    "directArtifactIds": [114, 378]
  }, {
    "id": 101,
    "transitiveDepSetIds": [27, 28],
    "directArtifactIds": [379, 188]
  }, {
    "id": 103,
    "transitiveDepSetIds": [37, 34],
    "directArtifactIds": [379, 159]
  }, {
    "id": 102,
    "transitiveDepSetIds": [103, 37, 33, 34]
  }, {
    "id": 100,
    "transitiveDepSetIds": [101, 102]
  }, {
    "id": 104,
    "directArtifactIds": [380, 193]
  }, {
    "id": 97,
    "transitiveDepSetIds": [98, 100, 104]
  }, {
    "id": 105,
    "transitiveDepSetIds": [3, 101],
    "directArtifactIds": [114, 378, 173]
  }, {
    "id": 106,
    "directArtifactIds": [378, 176]
  }, {
    "id": 107,
    "directArtifactIds": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 407, 408, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 110,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 109,
    "transitiveDepSetIds": [3, 110],
    "directArtifactIds": [114, 410]
  }, {
    "id": 112,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 114,
    "transitiveDepSetIds": [13, 16, 33],
    "directArtifactIds": [206]
  }, {
    "id": 115,
    "transitiveDepSetIds": [30, 13, 16, 31, 33, 34],
    "directArtifactIds": [411, 162, 163, 156]
  }, {
    "id": 113,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 111,
    "transitiveDepSetIds": [112, 113]
  }, {
    "id": 116,
    "directArtifactIds": [207, 412]
  }, {
    "id": 108,
    "transitiveDepSetIds": [109, 111, 116]
  }, {
    "id": 117,
    "directArtifactIds": [410, 176]
  }, {
    "id": 120,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [225, 224, 208]
  }, {
    "id": 121,
    "transitiveDepSetIds": [63, 62],
    "directArtifactIds": [225, 226, 227, 224, 419]
  }, {
    "id": 119,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 417]
  }, {
    "id": 118,
    "transitiveDepSetIds": [119],
    "directArtifactIds": [176]
  }, {
    "id": 122,
    "directArtifactIds": [421]
  }, {
    "id": 125,
    "directArtifactIds": [413, 418]
  }, {
    "id": 126,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [202]
  }, {
    "id": 127,
    "transitiveDepSetIds": [72, 70],
    "directArtifactIds": [423]
  }, {
    "id": 130,
    "transitiveDepSetIds": [77, 80, 84],
    "directArtifactIds": [202]
  }, {
    "id": 131,
    "transitiveDepSetIds": [81, 77, 80, 82, 84, 85],
    "directArtifactIds": [423, 249, 250, 242]
  }, {
    "id": 129,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 128,
    "transitiveDepSetIds": [129],
    "directArtifactIds": [413]
  }, {
    "id": 124,
    "transitiveDepSetIds": [125, 126, 127, 128, 89],
    "directArtifactIds": [258, 413]
  }, {
    "id": 123,
    "transitiveDepSetIds": [124],
    "directArtifactIds": [422]
  }, {
    "id": 133,
    "transitiveDepSetIds": [129],
    "directArtifactIds": [413, 424, 371]
  }, {
    "id": 132,
    "transitiveDepSetIds": [133],
    "directArtifactIds": [176]
  }, {
    "id": 134,
    "directArtifactIds": [424, 374, 375]
  }, {
    "id": 137,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 136,
    "transitiveDepSetIds": [3, 137],
    "directArtifactIds": [114, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448]
  }, {
    "id": 139,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [449, 406, 184, 450, 451, 156, 407, 452]
  }, {
    "id": 141,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [406, 162, 156, 407, 408]
  }, {
    "id": 143,
    "directArtifactIds": [453, 454]
  }, {
    "id": 146,
    "directArtifactIds": [455, 456]
  }, {
    "id": 145,
    "transitiveDepSetIds": [146],
    "directArtifactIds": [457, 456, 458, 459]
  }, {
    "id": 144,
    "transitiveDepSetIds": [145],
    "directArtifactIds": [460, 456]
  }, {
    "id": 142,
    "transitiveDepSetIds": [143, 144, 146],
    "directArtifactIds": [450, 461, 462, 454, 463, 464, 407, 465, 466, 467]
  }, {
    "id": 147,
    "directArtifactIds": [452, 464, 468, 469]
  }, {
    "id": 140,
    "transitiveDepSetIds": [13, 141, 142, 33, 147],
    "directArtifactIds": [449, 184, 451, 156, 407]
  }, {
    "id": 138,
    "transitiveDepSetIds": [139, 140]
  }, {
    "id": 148,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [470]
  }, {
    "id": 135,
    "transitiveDepSetIds": [136, 138, 148]
  }, {
    "id": 149,
    "transitiveDepSetIds": [3, 139],
    "directArtifactIds": [114, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 173]
  }, {
    "id": 151,
    "directArtifactIds": [429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448]
  }, {
    "id": 150,
    "transitiveDepSetIds": [151],
    "directArtifactIds": [176]
  }, {
    "id": 154,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 153,
    "transitiveDepSetIds": [3, 154],
    "directArtifactIds": [114, 478]
  }, {
    "id": 156,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [210, 211]
  }, {
    "id": 157,
    "transitiveDepSetIds": [56, 33],
    "directArtifactIds": [211]
  }, {
    "id": 155,
    "transitiveDepSetIds": [156, 157]
  }, {
    "id": 152,
    "transitiveDepSetIds": [153, 155],
    "directArtifactIds": [213]
  }, {
    "id": 158,
    "directArtifactIds": [478, 176]
  }, {
    "id": 160,
    "transitiveDepSetIds": [61],
    "directArtifactIds": [225, 483]
  }, {
    "id": 159,
    "transitiveDepSetIds": [160],
    "directArtifactIds": [176]
  }, {
    "id": 161,
    "directArtifactIds": [486]
  }, {
    "id": 164,
    "directArtifactIds": [479, 484]
  }, {
    "id": 166,
    "transitiveDepSetIds": [76, 84],
    "directArtifactIds": [258]
  }, {
    "id": 165,
    "transitiveDepSetIds": [166],
    "directArtifactIds": [479]
  }, {
    "id": 163,
    "transitiveDepSetIds": [164, 69, 165, 89],
    "directArtifactIds": [258, 479]
  }, {
    "id": 162,
    "transitiveDepSetIds": [163],
    "directArtifactIds": [487]
  }, {
    "id": 168,
    "transitiveDepSetIds": [166],
    "directArtifactIds": [479, 488, 371]
  }, {
    "id": 167,
    "transitiveDepSetIds": [168],
    "directArtifactIds": [176]
  }, {
    "id": 169,
    "directArtifactIds": [488, 374, 375]
  }, {
    "id": 171,
    "directArtifactIds": [493, 494, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 174,
    "directArtifactIds": [495, 496]
  }, {
    "id": 173,
    "transitiveDepSetIds": [174],
    "directArtifactIds": [497]
  }, {
    "id": 176,
    "directArtifactIds": [498, 499]
  }, {
    "id": 175,
    "transitiveDepSetIds": [176],
    "directArtifactIds": [500]
  }, {
    "id": 172,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 170,
    "transitiveDepSetIds": [171, 172]
  }, {
    "id": 178,
    "directArtifactIds": [502, 503, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 179,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 177,
    "transitiveDepSetIds": [178, 179]
  }, {
    "id": 180,
    "directArtifactIds": [505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 183,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 182,
    "transitiveDepSetIds": [3, 183],
    "directArtifactIds": [114, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615]
  }, {
    "id": 185,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [187, 162, 163, 154, 190, 156]
  }, {
    "id": 186,
    "transitiveDepSetIds": [30, 13, 16, 31, 33, 34],
    "directArtifactIds": [162, 163, 156]
  }, {
    "id": 184,
    "transitiveDepSetIds": [185, 186]
  }, {
    "id": 187,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [192]
  }, {
    "id": 181,
    "transitiveDepSetIds": [182, 184, 187]
  }, {
    "id": 188,
    "transitiveDepSetIds": [3, 185],
    "directArtifactIds": [114, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 173]
  }, {
    "id": 190,
    "directArtifactIds": [520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615]
  }, {
    "id": 189,
    "transitiveDepSetIds": [190],
    "directArtifactIds": [176]
  }, {
    "id": 193,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 192,
    "transitiveDepSetIds": [3, 193],
    "directArtifactIds": [114, 619]
  }, {
    "id": 195,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [620, 211]
  }, {
    "id": 198,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [518, 155, 156]
  }, {
    "id": 199,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [174]
  }, {
    "id": 197,
    "transitiveDepSetIds": [13, 198, 199, 16, 33],
    "directArtifactIds": [620]
  }, {
    "id": 196,
    "transitiveDepSetIds": [197, 33],
    "directArtifactIds": [211]
  }, {
    "id": 194,
    "transitiveDepSetIds": [195, 196]
  }, {
    "id": 191,
    "transitiveDepSetIds": [192, 194],
    "directArtifactIds": [621]
  }, {
    "id": 200,
    "directArtifactIds": [619, 176]
  }, {
    "id": 204,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 628]
  }, {
    "id": 205,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 177]
  }, {
    "id": 203,
    "transitiveDepSetIds": [62, 204, 205],
    "directArtifactIds": [225, 224, 628, 177, 629]
  }, {
    "id": 202,
    "transitiveDepSetIds": [203],
    "directArtifactIds": [225, 626]
  }, {
    "id": 201,
    "transitiveDepSetIds": [202],
    "directArtifactIds": [176]
  }, {
    "id": 206,
    "directArtifactIds": [631]
  }, {
    "id": 209,
    "directArtifactIds": [622, 627]
  }, {
    "id": 211,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [633]
  }, {
    "id": 212,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [169]
  }, {
    "id": 210,
    "transitiveDepSetIds": [70, 211, 212],
    "directArtifactIds": [634]
  }, {
    "id": 216,
    "transitiveDepSetIds": [77, 80],
    "directArtifactIds": [633, 241, 242]
  }, {
    "id": 217,
    "transitiveDepSetIds": [77, 80],
    "directArtifactIds": [169]
  }, {
    "id": 215,
    "transitiveDepSetIds": [77, 216, 217, 80, 84],
    "directArtifactIds": [634]
  }, {
    "id": 214,
    "transitiveDepSetIds": [215, 84],
    "directArtifactIds": [258]
  }, {
    "id": 213,
    "transitiveDepSetIds": [214],
    "directArtifactIds": [622]
  }, {
    "id": 208,
    "transitiveDepSetIds": [209, 210, 213, 89],
    "directArtifactIds": [258, 622]
  }, {
    "id": 207,
    "transitiveDepSetIds": [208],
    "directArtifactIds": [632]
  }, {
    "id": 219,
    "transitiveDepSetIds": [214],
    "directArtifactIds": [622, 635, 371]
  }, {
    "id": 218,
    "transitiveDepSetIds": [219],
    "directArtifactIds": [176]
  }, {
    "id": 220,
    "directArtifactIds": [635, 374, 375]
  }, {
    "id": 222,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 221,
    "transitiveDepSetIds": [3, 222],
    "directArtifactIds": [114, 640, 641]
  }, {
    "id": 223,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [114, 640, 641, 173]
  }, {
    "id": 225,
    "directArtifactIds": [640, 641]
  }, {
    "id": 224,
    "transitiveDepSetIds": [225],
    "directArtifactIds": [176]
  }, {
    "id": 228,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 227,
    "transitiveDepSetIds": [3, 228],
    "directArtifactIds": [114, 646]
  }, {
    "id": 230,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 231,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 229,
    "transitiveDepSetIds": [230, 231]
  }, {
    "id": 232,
    "directArtifactIds": [207, 412]
  }, {
    "id": 226,
    "transitiveDepSetIds": [227, 229, 232]
  }, {
    "id": 233,
    "directArtifactIds": [646, 176]
  }, {
    "id": 235,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 651]
  }, {
    "id": 234,
    "transitiveDepSetIds": [235],
    "directArtifactIds": [176]
  }, {
    "id": 236,
    "directArtifactIds": [654]
  }, {
    "id": 239,
    "directArtifactIds": [647, 652]
  }, {
    "id": 241,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 240,
    "transitiveDepSetIds": [241],
    "directArtifactIds": [647]
  }, {
    "id": 238,
    "transitiveDepSetIds": [239, 126, 127, 240, 89],
    "directArtifactIds": [258, 647]
  }, {
    "id": 237,
    "transitiveDepSetIds": [238],
    "directArtifactIds": [655]
  }, {
    "id": 243,
    "transitiveDepSetIds": [241],
    "directArtifactIds": [647, 656, 371]
  }, {
    "id": 242,
    "transitiveDepSetIds": [243],
    "directArtifactIds": [176]
  }, {
    "id": 244,
    "directArtifactIds": [656, 374, 375]
  }, {
    "id": 245,
    "directArtifactIds": [661]
  }, {
    "id": 247,
    "directArtifactIds": [664, 665, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 248,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 246,
    "transitiveDepSetIds": [247, 248]
  }, {
    "id": 251,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 250,
    "transitiveDepSetIds": [3, 251],
    "directArtifactIds": [114, 668]
  }, {
    "id": 253,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [669, 211]
  }, {
    "id": 257,
    "directArtifactIds": [670, 671]
  }, {
    "id": 256,
    "transitiveDepSetIds": [13, 257, 16],
    "directArtifactIds": [672, 156]
  }, {
    "id": 258,
    "transitiveDepSetIds": [257, 16],
    "directArtifactIds": [673, 671, 674]
  }, {
    "id": 255,
    "transitiveDepSetIds": [13, 256, 257, 258, 16, 33, 34],
    "directArtifactIds": [669, 675, 156]
  }, {
    "id": 254,
    "transitiveDepSetIds": [255, 33],
    "directArtifactIds": [211]
  }, {
    "id": 252,
    "transitiveDepSetIds": [253, 254]
  }, {
    "id": 249,
    "transitiveDepSetIds": [250, 252],
    "directArtifactIds": [676]
  }, {
    "id": 259,
    "directArtifactIds": [668, 176]
  }, {
    "id": 263,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 683]
  }, {
    "id": 262,
    "transitiveDepSetIds": [62, 263],
    "directArtifactIds": [225, 226, 224, 683, 684]
  }, {
    "id": 261,
    "transitiveDepSetIds": [262],
    "directArtifactIds": [225, 681]
  }, {
    "id": 260,
    "transitiveDepSetIds": [261],
    "directArtifactIds": [176]
  }, {
    "id": 264,
    "directArtifactIds": [686]
  }, {
    "id": 267,
    "directArtifactIds": [677, 682]
  }, {
    "id": 269,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [494]
  }, {
    "id": 268,
    "transitiveDepSetIds": [70, 269],
    "directArtifactIds": [688]
  }, {
    "id": 274,
    "directArtifactIds": [689, 690]
  }, {
    "id": 273,
    "transitiveDepSetIds": [77, 274, 80],
    "directArtifactIds": [494, 242]
  }, {
    "id": 275,
    "transitiveDepSetIds": [274, 80],
    "directArtifactIds": [691, 690, 692]
  }, {
    "id": 272,
    "transitiveDepSetIds": [77, 273, 274, 275, 80, 84, 85],
    "directArtifactIds": [688, 693, 242]
  }, {
    "id": 271,
    "transitiveDepSetIds": [272, 84],
    "directArtifactIds": [258]
  }, {
    "id": 270,
    "transitiveDepSetIds": [271],
    "directArtifactIds": [677]
  }, {
    "id": 266,
    "transitiveDepSetIds": [267, 268, 270, 89],
    "directArtifactIds": [258, 677]
  }, {
    "id": 265,
    "transitiveDepSetIds": [266],
    "directArtifactIds": [687]
  }, {
    "id": 277,
    "transitiveDepSetIds": [271],
    "directArtifactIds": [677, 694, 371]
  }, {
    "id": 276,
    "transitiveDepSetIds": [277],
    "directArtifactIds": [176]
  }, {
    "id": 278,
    "directArtifactIds": [694, 374, 375]
  }, {
    "id": 280,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 279,
    "transitiveDepSetIds": [3, 280],
    "directArtifactIds": [114, 699]
  }, {
    "id": 281,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [114, 699, 173]
  }, {
    "id": 282,
    "directArtifactIds": [699, 176]
  }, {
    "id": 285,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 284,
    "transitiveDepSetIds": [3, 285],
    "directArtifactIds": [114, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730]
  }, {
    "id": 287,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [518, 174, 154]
  }, {
    "id": 288,
    "transitiveDepSetIds": [13, 198, 199, 16, 33]
  }, {
    "id": 286,
    "transitiveDepSetIds": [287, 288]
  }, {
    "id": 289,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [731, 175]
  }, {
    "id": 283,
    "transitiveDepSetIds": [284, 286, 289]
  }, {
    "id": 290,
    "transitiveDepSetIds": [3, 287],
    "directArtifactIds": [114, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 173]
  }, {
    "id": 292,
    "directArtifactIds": [703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730]
  }, {
    "id": 291,
    "transitiveDepSetIds": [292],
    "directArtifactIds": [176]
  }, {
    "id": 294,
    "directArtifactIds": [735, 736, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 295,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 293,
    "transitiveDepSetIds": [294, 295]
  }, {
    "id": 298,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 297,
    "transitiveDepSetIds": [3, 298],
    "directArtifactIds": [114, 738]
  }, {
    "id": 300,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [156, 739]
  }, {
    "id": 302,
    "transitiveDepSetIds": [32],
    "directArtifactIds": [739, 156]
  }, {
    "id": 301,
    "transitiveDepSetIds": [13, 302, 33],
    "directArtifactIds": [156]
  }, {
    "id": 299,
    "transitiveDepSetIds": [300, 301]
  }, {
    "id": 296,
    "transitiveDepSetIds": [297, 299, 17]
  }, {
    "id": 303,
    "transitiveDepSetIds": [3, 300],
    "directArtifactIds": [114, 738, 173]
  }, {
    "id": 304,
    "directArtifactIds": [738, 176]
  }, {
    "id": 307,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 306,
    "transitiveDepSetIds": [3, 307],
    "directArtifactIds": [114, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776]
  }, {
    "id": 310,
    "directArtifactIds": [777, 778]
  }, {
    "id": 309,
    "transitiveDepSetIds": [11, 310, 27],
    "directArtifactIds": [187, 154, 408, 452]
  }, {
    "id": 313,
    "directArtifactIds": [778, 156]
  }, {
    "id": 312,
    "transitiveDepSetIds": [313, 13, 16],
    "directArtifactIds": [777, 156, 408]
  }, {
    "id": 311,
    "transitiveDepSetIds": [13, 30, 312, 16, 33, 147],
    "directArtifactIds": [408]
  }, {
    "id": 308,
    "transitiveDepSetIds": [309, 311]
  }, {
    "id": 316,
    "directArtifactIds": [779, 780]
  }, {
    "id": 315,
    "transitiveDepSetIds": [316],
    "directArtifactIds": [779]
  }, {
    "id": 314,
    "transitiveDepSetIds": [17, 315],
    "directArtifactIds": [192]
  }, {
    "id": 305,
    "transitiveDepSetIds": [306, 308, 314]
  }, {
    "id": 317,
    "transitiveDepSetIds": [3, 309],
    "directArtifactIds": [114, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 173]
  }, {
    "id": 319,
    "directArtifactIds": [747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776]
  }, {
    "id": 318,
    "transitiveDepSetIds": [319],
    "directArtifactIds": [176]
  }, {
    "id": 322,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 321,
    "transitiveDepSetIds": [3, 322],
    "directArtifactIds": [114, 789, 790, 791, 792, 793, 794, 795, 796]
  }, {
    "id": 324,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [672, 675, 670, 673, 154, 156]
  }, {
    "id": 325,
    "transitiveDepSetIds": [13, 256, 257, 258, 16, 33, 34],
    "directArtifactIds": [675, 156]
  }, {
    "id": 323,
    "transitiveDepSetIds": [324, 325]
  }, {
    "id": 326,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [797]
  }, {
    "id": 320,
    "transitiveDepSetIds": [321, 323, 326]
  }, {
    "id": 327,
    "transitiveDepSetIds": [3, 324],
    "directArtifactIds": [114, 789, 790, 791, 792, 793, 794, 795, 796, 173]
  }, {
    "id": 329,
    "directArtifactIds": [789, 790, 791, 792, 793, 794, 795, 796]
  }, {
    "id": 328,
    "transitiveDepSetIds": [329],
    "directArtifactIds": [176]
  }, {
    "id": 332,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 331,
    "transitiveDepSetIds": [3, 332],
    "directArtifactIds": [114, 801]
  }, {
    "id": 334,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [802, 211]
  }, {
    "id": 336,
    "transitiveDepSetIds": [13, 30, 198, 16, 33, 34],
    "directArtifactIds": [802, 162, 156]
  }, {
    "id": 335,
    "transitiveDepSetIds": [336, 33],
    "directArtifactIds": [211]
  }, {
    "id": 333,
    "transitiveDepSetIds": [334, 335]
  }, {
    "id": 330,
    "transitiveDepSetIds": [331, 333],
    "directArtifactIds": [803]
  }, {
    "id": 337,
    "directArtifactIds": [801, 176]
  }, {
    "id": 340,
    "transitiveDepSetIds": [62, 63, 204],
    "directArtifactIds": [225, 226, 224, 227, 628, 810]
  }, {
    "id": 339,
    "transitiveDepSetIds": [340],
    "directArtifactIds": [225, 808]
  }, {
    "id": 338,
    "transitiveDepSetIds": [339],
    "directArtifactIds": [176]
  }, {
    "id": 341,
    "directArtifactIds": [812]
  }, {
    "id": 344,
    "directArtifactIds": [804, 809]
  }, {
    "id": 345,
    "transitiveDepSetIds": [70, 72, 211],
    "directArtifactIds": [814]
  }, {
    "id": 348,
    "transitiveDepSetIds": [77, 81, 216, 80, 84, 85],
    "directArtifactIds": [814, 249, 242]
  }, {
    "id": 347,
    "transitiveDepSetIds": [348, 84],
    "directArtifactIds": [258]
  }, {
    "id": 346,
    "transitiveDepSetIds": [347],
    "directArtifactIds": [804]
  }, {
    "id": 343,
    "transitiveDepSetIds": [344, 345, 346, 89],
    "directArtifactIds": [258, 804]
  }, {
    "id": 342,
    "transitiveDepSetIds": [343],
    "directArtifactIds": [813]
  }, {
    "id": 350,
    "transitiveDepSetIds": [347],
    "directArtifactIds": [804, 815, 371]
  }, {
    "id": 349,
    "transitiveDepSetIds": [350],
    "directArtifactIds": [176]
  }, {
    "id": 351,
    "directArtifactIds": [815, 374, 375]
  }, {
    "id": 353,
    "directArtifactIds": [820, 821, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 354,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 352,
    "transitiveDepSetIds": [353, 354]
  }, {
    "id": 356,
    "directArtifactIds": [823, 824, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 357,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 355,
    "transitiveDepSetIds": [356, 357]
  }, {
    "id": 360,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 359,
    "transitiveDepSetIds": [3, 360],
    "directArtifactIds": [114, 826]
  }, {
    "id": 362,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 363,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 361,
    "transitiveDepSetIds": [362, 363]
  }, {
    "id": 364,
    "directArtifactIds": [207, 412]
  }, {
    "id": 358,
    "transitiveDepSetIds": [359, 361, 364]
  }, {
    "id": 365,
    "directArtifactIds": [826, 176]
  }, {
    "id": 367,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 831]
  }, {
    "id": 366,
    "transitiveDepSetIds": [367],
    "directArtifactIds": [176]
  }, {
    "id": 368,
    "directArtifactIds": [834]
  }, {
    "id": 371,
    "directArtifactIds": [827, 832]
  }, {
    "id": 373,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 372,
    "transitiveDepSetIds": [373],
    "directArtifactIds": [827]
  }, {
    "id": 370,
    "transitiveDepSetIds": [371, 126, 127, 372, 89],
    "directArtifactIds": [258, 827]
  }, {
    "id": 369,
    "transitiveDepSetIds": [370],
    "directArtifactIds": [835]
  }, {
    "id": 375,
    "transitiveDepSetIds": [373],
    "directArtifactIds": [827, 836, 371]
  }, {
    "id": 374,
    "transitiveDepSetIds": [375],
    "directArtifactIds": [176]
  }, {
    "id": 376,
    "directArtifactIds": [836, 374, 375]
  }, {
    "id": 379,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 378,
    "transitiveDepSetIds": [3, 379],
    "directArtifactIds": [114, 841]
  }, {
    "id": 381,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [475, 211]
  }, {
    "id": 383,
    "transitiveDepSetIds": [13, 141, 142, 33, 147],
    "directArtifactIds": [475, 449, 184, 451, 156, 407]
  }, {
    "id": 382,
    "transitiveDepSetIds": [383, 33],
    "directArtifactIds": [211]
  }, {
    "id": 380,
    "transitiveDepSetIds": [381, 382]
  }, {
    "id": 377,
    "transitiveDepSetIds": [378, 380],
    "directArtifactIds": [476]
  }, {
    "id": 384,
    "directArtifactIds": [841, 176]
  }, {
    "id": 388,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 824]
  }, {
    "id": 387,
    "transitiveDepSetIds": [62, 388],
    "directArtifactIds": [225, 224, 824, 477]
  }, {
    "id": 386,
    "transitiveDepSetIds": [387],
    "directArtifactIds": [225, 846]
  }, {
    "id": 385,
    "transitiveDepSetIds": [386],
    "directArtifactIds": [176]
  }, {
    "id": 389,
    "directArtifactIds": [849]
  }, {
    "id": 392,
    "directArtifactIds": [842, 847]
  }, {
    "id": 394,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [821]
  }, {
    "id": 393,
    "transitiveDepSetIds": [70, 394],
    "directArtifactIds": [851, 471]
  }, {
    "id": 398,
    "transitiveDepSetIds": [77, 80],
    "directArtifactIds": [821, 249, 242, 852, 853]
  }, {
    "id": 400,
    "directArtifactIds": [854, 855]
  }, {
    "id": 403,
    "directArtifactIds": [856, 857]
  }, {
    "id": 402,
    "transitiveDepSetIds": [403],
    "directArtifactIds": [858, 857, 859, 860]
  }, {
    "id": 401,
    "transitiveDepSetIds": [402],
    "directArtifactIds": [861, 857]
  }, {
    "id": 399,
    "transitiveDepSetIds": [400, 401, 403],
    "directArtifactIds": [862, 863, 864, 855, 865, 866, 852, 867, 868, 869]
  }, {
    "id": 404,
    "directArtifactIds": [870, 866, 871, 872]
  }, {
    "id": 397,
    "transitiveDepSetIds": [77, 398, 399, 84, 404],
    "directArtifactIds": [471, 851, 254, 873, 242, 852]
  }, {
    "id": 396,
    "transitiveDepSetIds": [397, 84],
    "directArtifactIds": [258]
  }, {
    "id": 395,
    "transitiveDepSetIds": [396],
    "directArtifactIds": [842]
  }, {
    "id": 391,
    "transitiveDepSetIds": [392, 393, 395, 89],
    "directArtifactIds": [258, 842]
  }, {
    "id": 390,
    "transitiveDepSetIds": [391],
    "directArtifactIds": [850]
  }, {
    "id": 406,
    "transitiveDepSetIds": [396],
    "directArtifactIds": [842, 874, 371]
  }, {
    "id": 405,
    "transitiveDepSetIds": [406],
    "directArtifactIds": [176]
  }, {
    "id": 407,
    "directArtifactIds": [874, 374, 375]
  }, {
    "id": 409,
    "directArtifactIds": [879, 177, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 410,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 408,
    "transitiveDepSetIds": [409, 410]
  }, {
    "id": 411,
    "directArtifactIds": [881, 882, 883, 884, 885, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 412,
    "directArtifactIds": [887, 888, 889, 212, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 379, 188, 185, 186, 191, 183, 189, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 414,
    "directArtifactIds": [892, 893, 228, 894, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 415,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 413,
    "transitiveDepSetIds": [414, 415]
  }, {
    "id": 418,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 417,
    "transitiveDepSetIds": [3, 418],
    "directArtifactIds": [114, 896, 897]
  }, {
    "id": 420,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [187, 212, 154, 156]
  }, {
    "id": 421,
    "transitiveDepSetIds": [13, 30, 57, 16, 33],
    "directArtifactIds": [156]
  }, {
    "id": 419,
    "transitiveDepSetIds": [420, 421]
  }, {
    "id": 422,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [192, 898]
  }, {
    "id": 416,
    "transitiveDepSetIds": [417, 419, 422]
  }, {
    "id": 423,
    "transitiveDepSetIds": [3, 420],
    "directArtifactIds": [114, 896, 897, 173]
  }, {
    "id": 425,
    "directArtifactIds": [896, 897]
  }, {
    "id": 424,
    "transitiveDepSetIds": [425],
    "directArtifactIds": [176]
  }, {
    "id": 427,
    "directArtifactIds": [903, 904, 239, 905, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 428,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 426,
    "transitiveDepSetIds": [427, 428]
  }, {
    "id": 430,
    "directArtifactIds": [907, 683, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 431,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 429,
    "transitiveDepSetIds": [430, 431]
  }, {
    "id": 434,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 433,
    "transitiveDepSetIds": [3, 434],
    "directArtifactIds": [114, 909]
  }, {
    "id": 436,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [785, 211]
  }, {
    "id": 438,
    "transitiveDepSetIds": [13, 30, 312, 16, 33, 147],
    "directArtifactIds": [785, 408]
  }, {
    "id": 437,
    "transitiveDepSetIds": [438, 33],
    "directArtifactIds": [211]
  }, {
    "id": 435,
    "transitiveDepSetIds": [436, 437]
  }, {
    "id": 432,
    "transitiveDepSetIds": [433, 435],
    "directArtifactIds": [786]
  }, {
    "id": 439,
    "directArtifactIds": [909, 176]
  }, {
    "id": 443,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [916, 224, 917]
  }, {
    "id": 442,
    "transitiveDepSetIds": [62, 63, 443],
    "directArtifactIds": [225, 224, 227, 917, 787]
  }, {
    "id": 441,
    "transitiveDepSetIds": [442],
    "directArtifactIds": [225, 914]
  }, {
    "id": 440,
    "transitiveDepSetIds": [441],
    "directArtifactIds": [176]
  }, {
    "id": 444,
    "directArtifactIds": [919]
  }, {
    "id": 447,
    "directArtifactIds": [910, 915]
  }, {
    "id": 450,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [921, 922]
  }, {
    "id": 449,
    "transitiveDepSetIds": [450],
    "directArtifactIds": [921]
  }, {
    "id": 448,
    "transitiveDepSetIds": [70, 72, 449],
    "directArtifactIds": [781]
  }, {
    "id": 455,
    "directArtifactIds": [921, 242]
  }, {
    "id": 454,
    "transitiveDepSetIds": [455, 77, 80],
    "directArtifactIds": [922, 242, 853]
  }, {
    "id": 453,
    "transitiveDepSetIds": [77, 81, 454, 80, 84, 404],
    "directArtifactIds": [781, 853]
  }, {
    "id": 452,
    "transitiveDepSetIds": [453, 84],
    "directArtifactIds": [258]
  }, {
    "id": 451,
    "transitiveDepSetIds": [452],
    "directArtifactIds": [910]
  }, {
    "id": 446,
    "transitiveDepSetIds": [447, 448, 451, 89],
    "directArtifactIds": [258, 910]
  }, {
    "id": 445,
    "transitiveDepSetIds": [446],
    "directArtifactIds": [920]
  }, {
    "id": 457,
    "transitiveDepSetIds": [452],
    "directArtifactIds": [910, 923, 371]
  }, {
    "id": 456,
    "transitiveDepSetIds": [457],
    "directArtifactIds": [176]
  }, {
    "id": 458,
    "directArtifactIds": [923, 374, 375]
  }, {
    "id": 461,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 460,
    "transitiveDepSetIds": [3, 461],
    "directArtifactIds": [114, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939]
  }, {
    "id": 463,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [155, 154, 159]
  }, {
    "id": 464,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [155, 159]
  }, {
    "id": 462,
    "transitiveDepSetIds": [463, 464]
  }, {
    "id": 459,
    "transitiveDepSetIds": [460, 462, 17]
  }, {
    "id": 465,
    "transitiveDepSetIds": [3, 463],
    "directArtifactIds": [114, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 173]
  }, {
    "id": 467,
    "directArtifactIds": [928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939]
  }, {
    "id": 466,
    "transitiveDepSetIds": [467],
    "directArtifactIds": [176]
  }, {
    "id": 470,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 469,
    "transitiveDepSetIds": [3, 470],
    "directArtifactIds": [114, 946]
  }, {
    "id": 472,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [198, 211]
  }, {
    "id": 474,
    "transitiveDepSetIds": [13, 30, 37, 16, 33, 34],
    "directArtifactIds": [198]
  }, {
    "id": 473,
    "transitiveDepSetIds": [474, 33],
    "directArtifactIds": [211]
  }, {
    "id": 471,
    "transitiveDepSetIds": [472, 473]
  }, {
    "id": 468,
    "transitiveDepSetIds": [469, 471],
    "directArtifactIds": [199]
  }, {
    "id": 475,
    "directArtifactIds": [946, 176]
  }, {
    "id": 479,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [224, 736]
  }, {
    "id": 478,
    "transitiveDepSetIds": [62, 63, 479],
    "directArtifactIds": [225, 226, 224, 227, 736, 200]
  }, {
    "id": 477,
    "transitiveDepSetIds": [478],
    "directArtifactIds": [225, 951]
  }, {
    "id": 476,
    "transitiveDepSetIds": [477],
    "directArtifactIds": [176]
  }, {
    "id": 480,
    "directArtifactIds": [954]
  }, {
    "id": 483,
    "directArtifactIds": [947, 952]
  }, {
    "id": 485,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [940]
  }, {
    "id": 484,
    "transitiveDepSetIds": [70, 72, 485],
    "directArtifactIds": [194]
  }, {
    "id": 489,
    "transitiveDepSetIds": [77, 80],
    "directArtifactIds": [940, 241, 246]
  }, {
    "id": 488,
    "transitiveDepSetIds": [77, 81, 489, 80, 84, 85],
    "directArtifactIds": [194]
  }, {
    "id": 487,
    "transitiveDepSetIds": [488, 84],
    "directArtifactIds": [258]
  }, {
    "id": 486,
    "transitiveDepSetIds": [487],
    "directArtifactIds": [947]
  }, {
    "id": 482,
    "transitiveDepSetIds": [483, 484, 486, 89],
    "directArtifactIds": [258, 947]
  }, {
    "id": 481,
    "transitiveDepSetIds": [482],
    "directArtifactIds": [955]
  }, {
    "id": 491,
    "transitiveDepSetIds": [487],
    "directArtifactIds": [947, 956, 371]
  }, {
    "id": 490,
    "transitiveDepSetIds": [491],
    "directArtifactIds": [176]
  }, {
    "id": 492,
    "directArtifactIds": [956, 374, 375]
  }, {
    "id": 495,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 494,
    "transitiveDepSetIds": [3, 495],
    "directArtifactIds": [114, 891]
  }, {
    "id": 497,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [961, 211]
  }, {
    "id": 503,
    "directArtifactIds": [962, 963]
  }, {
    "id": 502,
    "transitiveDepSetIds": [503],
    "directArtifactIds": [964]
  }, {
    "id": 501,
    "transitiveDepSetIds": [502, 503]
  }, {
    "id": 500,
    "transitiveDepSetIds": [13, 16, 501],
    "directArtifactIds": [965]
  }, {
    "id": 499,
    "transitiveDepSetIds": [13, 500, 33, 501],
    "directArtifactIds": [961]
  }, {
    "id": 498,
    "transitiveDepSetIds": [499, 33],
    "directArtifactIds": [211]
  }, {
    "id": 496,
    "transitiveDepSetIds": [497, 498]
  }, {
    "id": 493,
    "transitiveDepSetIds": [494, 496],
    "directArtifactIds": [966]
  }, {
    "id": 504,
    "directArtifactIds": [891, 176]
  }, {
    "id": 508,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [973, 224, 503]
  }, {
    "id": 507,
    "transitiveDepSetIds": [62, 508],
    "directArtifactIds": [225, 973, 224, 503, 974]
  }, {
    "id": 506,
    "transitiveDepSetIds": [507],
    "directArtifactIds": [225, 971]
  }, {
    "id": 505,
    "transitiveDepSetIds": [506],
    "directArtifactIds": [176]
  }, {
    "id": 509,
    "directArtifactIds": [976]
  }, {
    "id": 512,
    "directArtifactIds": [967, 972]
  }, {
    "id": 514,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [978]
  }, {
    "id": 513,
    "transitiveDepSetIds": [70, 514],
    "directArtifactIds": [979]
  }, {
    "id": 521,
    "directArtifactIds": [980, 981]
  }, {
    "id": 520,
    "transitiveDepSetIds": [521],
    "directArtifactIds": [982]
  }, {
    "id": 519,
    "transitiveDepSetIds": [520, 521]
  }, {
    "id": 518,
    "transitiveDepSetIds": [77, 80, 519],
    "directArtifactIds": [978]
  }, {
    "id": 517,
    "transitiveDepSetIds": [77, 518, 84, 519],
    "directArtifactIds": [979]
  }, {
    "id": 516,
    "transitiveDepSetIds": [517, 84],
    "directArtifactIds": [258]
  }, {
    "id": 515,
    "transitiveDepSetIds": [516],
    "directArtifactIds": [967]
  }, {
    "id": 511,
    "transitiveDepSetIds": [512, 513, 515, 89],
    "directArtifactIds": [258, 967]
  }, {
    "id": 510,
    "transitiveDepSetIds": [511],
    "directArtifactIds": [977]
  }, {
    "id": 523,
    "transitiveDepSetIds": [516],
    "directArtifactIds": [967, 983, 371]
  }, {
    "id": 522,
    "transitiveDepSetIds": [523],
    "directArtifactIds": [176]
  }, {
    "id": 524,
    "directArtifactIds": [983, 374, 375]
  }, {
    "id": 527,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 526,
    "transitiveDepSetIds": [3, 527],
    "directArtifactIds": [114, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234]
  }, {
    "id": 529,
    "directArtifactIds": [150, 153, 151, 152, 154, 162, 163, 155, 159, 156]
  }, {
    "id": 530,
    "transitiveDepSetIds": [14, 15, 16],
    "directArtifactIds": [153, 151, 162, 163, 155, 159, 156]
  }, {
    "id": 528,
    "transitiveDepSetIds": [529, 530]
  }, {
    "id": 531,
    "directArtifactIds": [164, 167, 165, 166]
  }, {
    "id": 525,
    "transitiveDepSetIds": [526, 528, 531]
  }, {
    "id": 532,
    "transitiveDepSetIds": [3, 529],
    "directArtifactIds": [114, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 173]
  }, {
    "id": 534,
    "directArtifactIds": [989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234]
  }, {
    "id": 533,
    "transitiveDepSetIds": [534],
    "directArtifactIds": [176]
  }, {
    "id": 537,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 536,
    "transitiveDepSetIds": [3, 537],
    "directArtifactIds": [114, 1238]
  }, {
    "id": 539,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [669, 211]
  }, {
    "id": 540,
    "transitiveDepSetIds": [255, 33],
    "directArtifactIds": [211]
  }, {
    "id": 538,
    "transitiveDepSetIds": [539, 540]
  }, {
    "id": 535,
    "transitiveDepSetIds": [536, 538],
    "directArtifactIds": [676]
  }, {
    "id": 541,
    "directArtifactIds": [1238, 176]
  }, {
    "id": 543,
    "transitiveDepSetIds": [262],
    "directArtifactIds": [225, 1243]
  }, {
    "id": 542,
    "transitiveDepSetIds": [543],
    "directArtifactIds": [176]
  }, {
    "id": 544,
    "directArtifactIds": [1246]
  }, {
    "id": 547,
    "directArtifactIds": [1239, 1244]
  }, {
    "id": 549,
    "transitiveDepSetIds": [272, 84],
    "directArtifactIds": [258]
  }, {
    "id": 548,
    "transitiveDepSetIds": [549],
    "directArtifactIds": [1239]
  }, {
    "id": 546,
    "transitiveDepSetIds": [547, 268, 548, 89],
    "directArtifactIds": [258, 1239]
  }, {
    "id": 545,
    "transitiveDepSetIds": [546],
    "directArtifactIds": [1247]
  }, {
    "id": 551,
    "transitiveDepSetIds": [549],
    "directArtifactIds": [1239, 1248, 371]
  }, {
    "id": 550,
    "transitiveDepSetIds": [551],
    "directArtifactIds": [176]
  }, {
    "id": 552,
    "directArtifactIds": [1248, 374, 375]
  }, {
    "id": 553,
    "directArtifactIds": [1253, 1254, 1255, 1256, 1257, 672, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 670, 671, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 556,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 555,
    "transitiveDepSetIds": [3, 556],
    "directArtifactIds": [114, 1259, 1260]
  }, {
    "id": 558,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [154, 190]
  }, {
    "id": 559,
    "transitiveDepSetIds": [13, 16, 31, 33, 34]
  }, {
    "id": 557,
    "transitiveDepSetIds": [558, 559]
  }, {
    "id": 554,
    "transitiveDepSetIds": [555, 557, 17]
  }, {
    "id": 560,
    "transitiveDepSetIds": [3, 558],
    "directArtifactIds": [114, 1259, 1260, 173]
  }, {
    "id": 562,
    "directArtifactIds": [1259, 1260]
  }, {
    "id": 561,
    "transitiveDepSetIds": [562],
    "directArtifactIds": [176]
  }, {
    "id": 565,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 564,
    "transitiveDepSetIds": [3, 565],
    "directArtifactIds": [114, 1265]
  }, {
    "id": 567,
    "directArtifactIds": [1266, 154, 1267]
  }, {
    "id": 569,
    "directArtifactIds": [1266, 1268]
  }, {
    "id": 568,
    "transitiveDepSetIds": [569, 16],
    "directArtifactIds": [1267]
  }, {
    "id": 566,
    "transitiveDepSetIds": [567, 568]
  }, {
    "id": 563,
    "transitiveDepSetIds": [564, 566]
  }, {
    "id": 570,
    "directArtifactIds": [1265, 176]
  }, {
    "id": 571,
    "directArtifactIds": [1273, 176]
  }, {
    "id": 572,
    "directArtifactIds": [1276]
  }, {
    "id": 575,
    "directArtifactIds": [1269, 1274]
  }, {
    "id": 578,
    "directArtifactIds": [1278, 1279]
  }, {
    "id": 577,
    "transitiveDepSetIds": [578, 80],
    "directArtifactIds": [1280]
  }, {
    "id": 576,
    "transitiveDepSetIds": [577],
    "directArtifactIds": [1269]
  }, {
    "id": 579,
    "transitiveDepSetIds": [90, 91, 92, 93]
  }, {
    "id": 574,
    "transitiveDepSetIds": [575, 576, 579],
    "directArtifactIds": [1269]
  }, {
    "id": 573,
    "transitiveDepSetIds": [574],
    "directArtifactIds": [1277]
  }, {
    "id": 581,
    "transitiveDepSetIds": [577],
    "directArtifactIds": [1269, 1281, 1282]
  }, {
    "id": 580,
    "transitiveDepSetIds": [581],
    "directArtifactIds": [176]
  }, {
    "id": 584,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 583,
    "transitiveDepSetIds": [3, 584],
    "directArtifactIds": [114, 788]
  }, {
    "id": 586,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [802, 211]
  }, {
    "id": 587,
    "transitiveDepSetIds": [336, 33],
    "directArtifactIds": [211]
  }, {
    "id": 585,
    "transitiveDepSetIds": [586, 587]
  }, {
    "id": 582,
    "transitiveDepSetIds": [583, 585],
    "directArtifactIds": [803]
  }, {
    "id": 588,
    "directArtifactIds": [788, 176]
  }, {
    "id": 590,
    "transitiveDepSetIds": [340],
    "directArtifactIds": [225, 1289]
  }, {
    "id": 589,
    "transitiveDepSetIds": [590],
    "directArtifactIds": [176]
  }, {
    "id": 591,
    "directArtifactIds": [1292]
  }, {
    "id": 594,
    "directArtifactIds": [1285, 1290]
  }, {
    "id": 596,
    "transitiveDepSetIds": [348, 84],
    "directArtifactIds": [258]
  }, {
    "id": 595,
    "transitiveDepSetIds": [596],
    "directArtifactIds": [1285]
  }, {
    "id": 593,
    "transitiveDepSetIds": [594, 345, 595, 89],
    "directArtifactIds": [258, 1285]
  }, {
    "id": 592,
    "transitiveDepSetIds": [593],
    "directArtifactIds": [1293]
  }, {
    "id": 598,
    "transitiveDepSetIds": [596],
    "directArtifactIds": [1285, 1294, 371]
  }, {
    "id": 597,
    "transitiveDepSetIds": [598],
    "directArtifactIds": [176]
  }, {
    "id": 599,
    "directArtifactIds": [1294, 374, 375]
  }, {
    "id": 602,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 601,
    "transitiveDepSetIds": [3, 602],
    "directArtifactIds": [114, 1301]
  }, {
    "id": 604,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1302, 211]
  }, {
    "id": 606,
    "transitiveDepSetIds": [13, 198, 16, 33, 34],
    "directArtifactIds": [1302, 156]
  }, {
    "id": 605,
    "transitiveDepSetIds": [606, 33],
    "directArtifactIds": [211]
  }, {
    "id": 603,
    "transitiveDepSetIds": [604, 605]
  }, {
    "id": 600,
    "transitiveDepSetIds": [601, 603],
    "directArtifactIds": [1303]
  }, {
    "id": 607,
    "directArtifactIds": [1301, 176]
  }, {
    "id": 610,
    "transitiveDepSetIds": [62, 204],
    "directArtifactIds": [225, 226, 224, 628, 1310]
  }, {
    "id": 609,
    "transitiveDepSetIds": [610],
    "directArtifactIds": [225, 1308]
  }, {
    "id": 608,
    "transitiveDepSetIds": [609],
    "directArtifactIds": [176]
  }, {
    "id": 611,
    "directArtifactIds": [1312]
  }, {
    "id": 614,
    "directArtifactIds": [1304, 1309]
  }, {
    "id": 615,
    "transitiveDepSetIds": [70, 211],
    "directArtifactIds": [1314]
  }, {
    "id": 618,
    "transitiveDepSetIds": [77, 216, 80, 84, 85],
    "directArtifactIds": [1314, 242]
  }, {
    "id": 617,
    "transitiveDepSetIds": [618, 84],
    "directArtifactIds": [258]
  }, {
    "id": 616,
    "transitiveDepSetIds": [617],
    "directArtifactIds": [1304]
  }, {
    "id": 613,
    "transitiveDepSetIds": [614, 615, 616, 89],
    "directArtifactIds": [258, 1304]
  }, {
    "id": 612,
    "transitiveDepSetIds": [613],
    "directArtifactIds": [1313]
  }, {
    "id": 620,
    "transitiveDepSetIds": [617],
    "directArtifactIds": [1304, 1315, 371]
  }, {
    "id": 619,
    "transitiveDepSetIds": [620],
    "directArtifactIds": [176]
  }, {
    "id": 621,
    "directArtifactIds": [1315, 374, 375]
  }, {
    "id": 622,
    "directArtifactIds": [1320, 1321, 965, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 964, 962, 963, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 623,
    "directArtifactIds": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 174, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 626,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 625,
    "transitiveDepSetIds": [3, 626],
    "directArtifactIds": [114, 1326]
  }, {
    "id": 624,
    "transitiveDepSetIds": [625],
    "directArtifactIds": [156]
  }, {
    "id": 627,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [114, 156, 1326, 173]
  }, {
    "id": 628,
    "directArtifactIds": [1326, 176]
  }, {
    "id": 631,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 630,
    "transitiveDepSetIds": [3, 631],
    "directArtifactIds": [114, 1332]
  }, {
    "id": 633,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [620, 211]
  }, {
    "id": 634,
    "transitiveDepSetIds": [197, 33],
    "directArtifactIds": [211]
  }, {
    "id": 632,
    "transitiveDepSetIds": [633, 634]
  }, {
    "id": 629,
    "transitiveDepSetIds": [630, 632],
    "directArtifactIds": [621]
  }, {
    "id": 635,
    "directArtifactIds": [1332, 176]
  }, {
    "id": 637,
    "transitiveDepSetIds": [203],
    "directArtifactIds": [225, 1337]
  }, {
    "id": 636,
    "transitiveDepSetIds": [637],
    "directArtifactIds": [176]
  }, {
    "id": 638,
    "directArtifactIds": [1340]
  }, {
    "id": 641,
    "directArtifactIds": [1333, 1338]
  }, {
    "id": 643,
    "transitiveDepSetIds": [215, 84],
    "directArtifactIds": [258]
  }, {
    "id": 642,
    "transitiveDepSetIds": [643],
    "directArtifactIds": [1333]
  }, {
    "id": 640,
    "transitiveDepSetIds": [641, 210, 642, 89],
    "directArtifactIds": [258, 1333]
  }, {
    "id": 639,
    "transitiveDepSetIds": [640],
    "directArtifactIds": [1341]
  }, {
    "id": 645,
    "transitiveDepSetIds": [643],
    "directArtifactIds": [1333, 1342, 371]
  }, {
    "id": 644,
    "transitiveDepSetIds": [645],
    "directArtifactIds": [176]
  }, {
    "id": 646,
    "directArtifactIds": [1342, 374, 375]
  }, {
    "id": 649,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 648,
    "transitiveDepSetIds": [3, 649],
    "directArtifactIds": [114, 1349]
  }, {
    "id": 651,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1350, 211]
  }, {
    "id": 653,
    "transitiveDepSetIds": [13, 16, 33, 34],
    "directArtifactIds": [1350, 156]
  }, {
    "id": 652,
    "transitiveDepSetIds": [653, 33],
    "directArtifactIds": [211]
  }, {
    "id": 650,
    "transitiveDepSetIds": [651, 652]
  }, {
    "id": 647,
    "transitiveDepSetIds": [648, 650],
    "directArtifactIds": [1351]
  }, {
    "id": 654,
    "directArtifactIds": [1349, 176]
  }, {
    "id": 657,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [225, 226, 224, 1358]
  }, {
    "id": 656,
    "transitiveDepSetIds": [657],
    "directArtifactIds": [225, 1356]
  }, {
    "id": 655,
    "transitiveDepSetIds": [656],
    "directArtifactIds": [176]
  }, {
    "id": 658,
    "directArtifactIds": [1360]
  }, {
    "id": 661,
    "directArtifactIds": [1352, 1357]
  }, {
    "id": 662,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [1362]
  }, {
    "id": 665,
    "transitiveDepSetIds": [77, 80, 84, 85],
    "directArtifactIds": [1362, 242]
  }, {
    "id": 664,
    "transitiveDepSetIds": [665, 84],
    "directArtifactIds": [258]
  }, {
    "id": 663,
    "transitiveDepSetIds": [664],
    "directArtifactIds": [1352]
  }, {
    "id": 660,
    "transitiveDepSetIds": [661, 662, 663, 89],
    "directArtifactIds": [258, 1352]
  }, {
    "id": 659,
    "transitiveDepSetIds": [660],
    "directArtifactIds": [1361]
  }, {
    "id": 667,
    "transitiveDepSetIds": [664],
    "directArtifactIds": [1352, 1363, 371]
  }, {
    "id": 666,
    "transitiveDepSetIds": [667],
    "directArtifactIds": [176]
  }, {
    "id": 668,
    "directArtifactIds": [1363, 374, 375]
  }, {
    "id": 669,
    "directArtifactIds": [1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1326, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 777, 778, 156, 149, 150, 155, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 408, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 672,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 671,
    "transitiveDepSetIds": [3, 672],
    "directArtifactIds": [114, 1325]
  }, {
    "id": 674,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1405, 211]
  }, {
    "id": 676,
    "transitiveDepSetIds": [13, 30, 31, 33],
    "directArtifactIds": [1405, 162, 156, 1406, 1407]
  }, {
    "id": 675,
    "transitiveDepSetIds": [676, 33],
    "directArtifactIds": [211]
  }, {
    "id": 673,
    "transitiveDepSetIds": [674, 675]
  }, {
    "id": 670,
    "transitiveDepSetIds": [671, 673],
    "directArtifactIds": [1408]
  }, {
    "id": 677,
    "directArtifactIds": [1325, 176]
  }, {
    "id": 680,
    "transitiveDepSetIds": [62, 63],
    "directArtifactIds": [225, 224, 227, 1415]
  }, {
    "id": 679,
    "transitiveDepSetIds": [680],
    "directArtifactIds": [225, 1413]
  }, {
    "id": 678,
    "transitiveDepSetIds": [679],
    "directArtifactIds": [176]
  }, {
    "id": 681,
    "directArtifactIds": [1417]
  }, {
    "id": 684,
    "directArtifactIds": [1409, 1414]
  }, {
    "id": 685,
    "transitiveDepSetIds": [70, 72],
    "directArtifactIds": [1419]
  }, {
    "id": 688,
    "transitiveDepSetIds": [77, 81, 82, 84],
    "directArtifactIds": [1419, 249, 242, 1420, 1421]
  }, {
    "id": 687,
    "transitiveDepSetIds": [688, 84],
    "directArtifactIds": [258]
  }, {
    "id": 686,
    "transitiveDepSetIds": [687],
    "directArtifactIds": [1409]
  }, {
    "id": 683,
    "transitiveDepSetIds": [684, 685, 686, 89],
    "directArtifactIds": [258, 1409]
  }, {
    "id": 682,
    "transitiveDepSetIds": [683],
    "directArtifactIds": [1418]
  }, {
    "id": 690,
    "transitiveDepSetIds": [687],
    "directArtifactIds": [1409, 1422, 371]
  }, {
    "id": 689,
    "transitiveDepSetIds": [690],
    "directArtifactIds": [176]
  }, {
    "id": 691,
    "directArtifactIds": [1422, 374, 375]
  }, {
    "id": 693,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 692,
    "transitiveDepSetIds": [3, 693],
    "directArtifactIds": [114]
  }, {
    "id": 694,
    "directArtifactIds": [176]
  }, {
    "id": 696,
    "directArtifactIds": [1434, 169, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 697,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 695,
    "transitiveDepSetIds": [696, 697]
  }, {
    "id": 700,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 699,
    "transitiveDepSetIds": [3, 700],
    "directArtifactIds": [114, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405]
  }, {
    "id": 702,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [162, 154, 156, 407, 408]
  }, {
    "id": 703,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [162, 156, 407, 408]
  }, {
    "id": 701,
    "transitiveDepSetIds": [702, 703]
  }, {
    "id": 698,
    "transitiveDepSetIds": [699, 701, 17]
  }, {
    "id": 704,
    "transitiveDepSetIds": [3, 702],
    "directArtifactIds": [114, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 173]
  }, {
    "id": 706,
    "directArtifactIds": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405]
  }, {
    "id": 705,
    "transitiveDepSetIds": [706],
    "directArtifactIds": [176]
  }, {
    "id": 709,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 708,
    "transitiveDepSetIds": [3, 709],
    "directArtifactIds": [114, 1330]
  }, {
    "id": 711,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [744, 211]
  }, {
    "id": 713,
    "transitiveDepSetIds": [13, 302, 33],
    "directArtifactIds": [744, 156]
  }, {
    "id": 712,
    "transitiveDepSetIds": [713, 33],
    "directArtifactIds": [211]
  }, {
    "id": 710,
    "transitiveDepSetIds": [711, 712]
  }, {
    "id": 707,
    "transitiveDepSetIds": [708, 710],
    "directArtifactIds": [745]
  }, {
    "id": 714,
    "directArtifactIds": [1330, 176]
  }, {
    "id": 717,
    "transitiveDepSetIds": [62],
    "directArtifactIds": [225, 224, 746]
  }, {
    "id": 716,
    "transitiveDepSetIds": [717],
    "directArtifactIds": [225, 1443]
  }, {
    "id": 715,
    "transitiveDepSetIds": [716],
    "directArtifactIds": [176]
  }, {
    "id": 718,
    "directArtifactIds": [1446]
  }, {
    "id": 721,
    "directArtifactIds": [1439, 1444]
  }, {
    "id": 722,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [740]
  }, {
    "id": 726,
    "transitiveDepSetIds": [83],
    "directArtifactIds": [1448, 242]
  }, {
    "id": 725,
    "transitiveDepSetIds": [77, 726, 84],
    "directArtifactIds": [740, 242]
  }, {
    "id": 724,
    "transitiveDepSetIds": [725, 84],
    "directArtifactIds": [258]
  }, {
    "id": 723,
    "transitiveDepSetIds": [724],
    "directArtifactIds": [1439]
  }, {
    "id": 720,
    "transitiveDepSetIds": [721, 722, 723, 89],
    "directArtifactIds": [258, 1439]
  }, {
    "id": 719,
    "transitiveDepSetIds": [720],
    "directArtifactIds": [1447]
  }, {
    "id": 728,
    "transitiveDepSetIds": [724],
    "directArtifactIds": [1439, 1449, 371]
  }, {
    "id": 727,
    "transitiveDepSetIds": [728],
    "directArtifactIds": [176]
  }, {
    "id": 729,
    "directArtifactIds": [1449, 374, 375]
  }, {
    "id": 732,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 731,
    "transitiveDepSetIds": [3, 732],
    "directArtifactIds": [114, 1454]
  }, {
    "id": 734,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1405, 211]
  }, {
    "id": 735,
    "transitiveDepSetIds": [676, 33],
    "directArtifactIds": [211]
  }, {
    "id": 733,
    "transitiveDepSetIds": [734, 735]
  }, {
    "id": 730,
    "transitiveDepSetIds": [731, 733],
    "directArtifactIds": [1408]
  }, {
    "id": 736,
    "directArtifactIds": [1454, 176]
  }, {
    "id": 738,
    "transitiveDepSetIds": [680],
    "directArtifactIds": [225, 1459]
  }, {
    "id": 737,
    "transitiveDepSetIds": [738],
    "directArtifactIds": [176]
  }, {
    "id": 739,
    "directArtifactIds": [1462]
  }, {
    "id": 742,
    "directArtifactIds": [1455, 1460]
  }, {
    "id": 744,
    "transitiveDepSetIds": [688, 84],
    "directArtifactIds": [258]
  }, {
    "id": 743,
    "transitiveDepSetIds": [744],
    "directArtifactIds": [1455]
  }, {
    "id": 741,
    "transitiveDepSetIds": [742, 685, 743, 89],
    "directArtifactIds": [258, 1455]
  }, {
    "id": 740,
    "transitiveDepSetIds": [741],
    "directArtifactIds": [1463]
  }, {
    "id": 746,
    "transitiveDepSetIds": [744],
    "directArtifactIds": [1455, 1464, 371]
  }, {
    "id": 745,
    "transitiveDepSetIds": [746],
    "directArtifactIds": [176]
  }, {
    "id": 747,
    "directArtifactIds": [1464, 374, 375]
  }, {
    "id": 748,
    "directArtifactIds": [1471, 259, 1472]
  }, {
    "id": 751,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 750,
    "transitiveDepSetIds": [3, 751],
    "directArtifactIds": [114, 1473]
  }, {
    "id": 753,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [885]
  }, {
    "id": 755,
    "transitiveDepSetIds": [13],
    "directArtifactIds": [885]
  }, {
    "id": 754,
    "transitiveDepSetIds": [13, 755]
  }, {
    "id": 752,
    "transitiveDepSetIds": [753, 754]
  }, {
    "id": 756,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [1474]
  }, {
    "id": 749,
    "transitiveDepSetIds": [750, 752, 756]
  }, {
    "id": 757,
    "transitiveDepSetIds": [3, 753],
    "directArtifactIds": [114, 1473, 173]
  }, {
    "id": 758,
    "directArtifactIds": [1473, 176]
  }, {
    "id": 761,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 760,
    "transitiveDepSetIds": [3, 761],
    "directArtifactIds": [114, 1300]
  }, {
    "id": 763,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 764,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 762,
    "transitiveDepSetIds": [763, 764]
  }, {
    "id": 765,
    "directArtifactIds": [207, 412]
  }, {
    "id": 759,
    "transitiveDepSetIds": [760, 762, 765]
  }, {
    "id": 766,
    "directArtifactIds": [1300, 176]
  }, {
    "id": 768,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 1486]
  }, {
    "id": 767,
    "transitiveDepSetIds": [768],
    "directArtifactIds": [176]
  }, {
    "id": 769,
    "directArtifactIds": [1489]
  }, {
    "id": 772,
    "directArtifactIds": [1482, 1487]
  }, {
    "id": 774,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 773,
    "transitiveDepSetIds": [774],
    "directArtifactIds": [1482]
  }, {
    "id": 771,
    "transitiveDepSetIds": [772, 126, 127, 773, 89],
    "directArtifactIds": [258, 1482]
  }, {
    "id": 770,
    "transitiveDepSetIds": [771],
    "directArtifactIds": [1490]
  }, {
    "id": 776,
    "transitiveDepSetIds": [774],
    "directArtifactIds": [1482, 1491, 371]
  }, {
    "id": 775,
    "transitiveDepSetIds": [776],
    "directArtifactIds": [176]
  }, {
    "id": 777,
    "directArtifactIds": [1491, 374, 375]
  }, {
    "id": 779,
    "directArtifactIds": [1496, 237, 233, 235, 234, 236, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 780,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 778,
    "transitiveDepSetIds": [779, 780]
  }, {
    "id": 782,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 781,
    "transitiveDepSetIds": [3, 782],
    "directArtifactIds": [114]
  }, {
    "id": 784,
    "directArtifactIds": [1502, 1503, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 785,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 783,
    "transitiveDepSetIds": [784, 785]
  }, {
    "id": 788,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 787,
    "transitiveDepSetIds": [3, 788],
    "directArtifactIds": [114, 1323]
  }, {
    "id": 790,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1405, 211]
  }, {
    "id": 791,
    "transitiveDepSetIds": [676, 33],
    "directArtifactIds": [211]
  }, {
    "id": 789,
    "transitiveDepSetIds": [790, 791]
  }, {
    "id": 786,
    "transitiveDepSetIds": [787, 789],
    "directArtifactIds": [1408]
  }, {
    "id": 792,
    "directArtifactIds": [1323, 176]
  }, {
    "id": 794,
    "transitiveDepSetIds": [680],
    "directArtifactIds": [225, 1509]
  }, {
    "id": 793,
    "transitiveDepSetIds": [794],
    "directArtifactIds": [176]
  }, {
    "id": 795,
    "directArtifactIds": [1512]
  }, {
    "id": 798,
    "directArtifactIds": [1505, 1510]
  }, {
    "id": 800,
    "transitiveDepSetIds": [688, 84],
    "directArtifactIds": [258]
  }, {
    "id": 799,
    "transitiveDepSetIds": [800],
    "directArtifactIds": [1505]
  }, {
    "id": 797,
    "transitiveDepSetIds": [798, 685, 799, 89],
    "directArtifactIds": [258, 1505]
  }, {
    "id": 796,
    "transitiveDepSetIds": [797],
    "directArtifactIds": [1513]
  }, {
    "id": 802,
    "transitiveDepSetIds": [800],
    "directArtifactIds": [1505, 1514, 371]
  }, {
    "id": 801,
    "transitiveDepSetIds": [802],
    "directArtifactIds": [176]
  }, {
    "id": 803,
    "directArtifactIds": [1514, 374, 375]
  }, {
    "id": 805,
    "directArtifactIds": [1519, 633, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 806,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 804,
    "transitiveDepSetIds": [805, 806]
  }, {
    "id": 808,
    "directArtifactIds": [1522, 224, 220, 221, 223, 222, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 809,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 807,
    "transitiveDepSetIds": [808, 809]
  }, {
    "id": 810,
    "directArtifactIds": [851, 1524]
  }, {
    "id": 812,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 811,
    "transitiveDepSetIds": [3, 812],
    "directArtifactIds": [114]
  }, {
    "id": 815,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 814,
    "transitiveDepSetIds": [3, 815],
    "directArtifactIds": [114, 1348]
  }, {
    "id": 817,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 818,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 816,
    "transitiveDepSetIds": [817, 818]
  }, {
    "id": 819,
    "directArtifactIds": [207, 412]
  }, {
    "id": 813,
    "transitiveDepSetIds": [814, 816, 819]
  }, {
    "id": 820,
    "directArtifactIds": [1348, 176]
  }, {
    "id": 822,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 1532]
  }, {
    "id": 821,
    "transitiveDepSetIds": [822],
    "directArtifactIds": [176]
  }, {
    "id": 823,
    "directArtifactIds": [1535]
  }, {
    "id": 826,
    "directArtifactIds": [1528, 1533]
  }, {
    "id": 828,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 827,
    "transitiveDepSetIds": [828],
    "directArtifactIds": [1528]
  }, {
    "id": 825,
    "transitiveDepSetIds": [826, 126, 127, 827, 89],
    "directArtifactIds": [258, 1528]
  }, {
    "id": 824,
    "transitiveDepSetIds": [825],
    "directArtifactIds": [1536]
  }, {
    "id": 830,
    "transitiveDepSetIds": [828],
    "directArtifactIds": [1528, 1537, 371]
  }, {
    "id": 829,
    "transitiveDepSetIds": [830],
    "directArtifactIds": [176]
  }, {
    "id": 831,
    "directArtifactIds": [1537, 374, 375]
  }, {
    "id": 832,
    "directArtifactIds": [989, 990, 991, 1542, 992, 993, 1543, 994, 699, 1544, 995, 996, 997, 998, 999, 1000, 1001, 1545, 1002, 1546, 1003, 1004, 1005, 1547, 1006, 1548, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 1253, 1254, 1255, 1256, 1257, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 881, 882, 883, 884, 1549, 1550, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1326, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1320, 1321, 887, 888, 889, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 518, 672, 670, 671, 174, 885, 1551, 406, 407, 408, 777, 778, 965, 964, 962, 963, 212, 379, 188, 185, 186, 191, 183, 189, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 835,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 834,
    "transitiveDepSetIds": [3, 835],
    "directArtifactIds": [114, 1553, 1554, 1555, 1556, 1557, 1558, 1559]
  }, {
    "id": 837,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [187, 518, 162, 154, 156]
  }, {
    "id": 838,
    "transitiveDepSetIds": [13, 30, 198, 16, 33, 34],
    "directArtifactIds": [162, 156]
  }, {
    "id": 836,
    "transitiveDepSetIds": [837, 838]
  }, {
    "id": 839,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [192, 731]
  }, {
    "id": 833,
    "transitiveDepSetIds": [834, 836, 839]
  }, {
    "id": 840,
    "transitiveDepSetIds": [3, 837],
    "directArtifactIds": [114, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 173]
  }, {
    "id": 842,
    "directArtifactIds": [1553, 1554, 1555, 1556, 1557, 1558, 1559]
  }, {
    "id": 841,
    "transitiveDepSetIds": [842],
    "directArtifactIds": [176]
  }, {
    "id": 845,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 844,
    "transitiveDepSetIds": [3, 845],
    "directArtifactIds": [114, 1549, 1550]
  }, {
    "id": 846,
    "transitiveDepSetIds": [11, 13]
  }, {
    "id": 843,
    "transitiveDepSetIds": [844, 846, 17]
  }, {
    "id": 847,
    "transitiveDepSetIds": [3, 11],
    "directArtifactIds": [114, 1549, 1550, 173]
  }, {
    "id": 849,
    "directArtifactIds": [1549, 1550]
  }, {
    "id": 848,
    "transitiveDepSetIds": [849],
    "directArtifactIds": [176]
  }, {
    "id": 850,
    "directArtifactIds": [989, 990, 991, 1542, 992, 993, 1543, 994, 699, 1544, 995, 996, 997, 998, 999, 1000, 1001, 1545, 1002, 1546, 1003, 1004, 1005, 1547, 1006, 1548, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 853,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 852,
    "transitiveDepSetIds": [3, 853],
    "directArtifactIds": [114, 881, 882, 883, 884]
  }, {
    "id": 854,
    "transitiveDepSetIds": [11, 13]
  }, {
    "id": 851,
    "transitiveDepSetIds": [852, 854, 17]
  }, {
    "id": 855,
    "transitiveDepSetIds": [3, 11],
    "directArtifactIds": [114, 881, 882, 883, 884, 173]
  }, {
    "id": 857,
    "directArtifactIds": [881, 882, 883, 884]
  }, {
    "id": 856,
    "transitiveDepSetIds": [857],
    "directArtifactIds": [176]
  }, {
    "id": 858,
    "directArtifactIds": [1549, 1550, 1551, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 860,
    "directArtifactIds": [1574, 1568, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 861,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 859,
    "transitiveDepSetIds": [860, 861]
  }, {
    "id": 864,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 863,
    "transitiveDepSetIds": [3, 864],
    "directArtifactIds": [114, 1470]
  }, {
    "id": 866,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [198, 211]
  }, {
    "id": 867,
    "transitiveDepSetIds": [474, 33],
    "directArtifactIds": [211]
  }, {
    "id": 865,
    "transitiveDepSetIds": [866, 867]
  }, {
    "id": 862,
    "transitiveDepSetIds": [863, 865],
    "directArtifactIds": [199]
  }, {
    "id": 868,
    "directArtifactIds": [1470, 176]
  }, {
    "id": 870,
    "transitiveDepSetIds": [478],
    "directArtifactIds": [225, 1580]
  }, {
    "id": 869,
    "transitiveDepSetIds": [870],
    "directArtifactIds": [176]
  }, {
    "id": 871,
    "directArtifactIds": [1583]
  }, {
    "id": 874,
    "directArtifactIds": [1576, 1581]
  }, {
    "id": 876,
    "transitiveDepSetIds": [488, 84],
    "directArtifactIds": [258]
  }, {
    "id": 875,
    "transitiveDepSetIds": [876],
    "directArtifactIds": [1576]
  }, {
    "id": 873,
    "transitiveDepSetIds": [874, 484, 875, 89],
    "directArtifactIds": [258, 1576]
  }, {
    "id": 872,
    "transitiveDepSetIds": [873],
    "directArtifactIds": [1584]
  }, {
    "id": 878,
    "transitiveDepSetIds": [876],
    "directArtifactIds": [1576, 1585, 371]
  }, {
    "id": 877,
    "transitiveDepSetIds": [878],
    "directArtifactIds": [176]
  }, {
    "id": 879,
    "directArtifactIds": [1585, 374, 375]
  }, {
    "id": 882,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 881,
    "transitiveDepSetIds": [3, 882],
    "directArtifactIds": [114, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403]
  }, {
    "id": 884,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [778, 154, 156, 408]
  }, {
    "id": 885,
    "transitiveDepSetIds": [313, 13, 16],
    "directArtifactIds": [156, 408]
  }, {
    "id": 883,
    "transitiveDepSetIds": [884, 885]
  }, {
    "id": 886,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [779]
  }, {
    "id": 880,
    "transitiveDepSetIds": [881, 883, 886]
  }, {
    "id": 887,
    "transitiveDepSetIds": [3, 884],
    "directArtifactIds": [114, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 173]
  }, {
    "id": 889,
    "directArtifactIds": [1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403]
  }, {
    "id": 888,
    "transitiveDepSetIds": [889],
    "directArtifactIds": [176]
  }, {
    "id": 892,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 891,
    "transitiveDepSetIds": [3, 892],
    "directArtifactIds": [114, 667]
  }, {
    "id": 894,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 211]
  }, {
    "id": 895,
    "transitiveDepSetIds": [114, 115, 33],
    "directArtifactIds": [211]
  }, {
    "id": 893,
    "transitiveDepSetIds": [894, 895]
  }, {
    "id": 896,
    "directArtifactIds": [207, 412]
  }, {
    "id": 890,
    "transitiveDepSetIds": [891, 893, 896]
  }, {
    "id": 897,
    "directArtifactIds": [667, 176]
  }, {
    "id": 899,
    "transitiveDepSetIds": [120, 121],
    "directArtifactIds": [225, 1597]
  }, {
    "id": 898,
    "transitiveDepSetIds": [899],
    "directArtifactIds": [176]
  }, {
    "id": 900,
    "directArtifactIds": [1600]
  }, {
    "id": 903,
    "directArtifactIds": [1593, 1598]
  }, {
    "id": 905,
    "transitiveDepSetIds": [130, 131, 84],
    "directArtifactIds": [258]
  }, {
    "id": 904,
    "transitiveDepSetIds": [905],
    "directArtifactIds": [1593]
  }, {
    "id": 902,
    "transitiveDepSetIds": [903, 126, 127, 904, 89],
    "directArtifactIds": [258, 1593]
  }, {
    "id": 901,
    "transitiveDepSetIds": [902],
    "directArtifactIds": [1601]
  }, {
    "id": 907,
    "transitiveDepSetIds": [905],
    "directArtifactIds": [1593, 1602, 371]
  }, {
    "id": 906,
    "transitiveDepSetIds": [907],
    "directArtifactIds": [176]
  }, {
    "id": 908,
    "directArtifactIds": [1602, 374, 375]
  }, {
    "id": 909,
    "directArtifactIds": [928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 188, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 912,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 911,
    "transitiveDepSetIds": [3, 912],
    "directArtifactIds": [114, 1427]
  }, {
    "id": 914,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [385, 211]
  }, {
    "id": 916,
    "transitiveDepSetIds": [103, 37, 33, 34],
    "directArtifactIds": [385]
  }, {
    "id": 915,
    "transitiveDepSetIds": [916, 33],
    "directArtifactIds": [211]
  }, {
    "id": 913,
    "transitiveDepSetIds": [914, 915]
  }, {
    "id": 910,
    "transitiveDepSetIds": [911, 913],
    "directArtifactIds": [386]
  }, {
    "id": 917,
    "directArtifactIds": [1427, 176]
  }, {
    "id": 921,
    "transitiveDepSetIds": [479],
    "directArtifactIds": [226, 736, 894]
  }, {
    "id": 920,
    "transitiveDepSetIds": [921, 479],
    "directArtifactIds": [225, 226, 894, 736, 387]
  }, {
    "id": 919,
    "transitiveDepSetIds": [920],
    "directArtifactIds": [225, 1612]
  }, {
    "id": 918,
    "transitiveDepSetIds": [919],
    "directArtifactIds": [176]
  }, {
    "id": 922,
    "directArtifactIds": [1615]
  }, {
    "id": 925,
    "directArtifactIds": [1608, 1613]
  }, {
    "id": 927,
    "transitiveDepSetIds": [485],
    "directArtifactIds": [905]
  }, {
    "id": 926,
    "transitiveDepSetIds": [927, 485],
    "directArtifactIds": [381]
  }, {
    "id": 931,
    "transitiveDepSetIds": [489, 85],
    "directArtifactIds": [905, 246]
  }, {
    "id": 930,
    "transitiveDepSetIds": [931, 489, 84, 85],
    "directArtifactIds": [381]
  }, {
    "id": 929,
    "transitiveDepSetIds": [930, 84],
    "directArtifactIds": [258]
  }, {
    "id": 928,
    "transitiveDepSetIds": [929],
    "directArtifactIds": [1608]
  }, {
    "id": 924,
    "transitiveDepSetIds": [925, 926, 928, 89],
    "directArtifactIds": [258, 1608]
  }, {
    "id": 923,
    "transitiveDepSetIds": [924],
    "directArtifactIds": [1616]
  }, {
    "id": 933,
    "transitiveDepSetIds": [929],
    "directArtifactIds": [1608, 1617, 371]
  }, {
    "id": 932,
    "transitiveDepSetIds": [933],
    "directArtifactIds": [176]
  }, {
    "id": 934,
    "directArtifactIds": [1617, 374, 375]
  }, {
    "id": 937,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 936,
    "transitiveDepSetIds": [3, 937],
    "directArtifactIds": [114, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 1622, 517]
  }, {
    "id": 939,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [155, 154, 156]
  }, {
    "id": 940,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [155, 156]
  }, {
    "id": 938,
    "transitiveDepSetIds": [939, 940]
  }, {
    "id": 935,
    "transitiveDepSetIds": [936, 938, 17]
  }, {
    "id": 941,
    "transitiveDepSetIds": [3, 939],
    "directArtifactIds": [114, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 1622, 517, 173]
  }, {
    "id": 943,
    "directArtifactIds": [505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 1622, 517]
  }, {
    "id": 942,
    "transitiveDepSetIds": [943],
    "directArtifactIds": [176]
  }, {
    "id": 945,
    "directArtifactIds": [1626, 1563, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 946,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 944,
    "transitiveDepSetIds": [945, 946]
  }, {
    "id": 949,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 948,
    "transitiveDepSetIds": [3, 949],
    "directArtifactIds": [114, 1628]
  }, {
    "id": 951,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [206, 411, 1405]
  }, {
    "id": 952,
    "transitiveDepSetIds": [114, 115, 676, 33]
  }, {
    "id": 950,
    "transitiveDepSetIds": [951, 952]
  }, {
    "id": 953,
    "directArtifactIds": [207, 412, 1408]
  }, {
    "id": 947,
    "transitiveDepSetIds": [948, 950, 953]
  }, {
    "id": 954,
    "transitiveDepSetIds": [3, 951],
    "directArtifactIds": [114, 1628, 173]
  }, {
    "id": 955,
    "directArtifactIds": [1628, 176]
  }, {
    "id": 957,
    "directArtifactIds": [1636, 940, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 958,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 956,
    "transitiveDepSetIds": [957, 958]
  }, {
    "id": 960,
    "directArtifactIds": [1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667]
  }, {
    "id": 959,
    "transitiveDepSetIds": [960],
    "directArtifactIds": [176]
  }, {
    "id": 963,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 962,
    "transitiveDepSetIds": [3, 963],
    "directArtifactIds": [114, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678]
  }, {
    "id": 965,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [154, 156]
  }, {
    "id": 966,
    "transitiveDepSetIds": [13, 16, 33, 34],
    "directArtifactIds": [156]
  }, {
    "id": 964,
    "transitiveDepSetIds": [965, 966]
  }, {
    "id": 961,
    "transitiveDepSetIds": [962, 964, 17]
  }, {
    "id": 967,
    "transitiveDepSetIds": [3, 965],
    "directArtifactIds": [114, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 173]
  }, {
    "id": 969,
    "directArtifactIds": [1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678]
  }, {
    "id": 968,
    "transitiveDepSetIds": [969],
    "directArtifactIds": [176]
  }, {
    "id": 972,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 971,
    "transitiveDepSetIds": [3, 972],
    "directArtifactIds": [114, 1545]
  }, {
    "id": 970,
    "transitiveDepSetIds": [971],
    "directArtifactIds": [156]
  }, {
    "id": 973,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [114, 156, 1545, 173]
  }, {
    "id": 974,
    "directArtifactIds": [1545, 176]
  }, {
    "id": 976,
    "directArtifactIds": [1685, 917, 916, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 977,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 975,
    "transitiveDepSetIds": [976, 977]
  }, {
    "id": 980,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 979,
    "transitiveDepSetIds": [3, 980],
    "directArtifactIds": [114, 1433]
  }, {
    "id": 982,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [475, 211]
  }, {
    "id": 983,
    "transitiveDepSetIds": [383, 33],
    "directArtifactIds": [211]
  }, {
    "id": 981,
    "transitiveDepSetIds": [982, 983]
  }, {
    "id": 978,
    "transitiveDepSetIds": [979, 981],
    "directArtifactIds": [476]
  }, {
    "id": 984,
    "directArtifactIds": [1433, 176]
  }, {
    "id": 986,
    "transitiveDepSetIds": [387],
    "directArtifactIds": [225, 1691]
  }, {
    "id": 985,
    "transitiveDepSetIds": [986],
    "directArtifactIds": [176]
  }, {
    "id": 987,
    "directArtifactIds": [1694]
  }, {
    "id": 990,
    "directArtifactIds": [1687, 1692]
  }, {
    "id": 992,
    "transitiveDepSetIds": [397, 84],
    "directArtifactIds": [258]
  }, {
    "id": 991,
    "transitiveDepSetIds": [992],
    "directArtifactIds": [1687]
  }, {
    "id": 989,
    "transitiveDepSetIds": [990, 393, 991, 89],
    "directArtifactIds": [258, 1687]
  }, {
    "id": 988,
    "transitiveDepSetIds": [989],
    "directArtifactIds": [1695]
  }, {
    "id": 994,
    "transitiveDepSetIds": [992],
    "directArtifactIds": [1687, 1696, 371]
  }, {
    "id": 993,
    "transitiveDepSetIds": [994],
    "directArtifactIds": [176]
  }, {
    "id": 995,
    "directArtifactIds": [1696, 374, 375]
  }, {
    "id": 997,
    "directArtifactIds": [1701, 922, 921, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 998,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 996,
    "transitiveDepSetIds": [997, 998]
  }, {
    "id": 1000,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 999,
    "transitiveDepSetIds": [3, 1000],
    "directArtifactIds": [114]
  }, {
    "id": 1003,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1002,
    "transitiveDepSetIds": [3, 1003],
    "directArtifactIds": [114, 945]
  }, {
    "id": 1005,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1302, 211]
  }, {
    "id": 1006,
    "transitiveDepSetIds": [606, 33],
    "directArtifactIds": [211]
  }, {
    "id": 1004,
    "transitiveDepSetIds": [1005, 1006]
  }, {
    "id": 1001,
    "transitiveDepSetIds": [1002, 1004],
    "directArtifactIds": [1303]
  }, {
    "id": 1007,
    "directArtifactIds": [945, 176]
  }, {
    "id": 1009,
    "transitiveDepSetIds": [610],
    "directArtifactIds": [225, 1710]
  }, {
    "id": 1008,
    "transitiveDepSetIds": [1009],
    "directArtifactIds": [176]
  }, {
    "id": 1010,
    "directArtifactIds": [1713]
  }, {
    "id": 1013,
    "directArtifactIds": [1706, 1711]
  }, {
    "id": 1015,
    "transitiveDepSetIds": [618, 84],
    "directArtifactIds": [258]
  }, {
    "id": 1014,
    "transitiveDepSetIds": [1015],
    "directArtifactIds": [1706]
  }, {
    "id": 1012,
    "transitiveDepSetIds": [1013, 615, 1014, 89],
    "directArtifactIds": [258, 1706]
  }, {
    "id": 1011,
    "transitiveDepSetIds": [1012],
    "directArtifactIds": [1714]
  }, {
    "id": 1017,
    "transitiveDepSetIds": [1015],
    "directArtifactIds": [1706, 1715, 371]
  }, {
    "id": 1016,
    "transitiveDepSetIds": [1017],
    "directArtifactIds": [176]
  }, {
    "id": 1018,
    "directArtifactIds": [1715, 374, 375]
  }, {
    "id": 1021,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1020,
    "transitiveDepSetIds": [3, 1021],
    "directArtifactIds": [114, 1720]
  }, {
    "id": 1024,
    "directArtifactIds": [964, 962]
  }, {
    "id": 1023,
    "transitiveDepSetIds": [11, 27, 1024],
    "directArtifactIds": [965]
  }, {
    "id": 1025,
    "transitiveDepSetIds": [13, 500, 33, 501]
  }, {
    "id": 1022,
    "transitiveDepSetIds": [1023, 1025]
  }, {
    "id": 1026,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [1721]
  }, {
    "id": 1019,
    "transitiveDepSetIds": [1020, 1022, 1026]
  }, {
    "id": 1027,
    "transitiveDepSetIds": [3, 1023],
    "directArtifactIds": [114, 1720, 173]
  }, {
    "id": 1028,
    "directArtifactIds": [1720, 176]
  }, {
    "id": 1031,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1030,
    "transitiveDepSetIds": [3, 1031],
    "directArtifactIds": [114, 1432]
  }, {
    "id": 1033,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1350, 211]
  }, {
    "id": 1034,
    "transitiveDepSetIds": [653, 33],
    "directArtifactIds": [211]
  }, {
    "id": 1032,
    "transitiveDepSetIds": [1033, 1034]
  }, {
    "id": 1029,
    "transitiveDepSetIds": [1030, 1032],
    "directArtifactIds": [1351]
  }, {
    "id": 1035,
    "directArtifactIds": [1432, 176]
  }, {
    "id": 1037,
    "transitiveDepSetIds": [657],
    "directArtifactIds": [225, 1729]
  }, {
    "id": 1036,
    "transitiveDepSetIds": [1037],
    "directArtifactIds": [176]
  }, {
    "id": 1038,
    "directArtifactIds": [1732]
  }, {
    "id": 1041,
    "directArtifactIds": [1725, 1730]
  }, {
    "id": 1043,
    "transitiveDepSetIds": [665, 84],
    "directArtifactIds": [258]
  }, {
    "id": 1042,
    "transitiveDepSetIds": [1043],
    "directArtifactIds": [1725]
  }, {
    "id": 1040,
    "transitiveDepSetIds": [1041, 662, 1042, 89],
    "directArtifactIds": [258, 1725]
  }, {
    "id": 1039,
    "transitiveDepSetIds": [1040],
    "directArtifactIds": [1733]
  }, {
    "id": 1045,
    "transitiveDepSetIds": [1043],
    "directArtifactIds": [1725, 1734, 371]
  }, {
    "id": 1044,
    "transitiveDepSetIds": [1045],
    "directArtifactIds": [176]
  }, {
    "id": 1046,
    "directArtifactIds": [1734, 374, 375]
  }, {
    "id": 1048,
    "directArtifactIds": [1739, 978, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 1049,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 1047,
    "transitiveDepSetIds": [1048, 1049]
  }, {
    "id": 1052,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1051,
    "transitiveDepSetIds": [3, 1052],
    "directArtifactIds": [114, 889]
  }, {
    "id": 1054,
    "transitiveDepSetIds": [28],
    "directArtifactIds": [188, 159]
  }, {
    "id": 1055,
    "transitiveDepSetIds": [37, 34],
    "directArtifactIds": [159]
  }, {
    "id": 1053,
    "transitiveDepSetIds": [1054, 1055]
  }, {
    "id": 1050,
    "transitiveDepSetIds": [1051, 1053],
    "directArtifactIds": [193]
  }, {
    "id": 1056,
    "transitiveDepSetIds": [3, 1054],
    "directArtifactIds": [114, 889, 173]
  }, {
    "id": 1057,
    "directArtifactIds": [889, 176]
  }, {
    "id": 1060,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1059,
    "transitiveDepSetIds": [3, 1060],
    "directArtifactIds": [114, 1744, 1745, 1746, 1747, 1748]
  }, {
    "id": 1062,
    "transitiveDepSetIds": [11, 27],
    "directArtifactIds": [187, 162, 190, 156, 1406, 1407]
  }, {
    "id": 1063,
    "transitiveDepSetIds": [13, 30, 31, 33],
    "directArtifactIds": [162, 156, 1406, 1407]
  }, {
    "id": 1061,
    "transitiveDepSetIds": [1062, 1063]
  }, {
    "id": 1064,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [192]
  }, {
    "id": 1058,
    "transitiveDepSetIds": [1059, 1061, 1064]
  }, {
    "id": 1065,
    "transitiveDepSetIds": [3, 1062],
    "directArtifactIds": [114, 1744, 1745, 1746, 1747, 1748, 173]
  }, {
    "id": 1067,
    "directArtifactIds": [1744, 1745, 1746, 1747, 1748]
  }, {
    "id": 1066,
    "transitiveDepSetIds": [1067],
    "directArtifactIds": [176]
  }, {
    "id": 1070,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1069,
    "transitiveDepSetIds": [3, 1070],
    "directArtifactIds": [114, 645]
  }, {
    "id": 1072,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [1405, 211]
  }, {
    "id": 1073,
    "transitiveDepSetIds": [676, 33],
    "directArtifactIds": [211]
  }, {
    "id": 1071,
    "transitiveDepSetIds": [1072, 1073]
  }, {
    "id": 1068,
    "transitiveDepSetIds": [1069, 1071],
    "directArtifactIds": [1408]
  }, {
    "id": 1074,
    "directArtifactIds": [645, 176]
  }, {
    "id": 1076,
    "transitiveDepSetIds": [680],
    "directArtifactIds": [225, 1756]
  }, {
    "id": 1075,
    "transitiveDepSetIds": [1076],
    "directArtifactIds": [176]
  }, {
    "id": 1077,
    "directArtifactIds": [1759]
  }, {
    "id": 1080,
    "directArtifactIds": [1752, 1757]
  }, {
    "id": 1082,
    "transitiveDepSetIds": [688, 84],
    "directArtifactIds": [258]
  }, {
    "id": 1081,
    "transitiveDepSetIds": [1082],
    "directArtifactIds": [1752]
  }, {
    "id": 1079,
    "transitiveDepSetIds": [1080, 685, 1081, 89],
    "directArtifactIds": [258, 1752]
  }, {
    "id": 1078,
    "transitiveDepSetIds": [1079],
    "directArtifactIds": [1760]
  }, {
    "id": 1084,
    "transitiveDepSetIds": [1082],
    "directArtifactIds": [1752, 1761, 371]
  }, {
    "id": 1083,
    "transitiveDepSetIds": [1084],
    "directArtifactIds": [176]
  }, {
    "id": 1085,
    "directArtifactIds": [1761, 374, 375]
  }, {
    "id": 1088,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1087,
    "transitiveDepSetIds": [3, 1088],
    "directArtifactIds": [114, 663]
  }, {
    "id": 1090,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [961, 211]
  }, {
    "id": 1091,
    "transitiveDepSetIds": [499, 33],
    "directArtifactIds": [211]
  }, {
    "id": 1089,
    "transitiveDepSetIds": [1090, 1091]
  }, {
    "id": 1086,
    "transitiveDepSetIds": [1087, 1089],
    "directArtifactIds": [966]
  }, {
    "id": 1092,
    "directArtifactIds": [663, 176]
  }, {
    "id": 1094,
    "transitiveDepSetIds": [507],
    "directArtifactIds": [225, 1770]
  }, {
    "id": 1093,
    "transitiveDepSetIds": [1094],
    "directArtifactIds": [176]
  }, {
    "id": 1095,
    "directArtifactIds": [1773]
  }, {
    "id": 1098,
    "directArtifactIds": [1766, 1771]
  }, {
    "id": 1100,
    "transitiveDepSetIds": [517, 84],
    "directArtifactIds": [258]
  }, {
    "id": 1099,
    "transitiveDepSetIds": [1100],
    "directArtifactIds": [1766]
  }, {
    "id": 1097,
    "transitiveDepSetIds": [1098, 513, 1099, 89],
    "directArtifactIds": [258, 1766]
  }, {
    "id": 1096,
    "transitiveDepSetIds": [1097],
    "directArtifactIds": [1774]
  }, {
    "id": 1102,
    "transitiveDepSetIds": [1100],
    "directArtifactIds": [1766, 1775, 371]
  }, {
    "id": 1101,
    "transitiveDepSetIds": [1102],
    "directArtifactIds": [176]
  }, {
    "id": 1103,
    "directArtifactIds": [1775, 374, 375]
  }, {
    "id": 1106,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1105,
    "transitiveDepSetIds": [3, 1106],
    "directArtifactIds": [114, 1780]
  }, {
    "id": 1108,
    "transitiveDepSetIds": [11, 27, 28],
    "directArtifactIds": [518, 154, 156]
  }, {
    "id": 1109,
    "transitiveDepSetIds": [13, 198, 16, 33, 34],
    "directArtifactIds": [156]
  }, {
    "id": 1107,
    "transitiveDepSetIds": [1108, 1109]
  }, {
    "id": 1110,
    "transitiveDepSetIds": [17],
    "directArtifactIds": [731]
  }, {
    "id": 1104,
    "transitiveDepSetIds": [1105, 1107, 1110]
  }, {
    "id": 1111,
    "transitiveDepSetIds": [3, 1108],
    "directArtifactIds": [114, 1780, 173]
  }, {
    "id": 1112,
    "directArtifactIds": [1780, 176]
  }, {
    "id": 1115,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1114,
    "transitiveDepSetIds": [3, 1115],
    "directArtifactIds": [114, 1542, 1543, 1544, 1546, 1547, 1548]
  }, {
    "id": 1117,
    "directArtifactIds": [155, 156]
  }, {
    "id": 1118,
    "directArtifactIds": [155, 156]
  }, {
    "id": 1116,
    "transitiveDepSetIds": [1117, 1118]
  }, {
    "id": 1113,
    "transitiveDepSetIds": [1114, 1116]
  }, {
    "id": 1119,
    "transitiveDepSetIds": [3, 1117],
    "directArtifactIds": [114, 1542, 1543, 1544, 1546, 1547, 1548, 173]
  }, {
    "id": 1121,
    "directArtifactIds": [1542, 1543, 1544, 1546, 1547, 1548]
  }, {
    "id": 1120,
    "transitiveDepSetIds": [1121],
    "directArtifactIds": [176]
  }, {
    "id": 1124,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1123,
    "transitiveDepSetIds": [3, 1124],
    "directArtifactIds": [114, 1253, 1254, 1255, 1256, 1257]
  }, {
    "id": 1126,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [670, 154, 156]
  }, {
    "id": 1127,
    "transitiveDepSetIds": [13, 257, 16],
    "directArtifactIds": [156]
  }, {
    "id": 1125,
    "transitiveDepSetIds": [1126, 1127]
  }, {
    "id": 1122,
    "transitiveDepSetIds": [1123, 1125, 17]
  }, {
    "id": 1128,
    "transitiveDepSetIds": [3, 1126],
    "directArtifactIds": [114, 1253, 1254, 1255, 1256, 1257, 173]
  }, {
    "id": 1130,
    "directArtifactIds": [1253, 1254, 1255, 1256, 1257]
  }, {
    "id": 1129,
    "transitiveDepSetIds": [1130],
    "directArtifactIds": [176]
  }, {
    "id": 1133,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1132,
    "transitiveDepSetIds": [3, 1133],
    "directArtifactIds": [114, 1320, 1321]
  }, {
    "id": 1135,
    "transitiveDepSetIds": [11, 1024],
    "directArtifactIds": [154]
  }, {
    "id": 1136,
    "transitiveDepSetIds": [13, 16, 501]
  }, {
    "id": 1134,
    "transitiveDepSetIds": [1135, 1136]
  }, {
    "id": 1131,
    "transitiveDepSetIds": [1132, 1134, 17]
  }, {
    "id": 1137,
    "transitiveDepSetIds": [3, 1135],
    "directArtifactIds": [114, 1320, 1321, 173]
  }, {
    "id": 1139,
    "directArtifactIds": [1320, 1321]
  }, {
    "id": 1138,
    "transitiveDepSetIds": [1139],
    "directArtifactIds": [176]
  }, {
    "id": 1141,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1140,
    "transitiveDepSetIds": [3, 1141],
    "directArtifactIds": [114]
  }, {
    "id": 1143,
    "directArtifactIds": [1796, 628, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 1144,
    "transitiveDepSetIds": [173, 175],
    "directArtifactIds": [496, 499]
  }, {
    "id": 1142,
    "transitiveDepSetIds": [1143, 1144]
  }, {
    "id": 1146,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1145,
    "transitiveDepSetIds": [3, 1146],
    "directArtifactIds": [114]
  }, {
    "id": 1149,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1148,
    "transitiveDepSetIds": [3, 1149],
    "directArtifactIds": [114, 887, 888]
  }, {
    "id": 1151,
    "transitiveDepSetIds": [11],
    "directArtifactIds": [155, 154, 156]
  }, {
    "id": 1152,
    "transitiveDepSetIds": [13, 16],
    "directArtifactIds": [155, 156]
  }, {
    "id": 1150,
    "transitiveDepSetIds": [1151, 1152]
  }, {
    "id": 1147,
    "transitiveDepSetIds": [1148, 1150, 17]
  }, {
    "id": 1153,
    "transitiveDepSetIds": [3, 1151],
    "directArtifactIds": [114, 887, 888, 173]
  }, {
    "id": 1155,
    "directArtifactIds": [887, 888]
  }, {
    "id": 1154,
    "transitiveDepSetIds": [1155],
    "directArtifactIds": [176]
  }, {
    "id": 1158,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [113]
  }, {
    "id": 1157,
    "transitiveDepSetIds": [3, 1158],
    "directArtifactIds": [114, 1368]
  }, {
    "id": 1160,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [785, 211]
  }, {
    "id": 1161,
    "transitiveDepSetIds": [438, 33],
    "directArtifactIds": [211]
  }, {
    "id": 1159,
    "transitiveDepSetIds": [1160, 1161]
  }, {
    "id": 1156,
    "transitiveDepSetIds": [1157, 1159],
    "directArtifactIds": [786]
  }, {
    "id": 1162,
    "directArtifactIds": [1368, 176]
  }, {
    "id": 1164,
    "transitiveDepSetIds": [442],
    "directArtifactIds": [225, 1809]
  }, {
    "id": 1163,
    "transitiveDepSetIds": [1164],
    "directArtifactIds": [176]
  }, {
    "id": 1165,
    "directArtifactIds": [1812]
  }, {
    "id": 1168,
    "directArtifactIds": [1805, 1810]
  }, {
    "id": 1170,
    "transitiveDepSetIds": [453, 84],
    "directArtifactIds": [258]
  }, {
    "id": 1169,
    "transitiveDepSetIds": [1170],
    "directArtifactIds": [1805]
  }, {
    "id": 1167,
    "transitiveDepSetIds": [1168, 448, 1169, 89],
    "directArtifactIds": [258, 1805]
  }, {
    "id": 1166,
    "transitiveDepSetIds": [1167],
    "directArtifactIds": [1813]
  }, {
    "id": 1172,
    "transitiveDepSetIds": [1170],
    "directArtifactIds": [1805, 1814, 371]
  }, {
    "id": 1171,
    "transitiveDepSetIds": [1172],
    "directArtifactIds": [176]
  }, {
    "id": 1173,
    "directArtifactIds": [1814, 374, 375]
  }, {
    "id": 1176,
    "directArtifactIds": [1819, 1820]
  }, {
    "id": 1175,
    "transitiveDepSetIds": [1176],
    "directArtifactIds": [1821]
  }, {
    "id": 1174,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [246]
  }, {
    "id": 1177,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [862]
  }, {
    "id": 1178,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1822]
  }, {
    "id": 1179,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [257]
  }, {
    "id": 1180,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [980]
  }, {
    "id": 1181,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [250]
  }, {
    "id": 1182,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [249]
  }, {
    "id": 1183,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1420]
  }, {
    "id": 1184,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [253]
  }, {
    "id": 1185,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [689]
  }, {
    "id": 1186,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [853]
  }, {
    "id": 1187,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [693]
  }, {
    "id": 1188,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [852]
  }, {
    "id": 1189,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1824]
  }, {
    "id": 1190,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [255]
  }, {
    "id": 1191,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [242]
  }, {
    "id": 1192,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1448]
  }, {
    "id": 1193,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1826]
  }, {
    "id": 1194,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [873]
  }, {
    "id": 1195,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [251]
  }, {
    "id": 1196,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [982]
  }, {
    "id": 1197,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [691]
  }, {
    "id": 1198,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1280]
  }, {
    "id": 1199,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1421]
  }, {
    "id": 1200,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1278]
  }, {
    "id": 1201,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [870]
  }, {
    "id": 1202,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [254]
  }, {
    "id": 1203,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [241]
  }, {
    "id": 1204,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [243]
  }, {
    "id": 1205,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [854]
  }, {
    "id": 1206,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1828]
  }, {
    "id": 1207,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [863]
  }, {
    "id": 1208,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [981]
  }, {
    "id": 1209,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1830]
  }, {
    "id": 1210,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [252]
  }, {
    "id": 1211,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [872]
  }, {
    "id": 1212,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [244]
  }, {
    "id": 1213,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [864]
  }, {
    "id": 1214,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1832]
  }, {
    "id": 1215,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [866]
  }, {
    "id": 1216,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1834]
  }, {
    "id": 1217,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [867]
  }, {
    "id": 1218,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [869]
  }, {
    "id": 1219,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1279]
  }, {
    "id": 1220,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [855]
  }, {
    "id": 1221,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1836]
  }, {
    "id": 1222,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [690]
  }, {
    "id": 1223,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [856]
  }, {
    "id": 1224,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1838]
  }, {
    "id": 1225,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [692]
  }, {
    "id": 1226,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1840]
  }, {
    "id": 1227,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [247]
  }, {
    "id": 1228,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [256]
  }, {
    "id": 1229,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [871]
  }, {
    "id": 1230,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1842]
  }, {
    "id": 1231,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [245]
  }, {
    "id": 1232,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [861]
  }, {
    "id": 1233,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1844]
  }, {
    "id": 1234,
    "directArtifactIds": [1846, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]
  }, {
    "id": 1235,
    "directArtifactIds": [1847, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369]
  }, {
    "id": 1236,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [868]
  }, {
    "id": 1237,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [865]
  }, {
    "id": 1238,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [248]
  }, {
    "id": 1239,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1848]
  }, {
    "id": 1240,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [857]
  }, {
    "id": 1241,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [858]
  }, {
    "id": 1242,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1850]
  }, {
    "id": 1243,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [859]
  }, {
    "id": 1244,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [860]
  }],
  "configuration": [{
    "id": 1,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "4e67ca85ce50afa1c60118c9ac5cb28f1e0a8fe7c49020037cc89ebbb414d9ff"
  }, {
    "id": 2,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "6953f50a4ed022a2378305ea5b0bdb7d6e9ee5908a343a30208648fc7160feea"
  }],
  "ruleClasses": [{
    "id": 1,
    "name": "java_library"
  }, {
    "id": 2,
    "name": "java_test"
  }, {
    "id": 3,
    "name": "javadoc_library"
  }, {
    "id": 4,
    "name": "jarjar_library"
  }, {
    "id": 5,
    "name": "_gen_suite"
  }, {
    "id": 6,
    "name": "pom_file"
  }, {
    "id": 7,
    "name": "java_binary"
  }, {
    "id": 8,
    "name": "genrule"
  }, {
    "id": 9,
    "name": "java_import"
  }, {
    "id": 10,
    "name": "jvm_import"
  }, {
    "id": 11,
    "name": "_bootclasspath"
  }],
  "pathFragments": [{
    "id": 4,
    "label": "external"
  }, {
    "id": 3,
    "label": "remotejdk11_linux",
    "parentId": 4
  }, {
    "id": 2,
    "label": "bin",
    "parentId": 3
  }, {
    "id": 1,
    "label": "jaotc",
    "parentId": 2
  }, {
    "id": 5,
    "label": "jar",
    "parentId": 2
  }, {
    "id": 6,
    "label": "jarsigner",
    "parentId": 2
  }, {
    "id": 7,
    "label": "java",
    "parentId": 2
  }, {
    "id": 8,
    "label": "javac",
    "parentId": 2
  }, {
    "id": 9,
    "label": "javadoc",
    "parentId": 2
  }, {
    "id": 10,
    "label": "javap",
    "parentId": 2
  }, {
    "id": 11,
    "label": "jcmd",
    "parentId": 2
  }, {
    "id": 12,
    "label": "jconsole",
    "parentId": 2
  }, {
    "id": 13,
    "label": "jdb",
    "parentId": 2
  }, {
    "id": 14,
    "label": "jdeprscan",
    "parentId": 2
  }, {
    "id": 15,
    "label": "jdeps",
    "parentId": 2
  }, {
    "id": 16,
    "label": "jfr",
    "parentId": 2
  }, {
    "id": 17,
    "label": "jhsdb",
    "parentId": 2
  }, {
    "id": 18,
    "label": "jimage",
    "parentId": 2
  }, {
    "id": 19,
    "label": "jinfo",
    "parentId": 2
  }, {
    "id": 20,
    "label": "jjs",
    "parentId": 2
  }, {
    "id": 21,
    "label": "jlink",
    "parentId": 2
  }, {
    "id": 22,
    "label": "jmap",
    "parentId": 2
  }, {
    "id": 23,
    "label": "jmod",
    "parentId": 2
  }, {
    "id": 24,
    "label": "jps",
    "parentId": 2
  }, {
    "id": 25,
    "label": "jrunscript",
    "parentId": 2
  }, {
    "id": 26,
    "label": "jshell",
    "parentId": 2
  }, {
    "id": 27,
    "label": "jstack",
    "parentId": 2
  }, {
    "id": 28,
    "label": "jstat",
    "parentId": 2
  }, {
    "id": 29,
    "label": "jstatd",
    "parentId": 2
  }, {
    "id": 30,
    "label": "keytool",
    "parentId": 2
  }, {
    "id": 31,
    "label": "pack200",
    "parentId": 2
  }, {
    "id": 32,
    "label": "rmic",
    "parentId": 2
  }, {
    "id": 33,
    "label": "rmid",
    "parentId": 2
  }, {
    "id": 34,
    "label": "rmiregistry",
    "parentId": 2
  }, {
    "id": 35,
    "label": "serialver",
    "parentId": 2
  }, {
    "id": 36,
    "label": "unpack200",
    "parentId": 2
  }, {
    "id": 38,
    "label": "conf",
    "parentId": 3
  }, {
    "id": 37,
    "label": "logging.properties",
    "parentId": 38
  }, {
    "id": 40,
    "label": "management",
    "parentId": 38
  }, {
    "id": 39,
    "label": "jmxremote.access",
    "parentId": 40
  }, {
    "id": 41,
    "label": "jmxremote.password.template",
    "parentId": 40
  }, {
    "id": 42,
    "label": "management.properties",
    "parentId": 40
  }, {
    "id": 43,
    "label": "net.properties",
    "parentId": 38
  }, {
    "id": 45,
    "label": "security",
    "parentId": 38
  }, {
    "id": 44,
    "label": "java.policy",
    "parentId": 45
  }, {
    "id": 46,
    "label": "java.security",
    "parentId": 45
  }, {
    "id": 48,
    "label": "policy",
    "parentId": 45
  }, {
    "id": 47,
    "label": "README.txt",
    "parentId": 48
  }, {
    "id": 50,
    "label": "limited",
    "parentId": 48
  }, {
    "id": 49,
    "label": "default_US_export.policy",
    "parentId": 50
  }, {
    "id": 51,
    "label": "default_local.policy",
    "parentId": 50
  }, {
    "id": 52,
    "label": "exempt_local.policy",
    "parentId": 50
  }, {
    "id": 54,
    "label": "unlimited",
    "parentId": 48
  }, {
    "id": 53,
    "label": "default_US_export.policy",
    "parentId": 54
  }, {
    "id": 55,
    "label": "default_local.policy",
    "parentId": 54
  }, {
    "id": 56,
    "label": "sound.properties",
    "parentId": 38
  }, {
    "id": 58,
    "label": "include",
    "parentId": 3
  }, {
    "id": 57,
    "label": "classfile_constants.h",
    "parentId": 58
  }, {
    "id": 59,
    "label": "jawt.h",
    "parentId": 58
  }, {
    "id": 60,
    "label": "jdwpTransport.h",
    "parentId": 58
  }, {
    "id": 61,
    "label": "jni.h",
    "parentId": 58
  }, {
    "id": 62,
    "label": "jvmti.h",
    "parentId": 58
  }, {
    "id": 63,
    "label": "jvmticmlr.h",
    "parentId": 58
  }, {
    "id": 65,
    "label": "linux",
    "parentId": 58
  }, {
    "id": 64,
    "label": "jawt_md.h",
    "parentId": 65
  }, {
    "id": 66,
    "label": "jni_md.h",
    "parentId": 65
  }, {
    "id": 68,
    "label": "lib",
    "parentId": 3
  }, {
    "id": 67,
    "label": "classlist",
    "parentId": 68
  }, {
    "id": 69,
    "label": "ct.sym",
    "parentId": 68
  }, {
    "id": 70,
    "label": "jexec",
    "parentId": 68
  }, {
    "id": 72,
    "label": "jfr",
    "parentId": 68
  }, {
    "id": 71,
    "label": "default.jfc",
    "parentId": 72
  }, {
    "id": 73,
    "label": "profile.jfc",
    "parentId": 72
  }, {
    "id": 75,
    "label": "jli",
    "parentId": 68
  }, {
    "id": 74,
    "label": "libjli.so",
    "parentId": 75
  }, {
    "id": 76,
    "label": "jrt-fs.jar",
    "parentId": 68
  }, {
    "id": 77,
    "label": "jspawnhelper",
    "parentId": 68
  }, {
    "id": 78,
    "label": "jvm.cfg",
    "parentId": 68
  }, {
    "id": 79,
    "label": "libattach.so",
    "parentId": 68
  }, {
    "id": 80,
    "label": "libawt.so",
    "parentId": 68
  }, {
    "id": 81,
    "label": "libawt_headless.so",
    "parentId": 68
  }, {
    "id": 82,
    "label": "libawt_xawt.so",
    "parentId": 68
  }, {
    "id": 83,
    "label": "libdt_socket.so",
    "parentId": 68
  }, {
    "id": 84,
    "label": "libextnet.so",
    "parentId": 68
  }, {
    "id": 85,
    "label": "libfontmanager.so",
    "parentId": 68
  }, {
    "id": 86,
    "label": "libfreetype.so",
    "parentId": 68
  }, {
    "id": 87,
    "label": "libinstrument.so",
    "parentId": 68
  }, {
    "id": 88,
    "label": "libj2gss.so",
    "parentId": 68
  }, {
    "id": 89,
    "label": "libj2pcsc.so",
    "parentId": 68
  }, {
    "id": 90,
    "label": "libj2pkcs11.so",
    "parentId": 68
  }, {
    "id": 91,
    "label": "libjaas.so",
    "parentId": 68
  }, {
    "id": 92,
    "label": "libjava.so",
    "parentId": 68
  }, {
    "id": 93,
    "label": "libjavajpeg.so",
    "parentId": 68
  }, {
    "id": 94,
    "label": "libjawt.so",
    "parentId": 68
  }, {
    "id": 95,
    "label": "libjdwp.so",
    "parentId": 68
  }, {
    "id": 96,
    "label": "libjimage.so",
    "parentId": 68
  }, {
    "id": 97,
    "label": "libjsig.so",
    "parentId": 68
  }, {
    "id": 98,
    "label": "libjsound.so",
    "parentId": 68
  }, {
    "id": 99,
    "label": "liblcms.so",
    "parentId": 68
  }, {
    "id": 100,
    "label": "libmanagement.so",
    "parentId": 68
  }, {
    "id": 101,
    "label": "libmanagement_agent.so",
    "parentId": 68
  }, {
    "id": 102,
    "label": "libmanagement_ext.so",
    "parentId": 68
  }, {
    "id": 103,
    "label": "libmlib_image.so",
    "parentId": 68
  }, {
    "id": 104,
    "label": "libnet.so",
    "parentId": 68
  }, {
    "id": 105,
    "label": "libnio.so",
    "parentId": 68
  }, {
    "id": 106,
    "label": "libprefs.so",
    "parentId": 68
  }, {
    "id": 107,
    "label": "librmi.so",
    "parentId": 68
  }, {
    "id": 108,
    "label": "libsaproc.so",
    "parentId": 68
  }, {
    "id": 109,
    "label": "libsctp.so",
    "parentId": 68
  }, {
    "id": 110,
    "label": "libsplashscreen.so",
    "parentId": 68
  }, {
    "id": 111,
    "label": "libsunec.so",
    "parentId": 68
  }, {
    "id": 112,
    "label": "libunpack.so",
    "parentId": 68
  }, {
    "id": 113,
    "label": "libverify.so",
    "parentId": 68
  }, {
    "id": 114,
    "label": "libzip.so",
    "parentId": 68
  }, {
    "id": 115,
    "label": "modules",
    "parentId": 68
  }, {
    "id": 116,
    "label": "psfont.properties.ja",
    "parentId": 68
  }, {
    "id": 117,
    "label": "psfontj2d.properties",
    "parentId": 68
  }, {
    "id": 119,
    "label": "security",
    "parentId": 68
  }, {
    "id": 118,
    "label": "blocked.certs",
    "parentId": 119
  }, {
    "id": 120,
    "label": "cacerts",
    "parentId": 119
  }, {
    "id": 121,
    "label": "default.policy",
    "parentId": 119
  }, {
    "id": 122,
    "label": "public_suffix_list.dat",
    "parentId": 119
  }, {
    "id": 124,
    "label": "server",
    "parentId": 68
  }, {
    "id": 123,
    "label": "Xusage.txt",
    "parentId": 124
  }, {
    "id": 125,
    "label": "libjsig.so",
    "parentId": 124
  }, {
    "id": 126,
    "label": "libjvm.so",
    "parentId": 124
  }, {
    "id": 127,
    "label": "src.zip",
    "parentId": 68
  }, {
    "id": 128,
    "label": "tzdb.dat",
    "parentId": 68
  }, {
    "id": 131,
    "label": "remote_java_tools",
    "parentId": 4
  }, {
    "id": 130,
    "label": "java_tools",
    "parentId": 131
  }, {
    "id": 129,
    "label": "JavaBuilder_deploy.jar",
    "parentId": 130
  }, {
    "id": 139,
    "label": "bazel-out"
  }, {
    "id": 138,
    "label": "k8-fastbuild",
    "parentId": 139
  }, {
    "id": 137,
    "label": "bin",
    "parentId": 138
  }, {
    "id": 136,
    "label": "external",
    "parentId": 137
  }, {
    "id": 135,
    "label": "bazel_tools",
    "parentId": 136
  }, {
    "id": 134,
    "label": "tools",
    "parentId": 135
  }, {
    "id": 133,
    "label": "jdk",
    "parentId": 134
  }, {
    "id": 132,
    "label": "platformclasspath.jar",
    "parentId": 133
  }, {
    "id": 147,
    "label": "extensions"
  }, {
    "id": 146,
    "label": "grapher",
    "parentId": 147
  }, {
    "id": 145,
    "label": "src",
    "parentId": 146
  }, {
    "id": 144,
    "label": "com",
    "parentId": 145
  }, {
    "id": 143,
    "label": "google",
    "parentId": 144
  }, {
    "id": 142,
    "label": "inject",
    "parentId": 143
  }, {
    "id": 141,
    "label": "grapher",
    "parentId": 142
  }, {
    "id": 140,
    "label": "AbstractInjectorGrapher.java",
    "parentId": 141
  }, {
    "id": 148,
    "label": "Alias.java",
    "parentId": 141
  }, {
    "id": 149,
    "label": "AliasCreator.java",
    "parentId": 141
  }, {
    "id": 150,
    "label": "BindingEdge.java",
    "parentId": 141
  }, {
    "id": 151,
    "label": "DefaultEdgeCreator.java",
    "parentId": 141
  }, {
    "id": 152,
    "label": "DefaultNodeCreator.java",
    "parentId": 141
  }, {
    "id": 153,
    "label": "DefaultRootKeySetCreator.java",
    "parentId": 141
  }, {
    "id": 154,
    "label": "DependencyEdge.java",
    "parentId": 141
  }, {
    "id": 155,
    "label": "Edge.java",
    "parentId": 141
  }, {
    "id": 156,
    "label": "EdgeCreator.java",
    "parentId": 141
  }, {
    "id": 157,
    "label": "ImplementationNode.java",
    "parentId": 141
  }, {
    "id": 158,
    "label": "InjectorGrapher.java",
    "parentId": 141
  }, {
    "id": 159,
    "label": "InstanceNode.java",
    "parentId": 141
  }, {
    "id": 160,
    "label": "InterfaceNode.java",
    "parentId": 141
  }, {
    "id": 161,
    "label": "NameFactory.java",
    "parentId": 141
  }, {
    "id": 162,
    "label": "Node.java",
    "parentId": 141
  }, {
    "id": 163,
    "label": "NodeCreator.java",
    "parentId": 141
  }, {
    "id": 164,
    "label": "NodeId.java",
    "parentId": 141
  }, {
    "id": 165,
    "label": "ProviderAliasCreator.java",
    "parentId": 141
  }, {
    "id": 166,
    "label": "RootKeySetCreator.java",
    "parentId": 141
  }, {
    "id": 167,
    "label": "ShortNameFactory.java",
    "parentId": 141
  }, {
    "id": 168,
    "label": "TransitiveDependencyVisitor.java",
    "parentId": 141
  }, {
    "id": 170,
    "label": "graphviz",
    "parentId": 141
  }, {
    "id": 169,
    "label": "ArrowType.java",
    "parentId": 170
  }, {
    "id": 171,
    "label": "CompassPoint.java",
    "parentId": 170
  }, {
    "id": 172,
    "label": "EdgeStyle.java",
    "parentId": 170
  }, {
    "id": 173,
    "label": "Graphviz.java",
    "parentId": 170
  }, {
    "id": 174,
    "label": "GraphvizEdge.java",
    "parentId": 170
  }, {
    "id": 175,
    "label": "GraphvizGrapher.java",
    "parentId": 170
  }, {
    "id": 176,
    "label": "GraphvizModule.java",
    "parentId": 170
  }, {
    "id": 177,
    "label": "GraphvizNode.java",
    "parentId": 170
  }, {
    "id": 178,
    "label": "NodeShape.java",
    "parentId": 170
  }, {
    "id": 179,
    "label": "NodeStyle.java",
    "parentId": 170
  }, {
    "id": 180,
    "label": "PortIdFactory.java",
    "parentId": 170
  }, {
    "id": 181,
    "label": "PortIdFactoryImpl.java",
    "parentId": 170
  }, {
    "id": 187,
    "label": "core",
    "parentId": 137
  }, {
    "id": 186,
    "label": "src",
    "parentId": 187
  }, {
    "id": 185,
    "label": "com",
    "parentId": 186
  }, {
    "id": 184,
    "label": "google",
    "parentId": 185
  }, {
    "id": 183,
    "label": "inject",
    "parentId": 184
  }, {
    "id": 182,
    "label": "libinject-hjar.jar",
    "parentId": 183
  }, {
    "id": 188,
    "label": "libannotations-hjar.jar",
    "parentId": 183
  }, {
    "id": 189,
    "label": "libimplemented_by-hjar.jar",
    "parentId": 183
  }, {
    "id": 190,
    "label": "libprovided_by-hjar.jar",
    "parentId": 183
  }, {
    "id": 191,
    "label": "libcaller_finder_common-hjar.jar",
    "parentId": 183
  }, {
    "id": 202,
    "label": "maven",
    "parentId": 136
  }, {
    "id": 201,
    "label": "v1",
    "parentId": 202
  }, {
    "id": 200,
    "label": "https",
    "parentId": 201
  }, {
    "id": 199,
    "label": "repo1.maven.org",
    "parentId": 200
  }, {
    "id": 198,
    "label": "maven2",
    "parentId": 199
  }, {
    "id": 197,
    "label": "com",
    "parentId": 198
  }, {
    "id": 196,
    "label": "google",
    "parentId": 197
  }, {
    "id": 195,
    "label": "guava",
    "parentId": 196
  }, {
    "id": 194,
    "label": "guava",
    "parentId": 195
  }, {
    "id": 193,
    "label": "32.0.0-jre",
    "parentId": 194
  }, {
    "id": 192,
    "label": "header_guava-32.0.0-jre.jar",
    "parentId": 193
  }, {
    "id": 206,
    "label": "errorprone",
    "parentId": 196
  }, {
    "id": 205,
    "label": "error_prone_annotations",
    "parentId": 206
  }, {
    "id": 204,
    "label": "2.18.0",
    "parentId": 205
  }, {
    "id": 203,
    "label": "header_error_prone_annotations-2.18.0.jar",
    "parentId": 204
  }, {
    "id": 211,
    "label": "jakarta",
    "parentId": 198
  }, {
    "id": 210,
    "label": "inject",
    "parentId": 211
  }, {
    "id": 209,
    "label": "jakarta.inject-api",
    "parentId": 210
  }, {
    "id": 208,
    "label": "2.0.1",
    "parentId": 209
  }, {
    "id": 207,
    "label": "header_jakarta.inject-api-2.0.1.jar",
    "parentId": 208
  }, {
    "id": 214,
    "label": "listenablefuture",
    "parentId": 195
  }, {
    "id": 213,
    "label": "9999.0-empty-to-avoid-conflict-with-guava",
    "parentId": 214
  }, {
    "id": 212,
    "label": "header_listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar",
    "parentId": 213
  }, {
    "id": 218,
    "label": "j2objc",
    "parentId": 196
  }, {
    "id": 217,
    "label": "j2objc-annotations",
    "parentId": 218
  }, {
    "id": 216,
    "label": "2.8",
    "parentId": 217
  }, {
    "id": 215,
    "label": "header_j2objc-annotations-2.8.jar",
    "parentId": 216
  }, {
    "id": 223,
    "label": "code",
    "parentId": 196
  }, {
    "id": 222,
    "label": "findbugs",
    "parentId": 223
  }, {
    "id": 221,
    "label": "jsr305",
    "parentId": 222
  }, {
    "id": 220,
    "label": "3.0.2",
    "parentId": 221
  }, {
    "id": 219,
    "label": "header_jsr305-3.0.2.jar",
    "parentId": 220
  }, {
    "id": 228,
    "label": "org",
    "parentId": 198
  }, {
    "id": 227,
    "label": "checkerframework",
    "parentId": 228
  }, {
    "id": 226,
    "label": "checker-qual",
    "parentId": 227
  }, {
    "id": 225,
    "label": "3.33.0",
    "parentId": 226
  }, {
    "id": 224,
    "label": "header_checker-qual-3.33.0.jar",
    "parentId": 225
  }, {
    "id": 231,
    "label": "failureaccess",
    "parentId": 195
  }, {
    "id": 230,
    "label": "1.0.1",
    "parentId": 231
  }, {
    "id": 229,
    "label": "header_failureaccess-1.0.1.jar",
    "parentId": 230
  }, {
    "id": 235,
    "label": "aopalliance",
    "parentId": 198
  }, {
    "id": 234,
    "label": "aopalliance",
    "parentId": 235
  }, {
    "id": 233,
    "label": "1.0",
    "parentId": 234
  }, {
    "id": 232,
    "label": "header_aopalliance-1.0.jar",
    "parentId": 233
  }, {
    "id": 240,
    "label": "ow2",
    "parentId": 228
  }, {
    "id": 239,
    "label": "asm",
    "parentId": 240
  }, {
    "id": 238,
    "label": "asm",
    "parentId": 239
  }, {
    "id": 237,
    "label": "9.5",
    "parentId": 238
  }, {
    "id": 236,
    "label": "header_asm-9.5.jar",
    "parentId": 237
  }, {
    "id": 241,
    "label": "libannotations-hjar.jdeps",
    "parentId": 183
  }, {
    "id": 242,
    "label": "libimplemented_by-hjar.jdeps",
    "parentId": 183
  }, {
    "id": 243,
    "label": "libprovided_by-hjar.jdeps",
    "parentId": 183
  }, {
    "id": 244,
    "label": "libcaller_finder_common-hjar.jdeps",
    "parentId": 183
  }, {
    "id": 245,
    "label": "libinject-hjar.jdeps",
    "parentId": 183
  }, {
    "id": 253,
    "label": "extensions",
    "parentId": 137
  }, {
    "id": 252,
    "label": "grapher",
    "parentId": 253
  }, {
    "id": 251,
    "label": "src",
    "parentId": 252
  }, {
    "id": 250,
    "label": "com",
    "parentId": 251
  }, {
    "id": 249,
    "label": "google",
    "parentId": 250
  }, {
    "id": 248,
    "label": "inject",
    "parentId": 249
  }, {
    "id": 247,
    "label": "grapher",
    "parentId": 248
  }, {
    "id": 246,
    "label": "libgrapher.jar",
    "parentId": 247
  }, {
    "id": 254,
    "label": "libgrapher.jdeps",
    "parentId": 247
  }, {
    "id": 255,
    "label": "libgrapher-native-header.jar",
    "parentId": 247
  }, {
    "id": 256,
    "label": "libgrapher.jar_manifest_proto",
    "parentId": 247
  }, {
    "id": 257,
    "label": "turbine_direct_binary_deploy.jar",
    "parentId": 130
  }, {
    "id": 258,
    "label": "libgrapher-hjar.jar",
    "parentId": 247
  }, {
    "id": 259,
    "label": "libgrapher-hjar.jdeps",
    "parentId": 247
  }, {
    "id": 265,
    "label": "remote_java_tools_linux",
    "parentId": 4
  }, {
    "id": 264,
    "label": "java_tools",
    "parentId": 265
  }, {
    "id": 263,
    "label": "src",
    "parentId": 264
  }, {
    "id": 262,
    "label": "tools",
    "parentId": 263
  }, {
    "id": 261,
    "label": "singlejar",
    "parentId": 262
  }, {
    "id": 260,
    "label": "singlejar_local",
    "parentId": 261
  }, {
    "id": 266,
    "label": "libgrapher-src.jar",
    "parentId": 247
  }, {
    "id": 273,
    "label": "throwingproviders",
    "parentId": 147
  }, {
    "id": 272,
    "label": "test",
    "parentId": 273
  }, {
    "id": 271,
    "label": "com",
    "parentId": 272
  }, {
    "id": 270,
    "label": "google",
    "parentId": 271
  }, {
    "id": 269,
    "label": "inject",
    "parentId": 270
  }, {
    "id": 268,
    "label": "throwingproviders",
    "parentId": 269
  }, {
    "id": 267,
    "label": "CheckedProviderMethodsModuleTest.java",
    "parentId": 268
  }, {
    "id": 274,
    "label": "CheckedProviderTest.java",
    "parentId": 268
  }, {
    "id": 275,
    "label": "CheckedProvidersTest.java",
    "parentId": 268
  }, {
    "id": 276,
    "label": "TestScope.java",
    "parentId": 268
  }, {
    "id": 277,
    "label": "ThrowingProviderTest.java",
    "parentId": 268
  }, {
    "id": 281,
    "label": "junit",
    "parentId": 198
  }, {
    "id": 280,
    "label": "junit",
    "parentId": 281
  }, {
    "id": 279,
    "label": "4.13.2",
    "parentId": 280
  }, {
    "id": 278,
    "label": "header_junit-4.13.2.jar",
    "parentId": 279
  }, {
    "id": 285,
    "label": "hamcrest",
    "parentId": 228
  }, {
    "id": 284,
    "label": "hamcrest",
    "parentId": 285
  }, {
    "id": 283,
    "label": "2.2",
    "parentId": 284
  }, {
    "id": 282,
    "label": "header_hamcrest-2.2.jar",
    "parentId": 283
  }, {
    "id": 290,
    "label": "truth",
    "parentId": 196
  }, {
    "id": 289,
    "label": "extensions",
    "parentId": 290
  }, {
    "id": 288,
    "label": "truth-java8-extension",
    "parentId": 289
  }, {
    "id": 287,
    "label": "1.1.3",
    "parentId": 288
  }, {
    "id": 286,
    "label": "header_truth-java8-extension-1.1.3.jar",
    "parentId": 287
  }, {
    "id": 293,
    "label": "truth",
    "parentId": 290
  }, {
    "id": 292,
    "label": "1.1.3",
    "parentId": 293
  }, {
    "id": 291,
    "label": "header_truth-1.1.3.jar",
    "parentId": 292
  }, {
    "id": 298,
    "label": "test",
    "parentId": 187
  }, {
    "id": 297,
    "label": "com",
    "parentId": 298
  }, {
    "id": 296,
    "label": "google",
    "parentId": 297
  }, {
    "id": 295,
    "label": "inject",
    "parentId": 296
  }, {
    "id": 294,
    "label": "libtestsupport-hjar.jar",
    "parentId": 295
  }, {
    "id": 305,
    "label": "throwingproviders",
    "parentId": 253
  }, {
    "id": 304,
    "label": "src",
    "parentId": 305
  }, {
    "id": 303,
    "label": "com",
    "parentId": 304
  }, {
    "id": 302,
    "label": "google",
    "parentId": 303
  }, {
    "id": 301,
    "label": "inject",
    "parentId": 302
  }, {
    "id": 300,
    "label": "throwingproviders",
    "parentId": 301
  }, {
    "id": 299,
    "label": "libthrowingproviders-hjar.jar",
    "parentId": 300
  }, {
    "id": 308,
    "label": "hamcrest-core",
    "parentId": 285
  }, {
    "id": 307,
    "label": "1.3",
    "parentId": 308
  }, {
    "id": 306,
    "label": "header_hamcrest-core-1.3.jar",
    "parentId": 307
  }, {
    "id": 311,
    "label": "guava-testlib",
    "parentId": 195
  }, {
    "id": 310,
    "label": "32.0.0-jre",
    "parentId": 311
  }, {
    "id": 309,
    "label": "header_guava-testlib-32.0.0-jre.jar",
    "parentId": 310
  }, {
    "id": 316,
    "label": "auto",
    "parentId": 196
  }, {
    "id": 315,
    "label": "value",
    "parentId": 316
  }, {
    "id": 314,
    "label": "auto-value-annotations",
    "parentId": 315
  }, {
    "id": 313,
    "label": "1.8.1",
    "parentId": 314
  }, {
    "id": 312,
    "label": "header_auto-value-annotations-1.8.1.jar",
    "parentId": 313
  }, {
    "id": 317,
    "label": "libtestsupport-hjar.jdeps",
    "parentId": 295
  }, {
    "id": 318,
    "label": "libthrowingproviders-hjar.jdeps",
    "parentId": 300
  }, {
    "id": 324,
    "label": "test",
    "parentId": 305
  }, {
    "id": 323,
    "label": "com",
    "parentId": 324
  }, {
    "id": 322,
    "label": "google",
    "parentId": 323
  }, {
    "id": 321,
    "label": "inject",
    "parentId": 322
  }, {
    "id": 320,
    "label": "throwingproviders",
    "parentId": 321
  }, {
    "id": 319,
    "label": "libtests.jar",
    "parentId": 320
  }, {
    "id": 325,
    "label": "libtests.jdeps",
    "parentId": 320
  }, {
    "id": 326,
    "label": "libtests-native-header.jar",
    "parentId": 320
  }, {
    "id": 327,
    "label": "libtests.jar_manifest_proto",
    "parentId": 320
  }, {
    "id": 328,
    "label": "libtests-hjar.jar",
    "parentId": 320
  }, {
    "id": 329,
    "label": "libtests-hjar.jdeps",
    "parentId": 320
  }, {
    "id": 330,
    "label": "libtests-src.jar",
    "parentId": 320
  }, {
    "id": 336,
    "label": "core"
  }, {
    "id": 335,
    "label": "test",
    "parentId": 336
  }, {
    "id": 334,
    "label": "com",
    "parentId": 335
  }, {
    "id": 333,
    "label": "google",
    "parentId": 334
  }, {
    "id": 332,
    "label": "inject",
    "parentId": 333
  }, {
    "id": 331,
    "label": "ImplicitBindingJdkPackagePrivateTest.java",
    "parentId": 332
  }, {
    "id": 337,
    "label": "libadd_opens_tests.jar",
    "parentId": 295
  }, {
    "id": 338,
    "label": "libadd_opens_tests.jdeps",
    "parentId": 295
  }, {
    "id": 339,
    "label": "libadd_opens_tests-native-header.jar",
    "parentId": 295
  }, {
    "id": 340,
    "label": "libadd_opens_tests.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 341,
    "label": "libadd_opens_tests-hjar.jar",
    "parentId": 295
  }, {
    "id": 342,
    "label": "libadd_opens_tests-hjar.jdeps",
    "parentId": 295
  }, {
    "id": 343,
    "label": "libadd_opens_tests-src.jar",
    "parentId": 295
  }, {
    "id": 351,
    "label": "testlib",
    "parentId": 253
  }, {
    "id": 350,
    "label": "test",
    "parentId": 351
  }, {
    "id": 349,
    "label": "com",
    "parentId": 350
  }, {
    "id": 348,
    "label": "google",
    "parentId": 349
  }, {
    "id": 347,
    "label": "inject",
    "parentId": 348
  }, {
    "id": 346,
    "label": "testing",
    "parentId": 347
  }, {
    "id": 345,
    "label": "fieldbinder",
    "parentId": 346
  }, {
    "id": 344,
    "label": "gen_tests.java",
    "parentId": 345
  }, {
    "id": 352,
    "label": "libtests-hjar.jar",
    "parentId": 345
  }, {
    "id": 356,
    "label": "_ijar",
    "parentId": 133
  }, {
    "id": 355,
    "label": "TestRunner",
    "parentId": 356
  }, {
    "id": 354,
    "label": "java_tools",
    "parentId": 355
  }, {
    "id": 353,
    "label": "Runner_deploy-ijar.jar",
    "parentId": 354
  }, {
    "id": 363,
    "label": "src",
    "parentId": 351
  }, {
    "id": 362,
    "label": "com",
    "parentId": 363
  }, {
    "id": 361,
    "label": "google",
    "parentId": 362
  }, {
    "id": 360,
    "label": "inject",
    "parentId": 361
  }, {
    "id": 359,
    "label": "testing",
    "parentId": 360
  }, {
    "id": 358,
    "label": "fieldbinder",
    "parentId": 359
  }, {
    "id": 357,
    "label": "libfieldbinder-hjar.jar",
    "parentId": 358
  }, {
    "id": 364,
    "label": "libtests-hjar.jdeps",
    "parentId": 345
  }, {
    "id": 365,
    "label": "AllTestsSuite.jar",
    "parentId": 345
  }, {
    "id": 366,
    "label": "AllTestsSuite.jdeps",
    "parentId": 345
  }, {
    "id": 367,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 345
  }, {
    "id": 368,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 345
  }, {
    "id": 369,
    "label": "AllTestsSuite-src.jar",
    "parentId": 345
  }, {
    "id": 370,
    "label": "AllTestsSuite",
    "parentId": 345
  }, {
    "id": 371,
    "label": "libannotations-src.jar",
    "parentId": 183
  }, {
    "id": 372,
    "label": "libimplemented_by-src.jar",
    "parentId": 183
  }, {
    "id": 373,
    "label": "libprovided_by-src.jar",
    "parentId": 183
  }, {
    "id": 374,
    "label": "libcaller_finder_common-src.jar",
    "parentId": 183
  }, {
    "id": 375,
    "label": "libinject-src.jar",
    "parentId": 183
  }, {
    "id": 379,
    "label": "third_party",
    "parentId": 137
  }, {
    "id": 378,
    "label": "java",
    "parentId": 379
  }, {
    "id": 377,
    "label": "junit",
    "parentId": 378
  }, {
    "id": 376,
    "label": "libjunit-src.jar",
    "parentId": 377
  }, {
    "id": 381,
    "label": "truth",
    "parentId": 378
  }, {
    "id": 380,
    "label": "libtruth-src.jar",
    "parentId": 381
  }, {
    "id": 382,
    "label": "libtestsupport-src.jar",
    "parentId": 295
  }, {
    "id": 383,
    "label": "libfieldbinder-src.jar",
    "parentId": 358
  }, {
    "id": 384,
    "label": "libtests-src.jar",
    "parentId": 345
  }, {
    "id": 385,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 345
  }, {
    "id": 386,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 345
  }, {
    "id": 388,
    "label": "AllTestsSuite.runfiles",
    "parentId": 345
  }, {
    "id": 387,
    "label": "MANIFEST",
    "parentId": 388
  }, {
    "id": 389,
    "label": "libannotations.jar",
    "parentId": 183
  }, {
    "id": 390,
    "label": "libcaller_finder_common.jar",
    "parentId": 183
  }, {
    "id": 391,
    "label": "libimplemented_by.jar",
    "parentId": 183
  }, {
    "id": 392,
    "label": "libprovided_by.jar",
    "parentId": 183
  }, {
    "id": 393,
    "label": "libinject.jar",
    "parentId": 183
  }, {
    "id": 394,
    "label": "libtestsupport.jar",
    "parentId": 295
  }, {
    "id": 395,
    "label": "libfieldbinder.jar",
    "parentId": 358
  }, {
    "id": 396,
    "label": "libtests.jar",
    "parentId": 345
  }, {
    "id": 407,
    "label": "maven",
    "parentId": 4
  }, {
    "id": 406,
    "label": "v1",
    "parentId": 407
  }, {
    "id": 405,
    "label": "https",
    "parentId": 406
  }, {
    "id": 404,
    "label": "repo1.maven.org",
    "parentId": 405
  }, {
    "id": 403,
    "label": "maven2",
    "parentId": 404
  }, {
    "id": 402,
    "label": "com",
    "parentId": 403
  }, {
    "id": 401,
    "label": "google",
    "parentId": 402
  }, {
    "id": 400,
    "label": "errorprone",
    "parentId": 401
  }, {
    "id": 399,
    "label": "error_prone_annotations",
    "parentId": 400
  }, {
    "id": 398,
    "label": "2.18.0",
    "parentId": 399
  }, {
    "id": 397,
    "label": "error_prone_annotations-2.18.0.jar",
    "parentId": 398
  }, {
    "id": 412,
    "label": "jakarta",
    "parentId": 403
  }, {
    "id": 411,
    "label": "inject",
    "parentId": 412
  }, {
    "id": 410,
    "label": "jakarta.inject-api",
    "parentId": 411
  }, {
    "id": 409,
    "label": "2.0.1",
    "parentId": 410
  }, {
    "id": 408,
    "label": "jakarta.inject-api-2.0.1.jar",
    "parentId": 409
  }, {
    "id": 416,
    "label": "guava",
    "parentId": 401
  }, {
    "id": 415,
    "label": "guava",
    "parentId": 416
  }, {
    "id": 414,
    "label": "32.0.0-jre",
    "parentId": 415
  }, {
    "id": 413,
    "label": "guava-32.0.0-jre.jar",
    "parentId": 414
  }, {
    "id": 419,
    "label": "listenablefuture",
    "parentId": 416
  }, {
    "id": 418,
    "label": "9999.0-empty-to-avoid-conflict-with-guava",
    "parentId": 419
  }, {
    "id": 417,
    "label": "listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar",
    "parentId": 418
  }, {
    "id": 423,
    "label": "j2objc",
    "parentId": 401
  }, {
    "id": 422,
    "label": "j2objc-annotations",
    "parentId": 423
  }, {
    "id": 421,
    "label": "2.8",
    "parentId": 422
  }, {
    "id": 420,
    "label": "j2objc-annotations-2.8.jar",
    "parentId": 421
  }, {
    "id": 428,
    "label": "code",
    "parentId": 401
  }, {
    "id": 427,
    "label": "findbugs",
    "parentId": 428
  }, {
    "id": 426,
    "label": "jsr305",
    "parentId": 427
  }, {
    "id": 425,
    "label": "3.0.2",
    "parentId": 426
  }, {
    "id": 424,
    "label": "jsr305-3.0.2.jar",
    "parentId": 425
  }, {
    "id": 433,
    "label": "org",
    "parentId": 403
  }, {
    "id": 432,
    "label": "checkerframework",
    "parentId": 433
  }, {
    "id": 431,
    "label": "checker-qual",
    "parentId": 432
  }, {
    "id": 430,
    "label": "3.33.0",
    "parentId": 431
  }, {
    "id": 429,
    "label": "checker-qual-3.33.0.jar",
    "parentId": 430
  }, {
    "id": 436,
    "label": "failureaccess",
    "parentId": 416
  }, {
    "id": 435,
    "label": "1.0.1",
    "parentId": 436
  }, {
    "id": 434,
    "label": "failureaccess-1.0.1.jar",
    "parentId": 435
  }, {
    "id": 440,
    "label": "aopalliance",
    "parentId": 403
  }, {
    "id": 439,
    "label": "aopalliance",
    "parentId": 440
  }, {
    "id": 438,
    "label": "1.0",
    "parentId": 439
  }, {
    "id": 437,
    "label": "aopalliance-1.0.jar",
    "parentId": 438
  }, {
    "id": 445,
    "label": "ow2",
    "parentId": 433
  }, {
    "id": 444,
    "label": "asm",
    "parentId": 445
  }, {
    "id": 443,
    "label": "asm",
    "parentId": 444
  }, {
    "id": 442,
    "label": "9.5",
    "parentId": 443
  }, {
    "id": 441,
    "label": "asm-9.5.jar",
    "parentId": 442
  }, {
    "id": 449,
    "label": "junit",
    "parentId": 403
  }, {
    "id": 448,
    "label": "junit",
    "parentId": 449
  }, {
    "id": 447,
    "label": "4.13.2",
    "parentId": 448
  }, {
    "id": 446,
    "label": "junit-4.13.2.jar",
    "parentId": 447
  }, {
    "id": 453,
    "label": "hamcrest",
    "parentId": 433
  }, {
    "id": 452,
    "label": "hamcrest-core",
    "parentId": 453
  }, {
    "id": 451,
    "label": "1.3",
    "parentId": 452
  }, {
    "id": 450,
    "label": "hamcrest-core-1.3.jar",
    "parentId": 451
  }, {
    "id": 456,
    "label": "guava-testlib",
    "parentId": 416
  }, {
    "id": 455,
    "label": "32.0.0-jre",
    "parentId": 456
  }, {
    "id": 454,
    "label": "guava-testlib-32.0.0-jre.jar",
    "parentId": 455
  }, {
    "id": 459,
    "label": "hamcrest",
    "parentId": 453
  }, {
    "id": 458,
    "label": "2.2",
    "parentId": 459
  }, {
    "id": 457,
    "label": "hamcrest-2.2.jar",
    "parentId": 458
  }, {
    "id": 463,
    "label": "truth",
    "parentId": 401
  }, {
    "id": 462,
    "label": "truth",
    "parentId": 463
  }, {
    "id": 461,
    "label": "1.1.3",
    "parentId": 462
  }, {
    "id": 460,
    "label": "truth-1.1.3.jar",
    "parentId": 461
  }, {
    "id": 468,
    "label": "auto",
    "parentId": 401
  }, {
    "id": 467,
    "label": "value",
    "parentId": 468
  }, {
    "id": 466,
    "label": "auto-value-annotations",
    "parentId": 467
  }, {
    "id": 465,
    "label": "1.8.1",
    "parentId": 466
  }, {
    "id": 464,
    "label": "auto-value-annotations-1.8.1.jar",
    "parentId": 465
  }, {
    "id": 472,
    "label": "extensions",
    "parentId": 463
  }, {
    "id": 471,
    "label": "truth-java8-extension",
    "parentId": 472
  }, {
    "id": 470,
    "label": "1.1.3",
    "parentId": 471
  }, {
    "id": 469,
    "label": "truth-java8-extension-1.1.3.jar",
    "parentId": 470
  }, {
    "id": 473,
    "label": "Runner_deploy.jar",
    "parentId": 130
  }, {
    "id": 476,
    "label": "local_jdk",
    "parentId": 4
  }, {
    "id": 475,
    "label": "bin",
    "parentId": 476
  }, {
    "id": 474,
    "label": "jar",
    "parentId": 475
  }, {
    "id": 477,
    "label": "jarsigner",
    "parentId": 475
  }, {
    "id": 478,
    "label": "java",
    "parentId": 475
  }, {
    "id": 479,
    "label": "javac",
    "parentId": 475
  }, {
    "id": 480,
    "label": "javadoc",
    "parentId": 475
  }, {
    "id": 481,
    "label": "javap",
    "parentId": 475
  }, {
    "id": 482,
    "label": "jcmd",
    "parentId": 475
  }, {
    "id": 483,
    "label": "jconsole",
    "parentId": 475
  }, {
    "id": 484,
    "label": "jdb",
    "parentId": 475
  }, {
    "id": 485,
    "label": "jdeprscan",
    "parentId": 475
  }, {
    "id": 486,
    "label": "jdeps",
    "parentId": 475
  }, {
    "id": 487,
    "label": "jfr",
    "parentId": 475
  }, {
    "id": 488,
    "label": "jhsdb",
    "parentId": 475
  }, {
    "id": 489,
    "label": "jimage",
    "parentId": 475
  }, {
    "id": 490,
    "label": "jinfo",
    "parentId": 475
  }, {
    "id": 491,
    "label": "jlink",
    "parentId": 475
  }, {
    "id": 492,
    "label": "jmap",
    "parentId": 475
  }, {
    "id": 493,
    "label": "jmod",
    "parentId": 475
  }, {
    "id": 494,
    "label": "jpackage",
    "parentId": 475
  }, {
    "id": 495,
    "label": "jps",
    "parentId": 475
  }, {
    "id": 496,
    "label": "jrunscript",
    "parentId": 475
  }, {
    "id": 497,
    "label": "jshell",
    "parentId": 475
  }, {
    "id": 498,
    "label": "jstack",
    "parentId": 475
  }, {
    "id": 499,
    "label": "jstat",
    "parentId": 475
  }, {
    "id": 500,
    "label": "jstatd",
    "parentId": 475
  }, {
    "id": 501,
    "label": "keytool",
    "parentId": 475
  }, {
    "id": 502,
    "label": "rmiregistry",
    "parentId": 475
  }, {
    "id": 503,
    "label": "serialver",
    "parentId": 475
  }, {
    "id": 505,
    "label": "conf",
    "parentId": 476
  }, {
    "id": 504,
    "label": "accessibility.properties",
    "parentId": 505
  }, {
    "id": 506,
    "label": "logging.properties",
    "parentId": 505
  }, {
    "id": 508,
    "label": "management",
    "parentId": 505
  }, {
    "id": 507,
    "label": "jmxremote.access",
    "parentId": 508
  }, {
    "id": 509,
    "label": "management.properties",
    "parentId": 508
  }, {
    "id": 510,
    "label": "net.properties",
    "parentId": 505
  }, {
    "id": 512,
    "label": "security",
    "parentId": 505
  }, {
    "id": 511,
    "label": "java.policy",
    "parentId": 512
  }, {
    "id": 513,
    "label": "java.security",
    "parentId": 512
  }, {
    "id": 514,
    "label": "nss.cfg",
    "parentId": 512
  }, {
    "id": 516,
    "label": "policy",
    "parentId": 512
  }, {
    "id": 515,
    "label": "README.txt",
    "parentId": 516
  }, {
    "id": 518,
    "label": "limited",
    "parentId": 516
  }, {
    "id": 517,
    "label": "default_US_export.policy",
    "parentId": 518
  }, {
    "id": 519,
    "label": "default_local.policy",
    "parentId": 518
  }, {
    "id": 520,
    "label": "exempt_local.policy",
    "parentId": 518
  }, {
    "id": 522,
    "label": "unlimited",
    "parentId": 516
  }, {
    "id": 521,
    "label": "default_US_export.policy",
    "parentId": 522
  }, {
    "id": 523,
    "label": "default_local.policy",
    "parentId": 522
  }, {
    "id": 524,
    "label": "sound.properties",
    "parentId": 505
  }, {
    "id": 525,
    "label": "swing.properties",
    "parentId": 505
  }, {
    "id": 527,
    "label": "include",
    "parentId": 476
  }, {
    "id": 526,
    "label": "classfile_constants.h",
    "parentId": 527
  }, {
    "id": 528,
    "label": "jawt.h",
    "parentId": 527
  }, {
    "id": 529,
    "label": "jdwpTransport.h",
    "parentId": 527
  }, {
    "id": 530,
    "label": "jni.h",
    "parentId": 527
  }, {
    "id": 531,
    "label": "jvmti.h",
    "parentId": 527
  }, {
    "id": 532,
    "label": "jvmticmlr.h",
    "parentId": 527
  }, {
    "id": 534,
    "label": "linux",
    "parentId": 527
  }, {
    "id": 533,
    "label": "jawt_md.h",
    "parentId": 534
  }, {
    "id": 535,
    "label": "jni_md.h",
    "parentId": 534
  }, {
    "id": 537,
    "label": "lib",
    "parentId": 476
  }, {
    "id": 536,
    "label": "classlist",
    "parentId": 537
  }, {
    "id": 538,
    "label": "ct.sym",
    "parentId": 537
  }, {
    "id": 539,
    "label": "jar.binfmt",
    "parentId": 537
  }, {
    "id": 540,
    "label": "jexec",
    "parentId": 537
  }, {
    "id": 542,
    "label": "jfr",
    "parentId": 537
  }, {
    "id": 541,
    "label": "default.jfc",
    "parentId": 542
  }, {
    "id": 543,
    "label": "profile.jfc",
    "parentId": 542
  }, {
    "id": 544,
    "label": "jrt-fs.jar",
    "parentId": 537
  }, {
    "id": 545,
    "label": "jspawnhelper",
    "parentId": 537
  }, {
    "id": 546,
    "label": "jvm.cfg",
    "parentId": 537
  }, {
    "id": 547,
    "label": "jvm.cfg-default",
    "parentId": 537
  }, {
    "id": 548,
    "label": "libatk-wrapper.so",
    "parentId": 537
  }, {
    "id": 549,
    "label": "libattach.so",
    "parentId": 537
  }, {
    "id": 550,
    "label": "libawt.so",
    "parentId": 537
  }, {
    "id": 551,
    "label": "libawt_headless.so",
    "parentId": 537
  }, {
    "id": 552,
    "label": "libawt_xawt.so",
    "parentId": 537
  }, {
    "id": 553,
    "label": "libdt_socket.so",
    "parentId": 537
  }, {
    "id": 554,
    "label": "libextnet.so",
    "parentId": 537
  }, {
    "id": 555,
    "label": "libfontmanager.so",
    "parentId": 537
  }, {
    "id": 556,
    "label": "libinstrument.so",
    "parentId": 537
  }, {
    "id": 557,
    "label": "libj2gss.so",
    "parentId": 537
  }, {
    "id": 558,
    "label": "libj2pcsc.so",
    "parentId": 537
  }, {
    "id": 559,
    "label": "libj2pkcs11.so",
    "parentId": 537
  }, {
    "id": 560,
    "label": "libjaas.so",
    "parentId": 537
  }, {
    "id": 561,
    "label": "libjava.so",
    "parentId": 537
  }, {
    "id": 562,
    "label": "libjavajpeg.so",
    "parentId": 537
  }, {
    "id": 563,
    "label": "libjawt.so",
    "parentId": 537
  }, {
    "id": 564,
    "label": "libjdwp.so",
    "parentId": 537
  }, {
    "id": 565,
    "label": "libjimage.so",
    "parentId": 537
  }, {
    "id": 566,
    "label": "libjli.so",
    "parentId": 537
  }, {
    "id": 567,
    "label": "libjsig.so",
    "parentId": 537
  }, {
    "id": 568,
    "label": "libjsound.so",
    "parentId": 537
  }, {
    "id": 569,
    "label": "libjsvml.so",
    "parentId": 537
  }, {
    "id": 570,
    "label": "liblcms.so",
    "parentId": 537
  }, {
    "id": 571,
    "label": "libmanagement.so",
    "parentId": 537
  }, {
    "id": 572,
    "label": "libmanagement_agent.so",
    "parentId": 537
  }, {
    "id": 573,
    "label": "libmanagement_ext.so",
    "parentId": 537
  }, {
    "id": 574,
    "label": "libmlib_image.so",
    "parentId": 537
  }, {
    "id": 575,
    "label": "libnet.so",
    "parentId": 537
  }, {
    "id": 576,
    "label": "libnio.so",
    "parentId": 537
  }, {
    "id": 577,
    "label": "libprefs.so",
    "parentId": 537
  }, {
    "id": 578,
    "label": "librmi.so",
    "parentId": 537
  }, {
    "id": 579,
    "label": "libsaproc.so",
    "parentId": 537
  }, {
    "id": 580,
    "label": "libsctp.so",
    "parentId": 537
  }, {
    "id": 581,
    "label": "libsplashscreen.so",
    "parentId": 537
  }, {
    "id": 582,
    "label": "libsyslookup.so",
    "parentId": 537
  }, {
    "id": 583,
    "label": "libverify.so",
    "parentId": 537
  }, {
    "id": 584,
    "label": "libzip.so",
    "parentId": 537
  }, {
    "id": 585,
    "label": "modules",
    "parentId": 537
  }, {
    "id": 586,
    "label": "psfont.properties.ja",
    "parentId": 537
  }, {
    "id": 587,
    "label": "psfontj2d.properties",
    "parentId": 537
  }, {
    "id": 589,
    "label": "security",
    "parentId": 537
  }, {
    "id": 588,
    "label": "blocked.certs",
    "parentId": 589
  }, {
    "id": 590,
    "label": "cacerts",
    "parentId": 589
  }, {
    "id": 591,
    "label": "default.policy",
    "parentId": 589
  }, {
    "id": 592,
    "label": "public_suffix_list.dat",
    "parentId": 589
  }, {
    "id": 594,
    "label": "server",
    "parentId": 537
  }, {
    "id": 593,
    "label": "classes.jsa",
    "parentId": 594
  }, {
    "id": 595,
    "label": "classes_nocoops.jsa",
    "parentId": 594
  }, {
    "id": 596,
    "label": "libjsig.so",
    "parentId": 594
  }, {
    "id": 597,
    "label": "libjvm.so",
    "parentId": 594
  }, {
    "id": 598,
    "label": "tzdb.dat",
    "parentId": 537
  }, {
    "id": 601,
    "label": "internal",
    "parentId": 138
  }, {
    "id": 600,
    "label": "_middlemen",
    "parentId": 601
  }, {
    "id": 599,
    "label": "extensions_Stestlib_Stest_Scom_Sgoogle_Sinject_Stesting_Sfieldbinder_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 603,
    "label": "include",
    "parentId": 138
  }, {
    "id": 602,
    "label": "build-info-redacted.properties",
    "parentId": 603
  }, {
    "id": 604,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 345
  }, {
    "id": 605,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 345
  }, {
    "id": 609,
    "label": "bazel_tools",
    "parentId": 4
  }, {
    "id": 608,
    "label": "tools",
    "parentId": 609
  }, {
    "id": 607,
    "label": "test",
    "parentId": 608
  }, {
    "id": 606,
    "label": "test-setup.sh",
    "parentId": 607
  }, {
    "id": 610,
    "label": "generate-xml.sh",
    "parentId": 607
  }, {
    "id": 621,
    "label": "testlogs",
    "parentId": 138
  }, {
    "id": 620,
    "label": "extensions",
    "parentId": 621
  }, {
    "id": 619,
    "label": "testlib",
    "parentId": 620
  }, {
    "id": 618,
    "label": "test",
    "parentId": 619
  }, {
    "id": 617,
    "label": "com",
    "parentId": 618
  }, {
    "id": 616,
    "label": "google",
    "parentId": 617
  }, {
    "id": 615,
    "label": "inject",
    "parentId": 616
  }, {
    "id": 614,
    "label": "testing",
    "parentId": 615
  }, {
    "id": 613,
    "label": "fieldbinder",
    "parentId": 614
  }, {
    "id": 612,
    "label": "AllTestsSuite",
    "parentId": 613
  }, {
    "id": 611,
    "label": "test.log",
    "parentId": 612
  }, {
    "id": 622,
    "label": "test.cache_status",
    "parentId": 612
  }, {
    "id": 630,
    "label": "testlib",
    "parentId": 147
  }, {
    "id": 629,
    "label": "test",
    "parentId": 630
  }, {
    "id": 628,
    "label": "com",
    "parentId": 629
  }, {
    "id": 627,
    "label": "google",
    "parentId": 628
  }, {
    "id": 626,
    "label": "inject",
    "parentId": 627
  }, {
    "id": 625,
    "label": "testing",
    "parentId": 626
  }, {
    "id": 624,
    "label": "throwingproviders",
    "parentId": 625
  }, {
    "id": 623,
    "label": "CheckedProviderSubjectTest.java",
    "parentId": 624
  }, {
    "id": 632,
    "label": "throwingproviders",
    "parentId": 359
  }, {
    "id": 631,
    "label": "libthrowingproviders-hjar.jar",
    "parentId": 632
  }, {
    "id": 633,
    "label": "libthrowingproviders-hjar.jdeps",
    "parentId": 632
  }, {
    "id": 635,
    "label": "throwingproviders",
    "parentId": 346
  }, {
    "id": 634,
    "label": "libtests.jar",
    "parentId": 635
  }, {
    "id": 636,
    "label": "libtests.jdeps",
    "parentId": 635
  }, {
    "id": 637,
    "label": "libtests-native-header.jar",
    "parentId": 635
  }, {
    "id": 638,
    "label": "libtests.jar_manifest_proto",
    "parentId": 635
  }, {
    "id": 639,
    "label": "libtests-hjar.jar",
    "parentId": 635
  }, {
    "id": 640,
    "label": "libtests-hjar.jdeps",
    "parentId": 635
  }, {
    "id": 641,
    "label": "libtests-src.jar",
    "parentId": 635
  }, {
    "id": 648,
    "label": "persist",
    "parentId": 147
  }, {
    "id": 647,
    "label": "src",
    "parentId": 648
  }, {
    "id": 646,
    "label": "com",
    "parentId": 647
  }, {
    "id": 645,
    "label": "google",
    "parentId": 646
  }, {
    "id": 644,
    "label": "inject",
    "parentId": 645
  }, {
    "id": 643,
    "label": "persist",
    "parentId": 644
  }, {
    "id": 642,
    "label": "PersistFilter.java",
    "parentId": 643
  }, {
    "id": 649,
    "label": "PersistModule.java",
    "parentId": 643
  }, {
    "id": 650,
    "label": "PersistService.java",
    "parentId": 643
  }, {
    "id": 651,
    "label": "Transactional.java",
    "parentId": 643
  }, {
    "id": 652,
    "label": "UnitOfWork.java",
    "parentId": 643
  }, {
    "id": 654,
    "label": "finder",
    "parentId": 643
  }, {
    "id": 653,
    "label": "DynamicFinder.java",
    "parentId": 654
  }, {
    "id": 655,
    "label": "Finder.java",
    "parentId": 654
  }, {
    "id": 656,
    "label": "FirstResult.java",
    "parentId": 654
  }, {
    "id": 657,
    "label": "MaxResults.java",
    "parentId": 654
  }, {
    "id": 658,
    "label": "package-info.java",
    "parentId": 654
  }, {
    "id": 660,
    "label": "jpa",
    "parentId": 643
  }, {
    "id": 659,
    "label": "Jpa.java",
    "parentId": 660
  }, {
    "id": 661,
    "label": "JpaFinderProxy.java",
    "parentId": 660
  }, {
    "id": 662,
    "label": "JpaLocalTxnInterceptor.java",
    "parentId": 660
  }, {
    "id": 663,
    "label": "JpaPersistModule.java",
    "parentId": 660
  }, {
    "id": 664,
    "label": "JpaPersistOptions.java",
    "parentId": 660
  }, {
    "id": 665,
    "label": "JpaPersistService.java",
    "parentId": 660
  }, {
    "id": 666,
    "label": "package-info.java",
    "parentId": 660
  }, {
    "id": 667,
    "label": "package-info.java",
    "parentId": 643
  }, {
    "id": 674,
    "label": "persist",
    "parentId": 253
  }, {
    "id": 673,
    "label": "src",
    "parentId": 674
  }, {
    "id": 672,
    "label": "com",
    "parentId": 673
  }, {
    "id": 671,
    "label": "google",
    "parentId": 672
  }, {
    "id": 670,
    "label": "inject",
    "parentId": 671
  }, {
    "id": 669,
    "label": "persist",
    "parentId": 670
  }, {
    "id": 668,
    "label": "libpersist-hjar.jar",
    "parentId": 669
  }, {
    "id": 678,
    "label": "persistence",
    "parentId": 211
  }, {
    "id": 677,
    "label": "jakarta.persistence-api",
    "parentId": 678
  }, {
    "id": 676,
    "label": "3.0.0",
    "parentId": 677
  }, {
    "id": 675,
    "label": "header_jakarta.persistence-api-3.0.0.jar",
    "parentId": 676
  }, {
    "id": 682,
    "label": "servlet",
    "parentId": 211
  }, {
    "id": 681,
    "label": "jakarta.servlet-api",
    "parentId": 682
  }, {
    "id": 680,
    "label": "5.0.0",
    "parentId": 681
  }, {
    "id": 679,
    "label": "header_jakarta.servlet-api-5.0.0.jar",
    "parentId": 680
  }, {
    "id": 683,
    "label": "guice-persist-javadoc.jar",
    "parentId": 669
  }, {
    "id": 684,
    "label": "gen_tests_class_loading_OFF_custom_class_loading_OFF.java",
    "parentId": 295
  }, {
    "id": 685,
    "label": "libtests-hjar.jar",
    "parentId": 295
  }, {
    "id": 686,
    "label": "libtests-hjar.jdeps",
    "parentId": 295
  }, {
    "id": 687,
    "label": "AllTestsSuite_custom_class_loading_OFF.jar",
    "parentId": 295
  }, {
    "id": 688,
    "label": "AllTestsSuite_custom_class_loading_OFF.jdeps",
    "parentId": 295
  }, {
    "id": 689,
    "label": "AllTestsSuite_custom_class_loading_OFF-native-header.jar",
    "parentId": 295
  }, {
    "id": 690,
    "label": "AllTestsSuite_custom_class_loading_OFF.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 691,
    "label": "AllTestsSuite_custom_class_loading_OFF-src.jar",
    "parentId": 295
  }, {
    "id": 692,
    "label": "AllTestsSuite_custom_class_loading_OFF",
    "parentId": 295
  }, {
    "id": 693,
    "label": "libtests-src.jar",
    "parentId": 295
  }, {
    "id": 694,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 695,
    "label": "AllTestsSuite_custom_class_loading_OFF.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 697,
    "label": "AllTestsSuite_custom_class_loading_OFF.runfiles",
    "parentId": 295
  }, {
    "id": 696,
    "label": "MANIFEST",
    "parentId": 697
  }, {
    "id": 698,
    "label": "libtests.jar",
    "parentId": 295
  }, {
    "id": 699,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite_Ucustom_Uclass_Uloading_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 700,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy.jar",
    "parentId": 295
  }, {
    "id": 701,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 708,
    "label": "core",
    "parentId": 621
  }, {
    "id": 707,
    "label": "test",
    "parentId": 708
  }, {
    "id": 706,
    "label": "com",
    "parentId": 707
  }, {
    "id": 705,
    "label": "google",
    "parentId": 706
  }, {
    "id": 704,
    "label": "inject",
    "parentId": 705
  }, {
    "id": 703,
    "label": "AllTestsSuite_custom_class_loading_OFF",
    "parentId": 704
  }, {
    "id": 702,
    "label": "test.log",
    "parentId": 703
  }, {
    "id": 709,
    "label": "test.cache_status",
    "parentId": 703
  }, {
    "id": 715,
    "label": "test",
    "parentId": 648
  }, {
    "id": 714,
    "label": "com",
    "parentId": 715
  }, {
    "id": 713,
    "label": "google",
    "parentId": 714
  }, {
    "id": 712,
    "label": "inject",
    "parentId": 713
  }, {
    "id": 711,
    "label": "persist",
    "parentId": 712
  }, {
    "id": 710,
    "label": "AllTests.java",
    "parentId": 711
  }, {
    "id": 716,
    "label": "EdslTest.java",
    "parentId": 711
  }, {
    "id": 718,
    "label": "jpa",
    "parentId": 711
  }, {
    "id": 717,
    "label": "ClassLevelManagedLocalTransactionsTest.java",
    "parentId": 718
  }, {
    "id": 719,
    "label": "CustomPropsEntityManagerFactoryProvisionTest.java",
    "parentId": 718
  }, {
    "id": 720,
    "label": "DynamicFinderTest.java",
    "parentId": 718
  }, {
    "id": 721,
    "label": "EnsureJpaCanTakeObjectsInPropertiesTest.java",
    "parentId": 718
  }, {
    "id": 722,
    "label": "EntityManagerFactoryProvisionTest.java",
    "parentId": 718
  }, {
    "id": 723,
    "label": "EntityManagerPerRequestProvisionTest.java",
    "parentId": 718
  }, {
    "id": 724,
    "label": "EntityManagerProvisionTest.java",
    "parentId": 718
  }, {
    "id": 725,
    "label": "JoiningLocalTransactionsTest.java",
    "parentId": 718
  }, {
    "id": 726,
    "label": "JpaParentTestEntity.java",
    "parentId": 718
  }, {
    "id": 727,
    "label": "JpaPersistServiceTest.java",
    "parentId": 718
  }, {
    "id": 728,
    "label": "JpaTestEntity.java",
    "parentId": 718
  }, {
    "id": 729,
    "label": "JpaWorkManagerTest.java",
    "parentId": 718
  }, {
    "id": 730,
    "label": "ManagedLocalTransactionsAcrossRequestTest.java",
    "parentId": 718
  }, {
    "id": 731,
    "label": "ManagedLocalTransactionsTest.java",
    "parentId": 718
  }, {
    "id": 732,
    "label": "ManualLocalTransactionsConfidenceTest.java",
    "parentId": 718
  }, {
    "id": 733,
    "label": "ManualLocalTransactionsTest.java",
    "parentId": 718
  }, {
    "id": 734,
    "label": "ManualLocalTransactionsWithCustomMatcherTest.java",
    "parentId": 718
  }, {
    "id": 735,
    "label": "TrackedEntityManagerFactory.java",
    "parentId": 718
  }, {
    "id": 751,
    "label": "test",
    "parentId": 674
  }, {
    "id": 750,
    "label": "com",
    "parentId": 751
  }, {
    "id": 749,
    "label": "google",
    "parentId": 750
  }, {
    "id": 748,
    "label": "inject",
    "parentId": 749
  }, {
    "id": 747,
    "label": "persist",
    "parentId": 748
  }, {
    "id": 746,
    "label": "_ijar",
    "parentId": 747
  }, {
    "id": 745,
    "label": "metainf",
    "parentId": 746
  }, {
    "id": 744,
    "label": "extensions",
    "parentId": 745
  }, {
    "id": 743,
    "label": "persist",
    "parentId": 744
  }, {
    "id": 742,
    "label": "test",
    "parentId": 743
  }, {
    "id": 741,
    "label": "com",
    "parentId": 742
  }, {
    "id": 740,
    "label": "google",
    "parentId": 741
  }, {
    "id": 739,
    "label": "inject",
    "parentId": 740
  }, {
    "id": 738,
    "label": "persist",
    "parentId": 739
  }, {
    "id": 737,
    "label": "config",
    "parentId": 738
  }, {
    "id": 736,
    "label": "jpa-manifest-ijar.jar",
    "parentId": 737
  }, {
    "id": 755,
    "label": "hibernate",
    "parentId": 228
  }, {
    "id": 754,
    "label": "hibernate-core-jakarta",
    "parentId": 755
  }, {
    "id": 753,
    "label": "5.6.15.Final",
    "parentId": 754
  }, {
    "id": 752,
    "label": "header_hibernate-core-jakarta-5.6.15.Final.jar",
    "parentId": 753
  }, {
    "id": 759,
    "label": "hsqldb",
    "parentId": 228
  }, {
    "id": 758,
    "label": "hsqldb-j5",
    "parentId": 759
  }, {
    "id": 757,
    "label": "2.0.0",
    "parentId": 758
  }, {
    "id": 756,
    "label": "header_hsqldb-j5-2.0.0.jar",
    "parentId": 757
  }, {
    "id": 763,
    "label": "mockito",
    "parentId": 228
  }, {
    "id": 762,
    "label": "mockito-core",
    "parentId": 763
  }, {
    "id": 761,
    "label": "4.2.0",
    "parentId": 762
  }, {
    "id": 760,
    "label": "header_mockito-core-4.2.0.jar",
    "parentId": 761
  }, {
    "id": 767,
    "label": "common",
    "parentId": 755
  }, {
    "id": 766,
    "label": "hibernate-commons-annotations",
    "parentId": 767
  }, {
    "id": 765,
    "label": "5.1.2.Final",
    "parentId": 766
  }, {
    "id": 764,
    "label": "header_hibernate-commons-annotations-5.1.2.Final.jar",
    "parentId": 765
  }, {
    "id": 772,
    "label": "jboss",
    "parentId": 228
  }, {
    "id": 771,
    "label": "logging",
    "parentId": 772
  }, {
    "id": 770,
    "label": "jboss-logging",
    "parentId": 771
  }, {
    "id": 769,
    "label": "3.4.3.Final",
    "parentId": 770
  }, {
    "id": 768,
    "label": "header_jboss-logging-3.4.3.Final.jar",
    "parentId": 769
  }, {
    "id": 777,
    "label": "xml",
    "parentId": 211
  }, {
    "id": 776,
    "label": "bind",
    "parentId": 777
  }, {
    "id": 775,
    "label": "jakarta.xml.bind-api",
    "parentId": 776
  }, {
    "id": 774,
    "label": "3.0.1",
    "parentId": 775
  }, {
    "id": 773,
    "label": "header_jakarta.xml.bind-api-3.0.1.jar",
    "parentId": 774
  }, {
    "id": 782,
    "label": "sun",
    "parentId": 197
  }, {
    "id": 781,
    "label": "activation",
    "parentId": 782
  }, {
    "id": 780,
    "label": "jakarta.activation",
    "parentId": 781
  }, {
    "id": 779,
    "label": "2.0.1",
    "parentId": 780
  }, {
    "id": 778,
    "label": "header_jakarta.activation-2.0.1.jar",
    "parentId": 779
  }, {
    "id": 787,
    "label": "glassfish",
    "parentId": 228
  }, {
    "id": 786,
    "label": "jaxb",
    "parentId": 787
  }, {
    "id": 785,
    "label": "jaxb-core",
    "parentId": 786
  }, {
    "id": 784,
    "label": "3.0.0",
    "parentId": 785
  }, {
    "id": 783,
    "label": "header_jaxb-core-3.0.0.jar",
    "parentId": 784
  }, {
    "id": 791,
    "label": "istack",
    "parentId": 782
  }, {
    "id": 790,
    "label": "istack-commons-runtime",
    "parentId": 791
  }, {
    "id": 789,
    "label": "4.0.0",
    "parentId": 790
  }, {
    "id": 788,
    "label": "header_istack-commons-runtime-4.0.0.jar",
    "parentId": 789
  }, {
    "id": 794,
    "label": "txw2",
    "parentId": 786
  }, {
    "id": 793,
    "label": "3.0.0",
    "parentId": 794
  }, {
    "id": 792,
    "label": "header_txw2-3.0.0.jar",
    "parentId": 793
  }, {
    "id": 797,
    "label": "jaxb-runtime",
    "parentId": 786
  }, {
    "id": 796,
    "label": "3.0.0",
    "parentId": 797
  }, {
    "id": 795,
    "label": "header_jaxb-runtime-3.0.0.jar",
    "parentId": 796
  }, {
    "id": 801,
    "label": "activation",
    "parentId": 211
  }, {
    "id": 800,
    "label": "jakarta.activation-api",
    "parentId": 801
  }, {
    "id": 799,
    "label": "2.0.1",
    "parentId": 800
  }, {
    "id": 798,
    "label": "header_jakarta.activation-api-2.0.1.jar",
    "parentId": 799
  }, {
    "id": 804,
    "label": "jandex",
    "parentId": 772
  }, {
    "id": 803,
    "label": "2.4.2.Final",
    "parentId": 804
  }, {
    "id": 802,
    "label": "header_jandex-2.4.2.Final.jar",
    "parentId": 803
  }, {
    "id": 808,
    "label": "antlr",
    "parentId": 198
  }, {
    "id": 807,
    "label": "antlr",
    "parentId": 808
  }, {
    "id": 806,
    "label": "2.7.7",
    "parentId": 807
  }, {
    "id": 805,
    "label": "header_antlr-2.7.7.jar",
    "parentId": 806
  }, {
    "id": 813,
    "label": "net",
    "parentId": 198
  }, {
    "id": 812,
    "label": "bytebuddy",
    "parentId": 813
  }, {
    "id": 811,
    "label": "byte-buddy",
    "parentId": 812
  }, {
    "id": 810,
    "label": "1.12.18",
    "parentId": 811
  }, {
    "id": 809,
    "label": "header_byte-buddy-1.12.18.jar",
    "parentId": 810
  }, {
    "id": 817,
    "label": "fasterxml",
    "parentId": 197
  }, {
    "id": 816,
    "label": "classmate",
    "parentId": 817
  }, {
    "id": 815,
    "label": "1.5.1",
    "parentId": 816
  }, {
    "id": 814,
    "label": "header_classmate-1.5.1.jar",
    "parentId": 815
  }, {
    "id": 821,
    "label": "transaction",
    "parentId": 211
  }, {
    "id": 820,
    "label": "jakarta.transaction-api",
    "parentId": 821
  }, {
    "id": 819,
    "label": "2.0.0",
    "parentId": 820
  }, {
    "id": 818,
    "label": "header_jakarta.transaction-api-2.0.0.jar",
    "parentId": 819
  }, {
    "id": 825,
    "label": "dom4j",
    "parentId": 228
  }, {
    "id": 824,
    "label": "dom4j",
    "parentId": 825
  }, {
    "id": 823,
    "label": "2.1.3",
    "parentId": 824
  }, {
    "id": 822,
    "label": "header_dom4j-2.1.3.jar",
    "parentId": 823
  }, {
    "id": 828,
    "label": "byte-buddy-agent",
    "parentId": 812
  }, {
    "id": 827,
    "label": "1.12.4",
    "parentId": 828
  }, {
    "id": 826,
    "label": "header_byte-buddy-agent-1.12.4.jar",
    "parentId": 827
  }, {
    "id": 832,
    "label": "objenesis",
    "parentId": 228
  }, {
    "id": 831,
    "label": "objenesis",
    "parentId": 832
  }, {
    "id": 830,
    "label": "3.2",
    "parentId": 831
  }, {
    "id": 829,
    "label": "header_objenesis-3.2.jar",
    "parentId": 830
  }, {
    "id": 833,
    "label": "libpersist-hjar.jdeps",
    "parentId": 669
  }, {
    "id": 834,
    "label": "libtests.jar",
    "parentId": 747
  }, {
    "id": 835,
    "label": "libtests.jdeps",
    "parentId": 747
  }, {
    "id": 836,
    "label": "libtests-native-header.jar",
    "parentId": 747
  }, {
    "id": 837,
    "label": "libtests.jar_manifest_proto",
    "parentId": 747
  }, {
    "id": 838,
    "label": "libtests-hjar.jar",
    "parentId": 747
  }, {
    "id": 839,
    "label": "libtests-hjar.jdeps",
    "parentId": 747
  }, {
    "id": 840,
    "label": "libtests-src.jar",
    "parentId": 747
  }, {
    "id": 841,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 345
  }, {
    "id": 842,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 345
  }, {
    "id": 843,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 345
  }, {
    "id": 844,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 345
  }, {
    "id": 845,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 345
  }, {
    "id": 846,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 345
  }, {
    "id": 847,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 345
  }, {
    "id": 848,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 345
  }, {
    "id": 849,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 345
  }, {
    "id": 851,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 345
  }, {
    "id": 850,
    "label": "MANIFEST",
    "parentId": 851
  }, {
    "id": 852,
    "label": "extensions_Stestlib_Stest_Scom_Sgoogle_Sinject_Stesting_Sfieldbinder_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 853,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 345
  }, {
    "id": 854,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 345
  }, {
    "id": 856,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 613
  }, {
    "id": 855,
    "label": "test.log",
    "parentId": 856
  }, {
    "id": 857,
    "label": "test.cache_status",
    "parentId": 856
  }, {
    "id": 864,
    "label": "dagger-adapter",
    "parentId": 253
  }, {
    "id": 863,
    "label": "src",
    "parentId": 864
  }, {
    "id": 862,
    "label": "com",
    "parentId": 863
  }, {
    "id": 861,
    "label": "google",
    "parentId": 862
  }, {
    "id": 860,
    "label": "inject",
    "parentId": 861
  }, {
    "id": 859,
    "label": "daggeradapter",
    "parentId": 860
  }, {
    "id": 858,
    "label": "guice-dagger-adapter.jarjar_rules",
    "parentId": 859
  }, {
    "id": 865,
    "label": "libdaggeradapter.jar",
    "parentId": 859
  }, {
    "id": 872,
    "label": "k8-opt-exec-2B5CBBC6",
    "parentId": 139
  }, {
    "id": 871,
    "label": "bin",
    "parentId": 872
  }, {
    "id": 870,
    "label": "external",
    "parentId": 871
  }, {
    "id": 869,
    "label": "google_bazel_common",
    "parentId": 870
  }, {
    "id": 868,
    "label": "tools",
    "parentId": 869
  }, {
    "id": 867,
    "label": "jarjar",
    "parentId": 868
  }, {
    "id": 866,
    "label": "jarjar.jar",
    "parentId": 867
  }, {
    "id": 873,
    "label": "jarjar",
    "parentId": 867
  }, {
    "id": 876,
    "label": "internal",
    "parentId": 872
  }, {
    "id": 875,
    "label": "_middlemen",
    "parentId": 876
  }, {
    "id": 874,
    "label": "external_Sgoogle_Ubazel_Ucommon_Stools_Sjarjar_Sjarjar-runfiles",
    "parentId": 875
  }, {
    "id": 880,
    "label": "google_bazel_common",
    "parentId": 4
  }, {
    "id": 879,
    "label": "tools",
    "parentId": 880
  }, {
    "id": 878,
    "label": "jarjar",
    "parentId": 879
  }, {
    "id": 877,
    "label": "jarjar_runner.sh",
    "parentId": 878
  }, {
    "id": 881,
    "label": "jarjar_runner",
    "parentId": 867
  }, {
    "id": 882,
    "label": "external_Sgoogle_Ubazel_Ucommon_Stools_Sjarjar_Sjarjar_Urunner-runfiles",
    "parentId": 875
  }, {
    "id": 883,
    "label": "guice-dagger-adapter.jar",
    "parentId": 859
  }, {
    "id": 890,
    "label": "spring",
    "parentId": 253
  }, {
    "id": 889,
    "label": "src",
    "parentId": 890
  }, {
    "id": 888,
    "label": "com",
    "parentId": 889
  }, {
    "id": 887,
    "label": "google",
    "parentId": 888
  }, {
    "id": 886,
    "label": "inject",
    "parentId": 887
  }, {
    "id": 885,
    "label": "spring",
    "parentId": 886
  }, {
    "id": 884,
    "label": "guice-spring-src.jarjar_rules",
    "parentId": 885
  }, {
    "id": 891,
    "label": "libspring-src.jar",
    "parentId": 885
  }, {
    "id": 892,
    "label": "guice-spring-src.jar",
    "parentId": 885
  }, {
    "id": 899,
    "label": "assistedinject",
    "parentId": 147
  }, {
    "id": 898,
    "label": "src",
    "parentId": 899
  }, {
    "id": 897,
    "label": "com",
    "parentId": 898
  }, {
    "id": 896,
    "label": "google",
    "parentId": 897
  }, {
    "id": 895,
    "label": "inject",
    "parentId": 896
  }, {
    "id": 894,
    "label": "assistedinject",
    "parentId": 895
  }, {
    "id": 893,
    "label": "Assisted.java",
    "parentId": 894
  }, {
    "id": 900,
    "label": "AssistedConstructor.java",
    "parentId": 894
  }, {
    "id": 901,
    "label": "AssistedInject.java",
    "parentId": 894
  }, {
    "id": 902,
    "label": "AssistedInjectBinding.java",
    "parentId": 894
  }, {
    "id": 903,
    "label": "AssistedInjectTargetVisitor.java",
    "parentId": 894
  }, {
    "id": 904,
    "label": "AssistedMethod.java",
    "parentId": 894
  }, {
    "id": 905,
    "label": "BindingCollector.java",
    "parentId": 894
  }, {
    "id": 906,
    "label": "FactoryModuleBuilder.java",
    "parentId": 894
  }, {
    "id": 907,
    "label": "FactoryProvider.java",
    "parentId": 894
  }, {
    "id": 908,
    "label": "FactoryProvider2.java",
    "parentId": 894
  }, {
    "id": 909,
    "label": "Parameter.java",
    "parentId": 894
  }, {
    "id": 910,
    "label": "ParameterListKey.java",
    "parentId": 894
  }, {
    "id": 911,
    "label": "package-info.java",
    "parentId": 894
  }, {
    "id": 918,
    "label": "assistedinject",
    "parentId": 253
  }, {
    "id": 917,
    "label": "src",
    "parentId": 918
  }, {
    "id": 916,
    "label": "com",
    "parentId": 917
  }, {
    "id": 915,
    "label": "google",
    "parentId": 916
  }, {
    "id": 914,
    "label": "inject",
    "parentId": 915
  }, {
    "id": 913,
    "label": "assistedinject",
    "parentId": 914
  }, {
    "id": 912,
    "label": "libassistedinject-hjar.jar",
    "parentId": 913
  }, {
    "id": 919,
    "label": "guice-assistedinject-javadoc.jar",
    "parentId": 913
  }, {
    "id": 920,
    "label": "BinderTest.java",
    "parentId": 332
  }, {
    "id": 921,
    "label": "BinderTestSuite.java",
    "parentId": 332
  }, {
    "id": 922,
    "label": "BindingAnnotationTest.java",
    "parentId": 332
  }, {
    "id": 923,
    "label": "BindingOrderTest.java",
    "parentId": 332
  }, {
    "id": 924,
    "label": "BindingTest.java",
    "parentId": 332
  }, {
    "id": 925,
    "label": "BoundInstanceInjectionTest.java",
    "parentId": 332
  }, {
    "id": 926,
    "label": "BoundProviderTest.java",
    "parentId": 332
  }, {
    "id": 927,
    "label": "CircularDependencyTest.java",
    "parentId": 332
  }, {
    "id": 928,
    "label": "DefaultMethodInterceptionTest.java",
    "parentId": 332
  }, {
    "id": 929,
    "label": "DuplicateBindingsTest.java",
    "parentId": 332
  }, {
    "id": 930,
    "label": "EagerSingletonTest.java",
    "parentId": 332
  }, {
    "id": 931,
    "label": "GenericInjectionTest.java",
    "parentId": 332
  }, {
    "id": 932,
    "label": "ImplicitBindingTest.java",
    "parentId": 332
  }, {
    "id": 933,
    "label": "InjectorTest.java",
    "parentId": 332
  }, {
    "id": 934,
    "label": "IntegrationTest.java",
    "parentId": 332
  }, {
    "id": 935,
    "label": "Java8LanguageFeatureBindingTest.java",
    "parentId": 332
  }, {
    "id": 936,
    "label": "JitBindingsTest.java",
    "parentId": 332
  }, {
    "id": 937,
    "label": "KeyTest.java",
    "parentId": 332
  }, {
    "id": 938,
    "label": "KotlinSupportDoesNotBreakJavaTest.java",
    "parentId": 332
  }, {
    "id": 939,
    "label": "LoggerInjectionTest.java",
    "parentId": 332
  }, {
    "id": 940,
    "label": "MembersInjectorTest.java",
    "parentId": 332
  }, {
    "id": 941,
    "label": "MethodInterceptionTest.java",
    "parentId": 332
  }, {
    "id": 942,
    "label": "ModuleTest.java",
    "parentId": 332
  }, {
    "id": 943,
    "label": "ModulesTest.java",
    "parentId": 332
  }, {
    "id": 944,
    "label": "NullableInjectionPointTest.java",
    "parentId": 332
  }, {
    "id": 945,
    "label": "OptionalBindingTest.java",
    "parentId": 332
  }, {
    "id": 946,
    "label": "ParentInjectorTest.java",
    "parentId": 332
  }, {
    "id": 947,
    "label": "PrivateModuleTest.java",
    "parentId": 332
  }, {
    "id": 948,
    "label": "ProviderInjectionTest.java",
    "parentId": 332
  }, {
    "id": 949,
    "label": "ProvisionExceptionTest.java",
    "parentId": 332
  }, {
    "id": 950,
    "label": "ProvisionExceptionsTest.java",
    "parentId": 332
  }, {
    "id": 951,
    "label": "ProvisionListenerTest.java",
    "parentId": 332
  }, {
    "id": 952,
    "label": "ReflectionTest.java",
    "parentId": 332
  }, {
    "id": 953,
    "label": "RequestInjectionTest.java",
    "parentId": 332
  }, {
    "id": 954,
    "label": "RequireAtInjectOnConstructorsTest.java",
    "parentId": 332
  }, {
    "id": 955,
    "label": "RestrictedBindingSourceTest.java",
    "parentId": 332
  }, {
    "id": 956,
    "label": "ScopesTest.java",
    "parentId": 332
  }, {
    "id": 957,
    "label": "SerializationTest.java",
    "parentId": 332
  }, {
    "id": 958,
    "label": "SuiteUtils.java",
    "parentId": 332
  }, {
    "id": 959,
    "label": "SuperclassTest.java",
    "parentId": 332
  }, {
    "id": 960,
    "label": "TypeConversionTest.java",
    "parentId": 332
  }, {
    "id": 961,
    "label": "TypeListenerTest.java",
    "parentId": 332
  }, {
    "id": 962,
    "label": "TypeLiteralInjectionTest.java",
    "parentId": 332
  }, {
    "id": 963,
    "label": "TypeLiteralTest.java",
    "parentId": 332
  }, {
    "id": 964,
    "label": "TypeLiteralTypeResolutionTest.java",
    "parentId": 332
  }, {
    "id": 966,
    "label": "example",
    "parentId": 332
  }, {
    "id": 965,
    "label": "ClientServiceWithDependencyInjection.java",
    "parentId": 966
  }, {
    "id": 967,
    "label": "ClientServiceWithFactories.java",
    "parentId": 966
  }, {
    "id": 968,
    "label": "ClientServiceWithGuice.java",
    "parentId": 966
  }, {
    "id": 969,
    "label": "ClientServiceWithGuiceDefaults.java",
    "parentId": 966
  }, {
    "id": 970,
    "label": "JndiProvider.java",
    "parentId": 966
  }, {
    "id": 971,
    "label": "JndiProviderClient.java",
    "parentId": 966
  }, {
    "id": 973,
    "label": "internal",
    "parentId": 332
  }, {
    "id": 972,
    "label": "Collector.java",
    "parentId": 973
  }, {
    "id": 974,
    "label": "CycleDetectingLockTest.java",
    "parentId": 973
  }, {
    "id": 975,
    "label": "InternalProvisionExceptionTest.java",
    "parentId": 973
  }, {
    "id": 976,
    "label": "MapBinderTest.java",
    "parentId": 973
  }, {
    "id": 977,
    "label": "MessagesTest.java",
    "parentId": 973
  }, {
    "id": 978,
    "label": "MoreTypesTest.java",
    "parentId": 973
  }, {
    "id": 979,
    "label": "MultibinderTest.java",
    "parentId": 973
  }, {
    "id": 980,
    "label": "OptionalBinderTest.java",
    "parentId": 973
  }, {
    "id": 981,
    "label": "PackageNameCompressorTest.java",
    "parentId": 973
  }, {
    "id": 982,
    "label": "ProxyFactoryTest.java",
    "parentId": 973
  }, {
    "id": 983,
    "label": "RealElementTest.java",
    "parentId": 973
  }, {
    "id": 984,
    "label": "SpiUtils.java",
    "parentId": 973
  }, {
    "id": 985,
    "label": "UniqueAnnotationsTest.java",
    "parentId": 973
  }, {
    "id": 986,
    "label": "WeakKeySetTest.java",
    "parentId": 973
  }, {
    "id": 988,
    "label": "aop",
    "parentId": 973
  }, {
    "id": 987,
    "label": "ImmutableStringTrieTest.java",
    "parentId": 988
  }, {
    "id": 990,
    "label": "util",
    "parentId": 973
  }, {
    "id": 989,
    "label": "ContinuousStopwatchTest.java",
    "parentId": 990
  }, {
    "id": 991,
    "label": "LineNumbersTest.java",
    "parentId": 990
  }, {
    "id": 993,
    "label": "matcher",
    "parentId": 332
  }, {
    "id": 992,
    "label": "MatcherTest.java",
    "parentId": 993
  }, {
    "id": 995,
    "label": "multibindings",
    "parentId": 332
  }, {
    "id": 994,
    "label": "ProvidesIntoTest.java",
    "parentId": 995
  }, {
    "id": 997,
    "label": "name",
    "parentId": 332
  }, {
    "id": 996,
    "label": "NamedEquivalanceTest.java",
    "parentId": 997
  }, {
    "id": 998,
    "label": "NamesTest.java",
    "parentId": 997
  }, {
    "id": 1000,
    "label": "spi",
    "parentId": 332
  }, {
    "id": 999,
    "label": "BindingSourceRestrictionTest.java",
    "parentId": 1000
  }, {
    "id": 1001,
    "label": "BindingTargetVisitorTest.java",
    "parentId": 1000
  }, {
    "id": 1002,
    "label": "ElementApplyToTest.java",
    "parentId": 1000
  }, {
    "id": 1003,
    "label": "ElementSourceTest.java",
    "parentId": 1000
  }, {
    "id": 1004,
    "label": "ElementsTest.java",
    "parentId": 1000
  }, {
    "id": 1005,
    "label": "FailingBindingScopingVisitor.java",
    "parentId": 1000
  }, {
    "id": 1006,
    "label": "FailingElementVisitor.java",
    "parentId": 1000
  }, {
    "id": 1007,
    "label": "FailingTargetVisitor.java",
    "parentId": 1000
  }, {
    "id": 1008,
    "label": "HasDependenciesTest.java",
    "parentId": 1000
  }, {
    "id": 1009,
    "label": "InjectionPointTest.java",
    "parentId": 1000
  }, {
    "id": 1010,
    "label": "InjectorSpiTest.java",
    "parentId": 1000
  }, {
    "id": 1011,
    "label": "MessageTest.java",
    "parentId": 1000
  }, {
    "id": 1012,
    "label": "ModuleAnnotatedMethodScannerTest.java",
    "parentId": 1000
  }, {
    "id": 1013,
    "label": "ModuleRewriterTest.java",
    "parentId": 1000
  }, {
    "id": 1014,
    "label": "ModuleSourceTest.java",
    "parentId": 1000
  }, {
    "id": 1015,
    "label": "ProviderMethodsTest.java",
    "parentId": 1000
  }, {
    "id": 1016,
    "label": "SourcesTest.java",
    "parentId": 1000
  }, {
    "id": 1017,
    "label": "SpiBindingsTest.java",
    "parentId": 1000
  }, {
    "id": 1018,
    "label": "ToolStageInjectorTest.java",
    "parentId": 1000
  }, {
    "id": 1020,
    "label": "util",
    "parentId": 332
  }, {
    "id": 1019,
    "label": "EnhancedTest.java",
    "parentId": 1020
  }, {
    "id": 1021,
    "label": "NoopOverrideTest.java",
    "parentId": 1020
  }, {
    "id": 1022,
    "label": "OverrideModuleTest.java",
    "parentId": 1020
  }, {
    "id": 1023,
    "label": "ProvidersTest.java",
    "parentId": 1020
  }, {
    "id": 1024,
    "label": "TypesTest.java",
    "parentId": 1020
  }, {
    "id": 1025,
    "label": "libtests.jdeps",
    "parentId": 295
  }, {
    "id": 1026,
    "label": "libtests-native-header.jar",
    "parentId": 295
  }, {
    "id": 1027,
    "label": "libtests.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 1033,
    "label": "test",
    "parentId": 252
  }, {
    "id": 1032,
    "label": "com",
    "parentId": 1033
  }, {
    "id": 1031,
    "label": "google",
    "parentId": 1032
  }, {
    "id": 1030,
    "label": "inject",
    "parentId": 1031
  }, {
    "id": 1029,
    "label": "grapher",
    "parentId": 1030
  }, {
    "id": 1028,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 1029
  }, {
    "id": 1034,
    "label": "libtests-hjar.jar",
    "parentId": 1029
  }, {
    "id": 1035,
    "label": "libtests-hjar.jdeps",
    "parentId": 1029
  }, {
    "id": 1036,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 1029
  }, {
    "id": 1037,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 1029
  }, {
    "id": 1038,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 1029
  }, {
    "id": 1039,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1029
  }, {
    "id": 1040,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 1029
  }, {
    "id": 1041,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1029
  }, {
    "id": 1042,
    "label": "libassistedinject-src.jar",
    "parentId": 913
  }, {
    "id": 1043,
    "label": "libtests-src.jar",
    "parentId": 1029
  }, {
    "id": 1044,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 1029
  }, {
    "id": 1045,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 1029
  }, {
    "id": 1047,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 1029
  }, {
    "id": 1046,
    "label": "MANIFEST",
    "parentId": 1047
  }, {
    "id": 1048,
    "label": "libassistedinject.jar",
    "parentId": 913
  }, {
    "id": 1049,
    "label": "libtests.jar",
    "parentId": 1029
  }, {
    "id": 1050,
    "label": "extensions_Sgrapher_Stest_Scom_Sgoogle_Sinject_Sgrapher_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1051,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 1029
  }, {
    "id": 1052,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1029
  }, {
    "id": 1060,
    "label": "grapher",
    "parentId": 620
  }, {
    "id": 1059,
    "label": "test",
    "parentId": 1060
  }, {
    "id": 1058,
    "label": "com",
    "parentId": 1059
  }, {
    "id": 1057,
    "label": "google",
    "parentId": 1058
  }, {
    "id": 1056,
    "label": "inject",
    "parentId": 1057
  }, {
    "id": 1055,
    "label": "grapher",
    "parentId": 1056
  }, {
    "id": 1054,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1055
  }, {
    "id": 1053,
    "label": "test.log",
    "parentId": 1054
  }, {
    "id": 1061,
    "label": "test.cache_status",
    "parentId": 1054
  }, {
    "id": 1068,
    "label": "src",
    "parentId": 336
  }, {
    "id": 1067,
    "label": "com",
    "parentId": 1068
  }, {
    "id": 1066,
    "label": "google",
    "parentId": 1067
  }, {
    "id": 1065,
    "label": "inject",
    "parentId": 1066
  }, {
    "id": 1064,
    "label": "internal",
    "parentId": 1065
  }, {
    "id": 1063,
    "label": "util",
    "parentId": 1064
  }, {
    "id": 1062,
    "label": "CallerFinder.java",
    "parentId": 1063
  }, {
    "id": 1069,
    "label": "NewThrowableFinder.java",
    "parentId": 1063
  }, {
    "id": 1070,
    "label": "libcaller_finder_common.jdeps",
    "parentId": 183
  }, {
    "id": 1071,
    "label": "libcaller_finder_common-native-header.jar",
    "parentId": 183
  }, {
    "id": 1072,
    "label": "libcaller_finder_common.jar_manifest_proto",
    "parentId": 183
  }, {
    "id": 1075,
    "label": "googlecode",
    "parentId": 297
  }, {
    "id": 1074,
    "label": "guice",
    "parentId": 1075
  }, {
    "id": 1073,
    "label": "gen_tests.java",
    "parentId": 1074
  }, {
    "id": 1076,
    "label": "gen_tests_class_loading_CHILD_custom_class_loading_CHILD.java",
    "parentId": 295
  }, {
    "id": 1077,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jar",
    "parentId": 295
  }, {
    "id": 1078,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jdeps",
    "parentId": 295
  }, {
    "id": 1079,
    "label": "AllTestsSuite_custom_class_loading_CHILD-native-header.jar",
    "parentId": 295
  }, {
    "id": 1080,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 1081,
    "label": "AllTestsSuite_custom_class_loading_CHILD-src.jar",
    "parentId": 295
  }, {
    "id": 1082,
    "label": "AllTestsSuite_custom_class_loading_CHILD",
    "parentId": 295
  }, {
    "id": 1083,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 1084,
    "label": "AllTestsSuite_custom_class_loading_CHILD.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 1086,
    "label": "AllTestsSuite_custom_class_loading_CHILD.runfiles",
    "parentId": 295
  }, {
    "id": 1085,
    "label": "MANIFEST",
    "parentId": 1086
  }, {
    "id": 1087,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite_Ucustom_Uclass_Uloading_UCHILD-runfiles",
    "parentId": 600
  }, {
    "id": 1088,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy.jar",
    "parentId": 295
  }, {
    "id": 1089,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 1091,
    "label": "AllTestsSuite_custom_class_loading_CHILD",
    "parentId": 704
  }, {
    "id": 1090,
    "label": "test.log",
    "parentId": 1091
  }, {
    "id": 1092,
    "label": "test.cache_status",
    "parentId": 1091
  }, {
    "id": 1093,
    "label": "pom-template.xml"
  }, {
    "id": 1094,
    "label": "pom.xml",
    "parentId": 183
  }, {
    "id": 1100,
    "label": "test",
    "parentId": 890
  }, {
    "id": 1099,
    "label": "com",
    "parentId": 1100
  }, {
    "id": 1098,
    "label": "google",
    "parentId": 1099
  }, {
    "id": 1097,
    "label": "inject",
    "parentId": 1098
  }, {
    "id": 1096,
    "label": "spring",
    "parentId": 1097
  }, {
    "id": 1095,
    "label": "gen_tests.java",
    "parentId": 1096
  }, {
    "id": 1108,
    "label": "jmx",
    "parentId": 253
  }, {
    "id": 1107,
    "label": "src",
    "parentId": 1108
  }, {
    "id": 1106,
    "label": "com",
    "parentId": 1107
  }, {
    "id": 1105,
    "label": "google",
    "parentId": 1106
  }, {
    "id": 1104,
    "label": "inject",
    "parentId": 1105
  }, {
    "id": 1103,
    "label": "tools",
    "parentId": 1104
  }, {
    "id": 1102,
    "label": "jmx",
    "parentId": 1103
  }, {
    "id": 1101,
    "label": "guice-jmx-src.jarjar_rules",
    "parentId": 1102
  }, {
    "id": 1109,
    "label": "libjmx-src.jar",
    "parentId": 1102
  }, {
    "id": 1110,
    "label": "guice-jmx-src.jar",
    "parentId": 1102
  }, {
    "id": 1111,
    "label": "gen_tests_stack_trace_OFF_stack_trace_OFF.java",
    "parentId": 295
  }, {
    "id": 1117,
    "label": "test",
    "parentId": 864
  }, {
    "id": 1116,
    "label": "com",
    "parentId": 1117
  }, {
    "id": 1115,
    "label": "google",
    "parentId": 1116
  }, {
    "id": 1114,
    "label": "inject",
    "parentId": 1115
  }, {
    "id": 1113,
    "label": "daggeradapter",
    "parentId": 1114
  }, {
    "id": 1112,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 1113
  }, {
    "id": 1118,
    "label": "libtests-hjar.jar",
    "parentId": 1113
  }, {
    "id": 1122,
    "label": "dagger",
    "parentId": 196
  }, {
    "id": 1121,
    "label": "dagger",
    "parentId": 1122
  }, {
    "id": 1120,
    "label": "2.22.1",
    "parentId": 1121
  }, {
    "id": 1119,
    "label": "header_dagger-2.22.1.jar",
    "parentId": 1120
  }, {
    "id": 1127,
    "label": "javax",
    "parentId": 198
  }, {
    "id": 1126,
    "label": "inject",
    "parentId": 1127
  }, {
    "id": 1125,
    "label": "javax.inject",
    "parentId": 1126
  }, {
    "id": 1124,
    "label": "1",
    "parentId": 1125
  }, {
    "id": 1123,
    "label": "header_javax.inject-1.jar",
    "parentId": 1124
  }, {
    "id": 1128,
    "label": "libdaggeradapter-hjar.jar",
    "parentId": 859
  }, {
    "id": 1131,
    "label": "dagger-producers",
    "parentId": 1122
  }, {
    "id": 1130,
    "label": "2.22.1",
    "parentId": 1131
  }, {
    "id": 1129,
    "label": "header_dagger-producers-2.22.1.jar",
    "parentId": 1130
  }, {
    "id": 1134,
    "label": "checker-compat-qual",
    "parentId": 227
  }, {
    "id": 1133,
    "label": "2.5.3",
    "parentId": 1134
  }, {
    "id": 1132,
    "label": "header_checker-compat-qual-2.5.3.jar",
    "parentId": 1133
  }, {
    "id": 1137,
    "label": "auto-value",
    "parentId": 315
  }, {
    "id": 1136,
    "label": "1.6.3",
    "parentId": 1137
  }, {
    "id": 1135,
    "label": "header_auto-value-1.6.3.jar",
    "parentId": 1136
  }, {
    "id": 1138,
    "label": "libtests-hjar.jdeps",
    "parentId": 1113
  }, {
    "id": 1139,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 1113
  }, {
    "id": 1140,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 1113
  }, {
    "id": 1141,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 1113
  }, {
    "id": 1142,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1113
  }, {
    "id": 1143,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 1113
  }, {
    "id": 1144,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1113
  }, {
    "id": 1145,
    "label": "libdaggeradapter-src.jar",
    "parentId": 859
  }, {
    "id": 1146,
    "label": "libtests-src.jar",
    "parentId": 1113
  }, {
    "id": 1147,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 1113
  }, {
    "id": 1148,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 1113
  }, {
    "id": 1150,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 1113
  }, {
    "id": 1149,
    "label": "MANIFEST",
    "parentId": 1150
  }, {
    "id": 1151,
    "label": "libtests.jar",
    "parentId": 1113
  }, {
    "id": 1155,
    "label": "dagger",
    "parentId": 401
  }, {
    "id": 1154,
    "label": "dagger",
    "parentId": 1155
  }, {
    "id": 1153,
    "label": "2.22.1",
    "parentId": 1154
  }, {
    "id": 1152,
    "label": "dagger-2.22.1.jar",
    "parentId": 1153
  }, {
    "id": 1160,
    "label": "javax",
    "parentId": 403
  }, {
    "id": 1159,
    "label": "inject",
    "parentId": 1160
  }, {
    "id": 1158,
    "label": "javax.inject",
    "parentId": 1159
  }, {
    "id": 1157,
    "label": "1",
    "parentId": 1158
  }, {
    "id": 1156,
    "label": "javax.inject-1.jar",
    "parentId": 1157
  }, {
    "id": 1163,
    "label": "dagger-producers",
    "parentId": 1155
  }, {
    "id": 1162,
    "label": "2.22.1",
    "parentId": 1163
  }, {
    "id": 1161,
    "label": "dagger-producers-2.22.1.jar",
    "parentId": 1162
  }, {
    "id": 1166,
    "label": "checker-compat-qual",
    "parentId": 432
  }, {
    "id": 1165,
    "label": "2.5.3",
    "parentId": 1166
  }, {
    "id": 1164,
    "label": "checker-compat-qual-2.5.3.jar",
    "parentId": 1165
  }, {
    "id": 1169,
    "label": "auto-value",
    "parentId": 467
  }, {
    "id": 1168,
    "label": "1.6.3",
    "parentId": 1169
  }, {
    "id": 1167,
    "label": "auto-value-1.6.3.jar",
    "parentId": 1168
  }, {
    "id": 1170,
    "label": "extensions_Sdagger-adapter_Stest_Scom_Sgoogle_Sinject_Sdaggeradapter_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1171,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 1113
  }, {
    "id": 1172,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1113
  }, {
    "id": 1180,
    "label": "dagger-adapter",
    "parentId": 620
  }, {
    "id": 1179,
    "label": "test",
    "parentId": 1180
  }, {
    "id": 1178,
    "label": "com",
    "parentId": 1179
  }, {
    "id": 1177,
    "label": "google",
    "parentId": 1178
  }, {
    "id": 1176,
    "label": "inject",
    "parentId": 1177
  }, {
    "id": 1175,
    "label": "daggeradapter",
    "parentId": 1176
  }, {
    "id": 1174,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1175
  }, {
    "id": 1173,
    "label": "test.log",
    "parentId": 1174
  }, {
    "id": 1181,
    "label": "test.cache_status",
    "parentId": 1174
  }, {
    "id": 1182,
    "label": "ImplementedBy.java",
    "parentId": 1065
  }, {
    "id": 1183,
    "label": "libimplemented_by.jdeps",
    "parentId": 183
  }, {
    "id": 1184,
    "label": "libimplemented_by-native-header.jar",
    "parentId": 183
  }, {
    "id": 1185,
    "label": "libimplemented_by.jar_manifest_proto",
    "parentId": 183
  }, {
    "id": 1191,
    "label": "test",
    "parentId": 146
  }, {
    "id": 1190,
    "label": "com",
    "parentId": 1191
  }, {
    "id": 1189,
    "label": "google",
    "parentId": 1190
  }, {
    "id": 1188,
    "label": "inject",
    "parentId": 1189
  }, {
    "id": 1187,
    "label": "grapher",
    "parentId": 1188
  }, {
    "id": 1186,
    "label": "AbstractInjectorGrapherTest.java",
    "parentId": 1187
  }, {
    "id": 1192,
    "label": "AllTests.java",
    "parentId": 1187
  }, {
    "id": 1193,
    "label": "ShortNameFactoryTest.java",
    "parentId": 1187
  }, {
    "id": 1194,
    "label": "TransitiveDependencyVisitorTest.java",
    "parentId": 1187
  }, {
    "id": 1196,
    "label": "demo",
    "parentId": 1187
  }, {
    "id": 1195,
    "label": "AssistedInjectModule.java",
    "parentId": 1196
  }, {
    "id": 1197,
    "label": "BackToTheFutureModule.java",
    "parentId": 1196
  }, {
    "id": 1198,
    "label": "DanceParty.java",
    "parentId": 1196
  }, {
    "id": 1199,
    "label": "DancePartyFactory.java",
    "parentId": 1196
  }, {
    "id": 1200,
    "label": "DancePartyImpl.java",
    "parentId": 1196
  }, {
    "id": 1201,
    "label": "DeLorian.java",
    "parentId": 1196
  }, {
    "id": 1202,
    "label": "DocBrown.java",
    "parentId": 1196
  }, {
    "id": 1203,
    "label": "Driver.java",
    "parentId": 1196
  }, {
    "id": 1204,
    "label": "EnergySource.java",
    "parentId": 1196
  }, {
    "id": 1205,
    "label": "EnergySourceProvider.java",
    "parentId": 1196
  }, {
    "id": 1206,
    "label": "FluxCapacitor.java",
    "parentId": 1196
  }, {
    "id": 1207,
    "label": "InjectorGrapherDemo.java",
    "parentId": 1196
  }, {
    "id": 1208,
    "label": "Inventor.java",
    "parentId": 1196
  }, {
    "id": 1209,
    "label": "Lightning.java",
    "parentId": 1196
  }, {
    "id": 1210,
    "label": "MartyMcFly.java",
    "parentId": 1196
  }, {
    "id": 1211,
    "label": "MultibinderModule.java",
    "parentId": 1196
  }, {
    "id": 1212,
    "label": "Nuclear.java",
    "parentId": 1196
  }, {
    "id": 1213,
    "label": "Person.java",
    "parentId": 1196
  }, {
    "id": 1214,
    "label": "PinballParts.java",
    "parentId": 1196
  }, {
    "id": 1215,
    "label": "Plutonium.java",
    "parentId": 1196
  }, {
    "id": 1216,
    "label": "PlutoniumProvider.java",
    "parentId": 1196
  }, {
    "id": 1217,
    "label": "PrivateTestModule.java",
    "parentId": 1196
  }, {
    "id": 1218,
    "label": "Renewable.java",
    "parentId": 1196
  }, {
    "id": 1219,
    "label": "Used.java",
    "parentId": 1196
  }, {
    "id": 1220,
    "label": "libassistedinject-hjar.jdeps",
    "parentId": 913
  }, {
    "id": 1221,
    "label": "libtests.jdeps",
    "parentId": 1029
  }, {
    "id": 1222,
    "label": "libtests-native-header.jar",
    "parentId": 1029
  }, {
    "id": 1223,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1029
  }, {
    "id": 1224,
    "label": "guice-throwingproviders-src.jarjar_rules",
    "parentId": 300
  }, {
    "id": 1225,
    "label": "libthrowingproviders-src.jar",
    "parentId": 300
  }, {
    "id": 1226,
    "label": "guice-throwingproviders-src.jar",
    "parentId": 300
  }, {
    "id": 1229,
    "label": "googlecode",
    "parentId": 334
  }, {
    "id": 1228,
    "label": "guice",
    "parentId": 1229
  }, {
    "id": 1227,
    "label": "GuiceJakartaTck.java",
    "parentId": 1228
  }, {
    "id": 1232,
    "label": "jakarta.inject-tck",
    "parentId": 210
  }, {
    "id": 1231,
    "label": "2.0.1",
    "parentId": 1232
  }, {
    "id": 1230,
    "label": "header_jakarta.inject-tck-2.0.1.jar",
    "parentId": 1231
  }, {
    "id": 1233,
    "label": "libjakarta_tck_test.jar",
    "parentId": 1074
  }, {
    "id": 1234,
    "label": "libjakarta_tck_test.jdeps",
    "parentId": 1074
  }, {
    "id": 1235,
    "label": "libjakarta_tck_test-native-header.jar",
    "parentId": 1074
  }, {
    "id": 1236,
    "label": "libjakarta_tck_test.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 1237,
    "label": "libjakarta_tck_test-hjar.jar",
    "parentId": 1074
  }, {
    "id": 1238,
    "label": "libjakarta_tck_test-hjar.jdeps",
    "parentId": 1074
  }, {
    "id": 1239,
    "label": "libjakarta_tck_test-src.jar",
    "parentId": 1074
  }, {
    "id": 1246,
    "label": "servlet",
    "parentId": 147
  }, {
    "id": 1245,
    "label": "test",
    "parentId": 1246
  }, {
    "id": 1244,
    "label": "com",
    "parentId": 1245
  }, {
    "id": 1243,
    "label": "google",
    "parentId": 1244
  }, {
    "id": 1242,
    "label": "inject",
    "parentId": 1243
  }, {
    "id": 1241,
    "label": "servlet",
    "parentId": 1242
  }, {
    "id": 1240,
    "label": "AllTests.java",
    "parentId": 1241
  }, {
    "id": 1247,
    "label": "ContextPathTest.java",
    "parentId": 1241
  }, {
    "id": 1248,
    "label": "ContinuingHttpServletRequestTest.java",
    "parentId": 1241
  }, {
    "id": 1249,
    "label": "ContinuingRequestIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1250,
    "label": "DummyFilterImpl.java",
    "parentId": 1241
  }, {
    "id": 1251,
    "label": "DummyServlet.java",
    "parentId": 1241
  }, {
    "id": 1252,
    "label": "EdslTest.java",
    "parentId": 1241
  }, {
    "id": 1253,
    "label": "ExtensionSpiTest.java",
    "parentId": 1241
  }, {
    "id": 1254,
    "label": "FilterDefinitionTest.java",
    "parentId": 1241
  }, {
    "id": 1255,
    "label": "FilterDispatchIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1256,
    "label": "FilterPipelineTest.java",
    "parentId": 1241
  }, {
    "id": 1257,
    "label": "InjectedFilterPipelineTest.java",
    "parentId": 1241
  }, {
    "id": 1258,
    "label": "InvalidScopeBindingTest.java",
    "parentId": 1241
  }, {
    "id": 1259,
    "label": "MultiModuleDispatchIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1260,
    "label": "MultipleServletInjectorsTest.java",
    "parentId": 1241
  }, {
    "id": 1261,
    "label": "ScopeRequestIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1262,
    "label": "ServletDefinitionPathsTest.java",
    "parentId": 1241
  }, {
    "id": 1263,
    "label": "ServletDefinitionTest.java",
    "parentId": 1241
  }, {
    "id": 1264,
    "label": "ServletDispatchIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1265,
    "label": "ServletModuleTest.java",
    "parentId": 1241
  }, {
    "id": 1266,
    "label": "ServletPipelineRequestDispatcherTest.java",
    "parentId": 1241
  }, {
    "id": 1267,
    "label": "ServletScopesTest.java",
    "parentId": 1241
  }, {
    "id": 1268,
    "label": "ServletSpiVisitor.java",
    "parentId": 1241
  }, {
    "id": 1269,
    "label": "ServletTest.java",
    "parentId": 1241
  }, {
    "id": 1270,
    "label": "ServletTestUtils.java",
    "parentId": 1241
  }, {
    "id": 1271,
    "label": "ServletUtilsTest.java",
    "parentId": 1241
  }, {
    "id": 1272,
    "label": "TransferRequestIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1273,
    "label": "UriPatternTypeTest.java",
    "parentId": 1241
  }, {
    "id": 1274,
    "label": "VarargsFilterDispatchIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1275,
    "label": "VarargsServletDispatchIntegrationTest.java",
    "parentId": 1241
  }, {
    "id": 1282,
    "label": "servlet",
    "parentId": 253
  }, {
    "id": 1281,
    "label": "src",
    "parentId": 1282
  }, {
    "id": 1280,
    "label": "com",
    "parentId": 1281
  }, {
    "id": 1279,
    "label": "google",
    "parentId": 1280
  }, {
    "id": 1278,
    "label": "inject",
    "parentId": 1279
  }, {
    "id": 1277,
    "label": "servlet",
    "parentId": 1278
  }, {
    "id": 1276,
    "label": "libservlet-hjar.jar",
    "parentId": 1277
  }, {
    "id": 1283,
    "label": "librequest-scoped-annotation-hjar.jar",
    "parentId": 1277
  }, {
    "id": 1284,
    "label": "librequest-scoped-annotation-hjar.jdeps",
    "parentId": 1277
  }, {
    "id": 1285,
    "label": "libservlet-hjar.jdeps",
    "parentId": 1277
  }, {
    "id": 1291,
    "label": "test",
    "parentId": 1282
  }, {
    "id": 1290,
    "label": "com",
    "parentId": 1291
  }, {
    "id": 1289,
    "label": "google",
    "parentId": 1290
  }, {
    "id": 1288,
    "label": "inject",
    "parentId": 1289
  }, {
    "id": 1287,
    "label": "servlet",
    "parentId": 1288
  }, {
    "id": 1286,
    "label": "libtests.jar",
    "parentId": 1287
  }, {
    "id": 1292,
    "label": "libtests.jdeps",
    "parentId": 1287
  }, {
    "id": 1293,
    "label": "libtests-native-header.jar",
    "parentId": 1287
  }, {
    "id": 1294,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1287
  }, {
    "id": 1295,
    "label": "libtests-hjar.jar",
    "parentId": 1287
  }, {
    "id": 1296,
    "label": "libtests-hjar.jdeps",
    "parentId": 1287
  }, {
    "id": 1297,
    "label": "libtests-src.jar",
    "parentId": 1287
  }, {
    "id": 1303,
    "label": "test",
    "parentId": 918
  }, {
    "id": 1302,
    "label": "com",
    "parentId": 1303
  }, {
    "id": 1301,
    "label": "google",
    "parentId": 1302
  }, {
    "id": 1300,
    "label": "inject",
    "parentId": 1301
  }, {
    "id": 1299,
    "label": "assistedinject",
    "parentId": 1300
  }, {
    "id": 1298,
    "label": "gen_tests.java",
    "parentId": 1299
  }, {
    "id": 1310,
    "label": "dagger-adapter",
    "parentId": 147
  }, {
    "id": 1309,
    "label": "test",
    "parentId": 1310
  }, {
    "id": 1308,
    "label": "com",
    "parentId": 1309
  }, {
    "id": 1307,
    "label": "google",
    "parentId": 1308
  }, {
    "id": 1306,
    "label": "inject",
    "parentId": 1307
  }, {
    "id": 1305,
    "label": "daggeradapter",
    "parentId": 1306
  }, {
    "id": 1304,
    "label": "BindingSubject.java",
    "parentId": 1305
  }, {
    "id": 1311,
    "label": "BindsTest.java",
    "parentId": 1305
  }, {
    "id": 1312,
    "label": "DaggerAdapterTest.java",
    "parentId": 1305
  }, {
    "id": 1313,
    "label": "IntoMapTest.java",
    "parentId": 1305
  }, {
    "id": 1314,
    "label": "ModuleIncludesTest.java",
    "parentId": 1305
  }, {
    "id": 1315,
    "label": "ModuleSubcomponentsTest.java",
    "parentId": 1305
  }, {
    "id": 1316,
    "label": "MultibindsTest.java",
    "parentId": 1305
  }, {
    "id": 1317,
    "label": "OptionalBindingsTest.java",
    "parentId": 1305
  }, {
    "id": 1318,
    "label": "libdaggeradapter-hjar.jdeps",
    "parentId": 859
  }, {
    "id": 1319,
    "label": "libtests.jdeps",
    "parentId": 1113
  }, {
    "id": 1320,
    "label": "libtests-native-header.jar",
    "parentId": 1113
  }, {
    "id": 1321,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1113
  }, {
    "id": 1322,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 1299
  }, {
    "id": 1323,
    "label": "libtests-hjar.jar",
    "parentId": 1299
  }, {
    "id": 1324,
    "label": "libtests-hjar.jdeps",
    "parentId": 1299
  }, {
    "id": 1325,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 1299
  }, {
    "id": 1326,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 1299
  }, {
    "id": 1327,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 1299
  }, {
    "id": 1328,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 1329,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 1299
  }, {
    "id": 1330,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1299
  }, {
    "id": 1331,
    "label": "libtests-src.jar",
    "parentId": 1299
  }, {
    "id": 1332,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 1299
  }, {
    "id": 1333,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 1299
  }, {
    "id": 1335,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 1299
  }, {
    "id": 1334,
    "label": "MANIFEST",
    "parentId": 1335
  }, {
    "id": 1336,
    "label": "libtests.jar",
    "parentId": 1299
  }, {
    "id": 1337,
    "label": "extensions_Sassistedinject_Stest_Scom_Sgoogle_Sinject_Sassistedinject_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1338,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 1299
  }, {
    "id": 1339,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1299
  }, {
    "id": 1347,
    "label": "assistedinject",
    "parentId": 620
  }, {
    "id": 1346,
    "label": "test",
    "parentId": 1347
  }, {
    "id": 1345,
    "label": "com",
    "parentId": 1346
  }, {
    "id": 1344,
    "label": "google",
    "parentId": 1345
  }, {
    "id": 1343,
    "label": "inject",
    "parentId": 1344
  }, {
    "id": 1342,
    "label": "assistedinject",
    "parentId": 1343
  }, {
    "id": 1341,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1342
  }, {
    "id": 1340,
    "label": "test.log",
    "parentId": 1341
  }, {
    "id": 1348,
    "label": "test.cache_status",
    "parentId": 1341
  }, {
    "id": 1349,
    "label": "guice-persist.jarjar_rules",
    "parentId": 669
  }, {
    "id": 1350,
    "label": "libpersist.jar",
    "parentId": 669
  }, {
    "id": 1351,
    "label": "guice-persist.jar",
    "parentId": 669
  }, {
    "id": 1352,
    "label": "guice-persist-src.jarjar_rules",
    "parentId": 669
  }, {
    "id": 1353,
    "label": "libpersist-src.jar",
    "parentId": 669
  }, {
    "id": 1354,
    "label": "guice-persist-src.jar",
    "parentId": 669
  }, {
    "id": 1355,
    "label": "gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS.java",
    "parentId": 295
  }, {
    "id": 1356,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jar",
    "parentId": 295
  }, {
    "id": 1357,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jdeps",
    "parentId": 295
  }, {
    "id": 1358,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS-native-header.jar",
    "parentId": 295
  }, {
    "id": 1359,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 1360,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS-src.jar",
    "parentId": 295
  }, {
    "id": 1361,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS",
    "parentId": 295
  }, {
    "id": 1362,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 1363,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 1365,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.runfiles",
    "parentId": 295
  }, {
    "id": 1364,
    "label": "MANIFEST",
    "parentId": 1365
  }, {
    "id": 1366,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite_Ucustom_Uclass_Uloading_UANONYMOUS-runfiles",
    "parentId": 600
  }, {
    "id": 1367,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy.jar",
    "parentId": 295
  }, {
    "id": 1368,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 1370,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS",
    "parentId": 704
  }, {
    "id": 1369,
    "label": "test.log",
    "parentId": 1370
  }, {
    "id": 1371,
    "label": "test.cache_status",
    "parentId": 1370
  }, {
    "id": 1372,
    "label": "gen_tests.java",
    "parentId": 747
  }, {
    "id": 1373,
    "label": "AllTestsSuite.jar",
    "parentId": 747
  }, {
    "id": 1374,
    "label": "AllTestsSuite.jdeps",
    "parentId": 747
  }, {
    "id": 1375,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 747
  }, {
    "id": 1376,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 747
  }, {
    "id": 1377,
    "label": "AllTestsSuite-src.jar",
    "parentId": 747
  }, {
    "id": 1378,
    "label": "AllTestsSuite",
    "parentId": 747
  }, {
    "id": 1379,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 747
  }, {
    "id": 1380,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 747
  }, {
    "id": 1382,
    "label": "AllTestsSuite.runfiles",
    "parentId": 747
  }, {
    "id": 1381,
    "label": "MANIFEST",
    "parentId": 1382
  }, {
    "id": 1384,
    "label": "config",
    "parentId": 747
  }, {
    "id": 1383,
    "label": "jpa-manifest.jar",
    "parentId": 1384
  }, {
    "id": 1388,
    "label": "persistence",
    "parentId": 412
  }, {
    "id": 1387,
    "label": "jakarta.persistence-api",
    "parentId": 1388
  }, {
    "id": 1386,
    "label": "3.0.0",
    "parentId": 1387
  }, {
    "id": 1385,
    "label": "jakarta.persistence-api-3.0.0.jar",
    "parentId": 1386
  }, {
    "id": 1392,
    "label": "servlet",
    "parentId": 412
  }, {
    "id": 1391,
    "label": "jakarta.servlet-api",
    "parentId": 1392
  }, {
    "id": 1390,
    "label": "5.0.0",
    "parentId": 1391
  }, {
    "id": 1389,
    "label": "jakarta.servlet-api-5.0.0.jar",
    "parentId": 1390
  }, {
    "id": 1397,
    "label": "hibernate",
    "parentId": 433
  }, {
    "id": 1396,
    "label": "common",
    "parentId": 1397
  }, {
    "id": 1395,
    "label": "hibernate-commons-annotations",
    "parentId": 1396
  }, {
    "id": 1394,
    "label": "5.1.2.Final",
    "parentId": 1395
  }, {
    "id": 1393,
    "label": "hibernate-commons-annotations-5.1.2.Final.jar",
    "parentId": 1394
  }, {
    "id": 1402,
    "label": "jboss",
    "parentId": 433
  }, {
    "id": 1401,
    "label": "logging",
    "parentId": 1402
  }, {
    "id": 1400,
    "label": "jboss-logging",
    "parentId": 1401
  }, {
    "id": 1399,
    "label": "3.4.3.Final",
    "parentId": 1400
  }, {
    "id": 1398,
    "label": "jboss-logging-3.4.3.Final.jar",
    "parentId": 1399
  }, {
    "id": 1407,
    "label": "xml",
    "parentId": 412
  }, {
    "id": 1406,
    "label": "bind",
    "parentId": 1407
  }, {
    "id": 1405,
    "label": "jakarta.xml.bind-api",
    "parentId": 1406
  }, {
    "id": 1404,
    "label": "3.0.1",
    "parentId": 1405
  }, {
    "id": 1403,
    "label": "jakarta.xml.bind-api-3.0.1.jar",
    "parentId": 1404
  }, {
    "id": 1412,
    "label": "sun",
    "parentId": 402
  }, {
    "id": 1411,
    "label": "activation",
    "parentId": 1412
  }, {
    "id": 1410,
    "label": "jakarta.activation",
    "parentId": 1411
  }, {
    "id": 1409,
    "label": "2.0.1",
    "parentId": 1410
  }, {
    "id": 1408,
    "label": "jakarta.activation-2.0.1.jar",
    "parentId": 1409
  }, {
    "id": 1417,
    "label": "glassfish",
    "parentId": 433
  }, {
    "id": 1416,
    "label": "jaxb",
    "parentId": 1417
  }, {
    "id": 1415,
    "label": "jaxb-core",
    "parentId": 1416
  }, {
    "id": 1414,
    "label": "3.0.0",
    "parentId": 1415
  }, {
    "id": 1413,
    "label": "jaxb-core-3.0.0.jar",
    "parentId": 1414
  }, {
    "id": 1421,
    "label": "istack",
    "parentId": 1412
  }, {
    "id": 1420,
    "label": "istack-commons-runtime",
    "parentId": 1421
  }, {
    "id": 1419,
    "label": "4.0.0",
    "parentId": 1420
  }, {
    "id": 1418,
    "label": "istack-commons-runtime-4.0.0.jar",
    "parentId": 1419
  }, {
    "id": 1424,
    "label": "txw2",
    "parentId": 1416
  }, {
    "id": 1423,
    "label": "3.0.0",
    "parentId": 1424
  }, {
    "id": 1422,
    "label": "txw2-3.0.0.jar",
    "parentId": 1423
  }, {
    "id": 1427,
    "label": "jaxb-runtime",
    "parentId": 1416
  }, {
    "id": 1426,
    "label": "3.0.0",
    "parentId": 1427
  }, {
    "id": 1425,
    "label": "jaxb-runtime-3.0.0.jar",
    "parentId": 1426
  }, {
    "id": 1430,
    "label": "hibernate-core-jakarta",
    "parentId": 1397
  }, {
    "id": 1429,
    "label": "5.6.15.Final",
    "parentId": 1430
  }, {
    "id": 1428,
    "label": "hibernate-core-jakarta-5.6.15.Final.jar",
    "parentId": 1429
  }, {
    "id": 1434,
    "label": "activation",
    "parentId": 412
  }, {
    "id": 1433,
    "label": "jakarta.activation-api",
    "parentId": 1434
  }, {
    "id": 1432,
    "label": "2.0.1",
    "parentId": 1433
  }, {
    "id": 1431,
    "label": "jakarta.activation-api-2.0.1.jar",
    "parentId": 1432
  }, {
    "id": 1437,
    "label": "jandex",
    "parentId": 1402
  }, {
    "id": 1436,
    "label": "2.4.2.Final",
    "parentId": 1437
  }, {
    "id": 1435,
    "label": "jandex-2.4.2.Final.jar",
    "parentId": 1436
  }, {
    "id": 1441,
    "label": "antlr",
    "parentId": 403
  }, {
    "id": 1440,
    "label": "antlr",
    "parentId": 1441
  }, {
    "id": 1439,
    "label": "2.7.7",
    "parentId": 1440
  }, {
    "id": 1438,
    "label": "antlr-2.7.7.jar",
    "parentId": 1439
  }, {
    "id": 1446,
    "label": "net",
    "parentId": 403
  }, {
    "id": 1445,
    "label": "bytebuddy",
    "parentId": 1446
  }, {
    "id": 1444,
    "label": "byte-buddy",
    "parentId": 1445
  }, {
    "id": 1443,
    "label": "1.12.18",
    "parentId": 1444
  }, {
    "id": 1442,
    "label": "byte-buddy-1.12.18.jar",
    "parentId": 1443
  }, {
    "id": 1450,
    "label": "fasterxml",
    "parentId": 402
  }, {
    "id": 1449,
    "label": "classmate",
    "parentId": 1450
  }, {
    "id": 1448,
    "label": "1.5.1",
    "parentId": 1449
  }, {
    "id": 1447,
    "label": "classmate-1.5.1.jar",
    "parentId": 1448
  }, {
    "id": 1454,
    "label": "transaction",
    "parentId": 412
  }, {
    "id": 1453,
    "label": "jakarta.transaction-api",
    "parentId": 1454
  }, {
    "id": 1452,
    "label": "2.0.0",
    "parentId": 1453
  }, {
    "id": 1451,
    "label": "jakarta.transaction-api-2.0.0.jar",
    "parentId": 1452
  }, {
    "id": 1458,
    "label": "dom4j",
    "parentId": 433
  }, {
    "id": 1457,
    "label": "dom4j",
    "parentId": 1458
  }, {
    "id": 1456,
    "label": "2.1.3",
    "parentId": 1457
  }, {
    "id": 1455,
    "label": "dom4j-2.1.3.jar",
    "parentId": 1456
  }, {
    "id": 1462,
    "label": "mockito",
    "parentId": 433
  }, {
    "id": 1461,
    "label": "mockito-core",
    "parentId": 1462
  }, {
    "id": 1460,
    "label": "4.2.0",
    "parentId": 1461
  }, {
    "id": 1459,
    "label": "mockito-core-4.2.0.jar",
    "parentId": 1460
  }, {
    "id": 1465,
    "label": "byte-buddy-agent",
    "parentId": 1445
  }, {
    "id": 1464,
    "label": "1.12.4",
    "parentId": 1465
  }, {
    "id": 1463,
    "label": "byte-buddy-agent-1.12.4.jar",
    "parentId": 1464
  }, {
    "id": 1469,
    "label": "objenesis",
    "parentId": 433
  }, {
    "id": 1468,
    "label": "objenesis",
    "parentId": 1469
  }, {
    "id": 1467,
    "label": "3.2",
    "parentId": 1468
  }, {
    "id": 1466,
    "label": "objenesis-3.2.jar",
    "parentId": 1467
  }, {
    "id": 1473,
    "label": "hsqldb",
    "parentId": 433
  }, {
    "id": 1472,
    "label": "hsqldb-j5",
    "parentId": 1473
  }, {
    "id": 1471,
    "label": "2.0.0",
    "parentId": 1472
  }, {
    "id": 1470,
    "label": "hsqldb-j5-2.0.0.jar",
    "parentId": 1471
  }, {
    "id": 1474,
    "label": "extensions_Spersist_Stest_Scom_Sgoogle_Sinject_Spersist_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 1475,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 747
  }, {
    "id": 1476,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 747
  }, {
    "id": 1484,
    "label": "persist",
    "parentId": 620
  }, {
    "id": 1483,
    "label": "test",
    "parentId": 1484
  }, {
    "id": 1482,
    "label": "com",
    "parentId": 1483
  }, {
    "id": 1481,
    "label": "google",
    "parentId": 1482
  }, {
    "id": 1480,
    "label": "inject",
    "parentId": 1481
  }, {
    "id": 1479,
    "label": "persist",
    "parentId": 1480
  }, {
    "id": 1478,
    "label": "AllTestsSuite",
    "parentId": 1479
  }, {
    "id": 1477,
    "label": "test.log",
    "parentId": 1478
  }, {
    "id": 1485,
    "label": "test.cache_status",
    "parentId": 1478
  }, {
    "id": 1486,
    "label": "guice-grapher-src.jarjar_rules",
    "parentId": 247
  }, {
    "id": 1487,
    "label": "guice-grapher-src.jar",
    "parentId": 247
  }, {
    "id": 1495,
    "label": "jmx",
    "parentId": 147
  }, {
    "id": 1494,
    "label": "src",
    "parentId": 1495
  }, {
    "id": 1493,
    "label": "com",
    "parentId": 1494
  }, {
    "id": 1492,
    "label": "google",
    "parentId": 1493
  }, {
    "id": 1491,
    "label": "inject",
    "parentId": 1492
  }, {
    "id": 1490,
    "label": "tools",
    "parentId": 1491
  }, {
    "id": 1489,
    "label": "jmx",
    "parentId": 1490
  }, {
    "id": 1488,
    "label": "ManagedBinding.java",
    "parentId": 1489
  }, {
    "id": 1496,
    "label": "ManagedBindingMBean.java",
    "parentId": 1489
  }, {
    "id": 1497,
    "label": "Manager.java",
    "parentId": 1489
  }, {
    "id": 1498,
    "label": "package-info.java",
    "parentId": 1489
  }, {
    "id": 1499,
    "label": "libjmx-hjar.jar",
    "parentId": 1102
  }, {
    "id": 1500,
    "label": "guice-jmx-javadoc.jar",
    "parentId": 1102
  }, {
    "id": 1507,
    "label": "src",
    "parentId": 630
  }, {
    "id": 1506,
    "label": "com",
    "parentId": 1507
  }, {
    "id": 1505,
    "label": "google",
    "parentId": 1506
  }, {
    "id": 1504,
    "label": "inject",
    "parentId": 1505
  }, {
    "id": 1503,
    "label": "testing",
    "parentId": 1504
  }, {
    "id": 1502,
    "label": "fieldbinder",
    "parentId": 1503
  }, {
    "id": 1501,
    "label": "Bind.java",
    "parentId": 1502
  }, {
    "id": 1508,
    "label": "BoundFieldModule.java",
    "parentId": 1502
  }, {
    "id": 1510,
    "label": "throwingproviders",
    "parentId": 1503
  }, {
    "id": 1509,
    "label": "CheckedProviderSubject.java",
    "parentId": 1510
  }, {
    "id": 1511,
    "label": "guice-testlib-javadoc.jar",
    "parentId": 359
  }, {
    "id": 1512,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 1096
  }, {
    "id": 1513,
    "label": "guice-testlib-src.jarjar_rules",
    "parentId": 359
  }, {
    "id": 1514,
    "label": "libtestlib-src.jar",
    "parentId": 359
  }, {
    "id": 1515,
    "label": "libthrowingproviders-src.jar",
    "parentId": 632
  }, {
    "id": 1516,
    "label": "guice-testlib-src.jar",
    "parentId": 359
  }, {
    "id": 1518,
    "label": "fieldbinder",
    "parentId": 625
  }, {
    "id": 1517,
    "label": "BoundFieldModuleTest.java",
    "parentId": 1518
  }, {
    "id": 1519,
    "label": "TestPermit.java",
    "parentId": 1518
  }, {
    "id": 1520,
    "label": "libfieldbinder-hjar.jdeps",
    "parentId": 358
  }, {
    "id": 1521,
    "label": "libtests.jdeps",
    "parentId": 345
  }, {
    "id": 1522,
    "label": "libtests-native-header.jar",
    "parentId": 345
  }, {
    "id": 1523,
    "label": "libtests.jar_manifest_proto",
    "parentId": 345
  }, {
    "id": 1524,
    "label": "pom.xml",
    "parentId": 300
  }, {
    "id": 1525,
    "label": "guice-testlib.jarjar_rules",
    "parentId": 359
  }, {
    "id": 1526,
    "label": "libtestlib.jar",
    "parentId": 359
  }, {
    "id": 1527,
    "label": "libthrowingproviders.jar",
    "parentId": 632
  }, {
    "id": 1528,
    "label": "guice-testlib.jar",
    "parentId": 359
  }, {
    "id": 1529,
    "label": "guice-dagger-adapter-src.jarjar_rules",
    "parentId": 859
  }, {
    "id": 1530,
    "label": "guice-dagger-adapter-src.jar",
    "parentId": 859
  }, {
    "id": 1531,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 1287
  }, {
    "id": 1532,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 1287
  }, {
    "id": 1533,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 1287
  }, {
    "id": 1534,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 1287
  }, {
    "id": 1535,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1287
  }, {
    "id": 1536,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 1287
  }, {
    "id": 1537,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1287
  }, {
    "id": 1538,
    "label": "librequest-scoped-annotation-src.jar",
    "parentId": 1277
  }, {
    "id": 1539,
    "label": "libservlet-src.jar",
    "parentId": 1277
  }, {
    "id": 1540,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 1287
  }, {
    "id": 1541,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 1287
  }, {
    "id": 1543,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 1287
  }, {
    "id": 1542,
    "label": "MANIFEST",
    "parentId": 1543
  }, {
    "id": 1544,
    "label": "librequest-scoped-annotation.jar",
    "parentId": 1277
  }, {
    "id": 1545,
    "label": "libservlet.jar",
    "parentId": 1277
  }, {
    "id": 1546,
    "label": "extensions_Sservlet_Stest_Scom_Sgoogle_Sinject_Sservlet_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1547,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 1287
  }, {
    "id": 1548,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1287
  }, {
    "id": 1556,
    "label": "servlet",
    "parentId": 620
  }, {
    "id": 1555,
    "label": "test",
    "parentId": 1556
  }, {
    "id": 1554,
    "label": "com",
    "parentId": 1555
  }, {
    "id": 1553,
    "label": "google",
    "parentId": 1554
  }, {
    "id": 1552,
    "label": "inject",
    "parentId": 1553
  }, {
    "id": 1551,
    "label": "servlet",
    "parentId": 1552
  }, {
    "id": 1550,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1551
  }, {
    "id": 1549,
    "label": "test.log",
    "parentId": 1550
  }, {
    "id": 1557,
    "label": "test.cache_status",
    "parentId": 1550
  }, {
    "id": 1563,
    "label": "src",
    "parentId": 273
  }, {
    "id": 1562,
    "label": "com",
    "parentId": 1563
  }, {
    "id": 1561,
    "label": "google",
    "parentId": 1562
  }, {
    "id": 1560,
    "label": "inject",
    "parentId": 1561
  }, {
    "id": 1559,
    "label": "throwingproviders",
    "parentId": 1560
  }, {
    "id": 1558,
    "label": "CheckedProvideUtils.java",
    "parentId": 1559
  }, {
    "id": 1564,
    "label": "CheckedProvider.java",
    "parentId": 1559
  }, {
    "id": 1565,
    "label": "CheckedProviderMethod.java",
    "parentId": 1559
  }, {
    "id": 1566,
    "label": "CheckedProviderMethodsModule.java",
    "parentId": 1559
  }, {
    "id": 1567,
    "label": "CheckedProviderWithDependencies.java",
    "parentId": 1559
  }, {
    "id": 1568,
    "label": "CheckedProviders.java",
    "parentId": 1559
  }, {
    "id": 1569,
    "label": "CheckedProvides.java",
    "parentId": 1559
  }, {
    "id": 1570,
    "label": "ProviderChecker.java",
    "parentId": 1559
  }, {
    "id": 1571,
    "label": "ThrowingInject.java",
    "parentId": 1559
  }, {
    "id": 1572,
    "label": "ThrowingProvider.java",
    "parentId": 1559
  }, {
    "id": 1573,
    "label": "ThrowingProviderBinder.java",
    "parentId": 1559
  }, {
    "id": 1574,
    "label": "package-info.java",
    "parentId": 1559
  }, {
    "id": 1575,
    "label": "libthrowingproviders.jar",
    "parentId": 300
  }, {
    "id": 1576,
    "label": "libthrowingproviders.jdeps",
    "parentId": 300
  }, {
    "id": 1577,
    "label": "libthrowingproviders-native-header.jar",
    "parentId": 300
  }, {
    "id": 1578,
    "label": "libthrowingproviders.jar_manifest_proto",
    "parentId": 300
  }, {
    "id": 1579,
    "label": "pom.xml",
    "parentId": 359
  }, {
    "id": 1580,
    "label": "gen_SubpackageTestPrivateFallbackOnly_tests_OFF_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.java",
    "parentId": 1299
  }, {
    "id": 1581,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 320
  }, {
    "id": 1582,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 320
  }, {
    "id": 1583,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 320
  }, {
    "id": 1584,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 320
  }, {
    "id": 1585,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 320
  }, {
    "id": 1586,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 320
  }, {
    "id": 1587,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 320
  }, {
    "id": 1588,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 320
  }, {
    "id": 1589,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 320
  }, {
    "id": 1591,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 320
  }, {
    "id": 1590,
    "label": "MANIFEST",
    "parentId": 1591
  }, {
    "id": 1592,
    "label": "extensions_Sthrowingproviders_Stest_Scom_Sgoogle_Sinject_Sthrowingproviders_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1593,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 320
  }, {
    "id": 1594,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 320
  }, {
    "id": 1602,
    "label": "throwingproviders",
    "parentId": 620
  }, {
    "id": 1601,
    "label": "test",
    "parentId": 1602
  }, {
    "id": 1600,
    "label": "com",
    "parentId": 1601
  }, {
    "id": 1599,
    "label": "google",
    "parentId": 1600
  }, {
    "id": 1598,
    "label": "inject",
    "parentId": 1599
  }, {
    "id": 1597,
    "label": "throwingproviders",
    "parentId": 1598
  }, {
    "id": 1596,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1597
  }, {
    "id": 1595,
    "label": "test.log",
    "parentId": 1596
  }, {
    "id": 1603,
    "label": "test.cache_status",
    "parentId": 1596
  }, {
    "id": 1604,
    "label": "libtests-hjar.jar",
    "parentId": 1096
  }, {
    "id": 1608,
    "label": "springframework",
    "parentId": 228
  }, {
    "id": 1607,
    "label": "spring-core",
    "parentId": 1608
  }, {
    "id": 1606,
    "label": "5.3.18",
    "parentId": 1607
  }, {
    "id": 1605,
    "label": "header_spring-core-5.3.18.jar",
    "parentId": 1606
  }, {
    "id": 1611,
    "label": "spring-jcl",
    "parentId": 1608
  }, {
    "id": 1610,
    "label": "5.3.18",
    "parentId": 1611
  }, {
    "id": 1609,
    "label": "header_spring-jcl-5.3.18.jar",
    "parentId": 1610
  }, {
    "id": 1614,
    "label": "spring-beans",
    "parentId": 1608
  }, {
    "id": 1613,
    "label": "5.3.18",
    "parentId": 1614
  }, {
    "id": 1612,
    "label": "header_spring-beans-5.3.18.jar",
    "parentId": 1613
  }, {
    "id": 1615,
    "label": "libspring-hjar.jar",
    "parentId": 885
  }, {
    "id": 1616,
    "label": "libtests-hjar.jdeps",
    "parentId": 1096
  }, {
    "id": 1617,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 1096
  }, {
    "id": 1618,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 1096
  }, {
    "id": 1619,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 1096
  }, {
    "id": 1620,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1096
  }, {
    "id": 1621,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 1096
  }, {
    "id": 1622,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1096
  }, {
    "id": 1624,
    "label": "spring",
    "parentId": 378
  }, {
    "id": 1623,
    "label": "libbeans-src.jar",
    "parentId": 1624
  }, {
    "id": 1625,
    "label": "libtests-src.jar",
    "parentId": 1096
  }, {
    "id": 1626,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 1096
  }, {
    "id": 1627,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 1096
  }, {
    "id": 1629,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 1096
  }, {
    "id": 1628,
    "label": "MANIFEST",
    "parentId": 1629
  }, {
    "id": 1630,
    "label": "libspring.jar",
    "parentId": 885
  }, {
    "id": 1631,
    "label": "libtests.jar",
    "parentId": 1096
  }, {
    "id": 1635,
    "label": "springframework",
    "parentId": 433
  }, {
    "id": 1634,
    "label": "spring-core",
    "parentId": 1635
  }, {
    "id": 1633,
    "label": "5.3.18",
    "parentId": 1634
  }, {
    "id": 1632,
    "label": "spring-core-5.3.18.jar",
    "parentId": 1633
  }, {
    "id": 1638,
    "label": "spring-jcl",
    "parentId": 1635
  }, {
    "id": 1637,
    "label": "5.3.18",
    "parentId": 1638
  }, {
    "id": 1636,
    "label": "spring-jcl-5.3.18.jar",
    "parentId": 1637
  }, {
    "id": 1641,
    "label": "spring-beans",
    "parentId": 1635
  }, {
    "id": 1640,
    "label": "5.3.18",
    "parentId": 1641
  }, {
    "id": 1639,
    "label": "spring-beans-5.3.18.jar",
    "parentId": 1640
  }, {
    "id": 1642,
    "label": "extensions_Sspring_Stest_Scom_Sgoogle_Sinject_Sspring_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 1643,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 1096
  }, {
    "id": 1644,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1096
  }, {
    "id": 1652,
    "label": "spring",
    "parentId": 620
  }, {
    "id": 1651,
    "label": "test",
    "parentId": 1652
  }, {
    "id": 1650,
    "label": "com",
    "parentId": 1651
  }, {
    "id": 1649,
    "label": "google",
    "parentId": 1650
  }, {
    "id": 1648,
    "label": "inject",
    "parentId": 1649
  }, {
    "id": 1647,
    "label": "spring",
    "parentId": 1648
  }, {
    "id": 1646,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1647
  }, {
    "id": 1645,
    "label": "test.log",
    "parentId": 1646
  }, {
    "id": 1653,
    "label": "test.cache_status",
    "parentId": 1646
  }, {
    "id": 1654,
    "label": "pom.xml",
    "parentId": 669
  }, {
    "id": 1655,
    "label": "AbstractModule.java",
    "parentId": 1065
  }, {
    "id": 1656,
    "label": "Binder.java",
    "parentId": 1065
  }, {
    "id": 1657,
    "label": "Binding.java",
    "parentId": 1065
  }, {
    "id": 1658,
    "label": "ConfigurationException.java",
    "parentId": 1065
  }, {
    "id": 1659,
    "label": "CreationException.java",
    "parentId": 1065
  }, {
    "id": 1660,
    "label": "Guice.java",
    "parentId": 1065
  }, {
    "id": 1661,
    "label": "Injector.java",
    "parentId": 1065
  }, {
    "id": 1662,
    "label": "Key.java",
    "parentId": 1065
  }, {
    "id": 1663,
    "label": "MembersInjector.java",
    "parentId": 1065
  }, {
    "id": 1664,
    "label": "Module.java",
    "parentId": 1065
  }, {
    "id": 1665,
    "label": "OutOfScopeException.java",
    "parentId": 1065
  }, {
    "id": 1666,
    "label": "PrivateBinder.java",
    "parentId": 1065
  }, {
    "id": 1667,
    "label": "PrivateModule.java",
    "parentId": 1065
  }, {
    "id": 1668,
    "label": "Provider.java",
    "parentId": 1065
  }, {
    "id": 1669,
    "label": "ProvisionException.java",
    "parentId": 1065
  }, {
    "id": 1670,
    "label": "RestrictedBindingSource.java",
    "parentId": 1065
  }, {
    "id": 1671,
    "label": "Scope.java",
    "parentId": 1065
  }, {
    "id": 1672,
    "label": "Scopes.java",
    "parentId": 1065
  }, {
    "id": 1673,
    "label": "Stage.java",
    "parentId": 1065
  }, {
    "id": 1674,
    "label": "TypeLiteral.java",
    "parentId": 1065
  }, {
    "id": 1676,
    "label": "binder",
    "parentId": 1065
  }, {
    "id": 1675,
    "label": "AnnotatedBindingBuilder.java",
    "parentId": 1676
  }, {
    "id": 1677,
    "label": "AnnotatedConstantBindingBuilder.java",
    "parentId": 1676
  }, {
    "id": 1678,
    "label": "AnnotatedElementBuilder.java",
    "parentId": 1676
  }, {
    "id": 1679,
    "label": "ConstantBindingBuilder.java",
    "parentId": 1676
  }, {
    "id": 1680,
    "label": "LinkedBindingBuilder.java",
    "parentId": 1676
  }, {
    "id": 1681,
    "label": "ScopedBindingBuilder.java",
    "parentId": 1676
  }, {
    "id": 1682,
    "label": "package-info.java",
    "parentId": 1676
  }, {
    "id": 1683,
    "label": "AbstractBindingBuilder.java",
    "parentId": 1064
  }, {
    "id": 1684,
    "label": "AbstractBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1685,
    "label": "AbstractProcessor.java",
    "parentId": 1064
  }, {
    "id": 1686,
    "label": "Annotations.java",
    "parentId": 1064
  }, {
    "id": 1687,
    "label": "BindingAlreadySetError.java",
    "parentId": 1064
  }, {
    "id": 1688,
    "label": "BindingBuilder.java",
    "parentId": 1064
  }, {
    "id": 1689,
    "label": "BindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1690,
    "label": "BindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1691,
    "label": "BoundProviderFactory.java",
    "parentId": 1064
  }, {
    "id": 1692,
    "label": "BytecodeGen.java",
    "parentId": 1064
  }, {
    "id": 1693,
    "label": "ChildBindingAlreadySetError.java",
    "parentId": 1064
  }, {
    "id": 1694,
    "label": "ConstantBindingBuilderImpl.java",
    "parentId": 1064
  }, {
    "id": 1695,
    "label": "ConstantFactory.java",
    "parentId": 1064
  }, {
    "id": 1696,
    "label": "ConstructionContext.java",
    "parentId": 1064
  }, {
    "id": 1697,
    "label": "ConstructionProxy.java",
    "parentId": 1064
  }, {
    "id": 1698,
    "label": "ConstructionProxyFactory.java",
    "parentId": 1064
  }, {
    "id": 1699,
    "label": "ConstructorBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1700,
    "label": "ConstructorInjector.java",
    "parentId": 1064
  }, {
    "id": 1701,
    "label": "ConstructorInjectorStore.java",
    "parentId": 1064
  }, {
    "id": 1702,
    "label": "CreationListener.java",
    "parentId": 1064
  }, {
    "id": 1703,
    "label": "CycleDetectingLock.java",
    "parentId": 1064
  }, {
    "id": 1704,
    "label": "DeclaredMembers.java",
    "parentId": 1064
  }, {
    "id": 1705,
    "label": "DefaultConstructionProxyFactory.java",
    "parentId": 1064
  }, {
    "id": 1706,
    "label": "DeferredLookups.java",
    "parentId": 1064
  }, {
    "id": 1707,
    "label": "DelayedInitialize.java",
    "parentId": 1064
  }, {
    "id": 1708,
    "label": "DelegatingInvocationHandler.java",
    "parentId": 1064
  }, {
    "id": 1709,
    "label": "DuplicateElementError.java",
    "parentId": 1064
  }, {
    "id": 1710,
    "label": "DuplicateMapKeyError.java",
    "parentId": 1064
  }, {
    "id": 1711,
    "label": "Element.java",
    "parentId": 1064
  }, {
    "id": 1712,
    "label": "EncounterImpl.java",
    "parentId": 1064
  }, {
    "id": 1713,
    "label": "ErrorFormatter.java",
    "parentId": 1064
  }, {
    "id": 1714,
    "label": "ErrorHandler.java",
    "parentId": 1064
  }, {
    "id": 1715,
    "label": "ErrorId.java",
    "parentId": 1064
  }, {
    "id": 1716,
    "label": "Errors.java",
    "parentId": 1064
  }, {
    "id": 1717,
    "label": "ErrorsException.java",
    "parentId": 1064
  }, {
    "id": 1718,
    "label": "ExposedBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1719,
    "label": "ExposedKeyFactory.java",
    "parentId": 1064
  }, {
    "id": 1720,
    "label": "ExposureBuilder.java",
    "parentId": 1064
  }, {
    "id": 1721,
    "label": "FactoryProxy.java",
    "parentId": 1064
  }, {
    "id": 1722,
    "label": "FailableCache.java",
    "parentId": 1064
  }, {
    "id": 1723,
    "label": "GenericErrorDetail.java",
    "parentId": 1064
  }, {
    "id": 1724,
    "label": "GuiceInternal.java",
    "parentId": 1064
  }, {
    "id": 1725,
    "label": "Indexer.java",
    "parentId": 1064
  }, {
    "id": 1726,
    "label": "Initializable.java",
    "parentId": 1064
  }, {
    "id": 1727,
    "label": "Initializables.java",
    "parentId": 1064
  }, {
    "id": 1728,
    "label": "Initializer.java",
    "parentId": 1064
  }, {
    "id": 1729,
    "label": "InjectionRequestProcessor.java",
    "parentId": 1064
  }, {
    "id": 1730,
    "label": "InjectorBindingData.java",
    "parentId": 1064
  }, {
    "id": 1731,
    "label": "InjectorImpl.java",
    "parentId": 1064
  }, {
    "id": 1732,
    "label": "InjectorJitBindingData.java",
    "parentId": 1064
  }, {
    "id": 1733,
    "label": "InjectorOptionsProcessor.java",
    "parentId": 1064
  }, {
    "id": 1734,
    "label": "InjectorShell.java",
    "parentId": 1064
  }, {
    "id": 1735,
    "label": "InstanceBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1736,
    "label": "InterceptorBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1737,
    "label": "InterceptorStackCallback.java",
    "parentId": 1064
  }, {
    "id": 1738,
    "label": "InternalClassesToSkipSources.java",
    "parentId": 1064
  }, {
    "id": 1739,
    "label": "InternalContext.java",
    "parentId": 1064
  }, {
    "id": 1740,
    "label": "InternalErrorDetail.java",
    "parentId": 1064
  }, {
    "id": 1741,
    "label": "InternalFactory.java",
    "parentId": 1064
  }, {
    "id": 1742,
    "label": "InternalFactoryToInitializableAdapter.java",
    "parentId": 1064
  }, {
    "id": 1743,
    "label": "InternalFactoryToProviderAdapter.java",
    "parentId": 1064
  }, {
    "id": 1744,
    "label": "InternalFlags.java",
    "parentId": 1064
  }, {
    "id": 1745,
    "label": "InternalInjectorCreator.java",
    "parentId": 1064
  }, {
    "id": 1746,
    "label": "InternalProviderInstanceBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1747,
    "label": "InternalProvisionException.java",
    "parentId": 1064
  }, {
    "id": 1748,
    "label": "KotlinSupport.java",
    "parentId": 1064
  }, {
    "id": 1749,
    "label": "KotlinSupportInterface.java",
    "parentId": 1064
  }, {
    "id": 1750,
    "label": "LinkedBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1751,
    "label": "LinkedProviderBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1752,
    "label": "ListenerBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1753,
    "label": "LookupProcessor.java",
    "parentId": 1064
  }, {
    "id": 1754,
    "label": "Lookups.java",
    "parentId": 1064
  }, {
    "id": 1755,
    "label": "MembersInjectorImpl.java",
    "parentId": 1064
  }, {
    "id": 1756,
    "label": "MembersInjectorStore.java",
    "parentId": 1064
  }, {
    "id": 1757,
    "label": "MessageProcessor.java",
    "parentId": 1064
  }, {
    "id": 1758,
    "label": "Messages.java",
    "parentId": 1064
  }, {
    "id": 1759,
    "label": "MethodAspect.java",
    "parentId": 1064
  }, {
    "id": 1760,
    "label": "MissingConstructorError.java",
    "parentId": 1064
  }, {
    "id": 1761,
    "label": "MissingImplementationError.java",
    "parentId": 1064
  }, {
    "id": 1762,
    "label": "MissingImplementationErrorHints.java",
    "parentId": 1064
  }, {
    "id": 1763,
    "label": "ModuleAnnotatedMethodScannerProcessor.java",
    "parentId": 1064
  }, {
    "id": 1764,
    "label": "MoreTypes.java",
    "parentId": 1064
  }, {
    "id": 1765,
    "label": "Nullability.java",
    "parentId": 1064
  }, {
    "id": 1766,
    "label": "PackageNameCompressor.java",
    "parentId": 1064
  }, {
    "id": 1767,
    "label": "PrivateElementProcessor.java",
    "parentId": 1064
  }, {
    "id": 1768,
    "label": "PrivateElementsImpl.java",
    "parentId": 1064
  }, {
    "id": 1769,
    "label": "ProcessedBindingData.java",
    "parentId": 1064
  }, {
    "id": 1770,
    "label": "ProvidedByInternalFactory.java",
    "parentId": 1064
  }, {
    "id": 1771,
    "label": "ProviderInstanceBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1772,
    "label": "ProviderInternalFactory.java",
    "parentId": 1064
  }, {
    "id": 1773,
    "label": "ProviderMethod.java",
    "parentId": 1064
  }, {
    "id": 1774,
    "label": "ProviderMethodsModule.java",
    "parentId": 1064
  }, {
    "id": 1775,
    "label": "ProviderToInternalFactoryAdapter.java",
    "parentId": 1064
  }, {
    "id": 1776,
    "label": "ProvidesMethodScanner.java",
    "parentId": 1064
  }, {
    "id": 1777,
    "label": "ProvisionListenerCallbackStore.java",
    "parentId": 1064
  }, {
    "id": 1778,
    "label": "ProvisionListenerStackCallback.java",
    "parentId": 1064
  }, {
    "id": 1779,
    "label": "ProxyFactory.java",
    "parentId": 1064
  }, {
    "id": 1780,
    "label": "RealElement.java",
    "parentId": 1064
  }, {
    "id": 1781,
    "label": "RealMapBinder.java",
    "parentId": 1064
  }, {
    "id": 1782,
    "label": "RealMultibinder.java",
    "parentId": 1064
  }, {
    "id": 1783,
    "label": "RealOptionalBinder.java",
    "parentId": 1064
  }, {
    "id": 1784,
    "label": "ScopeBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1785,
    "label": "ScopeNotFoundError.java",
    "parentId": 1064
  }, {
    "id": 1786,
    "label": "Scoping.java",
    "parentId": 1064
  }, {
    "id": 1787,
    "label": "SingleFieldInjector.java",
    "parentId": 1064
  }, {
    "id": 1788,
    "label": "SingleMemberInjector.java",
    "parentId": 1064
  }, {
    "id": 1789,
    "label": "SingleMethodInjector.java",
    "parentId": 1064
  }, {
    "id": 1790,
    "label": "SingleParameterInjector.java",
    "parentId": 1064
  }, {
    "id": 1791,
    "label": "SingletonScope.java",
    "parentId": 1064
  }, {
    "id": 1792,
    "label": "SourceFormatter.java",
    "parentId": 1064
  }, {
    "id": 1793,
    "label": "TypeConverterBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1794,
    "label": "UniqueAnnotations.java",
    "parentId": 1064
  }, {
    "id": 1795,
    "label": "UntargettedBindingImpl.java",
    "parentId": 1064
  }, {
    "id": 1796,
    "label": "UntargettedBindingProcessor.java",
    "parentId": 1064
  }, {
    "id": 1797,
    "label": "WeakKeySet.java",
    "parentId": 1064
  }, {
    "id": 1799,
    "label": "aop",
    "parentId": 1064
  }, {
    "id": 1798,
    "label": "AbstractGlueGenerator.java",
    "parentId": 1799
  }, {
    "id": 1800,
    "label": "AnonymousClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1801,
    "label": "BytecodeTasks.java",
    "parentId": 1799
  }, {
    "id": 1802,
    "label": "ChildClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1803,
    "label": "ClassBuilding.java",
    "parentId": 1799
  }, {
    "id": 1804,
    "label": "ClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1805,
    "label": "ClassDefining.java",
    "parentId": 1799
  }, {
    "id": 1806,
    "label": "Enhancer.java",
    "parentId": 1799
  }, {
    "id": 1807,
    "label": "EnhancerBuilderImpl.java",
    "parentId": 1799
  }, {
    "id": 1808,
    "label": "FastClass.java",
    "parentId": 1799
  }, {
    "id": 1809,
    "label": "GeneratedClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1810,
    "label": "GlueException.java",
    "parentId": 1799
  }, {
    "id": 1811,
    "label": "HiddenClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1812,
    "label": "ImmutableStringTrie.java",
    "parentId": 1799
  }, {
    "id": 1813,
    "label": "MethodPartition.java",
    "parentId": 1799
  }, {
    "id": 1814,
    "label": "UnsafeClassDefiner.java",
    "parentId": 1799
  }, {
    "id": 1815,
    "label": "UnsafeGetter.java",
    "parentId": 1799
  }, {
    "id": 1816,
    "label": "package-info.java",
    "parentId": 1064
  }, {
    "id": 1817,
    "label": "Classes.java",
    "parentId": 1063
  }, {
    "id": 1818,
    "label": "ContinuousStopwatch.java",
    "parentId": 1063
  }, {
    "id": 1819,
    "label": "LineNumbers.java",
    "parentId": 1063
  }, {
    "id": 1820,
    "label": "SourceProvider.java",
    "parentId": 1063
  }, {
    "id": 1821,
    "label": "StackTraceElements.java",
    "parentId": 1063
  }, {
    "id": 1823,
    "label": "matcher",
    "parentId": 1065
  }, {
    "id": 1822,
    "label": "AbstractMatcher.java",
    "parentId": 1823
  }, {
    "id": 1824,
    "label": "Matcher.java",
    "parentId": 1823
  }, {
    "id": 1825,
    "label": "Matchers.java",
    "parentId": 1823
  }, {
    "id": 1826,
    "label": "package-info.java",
    "parentId": 1823
  }, {
    "id": 1828,
    "label": "multibindings",
    "parentId": 1065
  }, {
    "id": 1827,
    "label": "ClassMapKey.java",
    "parentId": 1828
  }, {
    "id": 1829,
    "label": "MapBinder.java",
    "parentId": 1828
  }, {
    "id": 1830,
    "label": "MapBinderBinding.java",
    "parentId": 1828
  }, {
    "id": 1831,
    "label": "MapKey.java",
    "parentId": 1828
  }, {
    "id": 1832,
    "label": "Multibinder.java",
    "parentId": 1828
  }, {
    "id": 1833,
    "label": "MultibinderBinding.java",
    "parentId": 1828
  }, {
    "id": 1834,
    "label": "MultibindingsScanner.java",
    "parentId": 1828
  }, {
    "id": 1835,
    "label": "MultibindingsTargetVisitor.java",
    "parentId": 1828
  }, {
    "id": 1836,
    "label": "OptionalBinder.java",
    "parentId": 1828
  }, {
    "id": 1837,
    "label": "OptionalBinderBinding.java",
    "parentId": 1828
  }, {
    "id": 1838,
    "label": "ProvidesIntoMap.java",
    "parentId": 1828
  }, {
    "id": 1839,
    "label": "ProvidesIntoOptional.java",
    "parentId": 1828
  }, {
    "id": 1840,
    "label": "ProvidesIntoSet.java",
    "parentId": 1828
  }, {
    "id": 1841,
    "label": "StringMapKey.java",
    "parentId": 1828
  }, {
    "id": 1842,
    "label": "package-info.java",
    "parentId": 1828
  }, {
    "id": 1844,
    "label": "name",
    "parentId": 1065
  }, {
    "id": 1843,
    "label": "Named.java",
    "parentId": 1844
  }, {
    "id": 1845,
    "label": "NamedImpl.java",
    "parentId": 1844
  }, {
    "id": 1846,
    "label": "Names.java",
    "parentId": 1844
  }, {
    "id": 1847,
    "label": "package-info.java",
    "parentId": 1844
  }, {
    "id": 1848,
    "label": "package-info.java",
    "parentId": 1065
  }, {
    "id": 1850,
    "label": "spi",
    "parentId": 1065
  }, {
    "id": 1849,
    "label": "BindingScopingVisitor.java",
    "parentId": 1850
  }, {
    "id": 1851,
    "label": "BindingSourceRestriction.java",
    "parentId": 1850
  }, {
    "id": 1852,
    "label": "BindingTargetVisitor.java",
    "parentId": 1850
  }, {
    "id": 1853,
    "label": "ConstructorBinding.java",
    "parentId": 1850
  }, {
    "id": 1854,
    "label": "ConvertedConstantBinding.java",
    "parentId": 1850
  }, {
    "id": 1855,
    "label": "DefaultBindingScopingVisitor.java",
    "parentId": 1850
  }, {
    "id": 1856,
    "label": "DefaultBindingTargetVisitor.java",
    "parentId": 1850
  }, {
    "id": 1857,
    "label": "DefaultElementVisitor.java",
    "parentId": 1850
  }, {
    "id": 1858,
    "label": "Dependency.java",
    "parentId": 1850
  }, {
    "id": 1859,
    "label": "DisableCircularProxiesOption.java",
    "parentId": 1850
  }, {
    "id": 1860,
    "label": "Element.java",
    "parentId": 1850
  }, {
    "id": 1861,
    "label": "ElementSource.java",
    "parentId": 1850
  }, {
    "id": 1862,
    "label": "ElementVisitor.java",
    "parentId": 1850
  }, {
    "id": 1863,
    "label": "Elements.java",
    "parentId": 1850
  }, {
    "id": 1864,
    "label": "ErrorDetail.java",
    "parentId": 1850
  }, {
    "id": 1865,
    "label": "ExposedBinding.java",
    "parentId": 1850
  }, {
    "id": 1866,
    "label": "HasDependencies.java",
    "parentId": 1850
  }, {
    "id": 1867,
    "label": "InjectionListener.java",
    "parentId": 1850
  }, {
    "id": 1868,
    "label": "InjectionPoint.java",
    "parentId": 1850
  }, {
    "id": 1869,
    "label": "InjectionRequest.java",
    "parentId": 1850
  }, {
    "id": 1870,
    "label": "InstanceBinding.java",
    "parentId": 1850
  }, {
    "id": 1871,
    "label": "InterceptorBinding.java",
    "parentId": 1850
  }, {
    "id": 1872,
    "label": "LinkedKeyBinding.java",
    "parentId": 1850
  }, {
    "id": 1873,
    "label": "MembersInjectorLookup.java",
    "parentId": 1850
  }, {
    "id": 1874,
    "label": "Message.java",
    "parentId": 1850
  }, {
    "id": 1875,
    "label": "ModuleAnnotatedMethodScanner.java",
    "parentId": 1850
  }, {
    "id": 1876,
    "label": "ModuleAnnotatedMethodScannerBinding.java",
    "parentId": 1850
  }, {
    "id": 1877,
    "label": "ModuleSource.java",
    "parentId": 1850
  }, {
    "id": 1878,
    "label": "PrivateElements.java",
    "parentId": 1850
  }, {
    "id": 1879,
    "label": "ProviderBinding.java",
    "parentId": 1850
  }, {
    "id": 1880,
    "label": "ProviderInstanceBinding.java",
    "parentId": 1850
  }, {
    "id": 1881,
    "label": "ProviderKeyBinding.java",
    "parentId": 1850
  }, {
    "id": 1882,
    "label": "ProviderLookup.java",
    "parentId": 1850
  }, {
    "id": 1883,
    "label": "ProviderWithDependencies.java",
    "parentId": 1850
  }, {
    "id": 1884,
    "label": "ProviderWithExtensionVisitor.java",
    "parentId": 1850
  }, {
    "id": 1885,
    "label": "ProvidesMethodBinding.java",
    "parentId": 1850
  }, {
    "id": 1886,
    "label": "ProvidesMethodTargetVisitor.java",
    "parentId": 1850
  }, {
    "id": 1887,
    "label": "ProvisionListener.java",
    "parentId": 1850
  }, {
    "id": 1888,
    "label": "ProvisionListenerBinding.java",
    "parentId": 1850
  }, {
    "id": 1889,
    "label": "RequireAtInjectOnConstructorsOption.java",
    "parentId": 1850
  }, {
    "id": 1890,
    "label": "RequireExactBindingAnnotationsOption.java",
    "parentId": 1850
  }, {
    "id": 1891,
    "label": "RequireExplicitBindingsOption.java",
    "parentId": 1850
  }, {
    "id": 1892,
    "label": "ScopeBinding.java",
    "parentId": 1850
  }, {
    "id": 1893,
    "label": "StaticInjectionRequest.java",
    "parentId": 1850
  }, {
    "id": 1894,
    "label": "Toolable.java",
    "parentId": 1850
  }, {
    "id": 1895,
    "label": "TypeConverter.java",
    "parentId": 1850
  }, {
    "id": 1896,
    "label": "TypeConverterBinding.java",
    "parentId": 1850
  }, {
    "id": 1897,
    "label": "TypeEncounter.java",
    "parentId": 1850
  }, {
    "id": 1898,
    "label": "TypeListener.java",
    "parentId": 1850
  }, {
    "id": 1899,
    "label": "TypeListenerBinding.java",
    "parentId": 1850
  }, {
    "id": 1900,
    "label": "UntargettedBinding.java",
    "parentId": 1850
  }, {
    "id": 1901,
    "label": "package-info.java",
    "parentId": 1850
  }, {
    "id": 1903,
    "label": "util",
    "parentId": 1065
  }, {
    "id": 1902,
    "label": "Enhanced.java",
    "parentId": 1903
  }, {
    "id": 1904,
    "label": "Modules.java",
    "parentId": 1903
  }, {
    "id": 1905,
    "label": "Providers.java",
    "parentId": 1903
  }, {
    "id": 1906,
    "label": "Types.java",
    "parentId": 1903
  }, {
    "id": 1907,
    "label": "package-info.java",
    "parentId": 1903
  }, {
    "id": 1908,
    "label": "libinject.jdeps",
    "parentId": 183
  }, {
    "id": 1909,
    "label": "libinject-native-header.jar",
    "parentId": 183
  }, {
    "id": 1910,
    "label": "libinject.jar_manifest_proto",
    "parentId": 183
  }, {
    "id": 1911,
    "label": "gen_tests.java",
    "parentId": 1113
  }, {
    "id": 1912,
    "label": "AllTestsSuite.jar",
    "parentId": 1113
  }, {
    "id": 1913,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1113
  }, {
    "id": 1914,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1113
  }, {
    "id": 1915,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1113
  }, {
    "id": 1916,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1113
  }, {
    "id": 1917,
    "label": "AllTestsSuite",
    "parentId": 1113
  }, {
    "id": 1918,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1113
  }, {
    "id": 1919,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1113
  }, {
    "id": 1921,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1113
  }, {
    "id": 1920,
    "label": "MANIFEST",
    "parentId": 1921
  }, {
    "id": 1922,
    "label": "extensions_Sdagger-adapter_Stest_Scom_Sgoogle_Sinject_Sdaggeradapter_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 1923,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1113
  }, {
    "id": 1924,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1113
  }, {
    "id": 1926,
    "label": "AllTestsSuite",
    "parentId": 1175
  }, {
    "id": 1925,
    "label": "test.log",
    "parentId": 1926
  }, {
    "id": 1927,
    "label": "test.cache_status",
    "parentId": 1926
  }, {
    "id": 1933,
    "label": "src",
    "parentId": 1310
  }, {
    "id": 1932,
    "label": "com",
    "parentId": 1933
  }, {
    "id": 1931,
    "label": "google",
    "parentId": 1932
  }, {
    "id": 1930,
    "label": "inject",
    "parentId": 1931
  }, {
    "id": 1929,
    "label": "daggeradapter",
    "parentId": 1930
  }, {
    "id": 1928,
    "label": "Annotations.java",
    "parentId": 1929
  }, {
    "id": 1934,
    "label": "DaggerAdapter.java",
    "parentId": 1929
  }, {
    "id": 1935,
    "label": "DaggerMethodScanner.java",
    "parentId": 1929
  }, {
    "id": 1936,
    "label": "Keys.java",
    "parentId": 1929
  }, {
    "id": 1937,
    "label": "SupportedAnnotations.java",
    "parentId": 1929
  }, {
    "id": 1938,
    "label": "guice-dagger-adapter-javadoc.jar",
    "parentId": 859
  }, {
    "id": 1939,
    "label": "Asserts.java",
    "parentId": 332
  }, {
    "id": 1940,
    "label": "WeakKeySetUtils.java",
    "parentId": 973
  }, {
    "id": 1941,
    "label": "libtestsupport.jdeps",
    "parentId": 295
  }, {
    "id": 1942,
    "label": "libtestsupport-native-header.jar",
    "parentId": 295
  }, {
    "id": 1943,
    "label": "libtestsupport.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 1944,
    "label": "pom.xml",
    "parentId": 885
  }, {
    "id": 1946,
    "label": "tools"
  }, {
    "id": 1945,
    "label": "OsgiWrapper.java",
    "parentId": 1946
  }, {
    "id": 1952,
    "label": "biz",
    "parentId": 198
  }, {
    "id": 1951,
    "label": "aQute",
    "parentId": 1952
  }, {
    "id": 1950,
    "label": "bnd",
    "parentId": 1951
  }, {
    "id": 1949,
    "label": "bndlib",
    "parentId": 1950
  }, {
    "id": 1948,
    "label": "2.4.0",
    "parentId": 1949
  }, {
    "id": 1947,
    "label": "header_bndlib-2.4.0.jar",
    "parentId": 1948
  }, {
    "id": 1957,
    "label": "info",
    "parentId": 198
  }, {
    "id": 1956,
    "label": "picocli",
    "parentId": 1957
  }, {
    "id": 1955,
    "label": "picocli",
    "parentId": 1956
  }, {
    "id": 1954,
    "label": "4.6.3",
    "parentId": 1955
  }, {
    "id": 1953,
    "label": "header_picocli-4.6.3.jar",
    "parentId": 1954
  }, {
    "id": 1961,
    "label": "osgi",
    "parentId": 228
  }, {
    "id": 1960,
    "label": "org.osgi.core",
    "parentId": 1961
  }, {
    "id": 1959,
    "label": "4.3.1",
    "parentId": 1960
  }, {
    "id": 1958,
    "label": "header_org.osgi.core-4.3.1.jar",
    "parentId": 1959
  }, {
    "id": 1963,
    "label": "tools",
    "parentId": 137
  }, {
    "id": 1962,
    "label": "osgi_wrapper.jar",
    "parentId": 1963
  }, {
    "id": 1964,
    "label": "osgi_wrapper.jdeps",
    "parentId": 1963
  }, {
    "id": 1965,
    "label": "osgi_wrapper-native-header.jar",
    "parentId": 1963
  }, {
    "id": 1966,
    "label": "osgi_wrapper.jar_manifest_proto",
    "parentId": 1963
  }, {
    "id": 1967,
    "label": "osgi_wrapper-src.jar",
    "parentId": 1963
  }, {
    "id": 1968,
    "label": "osgi_wrapper",
    "parentId": 1963
  }, {
    "id": 1969,
    "label": "osgi_wrapper_deploy-src.jar",
    "parentId": 1963
  }, {
    "id": 1970,
    "label": "osgi_wrapper.runfiles_manifest",
    "parentId": 1963
  }, {
    "id": 1972,
    "label": "osgi_wrapper.runfiles",
    "parentId": 1963
  }, {
    "id": 1971,
    "label": "MANIFEST",
    "parentId": 1972
  }, {
    "id": 1978,
    "label": "biz",
    "parentId": 403
  }, {
    "id": 1977,
    "label": "aQute",
    "parentId": 1978
  }, {
    "id": 1976,
    "label": "bnd",
    "parentId": 1977
  }, {
    "id": 1975,
    "label": "bndlib",
    "parentId": 1976
  }, {
    "id": 1974,
    "label": "2.4.0",
    "parentId": 1975
  }, {
    "id": 1973,
    "label": "bndlib-2.4.0.jar",
    "parentId": 1974
  }, {
    "id": 1982,
    "label": "osgi",
    "parentId": 433
  }, {
    "id": 1981,
    "label": "org.osgi.core",
    "parentId": 1982
  }, {
    "id": 1980,
    "label": "4.3.1",
    "parentId": 1981
  }, {
    "id": 1979,
    "label": "org.osgi.core-4.3.1.jar",
    "parentId": 1980
  }, {
    "id": 1987,
    "label": "info",
    "parentId": 403
  }, {
    "id": 1986,
    "label": "picocli",
    "parentId": 1987
  }, {
    "id": 1985,
    "label": "picocli",
    "parentId": 1986
  }, {
    "id": 1984,
    "label": "4.6.3",
    "parentId": 1985
  }, {
    "id": 1983,
    "label": "picocli-4.6.3.jar",
    "parentId": 1984
  }, {
    "id": 1988,
    "label": "tools_Sosgi_Uwrapper-runfiles",
    "parentId": 600
  }, {
    "id": 1989,
    "label": "osgi_wrapper_deploy.jar",
    "parentId": 1963
  }, {
    "id": 1990,
    "label": "osgi_wrapper_deploy.jar.unstripped",
    "parentId": 1963
  }, {
    "id": 1991,
    "label": "AllTestsSuite.jar",
    "parentId": 1299
  }, {
    "id": 1992,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1299
  }, {
    "id": 1993,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1299
  }, {
    "id": 1994,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 1995,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1299
  }, {
    "id": 1996,
    "label": "AllTestsSuite",
    "parentId": 1299
  }, {
    "id": 1997,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1299
  }, {
    "id": 1998,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1299
  }, {
    "id": 2000,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1299
  }, {
    "id": 1999,
    "label": "MANIFEST",
    "parentId": 2000
  }, {
    "id": 2001,
    "label": "extensions_Sassistedinject_Stest_Scom_Sgoogle_Sinject_Sassistedinject_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2002,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1299
  }, {
    "id": 2003,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1299
  }, {
    "id": 2005,
    "label": "AllTestsSuite",
    "parentId": 1342
  }, {
    "id": 2004,
    "label": "test.log",
    "parentId": 2005
  }, {
    "id": 2006,
    "label": "test.cache_status",
    "parentId": 2005
  }, {
    "id": 2007,
    "label": "pom.xml",
    "parentId": 247
  }, {
    "id": 2008,
    "label": "gen_tests_with_windows_separator_with_windows_separator.java",
    "parentId": 295
  }, {
    "id": 2009,
    "label": "gen_SubpackageTestPrivateFallbackOnly_testsSubpackageTestPrivateFallbackOnly.java",
    "parentId": 1299
  }, {
    "id": 2010,
    "label": "libSubpackageTestPrivateFallbackOnly-hjar.jar",
    "parentId": 1299
  }, {
    "id": 2011,
    "label": "libSubpackageTestPrivateFallbackOnly-hjar.jdeps",
    "parentId": 1299
  }, {
    "id": 2012,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly.jar",
    "parentId": 1299
  }, {
    "id": 2013,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly.jdeps",
    "parentId": 1299
  }, {
    "id": 2014,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly-native-header.jar",
    "parentId": 1299
  }, {
    "id": 2015,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 2016,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly-src.jar",
    "parentId": 1299
  }, {
    "id": 2017,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly",
    "parentId": 1299
  }, {
    "id": 2018,
    "label": "libSubpackageTestPrivateFallbackOnly-src.jar",
    "parentId": 1299
  }, {
    "id": 2019,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly_deploy-src.jar",
    "parentId": 1299
  }, {
    "id": 2020,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly.runfiles_manifest",
    "parentId": 1299
  }, {
    "id": 2022,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly.runfiles",
    "parentId": 1299
  }, {
    "id": 2021,
    "label": "MANIFEST",
    "parentId": 2022
  }, {
    "id": 2023,
    "label": "libSubpackageTestPrivateFallbackOnly.jar",
    "parentId": 1299
  }, {
    "id": 2024,
    "label": "extensions_Sassistedinject_Stest_Scom_Sgoogle_Sinject_Sassistedinject_SAllTestsSuiteSubpackageTestPrivateFallbackOnly-runfiles",
    "parentId": 600
  }, {
    "id": 2025,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly_deploy.jar",
    "parentId": 1299
  }, {
    "id": 2026,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly_deploy.jar.unstripped",
    "parentId": 1299
  }, {
    "id": 2028,
    "label": "AllTestsSuiteSubpackageTestPrivateFallbackOnly",
    "parentId": 1342
  }, {
    "id": 2027,
    "label": "test.log",
    "parentId": 2028
  }, {
    "id": 2029,
    "label": "test.cache_status",
    "parentId": 2028
  }, {
    "id": 2036,
    "label": "spring",
    "parentId": 147
  }, {
    "id": 2035,
    "label": "src",
    "parentId": 2036
  }, {
    "id": 2034,
    "label": "com",
    "parentId": 2035
  }, {
    "id": 2033,
    "label": "google",
    "parentId": 2034
  }, {
    "id": 2032,
    "label": "inject",
    "parentId": 2033
  }, {
    "id": 2031,
    "label": "spring",
    "parentId": 2032
  }, {
    "id": 2030,
    "label": "SpringIntegration.java",
    "parentId": 2031
  }, {
    "id": 2037,
    "label": "package-info.java",
    "parentId": 2031
  }, {
    "id": 2038,
    "label": "guice-spring-javadoc.jar",
    "parentId": 885
  }, {
    "id": 2039,
    "label": "gen_tests_class_loading_CHILD_custom_class_loading_CHILD.java",
    "parentId": 1074
  }, {
    "id": 2040,
    "label": "guice-grapher-javadoc.jar",
    "parentId": 247
  }, {
    "id": 2041,
    "label": "gen_tests_class_loading_ANONYMOUS_custom_class_loading_ANONYMOUS.java",
    "parentId": 1074
  }, {
    "id": 2047,
    "label": "src",
    "parentId": 1246
  }, {
    "id": 2046,
    "label": "com",
    "parentId": 2047
  }, {
    "id": 2045,
    "label": "google",
    "parentId": 2046
  }, {
    "id": 2044,
    "label": "inject",
    "parentId": 2045
  }, {
    "id": 2043,
    "label": "servlet",
    "parentId": 2044
  }, {
    "id": 2042,
    "label": "RequestScoped.java",
    "parentId": 2043
  }, {
    "id": 2048,
    "label": "librequest-scoped-annotation.jdeps",
    "parentId": 1277
  }, {
    "id": 2049,
    "label": "librequest-scoped-annotation-native-header.jar",
    "parentId": 1277
  }, {
    "id": 2050,
    "label": "librequest-scoped-annotation.jar_manifest_proto",
    "parentId": 1277
  }, {
    "id": 2051,
    "label": "gen_jakarta_tck_tests_jakarta_tck.java",
    "parentId": 1074
  }, {
    "id": 2058,
    "label": "jndi",
    "parentId": 253
  }, {
    "id": 2057,
    "label": "src",
    "parentId": 2058
  }, {
    "id": 2056,
    "label": "com",
    "parentId": 2057
  }, {
    "id": 2055,
    "label": "google",
    "parentId": 2056
  }, {
    "id": 2054,
    "label": "inject",
    "parentId": 2055
  }, {
    "id": 2053,
    "label": "jndi",
    "parentId": 2054
  }, {
    "id": 2052,
    "label": "pom.xml",
    "parentId": 2053
  }, {
    "id": 2059,
    "label": "gen_tests.java",
    "parentId": 1029
  }, {
    "id": 2060,
    "label": "AllTestsSuite.jar",
    "parentId": 1029
  }, {
    "id": 2061,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1029
  }, {
    "id": 2062,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1029
  }, {
    "id": 2063,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1029
  }, {
    "id": 2064,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1029
  }, {
    "id": 2065,
    "label": "AllTestsSuite",
    "parentId": 1029
  }, {
    "id": 2066,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1029
  }, {
    "id": 2067,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1029
  }, {
    "id": 2069,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1029
  }, {
    "id": 2068,
    "label": "MANIFEST",
    "parentId": 2069
  }, {
    "id": 2070,
    "label": "extensions_Sgrapher_Stest_Scom_Sgoogle_Sinject_Sgrapher_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2071,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1029
  }, {
    "id": 2072,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1029
  }, {
    "id": 2074,
    "label": "AllTestsSuite",
    "parentId": 1055
  }, {
    "id": 2073,
    "label": "test.log",
    "parentId": 2074
  }, {
    "id": 2075,
    "label": "test.cache_status",
    "parentId": 2074
  }, {
    "id": 2076,
    "label": "pom.xml",
    "parentId": 1102
  }, {
    "id": 2077,
    "label": "gen_tests.java",
    "parentId": 295
  }, {
    "id": 2079,
    "label": "errors",
    "parentId": 295
  }, {
    "id": 2078,
    "label": "gen_tests_stack_traceOFF_stack_trace_OFF.java",
    "parentId": 2079
  }, {
    "id": 2080,
    "label": "libtests-hjar.jar",
    "parentId": 2079
  }, {
    "id": 2081,
    "label": "libtests-hjar.jdeps",
    "parentId": 2079
  }, {
    "id": 2082,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 2079
  }, {
    "id": 2083,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 2079
  }, {
    "id": 2084,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 2079
  }, {
    "id": 2085,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 2079
  }, {
    "id": 2086,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 2079
  }, {
    "id": 2087,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 2079
  }, {
    "id": 2088,
    "label": "libtests-src.jar",
    "parentId": 2079
  }, {
    "id": 2089,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 2079
  }, {
    "id": 2090,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 2079
  }, {
    "id": 2092,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 2079
  }, {
    "id": 2091,
    "label": "MANIFEST",
    "parentId": 2092
  }, {
    "id": 2093,
    "label": "libtests.jar",
    "parentId": 2079
  }, {
    "id": 2094,
    "label": "core_Stest_Scom_Sgoogle_Sinject_Serrors_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 2095,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 2079
  }, {
    "id": 2096,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 2079
  }, {
    "id": 2099,
    "label": "errors",
    "parentId": 704
  }, {
    "id": 2098,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 2099
  }, {
    "id": 2097,
    "label": "test.log",
    "parentId": 2098
  }, {
    "id": 2100,
    "label": "test.cache_status",
    "parentId": 2098
  }, {
    "id": 2101,
    "label": "gen_tests.java",
    "parentId": 1287
  }, {
    "id": 2102,
    "label": "AbstractServletModuleBinding.java",
    "parentId": 2043
  }, {
    "id": 2103,
    "label": "ContinuingHttpServletRequest.java",
    "parentId": 2043
  }, {
    "id": 2104,
    "label": "DefaultFilterPipeline.java",
    "parentId": 2043
  }, {
    "id": 2105,
    "label": "FilterChainInvocation.java",
    "parentId": 2043
  }, {
    "id": 2106,
    "label": "FilterDefinition.java",
    "parentId": 2043
  }, {
    "id": 2107,
    "label": "FilterPipeline.java",
    "parentId": 2043
  }, {
    "id": 2108,
    "label": "FiltersModuleBuilder.java",
    "parentId": 2043
  }, {
    "id": 2109,
    "label": "GuiceFilter.java",
    "parentId": 2043
  }, {
    "id": 2110,
    "label": "GuiceServletContextListener.java",
    "parentId": 2043
  }, {
    "id": 2111,
    "label": "InstanceFilterBinding.java",
    "parentId": 2043
  }, {
    "id": 2112,
    "label": "InstanceFilterBindingImpl.java",
    "parentId": 2043
  }, {
    "id": 2113,
    "label": "InstanceServletBinding.java",
    "parentId": 2043
  }, {
    "id": 2114,
    "label": "InstanceServletBindingImpl.java",
    "parentId": 2043
  }, {
    "id": 2115,
    "label": "InternalServletModule.java",
    "parentId": 2043
  }, {
    "id": 2116,
    "label": "LinkedFilterBinding.java",
    "parentId": 2043
  }, {
    "id": 2117,
    "label": "LinkedFilterBindingImpl.java",
    "parentId": 2043
  }, {
    "id": 2118,
    "label": "LinkedServletBinding.java",
    "parentId": 2043
  }, {
    "id": 2119,
    "label": "LinkedServletBindingImpl.java",
    "parentId": 2043
  }, {
    "id": 2120,
    "label": "ManagedFilterPipeline.java",
    "parentId": 2043
  }, {
    "id": 2121,
    "label": "ManagedServletPipeline.java",
    "parentId": 2043
  }, {
    "id": 2122,
    "label": "RequestParameters.java",
    "parentId": 2043
  }, {
    "id": 2123,
    "label": "RequestScoper.java",
    "parentId": 2043
  }, {
    "id": 2124,
    "label": "ScopingException.java",
    "parentId": 2043
  }, {
    "id": 2125,
    "label": "ScopingOnly.java",
    "parentId": 2043
  }, {
    "id": 2126,
    "label": "ServletDefinition.java",
    "parentId": 2043
  }, {
    "id": 2127,
    "label": "ServletModule.java",
    "parentId": 2043
  }, {
    "id": 2128,
    "label": "ServletModuleBinding.java",
    "parentId": 2043
  }, {
    "id": 2129,
    "label": "ServletModuleTargetVisitor.java",
    "parentId": 2043
  }, {
    "id": 2130,
    "label": "ServletScopes.java",
    "parentId": 2043
  }, {
    "id": 2131,
    "label": "ServletUtils.java",
    "parentId": 2043
  }, {
    "id": 2132,
    "label": "ServletsModuleBuilder.java",
    "parentId": 2043
  }, {
    "id": 2133,
    "label": "SessionScoped.java",
    "parentId": 2043
  }, {
    "id": 2134,
    "label": "UriPatternMatcher.java",
    "parentId": 2043
  }, {
    "id": 2135,
    "label": "UriPatternType.java",
    "parentId": 2043
  }, {
    "id": 2136,
    "label": "package-info.java",
    "parentId": 2043
  }, {
    "id": 2137,
    "label": "guice-servlet-javadoc.jar",
    "parentId": 1277
  }, {
    "id": 2138,
    "label": "libtests-hjar.jar",
    "parentId": 1074
  }, {
    "id": 2140,
    "label": "0.0.384",
    "parentId": 1950
  }, {
    "id": 2139,
    "label": "header_bnd-0.0.384.jar",
    "parentId": 2140
  }, {
    "id": 2145,
    "label": "apache",
    "parentId": 228
  }, {
    "id": 2144,
    "label": "felix",
    "parentId": 2145
  }, {
    "id": 2143,
    "label": "org.apache.felix.framework",
    "parentId": 2144
  }, {
    "id": 2142,
    "label": "3.0.5",
    "parentId": 2143
  }, {
    "id": 2141,
    "label": "header_org.apache.felix.framework-3.0.5.jar",
    "parentId": 2142
  }, {
    "id": 2146,
    "label": "libtests-hjar.jdeps",
    "parentId": 1074
  }, {
    "id": 2147,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jar",
    "parentId": 1074
  }, {
    "id": 2148,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jdeps",
    "parentId": 1074
  }, {
    "id": 2149,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2150,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2151,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS-src.jar",
    "parentId": 1074
  }, {
    "id": 2152,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS",
    "parentId": 1074
  }, {
    "id": 2153,
    "label": "libtests-src.jar",
    "parentId": 1074
  }, {
    "id": 2154,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy-src.jar",
    "parentId": 1074
  }, {
    "id": 2155,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.runfiles_manifest",
    "parentId": 1074
  }, {
    "id": 2157,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS.runfiles",
    "parentId": 1074
  }, {
    "id": 2156,
    "label": "MANIFEST",
    "parentId": 2157
  }, {
    "id": 2158,
    "label": "libtests.jar",
    "parentId": 1074
  }, {
    "id": 2160,
    "label": "0.0.384",
    "parentId": 1976
  }, {
    "id": 2159,
    "label": "bnd-0.0.384.jar",
    "parentId": 2160
  }, {
    "id": 2165,
    "label": "apache",
    "parentId": 433
  }, {
    "id": 2164,
    "label": "felix",
    "parentId": 2165
  }, {
    "id": 2163,
    "label": "org.apache.felix.framework",
    "parentId": 2164
  }, {
    "id": 2162,
    "label": "3.0.5",
    "parentId": 2163
  }, {
    "id": 2161,
    "label": "org.apache.felix.framework-3.0.5.jar",
    "parentId": 2162
  }, {
    "id": 2166,
    "label": "core_Stest_Scom_Sgooglecode_Sguice_SAllTestsSuite_Ucustom_Uclass_Uloading_UANONYMOUS-runfiles",
    "parentId": 600
  }, {
    "id": 2167,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy.jar",
    "parentId": 1074
  }, {
    "id": 2168,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS_deploy.jar.unstripped",
    "parentId": 1074
  }, {
    "id": 2172,
    "label": "googlecode",
    "parentId": 706
  }, {
    "id": 2171,
    "label": "guice",
    "parentId": 2172
  }, {
    "id": 2170,
    "label": "AllTestsSuite_custom_class_loading_ANONYMOUS",
    "parentId": 2171
  }, {
    "id": 2169,
    "label": "test.log",
    "parentId": 2170
  }, {
    "id": 2173,
    "label": "test.cache_status",
    "parentId": 2170
  }, {
    "id": 2174,
    "label": "gen_tests.java",
    "parentId": 635
  }, {
    "id": 2176,
    "label": "struts2",
    "parentId": 378
  }, {
    "id": 2175,
    "label": "libstruts2.jar",
    "parentId": 2176
  }, {
    "id": 2177,
    "label": "libstruts2-native-header.jar",
    "parentId": 2176
  }, {
    "id": 2178,
    "label": "libstruts2.jar_manifest_proto",
    "parentId": 2176
  }, {
    "id": 2179,
    "label": "libstruts2-src.jar",
    "parentId": 2176
  }, {
    "id": 2180,
    "label": "gen_tests_stack_traceONLY_FOR_DECLARING_SOURCE_stack_trace_ONLY_FOR_DECLARING_SOURCE.java",
    "parentId": 2079
  }, {
    "id": 2181,
    "label": "gen_tests_OFF_stack_trace_OFF.java",
    "parentId": 747
  }, {
    "id": 2182,
    "label": "guice-grapher.jarjar_rules",
    "parentId": 247
  }, {
    "id": 2183,
    "label": "guice-grapher.jar",
    "parentId": 247
  }, {
    "id": 2184,
    "label": "libpersist.jdeps",
    "parentId": 669
  }, {
    "id": 2185,
    "label": "libpersist-native-header.jar",
    "parentId": 669
  }, {
    "id": 2186,
    "label": "libpersist.jar_manifest_proto",
    "parentId": 669
  }, {
    "id": 2187,
    "label": "AllTestsSuite_jakarta_tck.jar",
    "parentId": 1074
  }, {
    "id": 2188,
    "label": "AllTestsSuite_jakarta_tck.jdeps",
    "parentId": 1074
  }, {
    "id": 2189,
    "label": "AllTestsSuite_jakarta_tck-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2190,
    "label": "AllTestsSuite_jakarta_tck.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2191,
    "label": "AllTestsSuite_jakarta_tck-src.jar",
    "parentId": 1074
  }, {
    "id": 2192,
    "label": "AllTestsSuite_jakarta_tck",
    "parentId": 1074
  }, {
    "id": 2193,
    "label": "AllTestsSuite_jakarta_tck_deploy-src.jar",
    "parentId": 1074
  }, {
    "id": 2194,
    "label": "AllTestsSuite_jakarta_tck.runfiles_manifest",
    "parentId": 1074
  }, {
    "id": 2196,
    "label": "AllTestsSuite_jakarta_tck.runfiles",
    "parentId": 1074
  }, {
    "id": 2195,
    "label": "MANIFEST",
    "parentId": 2196
  }, {
    "id": 2199,
    "label": "jakarta.inject-tck",
    "parentId": 411
  }, {
    "id": 2198,
    "label": "2.0.1",
    "parentId": 2199
  }, {
    "id": 2197,
    "label": "jakarta.inject-tck-2.0.1.jar",
    "parentId": 2198
  }, {
    "id": 2200,
    "label": "core_Stest_Scom_Sgooglecode_Sguice_SAllTestsSuite_Ujakarta_Utck-runfiles",
    "parentId": 600
  }, {
    "id": 2201,
    "label": "AllTestsSuite_jakarta_tck_deploy.jar",
    "parentId": 1074
  }, {
    "id": 2202,
    "label": "AllTestsSuite_jakarta_tck_deploy.jar.unstripped",
    "parentId": 1074
  }, {
    "id": 2204,
    "label": "AllTestsSuite_jakarta_tck",
    "parentId": 2171
  }, {
    "id": 2203,
    "label": "test.log",
    "parentId": 2204
  }, {
    "id": 2205,
    "label": "test.cache_status",
    "parentId": 2204
  }, {
    "id": 2206,
    "label": "gen_tests_class_loading_OFF_custom_class_loading_OFF.java",
    "parentId": 1074
  }, {
    "id": 2207,
    "label": "AllTestsSuite_custom_class_loading_OFF.jar",
    "parentId": 1074
  }, {
    "id": 2208,
    "label": "AllTestsSuite_custom_class_loading_OFF.jdeps",
    "parentId": 1074
  }, {
    "id": 2209,
    "label": "AllTestsSuite_custom_class_loading_OFF-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2210,
    "label": "AllTestsSuite_custom_class_loading_OFF.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2211,
    "label": "AllTestsSuite_custom_class_loading_OFF-src.jar",
    "parentId": 1074
  }, {
    "id": 2212,
    "label": "AllTestsSuite_custom_class_loading_OFF",
    "parentId": 1074
  }, {
    "id": 2213,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy-src.jar",
    "parentId": 1074
  }, {
    "id": 2214,
    "label": "AllTestsSuite_custom_class_loading_OFF.runfiles_manifest",
    "parentId": 1074
  }, {
    "id": 2216,
    "label": "AllTestsSuite_custom_class_loading_OFF.runfiles",
    "parentId": 1074
  }, {
    "id": 2215,
    "label": "MANIFEST",
    "parentId": 2216
  }, {
    "id": 2217,
    "label": "core_Stest_Scom_Sgooglecode_Sguice_SAllTestsSuite_Ucustom_Uclass_Uloading_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 2218,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy.jar",
    "parentId": 1074
  }, {
    "id": 2219,
    "label": "AllTestsSuite_custom_class_loading_OFF_deploy.jar.unstripped",
    "parentId": 1074
  }, {
    "id": 2221,
    "label": "AllTestsSuite_custom_class_loading_OFF",
    "parentId": 2171
  }, {
    "id": 2220,
    "label": "test.log",
    "parentId": 2221
  }, {
    "id": 2222,
    "label": "test.cache_status",
    "parentId": 2221
  }, {
    "id": 2224,
    "label": "bom",
    "parentId": 137
  }, {
    "id": 2223,
    "label": "pom.xml",
    "parentId": 2224
  }, {
    "id": 2225,
    "label": "gen_tests.java",
    "parentId": 320
  }, {
    "id": 2228,
    "label": "config",
    "parentId": 711
  }, {
    "id": 2227,
    "label": "META-INF",
    "parentId": 2228
  }, {
    "id": 2226,
    "label": "persistence.xml",
    "parentId": 2227
  }, {
    "id": 2230,
    "label": "genrule",
    "parentId": 608
  }, {
    "id": 2229,
    "label": "genrule-setup.sh",
    "parentId": 2230
  }, {
    "id": 2237,
    "label": "test",
    "parentId": 1495
  }, {
    "id": 2236,
    "label": "com",
    "parentId": 2237
  }, {
    "id": 2235,
    "label": "google",
    "parentId": 2236
  }, {
    "id": 2234,
    "label": "inject",
    "parentId": 2235
  }, {
    "id": 2233,
    "label": "tools",
    "parentId": 2234
  }, {
    "id": 2232,
    "label": "jmx",
    "parentId": 2233
  }, {
    "id": 2231,
    "label": "JmxTest.java",
    "parentId": 2232
  }, {
    "id": 2238,
    "label": "libjmx-hjar.jdeps",
    "parentId": 1102
  }, {
    "id": 2245,
    "label": "test",
    "parentId": 1108
  }, {
    "id": 2244,
    "label": "com",
    "parentId": 2245
  }, {
    "id": 2243,
    "label": "google",
    "parentId": 2244
  }, {
    "id": 2242,
    "label": "inject",
    "parentId": 2243
  }, {
    "id": 2241,
    "label": "tools",
    "parentId": 2242
  }, {
    "id": 2240,
    "label": "jmx",
    "parentId": 2241
  }, {
    "id": 2239,
    "label": "libtests.jar",
    "parentId": 2240
  }, {
    "id": 2246,
    "label": "libtests.jdeps",
    "parentId": 2240
  }, {
    "id": 2247,
    "label": "libtests-native-header.jar",
    "parentId": 2240
  }, {
    "id": 2248,
    "label": "libtests.jar_manifest_proto",
    "parentId": 2240
  }, {
    "id": 2249,
    "label": "libtests-hjar.jar",
    "parentId": 2240
  }, {
    "id": 2250,
    "label": "libtests-hjar.jdeps",
    "parentId": 2240
  }, {
    "id": 2251,
    "label": "libtests-src.jar",
    "parentId": 2240
  }, {
    "id": 2252,
    "label": "AllTestsSuite_with_windows_separator.jar",
    "parentId": 295
  }, {
    "id": 2253,
    "label": "AllTestsSuite_with_windows_separator.jdeps",
    "parentId": 295
  }, {
    "id": 2254,
    "label": "AllTestsSuite_with_windows_separator-native-header.jar",
    "parentId": 295
  }, {
    "id": 2255,
    "label": "AllTestsSuite_with_windows_separator.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 2256,
    "label": "AllTestsSuite_with_windows_separator-src.jar",
    "parentId": 295
  }, {
    "id": 2257,
    "label": "AllTestsSuite_with_windows_separator",
    "parentId": 295
  }, {
    "id": 2258,
    "label": "AllTestsSuite_with_windows_separator_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 2259,
    "label": "AllTestsSuite_with_windows_separator.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 2261,
    "label": "AllTestsSuite_with_windows_separator.runfiles",
    "parentId": 295
  }, {
    "id": 2260,
    "label": "MANIFEST",
    "parentId": 2261
  }, {
    "id": 2262,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite_Uwith_Uwindows_Useparator-runfiles",
    "parentId": 600
  }, {
    "id": 2263,
    "label": "AllTestsSuite_with_windows_separator_deploy.jar",
    "parentId": 295
  }, {
    "id": 2264,
    "label": "AllTestsSuite_with_windows_separator_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 2266,
    "label": "AllTestsSuite_with_windows_separator",
    "parentId": 704
  }, {
    "id": 2265,
    "label": "test.log",
    "parentId": 2266
  }, {
    "id": 2267,
    "label": "test.cache_status",
    "parentId": 2266
  }, {
    "id": 2268,
    "label": "guice.jarjar_rules",
    "parentId": 183
  }, {
    "id": 2269,
    "label": "guice.jar",
    "parentId": 183
  }, {
    "id": 2270,
    "label": "libguice-bom.jar",
    "parentId": 2224
  }, {
    "id": 2271,
    "label": "libguice-bom-native-header.jar",
    "parentId": 2224
  }, {
    "id": 2272,
    "label": "libguice-bom.jar_manifest_proto",
    "parentId": 2224
  }, {
    "id": 2273,
    "label": "libguice-bom-src.jar",
    "parentId": 2224
  }, {
    "id": 2274,
    "label": "guice-jmx.jarjar_rules",
    "parentId": 1102
  }, {
    "id": 2275,
    "label": "libjmx.jar",
    "parentId": 1102
  }, {
    "id": 2276,
    "label": "guice-jmx.jar",
    "parentId": 1102
  }, {
    "id": 2277,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jar",
    "parentId": 1074
  }, {
    "id": 2278,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jdeps",
    "parentId": 1074
  }, {
    "id": 2279,
    "label": "AllTestsSuite_custom_class_loading_CHILD-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2280,
    "label": "AllTestsSuite_custom_class_loading_CHILD.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2281,
    "label": "AllTestsSuite_custom_class_loading_CHILD-src.jar",
    "parentId": 1074
  }, {
    "id": 2282,
    "label": "AllTestsSuite_custom_class_loading_CHILD",
    "parentId": 1074
  }, {
    "id": 2283,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy-src.jar",
    "parentId": 1074
  }, {
    "id": 2284,
    "label": "AllTestsSuite_custom_class_loading_CHILD.runfiles_manifest",
    "parentId": 1074
  }, {
    "id": 2286,
    "label": "AllTestsSuite_custom_class_loading_CHILD.runfiles",
    "parentId": 1074
  }, {
    "id": 2285,
    "label": "MANIFEST",
    "parentId": 2286
  }, {
    "id": 2287,
    "label": "core_Stest_Scom_Sgooglecode_Sguice_SAllTestsSuite_Ucustom_Uclass_Uloading_UCHILD-runfiles",
    "parentId": 600
  }, {
    "id": 2288,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy.jar",
    "parentId": 1074
  }, {
    "id": 2289,
    "label": "AllTestsSuite_custom_class_loading_CHILD_deploy.jar.unstripped",
    "parentId": 1074
  }, {
    "id": 2291,
    "label": "AllTestsSuite_custom_class_loading_CHILD",
    "parentId": 2171
  }, {
    "id": 2290,
    "label": "test.log",
    "parentId": 2291
  }, {
    "id": 2292,
    "label": "test.cache_status",
    "parentId": 2291
  }, {
    "id": 2293,
    "label": "guice-assistedinject.jarjar_rules",
    "parentId": 913
  }, {
    "id": 2294,
    "label": "guice-assistedinject.jar",
    "parentId": 913
  }, {
    "id": 2295,
    "label": "pom.xml",
    "parentId": 859
  }, {
    "id": 2296,
    "label": "guice-src.jarjar_rules",
    "parentId": 183
  }, {
    "id": 2297,
    "label": "guice-src.jar",
    "parentId": 183
  }, {
    "id": 2299,
    "label": "ijar",
    "parentId": 264
  }, {
    "id": 2298,
    "label": "ijar",
    "parentId": 2299
  }, {
    "id": 2300,
    "label": "libjunit.jar",
    "parentId": 377
  }, {
    "id": 2301,
    "label": "libjunit-native-header.jar",
    "parentId": 377
  }, {
    "id": 2302,
    "label": "libjunit.jar_manifest_proto",
    "parentId": 377
  }, {
    "id": 2303,
    "label": "AllTestsSuite.jar",
    "parentId": 295
  }, {
    "id": 2304,
    "label": "AllTestsSuite.jdeps",
    "parentId": 295
  }, {
    "id": 2305,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 295
  }, {
    "id": 2306,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 2307,
    "label": "AllTestsSuite-src.jar",
    "parentId": 295
  }, {
    "id": 2308,
    "label": "AllTestsSuite",
    "parentId": 295
  }, {
    "id": 2309,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 2310,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 2312,
    "label": "AllTestsSuite.runfiles",
    "parentId": 295
  }, {
    "id": 2311,
    "label": "MANIFEST",
    "parentId": 2312
  }, {
    "id": 2313,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2314,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 295
  }, {
    "id": 2315,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 2317,
    "label": "AllTestsSuite",
    "parentId": 704
  }, {
    "id": 2316,
    "label": "test.log",
    "parentId": 2317
  }, {
    "id": 2318,
    "label": "test.cache_status",
    "parentId": 2317
  }, {
    "id": 2319,
    "label": "BindingAnnotation.java",
    "parentId": 1065
  }, {
    "id": 2320,
    "label": "Exposed.java",
    "parentId": 1065
  }, {
    "id": 2321,
    "label": "Inject.java",
    "parentId": 1065
  }, {
    "id": 2322,
    "label": "ProvidedBy.java",
    "parentId": 1065
  }, {
    "id": 2323,
    "label": "Provides.java",
    "parentId": 1065
  }, {
    "id": 2324,
    "label": "ScopeAnnotation.java",
    "parentId": 1065
  }, {
    "id": 2325,
    "label": "Singleton.java",
    "parentId": 1065
  }, {
    "id": 2332,
    "label": "jndi",
    "parentId": 147
  }, {
    "id": 2331,
    "label": "src",
    "parentId": 2332
  }, {
    "id": 2330,
    "label": "com",
    "parentId": 2331
  }, {
    "id": 2329,
    "label": "google",
    "parentId": 2330
  }, {
    "id": 2328,
    "label": "inject",
    "parentId": 2329
  }, {
    "id": 2327,
    "label": "jndi",
    "parentId": 2328
  }, {
    "id": 2326,
    "label": "JndiIntegration.java",
    "parentId": 2327
  }, {
    "id": 2333,
    "label": "package-info.java",
    "parentId": 2327
  }, {
    "id": 2334,
    "label": "libjndi-hjar.jar",
    "parentId": 2053
  }, {
    "id": 2335,
    "label": "javadoc.jar",
    "parentId": 137
  }, {
    "id": 2341,
    "label": "test",
    "parentId": 899
  }, {
    "id": 2340,
    "label": "com",
    "parentId": 2341
  }, {
    "id": 2339,
    "label": "google",
    "parentId": 2340
  }, {
    "id": 2338,
    "label": "inject",
    "parentId": 2339
  }, {
    "id": 2337,
    "label": "assistedinject",
    "parentId": 2338
  }, {
    "id": 2336,
    "label": "ExtensionSpiTest.java",
    "parentId": 2337
  }, {
    "id": 2342,
    "label": "FactoryModuleBuilderTest.java",
    "parentId": 2337
  }, {
    "id": 2343,
    "label": "FactoryProvider2Test.java",
    "parentId": 2337
  }, {
    "id": 2344,
    "label": "FactoryProviderTest.java",
    "parentId": 2337
  }, {
    "id": 2345,
    "label": "ManyConstructorsTest.java",
    "parentId": 2337
  }, {
    "id": 2346,
    "label": "StaticInterfaceMethodsTest.java",
    "parentId": 2337
  }, {
    "id": 2348,
    "label": "subpkg",
    "parentId": 2337
  }, {
    "id": 2347,
    "label": "SubpackageTest.java",
    "parentId": 2348
  }, {
    "id": 2349,
    "label": "libtests.jdeps",
    "parentId": 1299
  }, {
    "id": 2350,
    "label": "libtests-native-header.jar",
    "parentId": 1299
  }, {
    "id": 2351,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 2352,
    "label": "libjndi.jar",
    "parentId": 2053
  }, {
    "id": 2353,
    "label": "libjndi.jdeps",
    "parentId": 2053
  }, {
    "id": 2354,
    "label": "libjndi-native-header.jar",
    "parentId": 2053
  }, {
    "id": 2355,
    "label": "libjndi.jar_manifest_proto",
    "parentId": 2053
  }, {
    "id": 2356,
    "label": "libjndi-hjar.jdeps",
    "parentId": 2053
  }, {
    "id": 2357,
    "label": "libjndi-src.jar",
    "parentId": 2053
  }, {
    "id": 2358,
    "label": "guice-javadoc.jar",
    "parentId": 183
  }, {
    "id": 2359,
    "label": "libjmx.jdeps",
    "parentId": 1102
  }, {
    "id": 2360,
    "label": "libjmx-native-header.jar",
    "parentId": 1102
  }, {
    "id": 2361,
    "label": "libjmx.jar_manifest_proto",
    "parentId": 1102
  }, {
    "id": 2362,
    "label": "guice-jndi-javadoc.jar",
    "parentId": 2053
  }, {
    "id": 2363,
    "label": "guice-jndi-src.jarjar_rules",
    "parentId": 2053
  }, {
    "id": 2364,
    "label": "guice-jndi-src.jar",
    "parentId": 2053
  }, {
    "id": 2365,
    "label": "AllTestsSuite.jar",
    "parentId": 320
  }, {
    "id": 2366,
    "label": "AllTestsSuite.jdeps",
    "parentId": 320
  }, {
    "id": 2367,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 320
  }, {
    "id": 2368,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 320
  }, {
    "id": 2369,
    "label": "AllTestsSuite-src.jar",
    "parentId": 320
  }, {
    "id": 2370,
    "label": "AllTestsSuite",
    "parentId": 320
  }, {
    "id": 2371,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 320
  }, {
    "id": 2372,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 320
  }, {
    "id": 2374,
    "label": "AllTestsSuite.runfiles",
    "parentId": 320
  }, {
    "id": 2373,
    "label": "MANIFEST",
    "parentId": 2374
  }, {
    "id": 2375,
    "label": "extensions_Sthrowingproviders_Stest_Scom_Sgoogle_Sinject_Sthrowingproviders_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2376,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 320
  }, {
    "id": 2377,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 320
  }, {
    "id": 2379,
    "label": "AllTestsSuite",
    "parentId": 1597
  }, {
    "id": 2378,
    "label": "test.log",
    "parentId": 2379
  }, {
    "id": 2380,
    "label": "test.cache_status",
    "parentId": 2379
  }, {
    "id": 2381,
    "label": "libservlet.jdeps",
    "parentId": 1277
  }, {
    "id": 2382,
    "label": "libservlet-native-header.jar",
    "parentId": 1277
  }, {
    "id": 2383,
    "label": "libservlet.jar_manifest_proto",
    "parentId": 1277
  }, {
    "id": 2384,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 295
  }, {
    "id": 2385,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 295
  }, {
    "id": 2386,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 295
  }, {
    "id": 2387,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 2388,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 295
  }, {
    "id": 2389,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 295
  }, {
    "id": 2390,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 295
  }, {
    "id": 2391,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 295
  }, {
    "id": 2393,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 295
  }, {
    "id": 2392,
    "label": "MANIFEST",
    "parentId": 2393
  }, {
    "id": 2394,
    "label": "core_Stest_Scom_Sgoogle_Sinject_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 2395,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 295
  }, {
    "id": 2396,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 295
  }, {
    "id": 2398,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 704
  }, {
    "id": 2397,
    "label": "test.log",
    "parentId": 2398
  }, {
    "id": 2399,
    "label": "test.cache_status",
    "parentId": 2398
  }, {
    "id": 2400,
    "label": "guice-throwingproviders-javadoc.jar",
    "parentId": 300
  }, {
    "id": 2401,
    "label": "AllTestsSuite.jar",
    "parentId": 635
  }, {
    "id": 2402,
    "label": "AllTestsSuite.jdeps",
    "parentId": 635
  }, {
    "id": 2403,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 635
  }, {
    "id": 2404,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 635
  }, {
    "id": 2405,
    "label": "AllTestsSuite-src.jar",
    "parentId": 635
  }, {
    "id": 2406,
    "label": "AllTestsSuite",
    "parentId": 635
  }, {
    "id": 2407,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 635
  }, {
    "id": 2408,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 635
  }, {
    "id": 2410,
    "label": "AllTestsSuite.runfiles",
    "parentId": 635
  }, {
    "id": 2409,
    "label": "MANIFEST",
    "parentId": 2410
  }, {
    "id": 2411,
    "label": "extensions_Stestlib_Stest_Scom_Sgoogle_Sinject_Stesting_Sthrowingproviders_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2412,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 635
  }, {
    "id": 2413,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 635
  }, {
    "id": 2416,
    "label": "throwingproviders",
    "parentId": 614
  }, {
    "id": 2415,
    "label": "AllTestsSuite",
    "parentId": 2416
  }, {
    "id": 2414,
    "label": "test.log",
    "parentId": 2415
  }, {
    "id": 2417,
    "label": "test.cache_status",
    "parentId": 2415
  }, {
    "id": 2419,
    "label": "internal",
    "parentId": 894
  }, {
    "id": 2418,
    "label": "LookupTester.java",
    "parentId": 2419
  }, {
    "id": 2420,
    "label": "libassistedinject.jdeps",
    "parentId": 913
  }, {
    "id": 2421,
    "label": "libassistedinject-native-header.jar",
    "parentId": 913
  }, {
    "id": 2422,
    "label": "libassistedinject.jar_manifest_proto",
    "parentId": 913
  }, {
    "id": 2423,
    "label": "guice-jndi.jarjar_rules",
    "parentId": 2053
  }, {
    "id": 2424,
    "label": "guice-jndi.jar",
    "parentId": 2053
  }, {
    "id": 2425,
    "label": "AllTests.java",
    "parentId": 332
  }, {
    "id": 2426,
    "label": "libAllTests.jar",
    "parentId": 295
  }, {
    "id": 2427,
    "label": "libAllTests.jdeps",
    "parentId": 295
  }, {
    "id": 2428,
    "label": "libAllTests-native-header.jar",
    "parentId": 295
  }, {
    "id": 2429,
    "label": "libAllTests.jar_manifest_proto",
    "parentId": 295
  }, {
    "id": 2430,
    "label": "libAllTests-hjar.jar",
    "parentId": 295
  }, {
    "id": 2431,
    "label": "libAllTests-hjar.jdeps",
    "parentId": 295
  }, {
    "id": 2432,
    "label": "libAllTests-src.jar",
    "parentId": 295
  }, {
    "id": 2433,
    "label": "guice-throwingproviders.jarjar_rules",
    "parentId": 300
  }, {
    "id": 2434,
    "label": "guice-throwingproviders.jar",
    "parentId": 300
  }, {
    "id": 2435,
    "label": "libtests-class.jar",
    "parentId": 2079
  }, {
    "id": 2438,
    "label": "errors",
    "parentId": 332
  }, {
    "id": 2437,
    "label": "testdata",
    "parentId": 2438
  }, {
    "id": 2436,
    "label": "binding_already_set_errors_with_module_stack.txt",
    "parentId": 2437
  }, {
    "id": 2439,
    "label": "child_binding_already_set_by_just_in_time_binding.txt",
    "parentId": 2437
  }, {
    "id": 2440,
    "label": "child_binding_already_set_error.txt",
    "parentId": 2437
  }, {
    "id": 2441,
    "label": "child_binding_already_set_multiple_times_error.txt",
    "parentId": 2437
  }, {
    "id": 2442,
    "label": "class_names_are_compressed_in_error_message.txt",
    "parentId": 2437
  }, {
    "id": 2443,
    "label": "class_names_are_compressed_in_error_message_with_dot_annots.txt",
    "parentId": 2437
  }, {
    "id": 2444,
    "label": "custom_error.txt",
    "parentId": 2437
  }, {
    "id": 2445,
    "label": "duplicate_element_error.txt",
    "parentId": 2437
  }, {
    "id": 2446,
    "label": "duplicate_map_key_error.txt",
    "parentId": 2437
  }, {
    "id": 2447,
    "label": "duplicate_map_keys_error_class_key_is_not_compressed.txt",
    "parentId": 2437
  }, {
    "id": 2448,
    "label": "error_in_custom_provider.txt",
    "parentId": 2437
  }, {
    "id": 2449,
    "label": "error_injecting_constructor.txt",
    "parentId": 2437
  }, {
    "id": 2450,
    "label": "missing_constructor_errors.txt",
    "parentId": 2437
  }, {
    "id": 2451,
    "label": "missing_constructor_errors_at_inject_required.txt",
    "parentId": 2437
  }, {
    "id": 2452,
    "label": "missing_constructor_errors_merged.txt",
    "parentId": 2437
  }, {
    "id": 2453,
    "label": "missing_implementation_errors.txt",
    "parentId": 2437
  }, {
    "id": 2454,
    "label": "missing_implementation_errors_with_dot_annots.txt",
    "parentId": 2437
  }, {
    "id": 2455,
    "label": "missing_implementation_with_hints.txt",
    "parentId": 2437
  }, {
    "id": 2456,
    "label": "missing_implementation_with_hints_with_dot_annots.txt",
    "parentId": 2437
  }, {
    "id": 2457,
    "label": "missing_implementation_with_module_stack.txt",
    "parentId": 2437
  }, {
    "id": 2458,
    "label": "multiple_binding_already_set_errors.txt",
    "parentId": 2437
  }, {
    "id": 2459,
    "label": "multiple_child_binding_already_set_errors.txt",
    "parentId": 2437
  }, {
    "id": 2460,
    "label": "multiple_duplicate_elements_error.txt",
    "parentId": 2437
  }, {
    "id": 2461,
    "label": "multiple_duplicate_map_keys_error.txt",
    "parentId": 2437
  }, {
    "id": 2462,
    "label": "null_returned_from_provider.txt",
    "parentId": 2437
  }, {
    "id": 2463,
    "label": "null_returned_from_provider_with_module_stack.txt",
    "parentId": 2437
  }, {
    "id": 2464,
    "label": "null_returned_from_provides_method.txt",
    "parentId": 2437
  }, {
    "id": 2465,
    "label": "scope_not_found_error.txt",
    "parentId": 2437
  }, {
    "id": 2466,
    "label": "single_binding_already_set_error.txt",
    "parentId": 2437
  }, {
    "id": 2467,
    "label": "BindingAlreadySetErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2468,
    "label": "ChildBindingAlreadySetErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2469,
    "label": "DuplicateElementErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2470,
    "label": "DuplicateMapKeyErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2471,
    "label": "ErrorMessageTestUtils.java",
    "parentId": 2438
  }, {
    "id": 2472,
    "label": "ErrorMessagesTest.java",
    "parentId": 2438
  }, {
    "id": 2473,
    "label": "GenericErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2474,
    "label": "MissingConstructorErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2475,
    "label": "MissingImplementationErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2476,
    "label": "NullInjectedIntoNonNullableTest.java",
    "parentId": 2438
  }, {
    "id": 2477,
    "label": "ScopeNotFoundErrorTest.java",
    "parentId": 2438
  }, {
    "id": 2478,
    "label": "libtests.jdeps",
    "parentId": 2079
  }, {
    "id": 2479,
    "label": "libtests-native-header.jar",
    "parentId": 2079
  }, {
    "id": 2480,
    "label": "libtests.jar_manifest_proto",
    "parentId": 2079
  }, {
    "id": 2481,
    "label": "libprovided_by.jdeps",
    "parentId": 183
  }, {
    "id": 2482,
    "label": "libprovided_by-native-header.jar",
    "parentId": 183
  }, {
    "id": 2483,
    "label": "libprovided_by.jar_manifest_proto",
    "parentId": 183
  }, {
    "id": 2484,
    "label": "guice-servlet-src.jarjar_rules",
    "parentId": 1277
  }, {
    "id": 2485,
    "label": "guice-servlet-src.jar",
    "parentId": 1277
  }, {
    "id": 2486,
    "label": "AllTestsSuite_stack_trace_OFF.jar",
    "parentId": 747
  }, {
    "id": 2487,
    "label": "AllTestsSuite_stack_trace_OFF.jdeps",
    "parentId": 747
  }, {
    "id": 2488,
    "label": "AllTestsSuite_stack_trace_OFF-native-header.jar",
    "parentId": 747
  }, {
    "id": 2489,
    "label": "AllTestsSuite_stack_trace_OFF.jar_manifest_proto",
    "parentId": 747
  }, {
    "id": 2490,
    "label": "AllTestsSuite_stack_trace_OFF-src.jar",
    "parentId": 747
  }, {
    "id": 2491,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 747
  }, {
    "id": 2492,
    "label": "AllTestsSuite_stack_trace_OFF_deploy-src.jar",
    "parentId": 747
  }, {
    "id": 2493,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles_manifest",
    "parentId": 747
  }, {
    "id": 2495,
    "label": "AllTestsSuite_stack_trace_OFF.runfiles",
    "parentId": 747
  }, {
    "id": 2494,
    "label": "MANIFEST",
    "parentId": 2495
  }, {
    "id": 2496,
    "label": "extensions_Spersist_Stest_Scom_Sgoogle_Sinject_Spersist_SAllTestsSuite_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 2497,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar",
    "parentId": 747
  }, {
    "id": 2498,
    "label": "AllTestsSuite_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 747
  }, {
    "id": 2500,
    "label": "AllTestsSuite_stack_trace_OFF",
    "parentId": 1479
  }, {
    "id": 2499,
    "label": "test.log",
    "parentId": 2500
  }, {
    "id": 2501,
    "label": "test.cache_status",
    "parentId": 2500
  }, {
    "id": 2502,
    "label": "guice-servlet.jarjar_rules",
    "parentId": 1277
  }, {
    "id": 2503,
    "label": "guice-servlet.jar",
    "parentId": 1277
  }, {
    "id": 2504,
    "label": "libbeans.jar",
    "parentId": 1624
  }, {
    "id": 2505,
    "label": "libbeans-native-header.jar",
    "parentId": 1624
  }, {
    "id": 2506,
    "label": "libbeans.jar_manifest_proto",
    "parentId": 1624
  }, {
    "id": 2507,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.jar",
    "parentId": 1299
  }, {
    "id": 2508,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.jdeps",
    "parentId": 1299
  }, {
    "id": 2509,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF-native-header.jar",
    "parentId": 1299
  }, {
    "id": 2510,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 2511,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF-src.jar",
    "parentId": 1299
  }, {
    "id": 2512,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF",
    "parentId": 1299
  }, {
    "id": 2513,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF_deploy-src.jar",
    "parentId": 1299
  }, {
    "id": 2514,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.runfiles_manifest",
    "parentId": 1299
  }, {
    "id": 2516,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF.runfiles",
    "parentId": 1299
  }, {
    "id": 2515,
    "label": "MANIFEST",
    "parentId": 2516
  }, {
    "id": 2517,
    "label": "extensions_Sassistedinject_Stest_Scom_Sgoogle_Sinject_Sassistedinject_SAllTestsSuite_USubpackageTestPrivateFallbackOnly_Ustack_Utrace_UOFF-runfiles",
    "parentId": 600
  }, {
    "id": 2518,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF_deploy.jar",
    "parentId": 1299
  }, {
    "id": 2519,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF_deploy.jar.unstripped",
    "parentId": 1299
  }, {
    "id": 2521,
    "label": "AllTestsSuite_SubpackageTestPrivateFallbackOnly_stack_trace_OFF",
    "parentId": 1342
  }, {
    "id": 2520,
    "label": "test.log",
    "parentId": 2521
  }, {
    "id": 2522,
    "label": "test.cache_status",
    "parentId": 2521
  }, {
    "id": 2528,
    "label": "test",
    "parentId": 2036
  }, {
    "id": 2527,
    "label": "com",
    "parentId": 2528
  }, {
    "id": 2526,
    "label": "google",
    "parentId": 2527
  }, {
    "id": 2525,
    "label": "inject",
    "parentId": 2526
  }, {
    "id": 2524,
    "label": "spring",
    "parentId": 2525
  }, {
    "id": 2523,
    "label": "SpringIntegrationTest.java",
    "parentId": 2524
  }, {
    "id": 2529,
    "label": "libspring-hjar.jdeps",
    "parentId": 885
  }, {
    "id": 2530,
    "label": "libtests.jdeps",
    "parentId": 1096
  }, {
    "id": 2531,
    "label": "libtests-native-header.jar",
    "parentId": 1096
  }, {
    "id": 2532,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1096
  }, {
    "id": 2533,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.jar",
    "parentId": 2079
  }, {
    "id": 2534,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.jdeps",
    "parentId": 2079
  }, {
    "id": 2535,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE-native-header.jar",
    "parentId": 2079
  }, {
    "id": 2536,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.jar_manifest_proto",
    "parentId": 2079
  }, {
    "id": 2537,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE-src.jar",
    "parentId": 2079
  }, {
    "id": 2538,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE",
    "parentId": 2079
  }, {
    "id": 2539,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE_deploy-src.jar",
    "parentId": 2079
  }, {
    "id": 2540,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.runfiles_manifest",
    "parentId": 2079
  }, {
    "id": 2542,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE.runfiles",
    "parentId": 2079
  }, {
    "id": 2541,
    "label": "MANIFEST",
    "parentId": 2542
  }, {
    "id": 2543,
    "label": "core_Stest_Scom_Sgoogle_Sinject_Serrors_SAllTestsSuite_Ustack_Utrace_UONLY_UFOR_UDECLARING_USOURCE-runfiles",
    "parentId": 600
  }, {
    "id": 2544,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE_deploy.jar",
    "parentId": 2079
  }, {
    "id": 2545,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE_deploy.jar.unstripped",
    "parentId": 2079
  }, {
    "id": 2547,
    "label": "AllTestsSuite_stack_trace_ONLY_FOR_DECLARING_SOURCE",
    "parentId": 2099
  }, {
    "id": 2546,
    "label": "test.log",
    "parentId": 2547
  }, {
    "id": 2548,
    "label": "test.cache_status",
    "parentId": 2547
  }, {
    "id": 2549,
    "label": "guice-spring.jarjar_rules",
    "parentId": 885
  }, {
    "id": 2550,
    "label": "guice-spring.jar",
    "parentId": 885
  }, {
    "id": 2551,
    "label": "libthrowingproviders.jdeps",
    "parentId": 632
  }, {
    "id": 2552,
    "label": "libthrowingproviders-native-header.jar",
    "parentId": 632
  }, {
    "id": 2553,
    "label": "libthrowingproviders.jar_manifest_proto",
    "parentId": 632
  }, {
    "id": 2554,
    "label": "BytecodeGenTest.java",
    "parentId": 1228
  }, {
    "id": 2555,
    "label": "JakartaTest.java",
    "parentId": 1228
  }, {
    "id": 2556,
    "label": "OSGiContainerTest.java",
    "parentId": 1228
  }, {
    "id": 2557,
    "label": "PackageVisibilityTestModule.java",
    "parentId": 1228
  }, {
    "id": 2559,
    "label": "bundle",
    "parentId": 1228
  }, {
    "id": 2558,
    "label": "OSGiTestActivator.java",
    "parentId": 2559
  }, {
    "id": 2560,
    "label": "libtests.jdeps",
    "parentId": 1074
  }, {
    "id": 2561,
    "label": "libtests-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2562,
    "label": "libtests.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2563,
    "label": "AllTestsSuite.jar",
    "parentId": 1074
  }, {
    "id": 2564,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1074
  }, {
    "id": 2565,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1074
  }, {
    "id": 2566,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1074
  }, {
    "id": 2567,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1074
  }, {
    "id": 2568,
    "label": "AllTestsSuite",
    "parentId": 1074
  }, {
    "id": 2569,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1074
  }, {
    "id": 2570,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1074
  }, {
    "id": 2572,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1074
  }, {
    "id": 2571,
    "label": "MANIFEST",
    "parentId": 2572
  }, {
    "id": 2573,
    "label": "core_Stest_Scom_Sgooglecode_Sguice_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2574,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1074
  }, {
    "id": 2575,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1074
  }, {
    "id": 2577,
    "label": "AllTestsSuite",
    "parentId": 2171
  }, {
    "id": 2576,
    "label": "test.log",
    "parentId": 2577
  }, {
    "id": 2578,
    "label": "test.cache_status",
    "parentId": 2577
  }, {
    "id": 2579,
    "label": "AllTestsSuite.jar",
    "parentId": 1096
  }, {
    "id": 2580,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1096
  }, {
    "id": 2581,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1096
  }, {
    "id": 2582,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1096
  }, {
    "id": 2583,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1096
  }, {
    "id": 2584,
    "label": "AllTestsSuite",
    "parentId": 1096
  }, {
    "id": 2585,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1096
  }, {
    "id": 2586,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1096
  }, {
    "id": 2588,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1096
  }, {
    "id": 2587,
    "label": "MANIFEST",
    "parentId": 2588
  }, {
    "id": 2589,
    "label": "extensions_Sspring_Stest_Scom_Sgoogle_Sinject_Sspring_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2590,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1096
  }, {
    "id": 2591,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1096
  }, {
    "id": 2593,
    "label": "AllTestsSuite",
    "parentId": 1647
  }, {
    "id": 2592,
    "label": "test.log",
    "parentId": 2593
  }, {
    "id": 2594,
    "label": "test.cache_status",
    "parentId": 2593
  }, {
    "id": 2595,
    "label": "SubpackageTestPrivateFallbackOnly.java",
    "parentId": 2348
  }, {
    "id": 2596,
    "label": "libSubpackageTestPrivateFallbackOnly.jdeps",
    "parentId": 1299
  }, {
    "id": 2597,
    "label": "libSubpackageTestPrivateFallbackOnly-native-header.jar",
    "parentId": 1299
  }, {
    "id": 2598,
    "label": "libSubpackageTestPrivateFallbackOnly.jar_manifest_proto",
    "parentId": 1299
  }, {
    "id": 2599,
    "label": "libannotations.jdeps",
    "parentId": 183
  }, {
    "id": 2600,
    "label": "libannotations-native-header.jar",
    "parentId": 183
  }, {
    "id": 2601,
    "label": "libannotations.jar_manifest_proto",
    "parentId": 183
  }, {
    "id": 2602,
    "label": "libdaggeradapter.jdeps",
    "parentId": 859
  }, {
    "id": 2603,
    "label": "libdaggeradapter-native-header.jar",
    "parentId": 859
  }, {
    "id": 2604,
    "label": "libdaggeradapter.jar_manifest_proto",
    "parentId": 859
  }, {
    "id": 2605,
    "label": "libspring.jdeps",
    "parentId": 885
  }, {
    "id": 2606,
    "label": "libspring-native-header.jar",
    "parentId": 885
  }, {
    "id": 2607,
    "label": "libspring.jar_manifest_proto",
    "parentId": 885
  }, {
    "id": 2608,
    "label": "pom.xml",
    "parentId": 913
  }, {
    "id": 2609,
    "label": "libtestlib-native-header.jar",
    "parentId": 359
  }, {
    "id": 2610,
    "label": "libtestlib.jar_manifest_proto",
    "parentId": 359
  }, {
    "id": 2611,
    "label": "guice-assistedinject-src.jarjar_rules",
    "parentId": 913
  }, {
    "id": 2612,
    "label": "guice-assistedinject-src.jar",
    "parentId": 913
  }, {
    "id": 2613,
    "label": "libtruth.jar",
    "parentId": 381
  }, {
    "id": 2614,
    "label": "libtruth-native-header.jar",
    "parentId": 381
  }, {
    "id": 2615,
    "label": "libtruth.jar_manifest_proto",
    "parentId": 381
  }, {
    "id": 2616,
    "label": "pom.xml",
    "parentId": 1277
  }, {
    "id": 2617,
    "label": "libfieldbinder.jdeps",
    "parentId": 358
  }, {
    "id": 2618,
    "label": "libfieldbinder-native-header.jar",
    "parentId": 358
  }, {
    "id": 2619,
    "label": "libfieldbinder.jar_manifest_proto",
    "parentId": 358
  }, {
    "id": 2620,
    "label": "AllTestsSuite.jar",
    "parentId": 1287
  }, {
    "id": 2621,
    "label": "AllTestsSuite.jdeps",
    "parentId": 1287
  }, {
    "id": 2622,
    "label": "AllTestsSuite-native-header.jar",
    "parentId": 1287
  }, {
    "id": 2623,
    "label": "AllTestsSuite.jar_manifest_proto",
    "parentId": 1287
  }, {
    "id": 2624,
    "label": "AllTestsSuite-src.jar",
    "parentId": 1287
  }, {
    "id": 2625,
    "label": "AllTestsSuite",
    "parentId": 1287
  }, {
    "id": 2626,
    "label": "AllTestsSuite_deploy-src.jar",
    "parentId": 1287
  }, {
    "id": 2627,
    "label": "AllTestsSuite.runfiles_manifest",
    "parentId": 1287
  }, {
    "id": 2629,
    "label": "AllTestsSuite.runfiles",
    "parentId": 1287
  }, {
    "id": 2628,
    "label": "MANIFEST",
    "parentId": 2629
  }, {
    "id": 2630,
    "label": "extensions_Sservlet_Stest_Scom_Sgoogle_Sinject_Sservlet_SAllTestsSuite-runfiles",
    "parentId": 600
  }, {
    "id": 2631,
    "label": "AllTestsSuite_deploy.jar",
    "parentId": 1287
  }, {
    "id": 2632,
    "label": "AllTestsSuite_deploy.jar.unstripped",
    "parentId": 1287
  }, {
    "id": 2634,
    "label": "AllTestsSuite",
    "parentId": 1551
  }, {
    "id": 2633,
    "label": "test.log",
    "parentId": 2634
  }, {
    "id": 2635,
    "label": "test.cache_status",
    "parentId": 2634
  }, {
    "id": 2644,
    "label": "rules_jvm_external",
    "parentId": 870
  }, {
    "id": 2643,
    "label": "private",
    "parentId": 2644
  }, {
    "id": 2642,
    "label": "tools",
    "parentId": 2643
  }, {
    "id": 2641,
    "label": "java",
    "parentId": 2642
  }, {
    "id": 2640,
    "label": "rules",
    "parentId": 2641
  }, {
    "id": 2639,
    "label": "jvm",
    "parentId": 2640
  }, {
    "id": 2638,
    "label": "external",
    "parentId": 2639
  }, {
    "id": 2637,
    "label": "jar",
    "parentId": 2638
  }, {
    "id": 2636,
    "label": "AddJarManifestEntry.jar",
    "parentId": 2637
  }, {
    "id": 2645,
    "label": "AddJarManifestEntry",
    "parentId": 2637
  }, {
    "id": 2646,
    "label": "external_Srules_Ujvm_Uexternal_Sprivate_Stools_Sjava_Srules_Sjvm_Sexternal_Sjar_SAddJarManifestEntry-runfiles",
    "parentId": 875
  }, {
    "id": 2650,
    "label": "struts",
    "parentId": 2165
  }, {
    "id": 2649,
    "label": "struts2-core",
    "parentId": 2650
  }, {
    "id": 2648,
    "label": "2.5.31",
    "parentId": 2649
  }, {
    "id": 2647,
    "label": "struts2-core-2.5.31.jar",
    "parentId": 2648
  }, {
    "id": 2654,
    "label": "struts",
    "parentId": 2145
  }, {
    "id": 2653,
    "label": "struts2-core",
    "parentId": 2654
  }, {
    "id": 2652,
    "label": "2.5.31",
    "parentId": 2653
  }, {
    "id": 2651,
    "label": "header_struts2-core-2.5.31.jar",
    "parentId": 2652
  }, {
    "id": 2658,
    "label": "easymock",
    "parentId": 433
  }, {
    "id": 2657,
    "label": "easymock",
    "parentId": 2658
  }, {
    "id": 2656,
    "label": "3.1",
    "parentId": 2657
  }, {
    "id": 2655,
    "label": "easymock-3.1.jar",
    "parentId": 2656
  }, {
    "id": 2662,
    "label": "easymock",
    "parentId": 228
  }, {
    "id": 2661,
    "label": "easymock",
    "parentId": 2662
  }, {
    "id": 2660,
    "label": "3.1",
    "parentId": 2661
  }, {
    "id": 2659,
    "label": "header_easymock-3.1.jar",
    "parentId": 2660
  }, {
    "id": 2666,
    "label": "xwork",
    "parentId": 2650
  }, {
    "id": 2665,
    "label": "xwork-core",
    "parentId": 2666
  }, {
    "id": 2664,
    "label": "2.3.37",
    "parentId": 2665
  }, {
    "id": 2663,
    "label": "xwork-core-2.3.37.jar",
    "parentId": 2664
  }, {
    "id": 2670,
    "label": "xwork",
    "parentId": 2654
  }, {
    "id": 2669,
    "label": "xwork-core",
    "parentId": 2670
  }, {
    "id": 2668,
    "label": "2.3.37",
    "parentId": 2669
  }, {
    "id": 2667,
    "label": "header_xwork-core-2.3.37.jar",
    "parentId": 2668
  }, {
    "id": 2674,
    "label": "commons",
    "parentId": 2165
  }, {
    "id": 2673,
    "label": "commons-lang3",
    "parentId": 2674
  }, {
    "id": 2672,
    "label": "3.8.1",
    "parentId": 2673
  }, {
    "id": 2671,
    "label": "commons-lang3-3.8.1.jar",
    "parentId": 2672
  }, {
    "id": 2678,
    "label": "commons",
    "parentId": 2145
  }, {
    "id": 2677,
    "label": "commons-lang3",
    "parentId": 2678
  }, {
    "id": 2676,
    "label": "3.8.1",
    "parentId": 2677
  }, {
    "id": 2675,
    "label": "header_commons-lang3-3.8.1.jar",
    "parentId": 2676
  }, {
    "id": 2682,
    "label": "ognl",
    "parentId": 403
  }, {
    "id": 2681,
    "label": "ognl",
    "parentId": 2682
  }, {
    "id": 2680,
    "label": "3.1.29",
    "parentId": 2681
  }, {
    "id": 2679,
    "label": "ognl-3.1.29.jar",
    "parentId": 2680
  }, {
    "id": 2686,
    "label": "ognl",
    "parentId": 198
  }, {
    "id": 2685,
    "label": "ognl",
    "parentId": 2686
  }, {
    "id": 2684,
    "label": "3.1.29",
    "parentId": 2685
  }, {
    "id": 2683,
    "label": "header_ognl-3.1.29.jar",
    "parentId": 2684
  }, {
    "id": 2690,
    "label": "commons-fileupload",
    "parentId": 403
  }, {
    "id": 2689,
    "label": "commons-fileupload",
    "parentId": 2690
  }, {
    "id": 2688,
    "label": "1.4",
    "parentId": 2689
  }, {
    "id": 2687,
    "label": "commons-fileupload-1.4.jar",
    "parentId": 2688
  }, {
    "id": 2694,
    "label": "commons-fileupload",
    "parentId": 198
  }, {
    "id": 2693,
    "label": "commons-fileupload",
    "parentId": 2694
  }, {
    "id": 2692,
    "label": "1.4",
    "parentId": 2693
  }, {
    "id": 2691,
    "label": "header_commons-fileupload-1.4.jar",
    "parentId": 2692
  }, {
    "id": 2698,
    "label": "asm",
    "parentId": 403
  }, {
    "id": 2697,
    "label": "asm",
    "parentId": 2698
  }, {
    "id": 2696,
    "label": "3.3",
    "parentId": 2697
  }, {
    "id": 2695,
    "label": "asm-3.3.jar",
    "parentId": 2696
  }, {
    "id": 2702,
    "label": "asm",
    "parentId": 198
  }, {
    "id": 2701,
    "label": "asm",
    "parentId": 2702
  }, {
    "id": 2700,
    "label": "3.3",
    "parentId": 2701
  }, {
    "id": 2699,
    "label": "header_asm-3.3.jar",
    "parentId": 2700
  }, {
    "id": 2705,
    "label": "asm-commons",
    "parentId": 2698
  }, {
    "id": 2704,
    "label": "3.3",
    "parentId": 2705
  }, {
    "id": 2703,
    "label": "asm-commons-3.3.jar",
    "parentId": 2704
  }, {
    "id": 2708,
    "label": "asm-commons",
    "parentId": 2702
  }, {
    "id": 2707,
    "label": "3.3",
    "parentId": 2708
  }, {
    "id": 2706,
    "label": "header_asm-commons-3.3.jar",
    "parentId": 2707
  }, {
    "id": 2712,
    "label": "cglib",
    "parentId": 403
  }, {
    "id": 2711,
    "label": "cglib-nodep",
    "parentId": 2712
  }, {
    "id": 2710,
    "label": "2.2.2",
    "parentId": 2711
  }, {
    "id": 2709,
    "label": "cglib-nodep-2.2.2.jar",
    "parentId": 2710
  }, {
    "id": 2716,
    "label": "cglib",
    "parentId": 198
  }, {
    "id": 2715,
    "label": "cglib-nodep",
    "parentId": 2716
  }, {
    "id": 2714,
    "label": "2.2.2",
    "parentId": 2715
  }, {
    "id": 2713,
    "label": "header_cglib-nodep-2.2.2.jar",
    "parentId": 2714
  }, {
    "id": 2720,
    "label": "commons-io",
    "parentId": 403
  }, {
    "id": 2719,
    "label": "commons-io",
    "parentId": 2720
  }, {
    "id": 2718,
    "label": "2.6",
    "parentId": 2719
  }, {
    "id": 2717,
    "label": "commons-io-2.6.jar",
    "parentId": 2718
  }, {
    "id": 2724,
    "label": "commons-io",
    "parentId": 198
  }, {
    "id": 2723,
    "label": "commons-io",
    "parentId": 2724
  }, {
    "id": 2722,
    "label": "2.6",
    "parentId": 2723
  }, {
    "id": 2721,
    "label": "header_commons-io-2.6.jar",
    "parentId": 2722
  }, {
    "id": 2729,
    "label": "logging",
    "parentId": 2165
  }, {
    "id": 2728,
    "label": "log4j",
    "parentId": 2729
  }, {
    "id": 2727,
    "label": "log4j-api",
    "parentId": 2728
  }, {
    "id": 2726,
    "label": "2.12.4",
    "parentId": 2727
  }, {
    "id": 2725,
    "label": "log4j-api-2.12.4.jar",
    "parentId": 2726
  }, {
    "id": 2734,
    "label": "logging",
    "parentId": 2145
  }, {
    "id": 2733,
    "label": "log4j",
    "parentId": 2734
  }, {
    "id": 2732,
    "label": "log4j-api",
    "parentId": 2733
  }, {
    "id": 2731,
    "label": "2.12.4",
    "parentId": 2732
  }, {
    "id": 2730,
    "label": "header_log4j-api-2.12.4.jar",
    "parentId": 2731
  }, {
    "id": 2738,
    "label": "freemarker",
    "parentId": 433
  }, {
    "id": 2737,
    "label": "freemarker",
    "parentId": 2738
  }, {
    "id": 2736,
    "label": "2.3.31",
    "parentId": 2737
  }, {
    "id": 2735,
    "label": "freemarker-2.3.31.jar",
    "parentId": 2736
  }, {
    "id": 2742,
    "label": "freemarker",
    "parentId": 228
  }, {
    "id": 2741,
    "label": "freemarker",
    "parentId": 2742
  }, {
    "id": 2740,
    "label": "2.3.31",
    "parentId": 2741
  }, {
    "id": 2739,
    "label": "header_freemarker-2.3.31.jar",
    "parentId": 2740
  }, {
    "id": 2744,
    "label": "jdk",
    "parentId": 608
  }, {
    "id": 2743,
    "label": "DumpPlatformClassPath.java",
    "parentId": 2744
  }, {
    "id": 2745,
    "label": "platformclasspath_classes",
    "parentId": 133
  }, {
    "id": 2748,
    "label": "asm-tree",
    "parentId": 2698
  }, {
    "id": 2747,
    "label": "3.3",
    "parentId": 2748
  }, {
    "id": 2746,
    "label": "asm-tree-3.3.jar",
    "parentId": 2747
  }, {
    "id": 2751,
    "label": "asm-tree",
    "parentId": 2702
  }, {
    "id": 2750,
    "label": "3.3",
    "parentId": 2751
  }, {
    "id": 2749,
    "label": "header_asm-tree-3.3.jar",
    "parentId": 2750
  }, {
    "id": 2755,
    "label": "javassist",
    "parentId": 433
  }, {
    "id": 2754,
    "label": "javassist",
    "parentId": 2755
  }, {
    "id": 2753,
    "label": "3.20.0-GA",
    "parentId": 2754
  }, {
    "id": 2752,
    "label": "javassist-3.20.0-GA.jar",
    "parentId": 2753
  }, {
    "id": 2759,
    "label": "javassist",
    "parentId": 228
  }, {
    "id": 2758,
    "label": "javassist",
    "parentId": 2759
  }, {
    "id": 2757,
    "label": "3.20.0-GA",
    "parentId": 2758
  }, {
    "id": 2756,
    "label": "header_javassist-3.20.0-GA.jar",
    "parentId": 2757
  }]
}

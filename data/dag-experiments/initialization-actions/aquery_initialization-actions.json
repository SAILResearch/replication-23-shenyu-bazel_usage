{
  "artifacts": [{
    "id": 1,
    "pathFragmentId": 1
  }, {
    "id": 2,
    "pathFragmentId": 5
  }, {
    "id": 3,
    "pathFragmentId": 6
  }, {
    "id": 4,
    "pathFragmentId": 8
  }, {
    "id": 5,
    "pathFragmentId": 10
  }, {
    "id": 6,
    "pathFragmentId": 15
  }, {
    "id": 7,
    "pathFragmentId": 17
  }, {
    "id": 8,
    "pathFragmentId": 18
  }, {
    "id": 9,
    "pathFragmentId": 19
  }, {
    "id": 10,
    "pathFragmentId": 20
  }, {
    "id": 11,
    "pathFragmentId": 21
  }, {
    "id": 12,
    "pathFragmentId": 22
  }, {
    "id": 13,
    "pathFragmentId": 23
  }, {
    "id": 14,
    "pathFragmentId": 24
  }, {
    "id": 15,
    "pathFragmentId": 25
  }, {
    "id": 16,
    "pathFragmentId": 28
  }, {
    "id": 17,
    "pathFragmentId": 29
  }, {
    "id": 18,
    "pathFragmentId": 30
  }, {
    "id": 19,
    "pathFragmentId": 32
  }, {
    "id": 20,
    "pathFragmentId": 33
  }, {
    "id": 21,
    "pathFragmentId": 34
  }, {
    "id": 22,
    "pathFragmentId": 36
  }, {
    "id": 23,
    "pathFragmentId": 37
  }, {
    "id": 24,
    "pathFragmentId": 38
  }, {
    "id": 25,
    "pathFragmentId": 39
  }, {
    "id": 26,
    "pathFragmentId": 40
  }, {
    "id": 27,
    "pathFragmentId": 41
  }, {
    "id": 28,
    "pathFragmentId": 43
  }, {
    "id": 29,
    "pathFragmentId": 44
  }, {
    "id": 30,
    "pathFragmentId": 49
  }, {
    "id": 31,
    "pathFragmentId": 52
  }, {
    "id": 32,
    "pathFragmentId": 53
  }, {
    "id": 33,
    "pathFragmentId": 58
  }, {
    "id": 34,
    "pathFragmentId": 59
  }, {
    "id": 35,
    "pathFragmentId": 61
  }, {
    "id": 36,
    "pathFragmentId": 62
  }, {
    "id": 37,
    "pathFragmentId": 66
  }, {
    "id": 38,
    "pathFragmentId": 67
  }, {
    "id": 39,
    "pathFragmentId": 69
  }, {
    "id": 40,
    "pathFragmentId": 70
  }, {
    "id": 41,
    "pathFragmentId": 72
  }, {
    "id": 42,
    "pathFragmentId": 73
  }, {
    "id": 43,
    "pathFragmentId": 75
  }, {
    "id": 44,
    "pathFragmentId": 76
  }, {
    "id": 45,
    "pathFragmentId": 78
  }, {
    "id": 46,
    "pathFragmentId": 79
  }, {
    "id": 47,
    "pathFragmentId": 81
  }, {
    "id": 48,
    "pathFragmentId": 82
  }, {
    "id": 49,
    "pathFragmentId": 83
  }, {
    "id": 50,
    "pathFragmentId": 84
  }, {
    "id": 51,
    "pathFragmentId": 86
  }, {
    "id": 52,
    "pathFragmentId": 88
  }, {
    "id": 53,
    "pathFragmentId": 89
  }, {
    "id": 54,
    "pathFragmentId": 90
  }, {
    "id": 55,
    "pathFragmentId": 91
  }, {
    "id": 56,
    "pathFragmentId": 92
  }, {
    "id": 57,
    "pathFragmentId": 95
  }, {
    "id": 58,
    "pathFragmentId": 96
  }, {
    "id": 59,
    "pathFragmentId": 98
  }, {
    "id": 60,
    "pathFragmentId": 99
  }, {
    "id": 61,
    "pathFragmentId": 101
  }, {
    "id": 62,
    "pathFragmentId": 102
  }, {
    "id": 63,
    "pathFragmentId": 104
  }, {
    "id": 64,
    "pathFragmentId": 105
  }, {
    "id": 65,
    "pathFragmentId": 106
  }, {
    "id": 66,
    "pathFragmentId": 107
  }, {
    "id": 67,
    "pathFragmentId": 109
  }, {
    "id": 68,
    "pathFragmentId": 111
  }, {
    "id": 69,
    "pathFragmentId": 112
  }, {
    "id": 70,
    "pathFragmentId": 113
  }, {
    "id": 71,
    "pathFragmentId": 114
  }, {
    "id": 72,
    "pathFragmentId": 115
  }, {
    "id": 73,
    "pathFragmentId": 118
  }, {
    "id": 74,
    "pathFragmentId": 119
  }, {
    "id": 75,
    "pathFragmentId": 121
  }, {
    "id": 76,
    "pathFragmentId": 122
  }, {
    "id": 77,
    "pathFragmentId": 123
  }, {
    "id": 78,
    "pathFragmentId": 124
  }, {
    "id": 79,
    "pathFragmentId": 126
  }, {
    "id": 80,
    "pathFragmentId": 128
  }, {
    "id": 81,
    "pathFragmentId": 129
  }, {
    "id": 82,
    "pathFragmentId": 130
  }, {
    "id": 83,
    "pathFragmentId": 131
  }, {
    "id": 84,
    "pathFragmentId": 132
  }, {
    "id": 85,
    "pathFragmentId": 133
  }, {
    "id": 86,
    "pathFragmentId": 134
  }, {
    "id": 87,
    "pathFragmentId": 137
  }, {
    "id": 88,
    "pathFragmentId": 138
  }, {
    "id": 89,
    "pathFragmentId": 140
  }, {
    "id": 90,
    "pathFragmentId": 141
  }, {
    "id": 91,
    "pathFragmentId": 143
  }, {
    "id": 92,
    "pathFragmentId": 144
  }, {
    "id": 93,
    "pathFragmentId": 145
  }, {
    "id": 94,
    "pathFragmentId": 146
  }, {
    "id": 95,
    "pathFragmentId": 148
  }, {
    "id": 96,
    "pathFragmentId": 150
  }, {
    "id": 97,
    "pathFragmentId": 151
  }, {
    "id": 98,
    "pathFragmentId": 152
  }, {
    "id": 99,
    "pathFragmentId": 153
  }, {
    "id": 100,
    "pathFragmentId": 154
  }, {
    "id": 101,
    "pathFragmentId": 155
  }, {
    "id": 102,
    "pathFragmentId": 158
  }, {
    "id": 103,
    "pathFragmentId": 159
  }, {
    "id": 104,
    "pathFragmentId": 161
  }, {
    "id": 105,
    "pathFragmentId": 162
  }, {
    "id": 106,
    "pathFragmentId": 164
  }, {
    "id": 107,
    "pathFragmentId": 165
  }, {
    "id": 108,
    "pathFragmentId": 166
  }, {
    "id": 109,
    "pathFragmentId": 167
  }, {
    "id": 110,
    "pathFragmentId": 169
  }, {
    "id": 111,
    "pathFragmentId": 171
  }, {
    "id": 112,
    "pathFragmentId": 172
  }, {
    "id": 113,
    "pathFragmentId": 173
  }, {
    "id": 114,
    "pathFragmentId": 174
  }, {
    "id": 115,
    "pathFragmentId": 175
  }, {
    "id": 116,
    "pathFragmentId": 176
  }, {
    "id": 117,
    "pathFragmentId": 177
  }, {
    "id": 118,
    "pathFragmentId": 180
  }, {
    "id": 119,
    "pathFragmentId": 181
  }, {
    "id": 120,
    "pathFragmentId": 183
  }, {
    "id": 121,
    "pathFragmentId": 184
  }, {
    "id": 122,
    "pathFragmentId": 186
  }, {
    "id": 123,
    "pathFragmentId": 187
  }, {
    "id": 124,
    "pathFragmentId": 189
  }, {
    "id": 125,
    "pathFragmentId": 190
  }, {
    "id": 126,
    "pathFragmentId": 192
  }, {
    "id": 127,
    "pathFragmentId": 193
  }, {
    "id": 128,
    "pathFragmentId": 195
  }, {
    "id": 129,
    "pathFragmentId": 196
  }, {
    "id": 130,
    "pathFragmentId": 198
  }, {
    "id": 131,
    "pathFragmentId": 199
  }, {
    "id": 132,
    "pathFragmentId": 201
  }, {
    "id": 133,
    "pathFragmentId": 203
  }, {
    "id": 134,
    "pathFragmentId": 204
  }, {
    "id": 135,
    "pathFragmentId": 205
  }, {
    "id": 136,
    "pathFragmentId": 207
  }, {
    "id": 137,
    "pathFragmentId": 209
  }, {
    "id": 138,
    "pathFragmentId": 210
  }, {
    "id": 139,
    "pathFragmentId": 211
  }, {
    "id": 140,
    "pathFragmentId": 212
  }, {
    "id": 141,
    "pathFragmentId": 213
  }, {
    "id": 142,
    "pathFragmentId": 217
  }, {
    "id": 143,
    "pathFragmentId": 218
  }, {
    "id": 144,
    "pathFragmentId": 220
  }, {
    "id": 145,
    "pathFragmentId": 221
  }, {
    "id": 146,
    "pathFragmentId": 223
  }, {
    "id": 147,
    "pathFragmentId": 224
  }, {
    "id": 148,
    "pathFragmentId": 226
  }, {
    "id": 149,
    "pathFragmentId": 227
  }, {
    "id": 150,
    "pathFragmentId": 229
  }, {
    "id": 151,
    "pathFragmentId": 230
  }, {
    "id": 152,
    "pathFragmentId": 232
  }, {
    "id": 153,
    "pathFragmentId": 233
  }, {
    "id": 154,
    "pathFragmentId": 235
  }, {
    "id": 155,
    "pathFragmentId": 236
  }, {
    "id": 156,
    "pathFragmentId": 238
  }, {
    "id": 157,
    "pathFragmentId": 240
  }, {
    "id": 158,
    "pathFragmentId": 241
  }, {
    "id": 159,
    "pathFragmentId": 242
  }, {
    "id": 160,
    "pathFragmentId": 243
  }, {
    "id": 161,
    "pathFragmentId": 244
  }, {
    "id": 162,
    "pathFragmentId": 248
  }, {
    "id": 163,
    "pathFragmentId": 249
  }, {
    "id": 164,
    "pathFragmentId": 251
  }, {
    "id": 165,
    "pathFragmentId": 252
  }, {
    "id": 166,
    "pathFragmentId": 254
  }, {
    "id": 167,
    "pathFragmentId": 255
  }, {
    "id": 168,
    "pathFragmentId": 257
  }, {
    "id": 169,
    "pathFragmentId": 258
  }, {
    "id": 170,
    "pathFragmentId": 260
  }, {
    "id": 171,
    "pathFragmentId": 261
  }, {
    "id": 172,
    "pathFragmentId": 263
  }, {
    "id": 173,
    "pathFragmentId": 264
  }, {
    "id": 174,
    "pathFragmentId": 266
  }, {
    "id": 175,
    "pathFragmentId": 267
  }, {
    "id": 176,
    "pathFragmentId": 269
  }, {
    "id": 177,
    "pathFragmentId": 270
  }, {
    "id": 178,
    "pathFragmentId": 272
  }, {
    "id": 179,
    "pathFragmentId": 273
  }, {
    "id": 180,
    "pathFragmentId": 275
  }, {
    "id": 181,
    "pathFragmentId": 276
  }, {
    "id": 182,
    "pathFragmentId": 278
  }, {
    "id": 183,
    "pathFragmentId": 279
  }, {
    "id": 184,
    "pathFragmentId": 281
  }, {
    "id": 185,
    "pathFragmentId": 283
  }, {
    "id": 186,
    "pathFragmentId": 284
  }, {
    "id": 187,
    "pathFragmentId": 285
  }, {
    "id": 188,
    "pathFragmentId": 286
  }, {
    "id": 189,
    "pathFragmentId": 287
  }, {
    "id": 190,
    "pathFragmentId": 288
  }, {
    "id": 191,
    "pathFragmentId": 292
  }, {
    "id": 192,
    "pathFragmentId": 293
  }, {
    "id": 193,
    "pathFragmentId": 295
  }, {
    "id": 194,
    "pathFragmentId": 296
  }, {
    "id": 195,
    "pathFragmentId": 298
  }, {
    "id": 196,
    "pathFragmentId": 299
  }, {
    "id": 197,
    "pathFragmentId": 301
  }, {
    "id": 198,
    "pathFragmentId": 302
  }, {
    "id": 199,
    "pathFragmentId": 304
  }, {
    "id": 200,
    "pathFragmentId": 305
  }, {
    "id": 201,
    "pathFragmentId": 307
  }, {
    "id": 202,
    "pathFragmentId": 308
  }, {
    "id": 203,
    "pathFragmentId": 310
  }, {
    "id": 204,
    "pathFragmentId": 312
  }, {
    "id": 205,
    "pathFragmentId": 313
  }, {
    "id": 206,
    "pathFragmentId": 315
  }, {
    "id": 207,
    "pathFragmentId": 316
  }, {
    "id": 208,
    "pathFragmentId": 317
  }, {
    "id": 209,
    "pathFragmentId": 318
  }, {
    "id": 210,
    "pathFragmentId": 319
  }, {
    "id": 211,
    "pathFragmentId": 320
  }, {
    "id": 212,
    "pathFragmentId": 321
  }, {
    "id": 213,
    "pathFragmentId": 322
  }, {
    "id": 214,
    "pathFragmentId": 323
  }, {
    "id": 215,
    "pathFragmentId": 324
  }, {
    "id": 216,
    "pathFragmentId": 328
  }, {
    "id": 217,
    "pathFragmentId": 329
  }, {
    "id": 218,
    "pathFragmentId": 331
  }, {
    "id": 219,
    "pathFragmentId": 332
  }, {
    "id": 220,
    "pathFragmentId": 334
  }, {
    "id": 221,
    "pathFragmentId": 335
  }, {
    "id": 222,
    "pathFragmentId": 337
  }, {
    "id": 223,
    "pathFragmentId": 338
  }, {
    "id": 224,
    "pathFragmentId": 340
  }, {
    "id": 225,
    "pathFragmentId": 341
  }, {
    "id": 226,
    "pathFragmentId": 343
  }, {
    "id": 227,
    "pathFragmentId": 344
  }, {
    "id": 228,
    "pathFragmentId": 346
  }, {
    "id": 229,
    "pathFragmentId": 347
  }, {
    "id": 230,
    "pathFragmentId": 349
  }, {
    "id": 231,
    "pathFragmentId": 350
  }, {
    "id": 232,
    "pathFragmentId": 352
  }, {
    "id": 233,
    "pathFragmentId": 354
  }, {
    "id": 234,
    "pathFragmentId": 355
  }, {
    "id": 235,
    "pathFragmentId": 356
  }, {
    "id": 236,
    "pathFragmentId": 357
  }, {
    "id": 237,
    "pathFragmentId": 358
  }, {
    "id": 238,
    "pathFragmentId": 359
  }, {
    "id": 239,
    "pathFragmentId": 363
  }, {
    "id": 240,
    "pathFragmentId": 364
  }, {
    "id": 241,
    "pathFragmentId": 366
  }, {
    "id": 242,
    "pathFragmentId": 367
  }, {
    "id": 243,
    "pathFragmentId": 369
  }, {
    "id": 244,
    "pathFragmentId": 370
  }, {
    "id": 245,
    "pathFragmentId": 372
  }, {
    "id": 246,
    "pathFragmentId": 373
  }, {
    "id": 247,
    "pathFragmentId": 375
  }, {
    "id": 248,
    "pathFragmentId": 377
  }, {
    "id": 249,
    "pathFragmentId": 378
  }, {
    "id": 250,
    "pathFragmentId": 379
  }, {
    "id": 251,
    "pathFragmentId": 380
  }, {
    "id": 252,
    "pathFragmentId": 381
  }, {
    "id": 253,
    "pathFragmentId": 385
  }, {
    "id": 254,
    "pathFragmentId": 386
  }, {
    "id": 255,
    "pathFragmentId": 388
  }, {
    "id": 256,
    "pathFragmentId": 389
  }, {
    "id": 257,
    "pathFragmentId": 391
  }, {
    "id": 258,
    "pathFragmentId": 392
  }, {
    "id": 259,
    "pathFragmentId": 394
  }, {
    "id": 260,
    "pathFragmentId": 395
  }, {
    "id": 261,
    "pathFragmentId": 397
  }, {
    "id": 262,
    "pathFragmentId": 398
  }, {
    "id": 263,
    "pathFragmentId": 400
  }, {
    "id": 264,
    "pathFragmentId": 402
  }, {
    "id": 265,
    "pathFragmentId": 403
  }, {
    "id": 266,
    "pathFragmentId": 404
  }, {
    "id": 267,
    "pathFragmentId": 405
  }, {
    "id": 268,
    "pathFragmentId": 406
  }, {
    "id": 269,
    "pathFragmentId": 410
  }, {
    "id": 270,
    "pathFragmentId": 411
  }, {
    "id": 271,
    "pathFragmentId": 413
  }, {
    "id": 272,
    "pathFragmentId": 414
  }, {
    "id": 273,
    "pathFragmentId": 416
  }, {
    "id": 274,
    "pathFragmentId": 417
  }, {
    "id": 275,
    "pathFragmentId": 419
  }, {
    "id": 276,
    "pathFragmentId": 420
  }, {
    "id": 277,
    "pathFragmentId": 422
  }, {
    "id": 278,
    "pathFragmentId": 423
  }, {
    "id": 279,
    "pathFragmentId": 425
  }, {
    "id": 280,
    "pathFragmentId": 427
  }, {
    "id": 281,
    "pathFragmentId": 428
  }, {
    "id": 282,
    "pathFragmentId": 429
  }, {
    "id": 283,
    "pathFragmentId": 430
  }, {
    "id": 284,
    "pathFragmentId": 431
  }, {
    "id": 285,
    "pathFragmentId": 432
  }, {
    "id": 286,
    "pathFragmentId": 436
  }, {
    "id": 287,
    "pathFragmentId": 437
  }, {
    "id": 288,
    "pathFragmentId": 439
  }, {
    "id": 289,
    "pathFragmentId": 440
  }, {
    "id": 290,
    "pathFragmentId": 442
  }, {
    "id": 291,
    "pathFragmentId": 443
  }, {
    "id": 292,
    "pathFragmentId": 445
  }, {
    "id": 293,
    "pathFragmentId": 446
  }, {
    "id": 294,
    "pathFragmentId": 448
  }, {
    "id": 295,
    "pathFragmentId": 450
  }, {
    "id": 296,
    "pathFragmentId": 451
  }, {
    "id": 297,
    "pathFragmentId": 452
  }, {
    "id": 298,
    "pathFragmentId": 453
  }, {
    "id": 299,
    "pathFragmentId": 454
  }, {
    "id": 300,
    "pathFragmentId": 455
  }, {
    "id": 301,
    "pathFragmentId": 459
  }, {
    "id": 302,
    "pathFragmentId": 460
  }, {
    "id": 303,
    "pathFragmentId": 462
  }, {
    "id": 304,
    "pathFragmentId": 463
  }, {
    "id": 305,
    "pathFragmentId": 465
  }, {
    "id": 306,
    "pathFragmentId": 466
  }, {
    "id": 307,
    "pathFragmentId": 468
  }, {
    "id": 308,
    "pathFragmentId": 469
  }, {
    "id": 309,
    "pathFragmentId": 471
  }, {
    "id": 310,
    "pathFragmentId": 472
  }, {
    "id": 311,
    "pathFragmentId": 473
  }, {
    "id": 312,
    "pathFragmentId": 474
  }, {
    "id": 313,
    "pathFragmentId": 475
  }, {
    "id": 314,
    "pathFragmentId": 476
  }, {
    "id": 315,
    "pathFragmentId": 477
  }, {
    "id": 316,
    "pathFragmentId": 481
  }, {
    "id": 317,
    "pathFragmentId": 482
  }, {
    "id": 318,
    "pathFragmentId": 484
  }, {
    "id": 319,
    "pathFragmentId": 485
  }, {
    "id": 320,
    "pathFragmentId": 487
  }, {
    "id": 321,
    "pathFragmentId": 488
  }, {
    "id": 322,
    "pathFragmentId": 490
  }, {
    "id": 323,
    "pathFragmentId": 491
  }, {
    "id": 324,
    "pathFragmentId": 493
  }, {
    "id": 325,
    "pathFragmentId": 495
  }, {
    "id": 326,
    "pathFragmentId": 496
  }, {
    "id": 327,
    "pathFragmentId": 498
  }, {
    "id": 328,
    "pathFragmentId": 499
  }, {
    "id": 329,
    "pathFragmentId": 500
  }, {
    "id": 330,
    "pathFragmentId": 501
  }, {
    "id": 331,
    "pathFragmentId": 505
  }, {
    "id": 332,
    "pathFragmentId": 506
  }, {
    "id": 333,
    "pathFragmentId": 508
  }, {
    "id": 334,
    "pathFragmentId": 509
  }, {
    "id": 335,
    "pathFragmentId": 511
  }, {
    "id": 336,
    "pathFragmentId": 512
  }, {
    "id": 337,
    "pathFragmentId": 514
  }, {
    "id": 338,
    "pathFragmentId": 515
  }, {
    "id": 339,
    "pathFragmentId": 517
  }, {
    "id": 340,
    "pathFragmentId": 518
  }, {
    "id": 341,
    "pathFragmentId": 520
  }, {
    "id": 342,
    "pathFragmentId": 521
  }, {
    "id": 343,
    "pathFragmentId": 523
  }, {
    "id": 344,
    "pathFragmentId": 524
  }, {
    "id": 345,
    "pathFragmentId": 526
  }, {
    "id": 346,
    "pathFragmentId": 528
  }, {
    "id": 347,
    "pathFragmentId": 529
  }, {
    "id": 348,
    "pathFragmentId": 530
  }, {
    "id": 349,
    "pathFragmentId": 531
  }, {
    "id": 350,
    "pathFragmentId": 532
  }, {
    "id": 351,
    "pathFragmentId": 533
  }, {
    "id": 352,
    "pathFragmentId": 537
  }, {
    "id": 353,
    "pathFragmentId": 538
  }, {
    "id": 354,
    "pathFragmentId": 540
  }, {
    "id": 355,
    "pathFragmentId": 541
  }, {
    "id": 356,
    "pathFragmentId": 543
  }, {
    "id": 357,
    "pathFragmentId": 544
  }, {
    "id": 358,
    "pathFragmentId": 546
  }, {
    "id": 359,
    "pathFragmentId": 547
  }, {
    "id": 360,
    "pathFragmentId": 549
  }, {
    "id": 361,
    "pathFragmentId": 550
  }, {
    "id": 362,
    "pathFragmentId": 552
  }, {
    "id": 363,
    "pathFragmentId": 554
  }, {
    "id": 364,
    "pathFragmentId": 555
  }, {
    "id": 365,
    "pathFragmentId": 556
  }, {
    "id": 366,
    "pathFragmentId": 557
  }, {
    "id": 367,
    "pathFragmentId": 558
  }, {
    "id": 368,
    "pathFragmentId": 562
  }, {
    "id": 369,
    "pathFragmentId": 563
  }, {
    "id": 370,
    "pathFragmentId": 565
  }, {
    "id": 371,
    "pathFragmentId": 566
  }, {
    "id": 372,
    "pathFragmentId": 568
  }, {
    "id": 373,
    "pathFragmentId": 569
  }, {
    "id": 374,
    "pathFragmentId": 571
  }, {
    "id": 375,
    "pathFragmentId": 572
  }, {
    "id": 376,
    "pathFragmentId": 574
  }, {
    "id": 377,
    "pathFragmentId": 576
  }, {
    "id": 378,
    "pathFragmentId": 577
  }, {
    "id": 379,
    "pathFragmentId": 578
  }, {
    "id": 380,
    "pathFragmentId": 580
  }, {
    "id": 381,
    "pathFragmentId": 581
  }, {
    "id": 382,
    "pathFragmentId": 582
  }, {
    "id": 383,
    "pathFragmentId": 583
  }, {
    "id": 384,
    "pathFragmentId": 587
  }, {
    "id": 385,
    "pathFragmentId": 588
  }, {
    "id": 386,
    "pathFragmentId": 590
  }, {
    "id": 387,
    "pathFragmentId": 591
  }, {
    "id": 388,
    "pathFragmentId": 593
  }, {
    "id": 389,
    "pathFragmentId": 594
  }, {
    "id": 390,
    "pathFragmentId": 596
  }, {
    "id": 391,
    "pathFragmentId": 598
  }, {
    "id": 392,
    "pathFragmentId": 599
  }, {
    "id": 393,
    "pathFragmentId": 600
  }, {
    "id": 394,
    "pathFragmentId": 601
  }, {
    "id": 395,
    "pathFragmentId": 602
  }, {
    "id": 396,
    "pathFragmentId": 603
  }, {
    "id": 397,
    "pathFragmentId": 607
  }, {
    "id": 398,
    "pathFragmentId": 608
  }, {
    "id": 399,
    "pathFragmentId": 610
  }, {
    "id": 400,
    "pathFragmentId": 611
  }, {
    "id": 401,
    "pathFragmentId": 613
  }, {
    "id": 402,
    "pathFragmentId": 614
  }, {
    "id": 403,
    "pathFragmentId": 616
  }, {
    "id": 404,
    "pathFragmentId": 617
  }, {
    "id": 405,
    "pathFragmentId": 619
  }, {
    "id": 406,
    "pathFragmentId": 621
  }, {
    "id": 407,
    "pathFragmentId": 622
  }, {
    "id": 408,
    "pathFragmentId": 624
  }, {
    "id": 409,
    "pathFragmentId": 625
  }, {
    "id": 410,
    "pathFragmentId": 626
  }, {
    "id": 411,
    "pathFragmentId": 627
  }, {
    "id": 412,
    "pathFragmentId": 628
  }, {
    "id": 413,
    "pathFragmentId": 629
  }, {
    "id": 414,
    "pathFragmentId": 633
  }, {
    "id": 415,
    "pathFragmentId": 634
  }, {
    "id": 416,
    "pathFragmentId": 636
  }, {
    "id": 417,
    "pathFragmentId": 637
  }, {
    "id": 418,
    "pathFragmentId": 639
  }, {
    "id": 419,
    "pathFragmentId": 640
  }, {
    "id": 420,
    "pathFragmentId": 642
  }, {
    "id": 421,
    "pathFragmentId": 643
  }, {
    "id": 422,
    "pathFragmentId": 645
  }, {
    "id": 423,
    "pathFragmentId": 646
  }, {
    "id": 424,
    "pathFragmentId": 648
  }, {
    "id": 425,
    "pathFragmentId": 650
  }, {
    "id": 426,
    "pathFragmentId": 651
  }, {
    "id": 427,
    "pathFragmentId": 652
  }, {
    "id": 428,
    "pathFragmentId": 653
  }, {
    "id": 429,
    "pathFragmentId": 654
  }, {
    "id": 430,
    "pathFragmentId": 655
  }, {
    "id": 431,
    "pathFragmentId": 658
  }, {
    "id": 432,
    "pathFragmentId": 659
  }, {
    "id": 433,
    "pathFragmentId": 661
  }, {
    "id": 434,
    "pathFragmentId": 662
  }, {
    "id": 435,
    "pathFragmentId": 664
  }, {
    "id": 436,
    "pathFragmentId": 666
  }, {
    "id": 437,
    "pathFragmentId": 667
  }, {
    "id": 438,
    "pathFragmentId": 668
  }, {
    "id": 439,
    "pathFragmentId": 669
  }, {
    "id": 440,
    "pathFragmentId": 670
  }, {
    "id": 441,
    "pathFragmentId": 671
  }, {
    "id": 442,
    "pathFragmentId": 675
  }, {
    "id": 443,
    "pathFragmentId": 676
  }, {
    "id": 444,
    "pathFragmentId": 678
  }, {
    "id": 445,
    "pathFragmentId": 679
  }, {
    "id": 446,
    "pathFragmentId": 681
  }, {
    "id": 447,
    "pathFragmentId": 682
  }, {
    "id": 448,
    "pathFragmentId": 684
  }, {
    "id": 449,
    "pathFragmentId": 685
  }, {
    "id": 450,
    "pathFragmentId": 687
  }, {
    "id": 451,
    "pathFragmentId": 689
  }, {
    "id": 452,
    "pathFragmentId": 690
  }, {
    "id": 453,
    "pathFragmentId": 691
  }, {
    "id": 454,
    "pathFragmentId": 692
  }, {
    "id": 455,
    "pathFragmentId": 693
  }, {
    "id": 456,
    "pathFragmentId": 695
  }, {
    "id": 457,
    "pathFragmentId": 696
  }, {
    "id": 458,
    "pathFragmentId": 698
  }, {
    "id": 459,
    "pathFragmentId": 699
  }, {
    "id": 460,
    "pathFragmentId": 700
  }, {
    "id": 461,
    "pathFragmentId": 701
  }, {
    "id": 462,
    "pathFragmentId": 702
  }, {
    "id": 463,
    "pathFragmentId": 706
  }, {
    "id": 464,
    "pathFragmentId": 707
  }, {
    "id": 465,
    "pathFragmentId": 709
  }, {
    "id": 466,
    "pathFragmentId": 710
  }, {
    "id": 467,
    "pathFragmentId": 712
  }, {
    "id": 468,
    "pathFragmentId": 713
  }, {
    "id": 469,
    "pathFragmentId": 715
  }, {
    "id": 470,
    "pathFragmentId": 716
  }, {
    "id": 471,
    "pathFragmentId": 718
  }, {
    "id": 472,
    "pathFragmentId": 719
  }, {
    "id": 473,
    "pathFragmentId": 721
  }, {
    "id": 474,
    "pathFragmentId": 722
  }, {
    "id": 475,
    "pathFragmentId": 724
  }, {
    "id": 476,
    "pathFragmentId": 725
  }, {
    "id": 477,
    "pathFragmentId": 727
  }, {
    "id": 478,
    "pathFragmentId": 729
  }, {
    "id": 479,
    "pathFragmentId": 730
  }, {
    "id": 480,
    "pathFragmentId": 731
  }, {
    "id": 481,
    "pathFragmentId": 732
  }, {
    "id": 482,
    "pathFragmentId": 733
  }, {
    "id": 483,
    "pathFragmentId": 734
  }, {
    "id": 484,
    "pathFragmentId": 738
  }, {
    "id": 485,
    "pathFragmentId": 739
  }, {
    "id": 486,
    "pathFragmentId": 741
  }, {
    "id": 487,
    "pathFragmentId": 742
  }, {
    "id": 488,
    "pathFragmentId": 744
  }, {
    "id": 489,
    "pathFragmentId": 745
  }, {
    "id": 490,
    "pathFragmentId": 747
  }, {
    "id": 491,
    "pathFragmentId": 748
  }, {
    "id": 492,
    "pathFragmentId": 750
  }, {
    "id": 493,
    "pathFragmentId": 751
  }, {
    "id": 494,
    "pathFragmentId": 752
  }, {
    "id": 495,
    "pathFragmentId": 753
  }, {
    "id": 496,
    "pathFragmentId": 754
  }, {
    "id": 497,
    "pathFragmentId": 755
  }, {
    "id": 498,
    "pathFragmentId": 759
  }, {
    "id": 499,
    "pathFragmentId": 760
  }, {
    "id": 500,
    "pathFragmentId": 762
  }, {
    "id": 501,
    "pathFragmentId": 763
  }, {
    "id": 502,
    "pathFragmentId": 765
  }, {
    "id": 503,
    "pathFragmentId": 766
  }, {
    "id": 504,
    "pathFragmentId": 768
  }, {
    "id": 505,
    "pathFragmentId": 769
  }, {
    "id": 506,
    "pathFragmentId": 771
  }, {
    "id": 507,
    "pathFragmentId": 772
  }, {
    "id": 508,
    "pathFragmentId": 774
  }, {
    "id": 509,
    "pathFragmentId": 775
  }, {
    "id": 510,
    "pathFragmentId": 777
  }, {
    "id": 511,
    "pathFragmentId": 778
  }, {
    "id": 512,
    "pathFragmentId": 780
  }, {
    "id": 513,
    "pathFragmentId": 781
  }, {
    "id": 514,
    "pathFragmentId": 783
  }, {
    "id": 515,
    "pathFragmentId": 784
  }, {
    "id": 516,
    "pathFragmentId": 786
  }, {
    "id": 517,
    "pathFragmentId": 787
  }, {
    "id": 518,
    "pathFragmentId": 789
  }, {
    "id": 519,
    "pathFragmentId": 790
  }, {
    "id": 520,
    "pathFragmentId": 792
  }, {
    "id": 521,
    "pathFragmentId": 793
  }, {
    "id": 522,
    "pathFragmentId": 795
  }, {
    "id": 523,
    "pathFragmentId": 796
  }, {
    "id": 524,
    "pathFragmentId": 798
  }, {
    "id": 525,
    "pathFragmentId": 799
  }, {
    "id": 526,
    "pathFragmentId": 801
  }, {
    "id": 527,
    "pathFragmentId": 802
  }, {
    "id": 528,
    "pathFragmentId": 804
  }, {
    "id": 529,
    "pathFragmentId": 805
  }, {
    "id": 530,
    "pathFragmentId": 807
  }, {
    "id": 531,
    "pathFragmentId": 809
  }, {
    "id": 532,
    "pathFragmentId": 810
  }, {
    "id": 533,
    "pathFragmentId": 811
  }, {
    "id": 534,
    "pathFragmentId": 812
  }, {
    "id": 535,
    "pathFragmentId": 813
  }, {
    "id": 536,
    "pathFragmentId": 817
  }, {
    "id": 537,
    "pathFragmentId": 818
  }, {
    "id": 538,
    "pathFragmentId": 820
  }, {
    "id": 539,
    "pathFragmentId": 821
  }, {
    "id": 540,
    "pathFragmentId": 823
  }, {
    "id": 541,
    "pathFragmentId": 824
  }, {
    "id": 542,
    "pathFragmentId": 826
  }, {
    "id": 543,
    "pathFragmentId": 827
  }, {
    "id": 544,
    "pathFragmentId": 829
  }, {
    "id": 545,
    "pathFragmentId": 830
  }, {
    "id": 546,
    "pathFragmentId": 832
  }, {
    "id": 547,
    "pathFragmentId": 834
  }, {
    "id": 548,
    "pathFragmentId": 835
  }, {
    "id": 549,
    "pathFragmentId": 836
  }, {
    "id": 550,
    "pathFragmentId": 837
  }, {
    "id": 551,
    "pathFragmentId": 838
  }, {
    "id": 552,
    "pathFragmentId": 839
  }, {
    "id": 553,
    "pathFragmentId": 843
  }, {
    "id": 554,
    "pathFragmentId": 844
  }, {
    "id": 555,
    "pathFragmentId": 846
  }, {
    "id": 556,
    "pathFragmentId": 847
  }, {
    "id": 557,
    "pathFragmentId": 849
  }, {
    "id": 558,
    "pathFragmentId": 850
  }, {
    "id": 559,
    "pathFragmentId": 852
  }, {
    "id": 560,
    "pathFragmentId": 853
  }, {
    "id": 561,
    "pathFragmentId": 855
  }, {
    "id": 562,
    "pathFragmentId": 856
  }, {
    "id": 563,
    "pathFragmentId": 857
  }, {
    "id": 564,
    "pathFragmentId": 858
  }, {
    "id": 565,
    "pathFragmentId": 859
  }, {
    "id": 566,
    "pathFragmentId": 860
  }, {
    "id": 567,
    "pathFragmentId": 861
  }, {
    "id": 568,
    "pathFragmentId": 865
  }, {
    "id": 569,
    "pathFragmentId": 866
  }, {
    "id": 570,
    "pathFragmentId": 868
  }, {
    "id": 571,
    "pathFragmentId": 869
  }, {
    "id": 572,
    "pathFragmentId": 871
  }, {
    "id": 573,
    "pathFragmentId": 872
  }, {
    "id": 574,
    "pathFragmentId": 874
  }, {
    "id": 575,
    "pathFragmentId": 876
  }, {
    "id": 576,
    "pathFragmentId": 877
  }, {
    "id": 577,
    "pathFragmentId": 878
  }, {
    "id": 578,
    "pathFragmentId": 879
  }, {
    "id": 579,
    "pathFragmentId": 880
  }, {
    "id": 580,
    "pathFragmentId": 881
  }, {
    "id": 581,
    "pathFragmentId": 882
  }, {
    "id": 582,
    "pathFragmentId": 886
  }, {
    "id": 583,
    "pathFragmentId": 887
  }, {
    "id": 584,
    "pathFragmentId": 889
  }, {
    "id": 585,
    "pathFragmentId": 890
  }, {
    "id": 586,
    "pathFragmentId": 892
  }, {
    "id": 587,
    "pathFragmentId": 893
  }, {
    "id": 588,
    "pathFragmentId": 895
  }, {
    "id": 589,
    "pathFragmentId": 896
  }, {
    "id": 590,
    "pathFragmentId": 898
  }, {
    "id": 591,
    "pathFragmentId": 899
  }, {
    "id": 592,
    "pathFragmentId": 901
  }, {
    "id": 593,
    "pathFragmentId": 902
  }, {
    "id": 594,
    "pathFragmentId": 904
  }, {
    "id": 595,
    "pathFragmentId": 905
  }, {
    "id": 596,
    "pathFragmentId": 907
  }, {
    "id": 597,
    "pathFragmentId": 908
  }, {
    "id": 598,
    "pathFragmentId": 910
  }, {
    "id": 599,
    "pathFragmentId": 912
  }, {
    "id": 600,
    "pathFragmentId": 913
  }, {
    "id": 601,
    "pathFragmentId": 914
  }, {
    "id": 602,
    "pathFragmentId": 915
  }, {
    "id": 603,
    "pathFragmentId": 916
  }, {
    "id": 604,
    "pathFragmentId": 920
  }, {
    "id": 605,
    "pathFragmentId": 921
  }, {
    "id": 606,
    "pathFragmentId": 923
  }, {
    "id": 607,
    "pathFragmentId": 924
  }, {
    "id": 608,
    "pathFragmentId": 926
  }, {
    "id": 609,
    "pathFragmentId": 927
  }, {
    "id": 610,
    "pathFragmentId": 928
  }],
  "actions": [{
    "targetId": 1,
    "actionKey": "7f44dd122b47ac4032d43a178e536899a9cbdc02b5abcdc49da4c086837f3122",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1],
    "primaryOutputId": 1,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hive-hcatalog/test_hive_hcatalog.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_hive_hcatalog"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 1,
    "actionKey": "d44ea51cf5b60671e056142988f4cdb832d7b7cc196a727afbfbb95fb6d2cc21",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [2],
    "primaryOutputId": 2,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "e94cbd7100f6c4b3eaccad1cdff0d63d2231a362d74b099634906894607f662a",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [1],
    "outputIds": [3],
    "primaryOutputId": 3,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [2],
    "outputIds": [30],
    "primaryOutputId": 30,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "6d669031980a0e38fc6cd8b02d8530a33d1b0ee41f98b0206b79e405c2fbc58c",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [31],
    "primaryOutputId": 31,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hive-hcatalog/test_hive_hcatalog.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_hive_hcatalog"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 1,
    "actionKey": "6d25e25e31e015a1ab5b47564e2e7a455265a718fe31086a2d9e0147bd3ba728",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [26],
    "outputIds": [33],
    "primaryOutputId": 33,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "ca4f5565ee9ea49d96e8c8ffe2ad24cf667dfc7a98c1292468f8036b2f6298f7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [36, 37],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 36,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "f36702ef84f77e72572af1bdc9e7be08278899bf1247d961a9d4ee1ebd81c1de",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [38, 39],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 38,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "3dd19a635da8903b6b71d9cf39dd76d0a2fb9ec2bacafba8c820d17f0ab25c6c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [40, 41],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 40,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "dbe43d6f6c1405c711bc4f8e9e53be80bc01f08891c11b96a6b4cac2e612a76c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [42, 43],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 42,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "12598983e9534448f95e8989a7cab54aa9256d1f8ae3358ec6e3549d2d23874a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [44, 45],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 44,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 1,
    "actionKey": "052e053503f48889c522cb008ec4d2fabc57cf4f0b0f866d3c408815b28cfb0e",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [28],
    "outputIds": [46, 47],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 46,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "8c756e430eaacf24f5ae5daa9680ebd5e1f19c38aedbc68c852b40bc9b25a2ec",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [48],
    "primaryOutputId": 48,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/starburst-presto/test_starburst_presto.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_starburst_presto"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 2,
    "actionKey": "334706b91f7edcc3f7b8210d839ef4a24f8847eb9545fa0fcc6c1339b4014c21",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [49],
    "primaryOutputId": 49,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "a7a32d18039c2ca4c4d3befdd81afe4e5cc383402b4aa8eb96a3fa7a5d163241",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [29],
    "outputIds": [50],
    "primaryOutputId": 50,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [30],
    "outputIds": [53],
    "primaryOutputId": 53,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "a0d72cd68e084f3047d5950e06f72b91409806d044905866f7b7a5afd9f7e655",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [54],
    "primaryOutputId": 54,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/starburst-presto/test_starburst_presto.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_starburst_presto"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 2,
    "actionKey": "6ac80b849db41542d851e729d2366a4b88106aec1ba3ae2bbbb62462160ddc7d",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [34],
    "outputIds": [55],
    "primaryOutputId": 55,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [36],
    "outputIds": [56, 57],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 56,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [36],
    "outputIds": [58, 59],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 58,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [36],
    "outputIds": [60, 61],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 60,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [36],
    "outputIds": [62, 63],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 62,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "b3991c4b0e724896ab790fc61c5cfa3d10f3aa9b35eddb0ed821c9c47aec8978",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [64],
    "primaryOutputId": 64,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/dr-elephant/test_dr_elephant.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_dr_elephant"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 3,
    "actionKey": "b628c36477329a5cd91b617a1e187f9e21eca54ad2ac9a430056e104edd1f7e1",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [65],
    "primaryOutputId": 65,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "515f3354bd49a50d88e5a0624bd0c37fef97a04b9bcdd95f9c96f87ed9fdad4f",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [37],
    "outputIds": [66],
    "primaryOutputId": 66,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [38],
    "outputIds": [69],
    "primaryOutputId": 69,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "f1bd7dcfd9f077c3efb448fe95e91851cb0758762e21571bb8d4da413c6d9e0b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [70],
    "primaryOutputId": 70,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/dr-elephant/test_dr_elephant.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_dr_elephant"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 3,
    "actionKey": "86e9c787da0a8a50d3e27852b6c1dc2844fee16ee2717ee18dc0f5c8606997f6",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [42],
    "outputIds": [71],
    "primaryOutputId": 71,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "588d7dd1ac6755e4dae423eea84b7a0da0378768df88f785d84d739ea7a1ee70",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [44],
    "outputIds": [72, 73],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 72,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "67799f0759c61375cf857c69d397f08f72309e45944dea88d1934bebf323dbfe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [44],
    "outputIds": [74, 75],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 74,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "468e7821aea426f02f75e11c12837fa969c4ce954e6aa90b2bb9c3eed214f582",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [76],
    "primaryOutputId": 76,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/spark-rapids/test_spark_rapids.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_spark_rapids"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 4,
    "actionKey": "22c429ddb159b466b154f98c8afd4ad6c73ebdee422a4091020ca682f0669937",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [77],
    "primaryOutputId": 77,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "9fce3a7c3e18f1c7f0afdaded59bbfd14e358be14e7112340edac9508f1f5d27",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [45],
    "outputIds": [78],
    "primaryOutputId": 78,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [46],
    "outputIds": [83],
    "primaryOutputId": 83,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "8c99ccb91a4280e83c70ee4ad8cae37ea8cee27e3fb0c3b72048b8c310e5d46f",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [84],
    "primaryOutputId": 84,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/spark-rapids/test_spark_rapids.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_spark_rapids"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 4,
    "actionKey": "7a040a682056a1528ef6db73b1e6a19b290098c8a438b6c0022da3a8adfff470",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [50],
    "outputIds": [85],
    "primaryOutputId": 85,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [52],
    "outputIds": [86, 87],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 86,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [52],
    "outputIds": [88, 89],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 88,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [52],
    "outputIds": [90, 91],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 90,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "13e30e37cce40be7a593b1fcab07dad982654edca592053c62651699f71d18d5",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [92],
    "primaryOutputId": 92,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/cloud-sql-proxy/test_cloud_sql_proxy.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_cloud_sql_proxy"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 5,
    "actionKey": "24eff2684200edfdf62a49a9782dcbff9bb73cb69aa4ea565b94ad983f2a4e1c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [93],
    "primaryOutputId": 93,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "e67aba7f02c0cd625587700eefbaeb11b47d8cb0d975a754745e71f95aeaa874",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [94],
    "primaryOutputId": 94,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [54],
    "outputIds": [98],
    "primaryOutputId": 98,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "af31dfb29f181c6c98697674180ee458d676ec9a38382e5fec943c2b6ed0168c",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [99],
    "primaryOutputId": 99,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/cloud-sql-proxy/test_cloud_sql_proxy.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_cloud_sql_proxy"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 5,
    "actionKey": "bbe5ce2d0a80b0fbab66366b1dabfee8c17e12382f3ac7ae483af094d5685d9b",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [58],
    "outputIds": [100],
    "primaryOutputId": 100,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [60],
    "outputIds": [101, 102],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 101,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [60],
    "outputIds": [103, 104],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 103,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [60],
    "outputIds": [105, 106],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 105,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "27202e200a3deaf68c759232e51410c21c4fa965486b30e4d1f967c323aa3a18",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [107],
    "primaryOutputId": 107,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hive-llap/test_hive_llap.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_hive_llap"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 6,
    "actionKey": "57673054e44bbd7b1ad62447bc5995f5e6b3a7654a7c9d4e59ef7d0ad34eab60",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [108],
    "primaryOutputId": 108,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "c6a286f8a6e93e94fea4df62e667807b760ed1978e575471c66356019e502870",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [61],
    "outputIds": [109],
    "primaryOutputId": 109,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [62],
    "outputIds": [114],
    "primaryOutputId": 114,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "679ae8ac601e8331981472e5ceaba51908dd303aa33bd0599a4d19eb2777cfbd",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [115],
    "primaryOutputId": 115,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hive-llap/test_hive_llap.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//:test_hive_llap"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 6,
    "actionKey": "020f144b66c3967f83d54c5b935a4c70b055c4ff5d9d25deaa8b874375c26daa",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [66],
    "outputIds": [116],
    "primaryOutputId": 116,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "9cc0638b71a77680010727d7230a8655b92e9b5cb47c48451d0a1988228073c3",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [117, 118],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 117,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "981798a3fe4c4da14146547892f4afceaf91f7d20458457a97522dca2704ae22",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [119, 120],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 119,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "ad49f11eda6820946a74df8ae1f1dc9efb110328b00b824a174bc4bd5f26a676",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [121, 122],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 121,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "18bf27119410faa49914857a277efef7b8dfe437737887273ac87a58712b9bb7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [123, 124],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 123,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "bf9306bf3ab598b2bae86b4b28a34eaf3801bfa3d071a7aed5d626085abdce4a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [125, 126],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 125,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "fdfe41026b498a554f297f625bea8abc1ed4dac4a6a84280aae5140f2ac6cae1",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [68],
    "outputIds": [127, 128],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 127,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "078cefec2812353fe07ef44d4e42204750d03f29efae36c6efd5292ce226cdea",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [129],
    "primaryOutputId": 129,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/rapids/test_rapids.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//rapids:test_rapids"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 7,
    "actionKey": "7f183efc0575847d2a4489c3c29da4d324061592e17d786d4bb943a5f1aecd87",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [130],
    "primaryOutputId": 130,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "55fef4056420165827d8296c4ce48a102c18aafaf795320d14c7815190a976a1",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [69],
    "outputIds": [131],
    "primaryOutputId": 131,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [70],
    "outputIds": [138],
    "primaryOutputId": 138,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "d87e5b4db5d1a834c9898e258346845516c38d105e1f104a17c3506a7e9cdd4a",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [139],
    "primaryOutputId": 139,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/rapids/test_rapids.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//rapids:test_rapids"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 7,
    "actionKey": "ef135c69446ec69649cfd0139791041b6bbf5166c96cc7509a83488e7f5954e4",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [74],
    "outputIds": [140],
    "primaryOutputId": 140,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "ca4f5565ee9ea49d96e8c8ffe2ad24cf667dfc7a98c1292468f8036b2f6298f7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [141, 142],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 141,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "f36702ef84f77e72572af1bdc9e7be08278899bf1247d961a9d4ee1ebd81c1de",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [143, 144],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 143,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "3dd19a635da8903b6b71d9cf39dd76d0a2fb9ec2bacafba8c820d17f0ab25c6c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [145, 146],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 145,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "dbe43d6f6c1405c711bc4f8e9e53be80bc01f08891c11b96a6b4cac2e612a76c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [147, 148],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 147,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "12598983e9534448f95e8989a7cab54aa9256d1f8ae3358ec6e3549d2d23874a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [149, 150],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 149,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "052e053503f48889c522cb008ec4d2fabc57cf4f0b0f866d3c408815b28cfb0e",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [76],
    "outputIds": [151, 152],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 151,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b70a777bbe4f77a48f75d075743b2a1b8f4369d871db06557e8578774091feb4",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [153],
    "primaryOutputId": 153,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/connectors/test_connectors.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//connectors:test_connectors"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 8,
    "actionKey": "7f5a902b20a547fc94e985bea6fcddbc5323d4f4a60f97a8605738b5537b7983",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [154],
    "primaryOutputId": 154,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b2e123541ed2d56b7a59921fc0d7fda8acb001c81cad2aa44bb5dfe397c4ec63",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [77],
    "outputIds": [155],
    "primaryOutputId": 155,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [78],
    "outputIds": [158],
    "primaryOutputId": 158,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "69b1729761ea34e24c9ea0092a0996ec4dbec5ec82519508986d939fcfd4a947",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [159],
    "primaryOutputId": 159,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/connectors/test_connectors.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//connectors:test_connectors"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 8,
    "actionKey": "ef3569153a80c1760b38ee29e5931d75d51408cbfef89993d60c580e2bece504",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [82],
    "outputIds": [160],
    "primaryOutputId": 160,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "76b8a0aace91727014a76f20de8618fef7bc5f906d16827717fb862cd01baccc",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [161, 162],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 161,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "abdb926fc27bec23f0110be5200bfbf9773b3cfa1c89ee52fe3cf0732c0e4d6d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [163, 164],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 163,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "8b19cf32e30735c1120a21f21a83611feb5d8d7d1332ca094e7d02f187527b27",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [165, 166],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 165,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b4e3a1783c0d2f745a244f7f07a162b5b04797e2c9e97b6bd8d47df979fec7fe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [167, 168],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 167,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "3a941db1e287b27622d394c4f61157039b26f9d59284a534c13432eeb697cfe0",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [169, 170],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 169,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "a6878cb3be11d8220f8e185f7bbb8c37be42e82eb36d5860034db06c6ffb36a1",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [171, 172],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 171,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "56d0f0f8197d8031092570d410e4dedc870daa36fb66dc9c9f64e788a7993743",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [173, 174],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 173,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "3e2888d90ccaacebe5a9425c562b611ed1714bfbce74a453730ab7d731f289ee",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [175, 176],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 175,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b9ed3254e34fe4130bd75e9c034f5613483c713513c4a7a1ce7b4a66ac0dae93",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [177, 178],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 177,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "1e33170505eadca597972a9b8a6e8c9bbe72d4938a4972598ccb015800395f98",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [179, 180],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 179,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "60fb9adb37b8f4c26917d839f27da72d67074445ddd8443d1669c9aa993c2fc9",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [181],
    "primaryOutputId": 181,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/flink/test_flink.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//flink:test_flink"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 9,
    "actionKey": "3440ed3fd0edc9a47c18678f4ceb9f3baed0183dbf3497095057383a9ae77dd3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [182],
    "primaryOutputId": 182,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "4f76b5e9f694f21645bf1f133a82d8b282e66f468b78db84e6a493b2e4be8e6f",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [85],
    "outputIds": [183],
    "primaryOutputId": 183,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [86],
    "outputIds": [187],
    "primaryOutputId": 187,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "3c9a5385d923adef119c565fef0550664cd6109de24f0327dd7e6713c44e7f0b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [188],
    "primaryOutputId": 188,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/flink/test_flink.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//flink:test_flink"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 9,
    "actionKey": "dc72dd2bc19babd8e90c8a9018be73bedc1ce19116b94a939b44d902fcbd8044",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [90],
    "outputIds": [189],
    "primaryOutputId": 189,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "84804c9e29c8c491e748ab08d007bcd09ae4c2ac3ea8c9c49129d9e4c22015a6",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [92],
    "outputIds": [190, 191],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 190,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "881b52cecc230f84269971f4dc555a2587c0f64b20320c4d56f31cff20a18dc7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [92],
    "outputIds": [192, 193],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 192,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "2fcf650027413df750ec372435a16b23319723b96340c80e0f6611b9a409ce7d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [92],
    "outputIds": [194, 195],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 194,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "f8a3d403b8a4d1e6a227bdd390c55940cc6895ba271a0c4363871c4830e910eb",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [92],
    "outputIds": [196, 197],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 196,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "e4a8ae8877af73395723992d6b89df2288e479bb6b6b4e57972a8c093c63be0f",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [92],
    "outputIds": [198, 199],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 198,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "f12d1489888517a4e215a2dea10bd1a9d52eaf45cb0a3ad843ea2b2e456f1265",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [200],
    "primaryOutputId": 200,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/mlvm/test_mlvm.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//mlvm:test_mlvm"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 10,
    "actionKey": "1de98132c26be4e86ef6c46c71858755503bdcba98ab3ed04ad9fef975463b21",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [201],
    "primaryOutputId": 201,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "fbbab62df24b4503062df0921670b6aeb87c975ead20ee329551470668a35e54",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [93],
    "outputIds": [202],
    "primaryOutputId": 202,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [94],
    "outputIds": [212],
    "primaryOutputId": 212,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "c459b3e65592d5498c71cd576da716bac7cb0789ba94b2c16a46b7b10d9bb97e",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [213],
    "primaryOutputId": 213,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/mlvm/test_mlvm.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//mlvm:test_mlvm"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 10,
    "actionKey": "f67ff0214512b16d4ff141cfd302290f0f4c99d382de8a1f505a352c6f94892e",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [98],
    "outputIds": [214],
    "primaryOutputId": 214,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "d8a4f9ed1ed7c05dab3db6adfeb85211ff30362dc26191698bdee5ba58644835",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [215, 216],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 215,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "cc4228a079d93b7f28662bff728c9a4684a3514aa35f54a4ecc69ea6ca582cfd",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [217, 218],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 217,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "7575477671513a0bbbfaf316e3acd39aa8ade0ad6a075e5337c4752a54dfffe8",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [219, 220],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 219,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "82e88f03194f97c7d180d6c5446ea101fa3397594219ab03b1ed535cefc44afe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [221, 222],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 221,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "148448fc7321cc28f304e0a7619832caea785e9d268555a492326ad6004454b4",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [223, 224],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 223,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "1d21aafca5765c328abb89b9c29f88817a0acc0293c4c74499ce5605f2b81272",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [225, 226],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 225,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "64c204e8f91b05b6cebca6cfb4c41f405a82c9e4bd6139eb29e97cffe5e77aa8",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [227, 228],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 227,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "46690ea6ffeb27b961c99f85fe80d770c4f44b3d95f87926732d452c112c6942",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [229],
    "primaryOutputId": 229,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/oozie/test_oozie.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//oozie:test_oozie"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 11,
    "actionKey": "86ac298f3a2723b297acf15503a68ae6ea980d73484bafb380e8434c32bdf8f7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [230],
    "primaryOutputId": 230,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "87f37c98a0385d20fac2ccbb71b27644abb2cb882639577914aa6b3ad6e214c9",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [101],
    "outputIds": [231],
    "primaryOutputId": 231,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [102],
    "outputIds": [235],
    "primaryOutputId": 235,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "26ed36a4119dad4f81b1847aa88ed10c41f9496f3984e8263bb1ac5001a2fffc",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [236],
    "primaryOutputId": 236,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/oozie/test_oozie.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//oozie:test_oozie"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 11,
    "actionKey": "04a86bacdc80acab13deb89d776ad2c6c45fb58e6e916ea9817ffb383893de89",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [106],
    "outputIds": [237],
    "primaryOutputId": 237,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [108],
    "outputIds": [238, 239],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 238,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [108],
    "outputIds": [240, 241],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 240,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [108],
    "outputIds": [242, 243],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 242,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "5828654612cca1e4402ca8e884a3518a3eba1a984bad127c19c1c6f50265c5b4",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [244],
    "primaryOutputId": 244,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/tony/test_tony.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//tony:test_tony"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 12,
    "actionKey": "458cdbbb64235fd0cdfab2dfd7003d37fd9ca01ac2b69f5536383add620e88fb",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [245],
    "primaryOutputId": 245,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "a39ef53e60029c40436c8644c7968af943175dcb53a1c913641bfbcdcf1502d3",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [109],
    "outputIds": [246],
    "primaryOutputId": 246,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [110],
    "outputIds": [249],
    "primaryOutputId": 249,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "6b3826dd736652404ea3736788291f9d6b1e4193a52377789d1045c1d92c40a9",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [250],
    "primaryOutputId": 250,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/tony/test_tony.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//tony:test_tony"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 12,
    "actionKey": "b9f2f490afe3ed1caa9fd637e9d69d8965ee4a0a9d6ec991d6c527de0eff7473",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [114],
    "outputIds": [251],
    "primaryOutputId": 251,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [116],
    "outputIds": [252, 253],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 252,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [116],
    "outputIds": [254, 255],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 254,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [116],
    "outputIds": [256, 257],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 256,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [116],
    "outputIds": [258, 259],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 258,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "c0227060d430a6fd27d7117253edd0a32739db1979c12ccbc2e3bec2f9a18784",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [260],
    "primaryOutputId": 260,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/presto/test_presto.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//presto:test_presto"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 13,
    "actionKey": "696c75080d5cfcfb1fad1a6599db00d1bbb2fa18e3dbbb2c818366c6bc32b707",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [261],
    "primaryOutputId": 261,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "9c497fbd2b2780840c6b1f5216a438c55ffd3cd55f3181d578167c5e86e2244f",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [117],
    "outputIds": [262],
    "primaryOutputId": 262,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [118],
    "outputIds": [265],
    "primaryOutputId": 265,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "6b4a0eebe478cc705c57cb3341dd32b33af50f18df1731f036583034b2ad6d41",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [266],
    "primaryOutputId": 266,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/presto/test_presto.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//presto:test_presto"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 13,
    "actionKey": "d1b878da11f89aa8f1a6b4f698c5c70e74ce84a1132652ec0f70647f45da5251",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [122],
    "outputIds": [267],
    "primaryOutputId": 267,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [124],
    "outputIds": [268, 269],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 268,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [124],
    "outputIds": [270, 271],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 270,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [124],
    "outputIds": [272, 273],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 272,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [124],
    "outputIds": [274, 275],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 274,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "e7fd5b7b32ecf7a4a28173c92b909f9e1ab0b46cf3b249716a7569aaf7097653",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [276],
    "primaryOutputId": 276,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/solr/test_solr.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//solr:test_solr"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 14,
    "actionKey": "3b3dd7496754f78ab742d679e2751b0cc4d9196d34720d0e90493c05f1755915",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [277],
    "primaryOutputId": 277,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "fc5039539ad235299484e722c1694f69ba0f81d11f6d2e0c52def185c8dcce2e",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [125],
    "outputIds": [278],
    "primaryOutputId": 278,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [126],
    "outputIds": [282],
    "primaryOutputId": 282,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "6be554c529a3894cdb735cb8b491d3a5a6813ebd1a32e4393194c9fcde2013bc",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [283],
    "primaryOutputId": 283,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/solr/test_solr.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//solr:test_solr"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 14,
    "actionKey": "a200a766ffd747e2ebc0d287d63db52598b058733c9dd1a7f7193f9244cd211e",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [130],
    "outputIds": [284],
    "primaryOutputId": 284,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [132],
    "outputIds": [285, 286],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 285,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [132],
    "outputIds": [287, 288],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 287,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [132],
    "outputIds": [289, 290],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 289,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "dbab6059c32f4e0a027b6c62cee6fb52c49b11d40206baf89177638d1a601da4",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [291],
    "primaryOutputId": 291,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/ganglia/test_ganglia.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//ganglia:test_ganglia"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 15,
    "actionKey": "e15dad63ac2e5598531fb0f1ff0ac83287c05f8f9f377fced91e9e0b27a2247a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [292],
    "primaryOutputId": 292,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "e39be8aa8081d8651fdecd706ee42381273840510757f2b4b8a7938eceabc951",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [133],
    "outputIds": [293],
    "primaryOutputId": 293,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [134],
    "outputIds": [297],
    "primaryOutputId": 297,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "d53d34344a47cbb0457bd579cf2e4e6fa69b1b89e83c2d93e92db052772aa3b3",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [298],
    "primaryOutputId": 298,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/ganglia/test_ganglia.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//ganglia:test_ganglia"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 15,
    "actionKey": "e378ec1d9073ebd17c2d13461f896e6afda1296999a41191d4cb36944a8a3936",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [138],
    "outputIds": [299],
    "primaryOutputId": 299,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [300, 301],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 300,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [302, 303],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 302,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [304, 305],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 304,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "e7eabfd57c721b3dd1ff7fa1e6fd46ed805ec52b80e648d42476667126b4bd13",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [306],
    "primaryOutputId": 306,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/dask/test_dask.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//dask:test_dask"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 16,
    "actionKey": "cb9b2889b49d2523fbc24b031454ccdf0cd584b363b59ba0c3d765d8e226f2ca",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [307],
    "primaryOutputId": 307,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "c6a0b44305b5839270fad93911f3c34a0c304422d6b7ed74cb641c0c1d34d8ad",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [141],
    "outputIds": [308],
    "primaryOutputId": 308,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [142],
    "outputIds": [312],
    "primaryOutputId": 312,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "eaa2d4d18e00487b84d9b4ca478e3cd56c17137588329ff2be3f403aed503d2b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [313],
    "primaryOutputId": 313,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/dask/test_dask.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//dask:test_dask"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 16,
    "actionKey": "c09599cdd82bfe8d682da9f0a56b8a8249b0ee06156b717a40e76ae76535de73",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [146],
    "outputIds": [314],
    "primaryOutputId": 314,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [148],
    "outputIds": [315, 316],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 315,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [148],
    "outputIds": [317, 318],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 317,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [148],
    "outputIds": [319, 320],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 319,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "aec12ba3c3874fbd529456e49b28c41e45458b9106e3aac3256c8907c12ddf78",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [321],
    "primaryOutputId": 321,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hbase/test_hbase.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//hbase:test_hbase"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 17,
    "actionKey": "b87a5e31ddea4a673dca6121e1e9e12d005b0d169e38bed2e4dd0d213ef54a5c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [322],
    "primaryOutputId": 322,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "3e021341ef259e0b0bf556289ea42bbde0ad6a70f9fff0f43223866247d56824",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [149],
    "outputIds": [323],
    "primaryOutputId": 323,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [150],
    "outputIds": [327],
    "primaryOutputId": 327,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "e0a700cb6d36a978447458f34f5c9c804d509f6178f72ceafa79c4896dfaf527",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [328],
    "primaryOutputId": 328,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hbase/test_hbase.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//hbase:test_hbase"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 17,
    "actionKey": "340a585b62bee3a29c07fd521817bfc4f3f0f9cf8064834e6098735fd4108a90",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [154],
    "outputIds": [329],
    "primaryOutputId": 329,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "ca4f5565ee9ea49d96e8c8ffe2ad24cf667dfc7a98c1292468f8036b2f6298f7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [330, 331],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 330,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "f36702ef84f77e72572af1bdc9e7be08278899bf1247d961a9d4ee1ebd81c1de",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [332, 333],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 332,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "3dd19a635da8903b6b71d9cf39dd76d0a2fb9ec2bacafba8c820d17f0ab25c6c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [334, 335],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 334,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "dbe43d6f6c1405c711bc4f8e9e53be80bc01f08891c11b96a6b4cac2e612a76c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [336, 337],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 336,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "12598983e9534448f95e8989a7cab54aa9256d1f8ae3358ec6e3549d2d23874a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [338, 339],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 338,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "052e053503f48889c522cb008ec4d2fabc57cf4f0b0f866d3c408815b28cfb0e",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [340, 341],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 340,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "d235316e4e21f1567235ceeae2cd32f7fc269ce15c3b87101335eccbcfed20c9",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [342],
    "primaryOutputId": 342,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/sqoop/test_sqoop.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//sqoop:test_sqoop"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 18,
    "actionKey": "50d94596c29c04718f36f145ab2812d4b6fa9847cb2facc13bf485866c8245a5",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [343],
    "primaryOutputId": 343,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "b5e2dd74f741bb446e9df21c067f33569b4279fb4e756b19a292e68dcdc50d52",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [157],
    "outputIds": [344],
    "primaryOutputId": 344,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [158],
    "outputIds": [348],
    "primaryOutputId": 348,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "a0e9f70b4cf2432d9c841afaad38cecf5d9a05b09902dddca4e2a126d66ffaf1",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [349],
    "primaryOutputId": 349,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/sqoop/test_sqoop.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//sqoop:test_sqoop"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 18,
    "actionKey": "d11d3e739aef705a49584b35fd1f32e58eaf91e15b4a82d678d7fb091d021271",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [162],
    "outputIds": [350],
    "primaryOutputId": 350,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [164],
    "outputIds": [351, 352],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 351,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [164],
    "outputIds": [353, 354],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 353,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [164],
    "outputIds": [355, 356],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 355,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [164],
    "outputIds": [357, 358],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 357,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "f1355d5e92f4455ebade879d45e533d336d81cea9a48da4e3dafeb5c80630242",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [359],
    "primaryOutputId": 359,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hue/test_hue.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//hue:test_hue"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 19,
    "actionKey": "249b9273774dafa1b2fb1af7eb7d3577dc84fa5732fd4f3dc8951c26dfcf6dfa",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [360],
    "primaryOutputId": 360,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "c6dff495d3188e667b406093899da366608fabc75f9917dc1a0ed6d285a8dee3",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [165],
    "outputIds": [361],
    "primaryOutputId": 361,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [166],
    "outputIds": [364],
    "primaryOutputId": 364,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "5dde671330eb8ecf7526f47d2608c6364d9ab4bd990e3297adb7aa2a2375fbc1",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [365],
    "primaryOutputId": 365,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/hue/test_hue.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//hue:test_hue"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 19,
    "actionKey": "35f138f57ac71d7a55eecac5bff3f6cf33343d51a4795f5f54f613622dd6697c",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [170],
    "outputIds": [366],
    "primaryOutputId": 366,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [172],
    "outputIds": [367, 368],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 367,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [172],
    "outputIds": [369, 370],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 369,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [172],
    "outputIds": [371, 372],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 371,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "1b6e48728aba59c2ecd42a1f8b9a06c0c0b5ecbae2e69535ac1e1e35f93202a0",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [373],
    "primaryOutputId": 373,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/h2o/test_h2o.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//h2o:test_h2o"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 20,
    "actionKey": "4455258310b00ddeeb34d97be89d3b0de59a6196a57eed42a5a9945f58cd8d8b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [374],
    "primaryOutputId": 374,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "4bb18497e6cd82e5b9ca9962b7159161a93e54a1f9144daa8823e943a87f3477",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [173],
    "outputIds": [375],
    "primaryOutputId": 375,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [174],
    "outputIds": [380],
    "primaryOutputId": 380,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "8bb32d89b367132ad876a20a7e2e5b0f9f5a4403bd79c1c2e17759c1bfdcb0eb",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [381],
    "primaryOutputId": 381,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/h2o/test_h2o.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//h2o:test_h2o"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 20,
    "actionKey": "da021c2bf906c96254ded4d08e5a61e8794d4691f0f0e9e166654e7a2a323623",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [178],
    "outputIds": [382],
    "primaryOutputId": 382,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "588d7dd1ac6755e4dae423eea84b7a0da0378768df88f785d84d739ea7a1ee70",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [180],
    "outputIds": [383, 384],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 383,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "67799f0759c61375cf857c69d397f08f72309e45944dea88d1934bebf323dbfe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [180],
    "outputIds": [385, 386],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 385,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "863ebb9a92e556ed458377747cc7481073016b59db09b9cd3178d9cf53453e61",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [387],
    "primaryOutputId": 387,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/bigtable/test_bigtable.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//bigtable:test_bigtable"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 21,
    "actionKey": "affb202ce2833bb2128c6a915585e47aef8a9b07d5c4c034cf445b2ff1b41c13",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [388],
    "primaryOutputId": 388,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "0de00b62f5257139a1853845a4334af8bb1acf7a927a37e3b19c1f6740221abf",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [181],
    "outputIds": [389],
    "primaryOutputId": 389,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [182],
    "outputIds": [393],
    "primaryOutputId": 393,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "7ac4bd2371d1d775ec41bf73864d5ca6dcfa287acc92230d8efbb92174004258",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [394],
    "primaryOutputId": 394,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/bigtable/test_bigtable.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//bigtable:test_bigtable"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 21,
    "actionKey": "a84d871b7b2b95d8a3b6c20831f82ea2fa538fa99fdeccb8291b8de2282f023c",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [186],
    "outputIds": [395],
    "primaryOutputId": 395,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [188],
    "outputIds": [396, 397],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 396,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [188],
    "outputIds": [398, 399],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 398,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [188],
    "outputIds": [400, 401],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 400,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "2315773d46db09e496b6043ec2d9bc3c021912f234d90dee5e511f602178f96a",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [402],
    "primaryOutputId": 402,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/horovod/test_horovod.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//horovod:test_horovod"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 22,
    "actionKey": "3e0da0fffdd9eb0b787aa6d75301cb9c762244ff8daa72b7efd3b53664121c67",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [403],
    "primaryOutputId": 403,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "f6b70ae95272b6f1b40ebc1235d6f5de680b9f83e11997f8804f4ef6712fc05d",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [189],
    "outputIds": [404],
    "primaryOutputId": 404,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [190],
    "outputIds": [410],
    "primaryOutputId": 410,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "2427f635062fbbd23026fdaa12f4327c97ec66048b89be2772715719383924db",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [411],
    "primaryOutputId": 411,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/horovod/test_horovod.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//horovod:test_horovod"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 22,
    "actionKey": "c7ada8fa0c385288adf2325509fbefaf91806f6fd0771ae1a0ef9727ebfb412e",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [194],
    "outputIds": [412],
    "primaryOutputId": 412,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [196],
    "outputIds": [413, 414],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 413,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [196],
    "outputIds": [415, 416],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 415,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [196],
    "outputIds": [417, 418],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 417,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [196],
    "outputIds": [419, 420],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 419,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "9fb0de909c00a6d6fd4071143df12355d27b5c8eaa0de12469a146a564e2b035",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [421],
    "primaryOutputId": 421,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/kafka/test_kafka.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//kafka:test_kafka"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 23,
    "actionKey": "98d3fa3f19f59dcbd7025ab3d6072eea557c72db5440ccd190dd700ca4db8a24",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [422],
    "primaryOutputId": 422,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "fc5edab9b5b5f2af41cc8f73f1b44b6dd581d5249ad60e4cbdd175a5622a2e67",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [197],
    "outputIds": [423],
    "primaryOutputId": 423,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [198],
    "outputIds": [427],
    "primaryOutputId": 427,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "ac059a3eb96299784ecc6150f25b29cfff72afcb1eceeb1b4a17ace5a2f3934e",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [428],
    "primaryOutputId": 428,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/kafka/test_kafka.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//kafka:test_kafka"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 23,
    "actionKey": "7174fa651ce9733681c43dd0476a1cc3f4735c3fb6db4bf3e449b5588b9590f3",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [202],
    "outputIds": [429],
    "primaryOutputId": 429,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "b6b64b9e3d84cb61e3f0536de917110661db3f40ce5efb860df2f8b87e90778e",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [204],
    "outputIds": [430, 431],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 430,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "779bee19acef8ac2fa2a645655c622daeda8810127ea216613a8bc1cc604c9a9",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [432],
    "primaryOutputId": 432,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/drill/test_drill.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//drill:test_drill"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 24,
    "actionKey": "100943a9205fe265415993dd6fe2fcd4a70905b648a688082b170d744c7f85f7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [433],
    "primaryOutputId": 433,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "d422e20a214d4a80c082128fbc9cd856329de009d3ccde19f4add0e98b13f101",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [205],
    "outputIds": [434],
    "primaryOutputId": 434,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [206],
    "outputIds": [438],
    "primaryOutputId": 438,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "143ae34aa5437802a19995495ac4895cdfd4c9815386d2418a09e3455348d416",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [439],
    "primaryOutputId": 439,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/drill/test_drill.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//drill:test_drill"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 24,
    "actionKey": "9c1be2b2657f52fe2f747f9dbf771ab06fc07e6c56aedae7712b82cd81921420",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [210],
    "outputIds": [440],
    "primaryOutputId": 440,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [212],
    "outputIds": [441, 442],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 441,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [212],
    "outputIds": [443, 444],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 443,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [212],
    "outputIds": [445, 446],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 445,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "d3fa0ae4d93b94295f8fd77a67c7544e3b0c8f01a7c3f3433ffcb4afc8f31203",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [447],
    "primaryOutputId": 447,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/knox/test_knox.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//knox:test_knox"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 25,
    "actionKey": "f693d2561fb12644662e4a16e5762e897359086f8b799716a2dc489c99780a3e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [448],
    "primaryOutputId": 448,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "3c41c42f5d2a465e6282a11c937d2ee21647361c24b9a4b926162e271fe79dff",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [213],
    "outputIds": [449],
    "primaryOutputId": 449,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [214],
    "outputIds": [459],
    "primaryOutputId": 459,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "e49f3ce375c284213fbd8200a0ae50cd52eefabeb7628d5fabf847c3ac8da615",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [460],
    "primaryOutputId": 460,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/knox/test_knox.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//knox:test_knox"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 25,
    "actionKey": "1aa5e30ff2c63871abdc5ac2eae85284e662738b7071e8ed19e0d7f3b9bbd65d",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [218],
    "outputIds": [461],
    "primaryOutputId": 461,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "ca4f5565ee9ea49d96e8c8ffe2ad24cf667dfc7a98c1292468f8036b2f6298f7",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [462, 463],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 462,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "f36702ef84f77e72572af1bdc9e7be08278899bf1247d961a9d4ee1ebd81c1de",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [464, 465],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 464,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "3dd19a635da8903b6b71d9cf39dd76d0a2fb9ec2bacafba8c820d17f0ab25c6c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [466, 467],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 466,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "dbe43d6f6c1405c711bc4f8e9e53be80bc01f08891c11b96a6b4cac2e612a76c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [468, 469],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 468,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "12598983e9534448f95e8989a7cab54aa9256d1f8ae3358ec6e3549d2d23874a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [470, 471],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 470,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "052e053503f48889c522cb008ec4d2fabc57cf4f0b0f866d3c408815b28cfb0e",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [220],
    "outputIds": [472, 473],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 472,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "4b7d1eed84ffb541174b2032e02772b4aaba8f843fdfc1ecb5f7eb59b06a98ce",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [474],
    "primaryOutputId": 474,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/livy/test_livy.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//livy:test_livy"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 26,
    "actionKey": "cb37d41e481997511477708ff68e8a9028ce80ff30f47ddfc10708310aefae77",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [475],
    "primaryOutputId": 475,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "c74bf357b235731ccd27854439f2d4046256eba17aae4f41f6e0da15903bb750",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [221],
    "outputIds": [476],
    "primaryOutputId": 476,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [222],
    "outputIds": [480],
    "primaryOutputId": 480,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "cb4f96d09370a59297fbca210988a827a2a7b4bb75544bb84082a1f310b62ed1",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [481],
    "primaryOutputId": 481,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/livy/test_livy.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//livy:test_livy"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 26,
    "actionKey": "6ae05adc78f1eff4879d5a752cf859c421ecfe54c5c0c406a375a88463271d59",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [226],
    "outputIds": [482],
    "primaryOutputId": 482,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [228],
    "outputIds": [483, 484],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 483,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [228],
    "outputIds": [485, 486],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 485,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [228],
    "outputIds": [487, 488],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 487,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "1839e03b3d6130543f339d8beb544658753d07c916e52382cad48833807d249f",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [489],
    "primaryOutputId": 489,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/gpu/test_gpu.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//gpu:test_gpu"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 27,
    "actionKey": "8f7649b189159cb61a039d4ef86f5e4f7365079960ae422804b3d283ac203027",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [490],
    "primaryOutputId": 490,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "42ce60525297074ad74fe11e5cbb2738838e1d8efb25bcb18b570f52875ac05f",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [229],
    "outputIds": [491],
    "primaryOutputId": 491,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [230],
    "outputIds": [494],
    "primaryOutputId": 494,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "9b10f26f8b7e4077d011df65e433019f7f627da7006f025c42119664f8af71ff",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [495],
    "primaryOutputId": 495,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/gpu/test_gpu.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//gpu:test_gpu"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 27,
    "actionKey": "f55a2f0d225ffe88705e716c906e977fc15710fae075ee1abc76e2f2c6c9fd16",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [234],
    "outputIds": [496],
    "primaryOutputId": 496,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "a194bad531ebf0f315b91b439834f279857c2ffb7e5cc8ab1558922224033b62",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [497, 498],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 497,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "ec9c473c1bf4800655a0360f8df009f8d516b9575fe2cb520cec8c5a0d319e6a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [499, 500],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 499,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "44f3d1af6db0d0838e4c97a06389e407f1b4aff97552d810db6f557e1e581994",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [501, 502],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 501,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "1661f9426de3e8edf2992f89ab787ec8f0b75ebeb003e6a8e3c89925b4893ca4",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [503, 504],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 503,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "20e8ae929beb1e41df604f543e84ebbc068a8384d227169fe49582f8d9c7e935",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [505, 506],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 505,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "b9144dfd9b2f3d0a79236889a8ff9f7558e7bed08566c1b3d77b9885d005e5f3",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [507, 508],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 507,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "728ff3861db0ffb7f64c9cc913103c55c41bc92ba48fa4f335e9235167c7ac55",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [509, 510],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 509,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "15cf13892fbc0fe95e25945ae27e9d0c53f4538107e6c4567d919f2bb55f4dbf",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [511, 512],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 511,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "6e6c013cb2608717dfaa51def95c42e3525f9e6107b80aff2dd75d259f301518",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [513, 514],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 513,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "702d390f937809a33ec87e0b55670075b13b293d63dbd9f22e22af46e392154a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [515, 516],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 515,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "8cec27a1f772b5b2899e05ac0cbbb54cf28673f8fd5b3567ab6c85b236049cb9",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [517, 518],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 517,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "0b14fe95d24a22c9200509d91657efeae0eb1765071267f071f2483fedbbc25c",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [519, 520],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 519,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "320179b41becd44bd418a71e3cf87f6bd109002157e9d1301b5d49db6b1a933a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [521, 522],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 521,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "4efcef93c4d5d8966d7971305e88fc8feecc125541a956cfd56afe3e66d6a8dc",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [523, 524],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 523,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "1c8744578bfc7e629219e200f971e6da895663723b84b7bb268d1f1f0b9e524f",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [236],
    "outputIds": [525, 526],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 525,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "addb91d36b9610286bda84a43b1c0aefced6c55ecb493c229fff76fef3598385",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [527],
    "primaryOutputId": 527,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/rstudio/test_rstudio.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//rstudio:test_rstudio"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 28,
    "actionKey": "e5402e8ed7fc0ccf1a20d771a43746a51f590c7a4dd3cdaea6a23dfa8959f807",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [528],
    "primaryOutputId": 528,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "acd082b6f2223d2f81f7ba25a2d2b773892ba9cb6aeeb56284f367ba608733e0",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [237],
    "outputIds": [529],
    "primaryOutputId": 529,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [238],
    "outputIds": [532],
    "primaryOutputId": 532,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "9c328af509ade2c10e5fc08e347bb40ece277d4539459f8b92dc5b3952146277",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [533],
    "primaryOutputId": 533,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/rstudio/test_rstudio.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//rstudio:test_rstudio"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 28,
    "actionKey": "3f431a35004d4b0344ad9d07667aaad9920785f8cbfe1f26928df7f082b9e3cb",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [242],
    "outputIds": [534],
    "primaryOutputId": 534,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "08fcda98b4dfbb49cc5aa583d437795dd1ed831647c8939f78b665644aa6f175",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [244],
    "outputIds": [535, 536],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 535,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "fcc6b6557189f6b7ae288aa1e24617116bd26283e5e34f3fe3df20f5f89092ff",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [244],
    "outputIds": [537, 538],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 537,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "50e2e0a6a8119b6d76532bf18144800ee643cf9203bedb190b3d555e1c05054a",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [244],
    "outputIds": [539, 540],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 539,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "9ac6b23ae592bb155d34f58d4677cd798f3d04592d1a4128ebc724c8e4311d64",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [244],
    "outputIds": [541, 542],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 541,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "63c90114c0880d9940774f75371c4fbc90b29619ddc990700fbfdbde26ee9eb5",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [543],
    "primaryOutputId": 543,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/ranger/test_ranger.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//ranger:test_ranger"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 29,
    "actionKey": "c9462c54911dd9d01b9dce6cb872a71e32db605ae372a3902b0efb18b571f213",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [544],
    "primaryOutputId": 544,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "409dbfb2e3f108c99acf28c8d4b61c7529620b9874d38f39993d7d227c8f3cf2",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [245],
    "outputIds": [545],
    "primaryOutputId": 545,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [246],
    "outputIds": [549],
    "primaryOutputId": 549,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "f3e62b76dab5425dc0f63a66a4b967af40b4856862a5c7f83debea850d503b08",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [550],
    "primaryOutputId": 550,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/ranger/test_ranger.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//ranger:test_ranger"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 29,
    "actionKey": "a971c5cdfc357afc0713553cb73f72df551bc47403ee284320399d784e490c8e",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [250],
    "outputIds": [551],
    "primaryOutputId": 551,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "bf130b244da844c3d97d215c1fd6462a5783871501454f728b8f0795b776783d",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [252],
    "outputIds": [552, 553],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 552,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "74758d4853397e4ab240fc747886c9ffc78e734538e3387962401c6cf032e109",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [252],
    "outputIds": [554, 555],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 554,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "d6e286431770989f567a031190c5207b6440aae3f654a83cd113366ea3202551",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [252],
    "outputIds": [556, 557],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 556,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "3427d61f27c1538155fbd1985355cec68159bd0f9a8282b3685c9ec3063a954f",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [558],
    "primaryOutputId": 558,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/conda/test_conda.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//conda:test_conda"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 30,
    "actionKey": "1d2b664396a2d6e88949a180b8b0dda69d4d9bcbe8a81eedde082434a5b0f07d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [559],
    "primaryOutputId": 559,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "e3e31f050ff7b9dda20157e6d927e00f40e32709ea8e64681e99afcd4a8ec01a",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [253],
    "outputIds": [560],
    "primaryOutputId": 560,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [254],
    "outputIds": [564],
    "primaryOutputId": 564,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "b118ec33b6a02063df763493c2a0e3144bdbe66128fd69943180aa658605c93b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [565],
    "primaryOutputId": 565,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/conda/test_conda.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//conda:test_conda"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 30,
    "actionKey": "ddf5a6d5a92ff5aafc664a41ab72249400dd088fb1e7d6da3cd98be3286c0d0d",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [258],
    "outputIds": [566],
    "primaryOutputId": 566,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "588d7dd1ac6755e4dae423eea84b7a0da0378768df88f785d84d739ea7a1ee70",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [260],
    "outputIds": [567, 568],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 567,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "67799f0759c61375cf857c69d397f08f72309e45944dea88d1934bebf323dbfe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [260],
    "outputIds": [569, 570],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 569,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "8c4ae1b4b66da16277669c499162caf6a511de9f06fdbecb635dd041dd57fb87",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [571],
    "primaryOutputId": 571,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/atlas/test_atlas.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//atlas:test_atlas"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 31,
    "actionKey": "e925fc2e9d122ec3e4734e973c96791438eb6a5d714e167b1a4e22d6103c07d5",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [572],
    "primaryOutputId": 572,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "f3a7e3b1b2bf99063fdccfdf8027e328316e7dd4cc42ae38c88f6078c0c68512",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [261],
    "outputIds": [573],
    "primaryOutputId": 573,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [262],
    "outputIds": [578],
    "primaryOutputId": 578,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "5805b1a1489a7b3533bd7cc7cca77564fba950a0aa5558fa1cfa84eef0872f82",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [579],
    "primaryOutputId": 579,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/atlas/test_atlas.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//atlas:test_atlas"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 31,
    "actionKey": "b2c07911fed3427ae3cc53859a60fa3650ee11aa112aefd6328c8e5b0b2e2689",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [266],
    "outputIds": [580],
    "primaryOutputId": 580,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "d8a4f9ed1ed7c05dab3db6adfeb85211ff30362dc26191698bdee5ba58644835",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [581, 582],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 581,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "cc4228a079d93b7f28662bff728c9a4684a3514aa35f54a4ecc69ea6ca582cfd",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [583, 584],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 583,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "7575477671513a0bbbfaf316e3acd39aa8ade0ad6a075e5337c4752a54dfffe8",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [585, 586],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 585,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "82e88f03194f97c7d180d6c5446ea101fa3397594219ab03b1ed535cefc44afe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [587, 588],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 587,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "148448fc7321cc28f304e0a7619832caea785e9d268555a492326ad6004454b4",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [589, 590],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 589,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "1d21aafca5765c328abb89b9c29f88817a0acc0293c4c74499ce5605f2b81272",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [591, 592],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 591,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "64c204e8f91b05b6cebca6cfb4c41f405a82c9e4bd6139eb29e97cffe5e77aa8",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [268],
    "outputIds": [593, 594],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 593,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "81deb9f59bcba400a5e25f23ea52695a422ce528058687cc3573ca73e7e00d2b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [595],
    "primaryOutputId": 595,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/alluxio/test_alluxio.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "False"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//alluxio:test_alluxio"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 32,
    "actionKey": "c7217f67b02898f8abc52452255677cdf5460cf52177ebc59b0739fe767b4ced",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [596],
    "primaryOutputId": 596,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "971810e22a2c118bc87eefa24e0232a71890be1f2a9860f58061607dd465bd71",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [269],
    "outputIds": [597],
    "primaryOutputId": 597,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [270],
    "outputIds": [600],
    "primaryOutputId": 600,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "c1c442cd64a67c8ee6fe82904ef8f6e22c05e456728064b174bd6c43d299e732",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [601],
    "primaryOutputId": 601,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "%shebang%\n\n# This script must retain compatibility with a wide variety of Python versions\n# since it is run for every py_binary target. Currently we guarantee support\n# going back to Python 2.7, and try to support even Python 2.6 on a best-effort\n# basis. We might abandon 2.6 support once users have the ability to control the\n# above shebang string via the Python toolchain (#8685).\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\n\n# The Python interpreter unconditionally prepends the directory containing this\n# script (following symlinks) to the import path. This is the cause of #9239,\n# and is a special case of #7091. We therefore explicitly delete that entry.\n# TODO(#7091): Remove this hack when no longer necessary.\ndel sys.path[0]\n\nimport os\nimport subprocess\n\ndef IsRunningFromZip():\n  return %is_zipfile%\n\nif IsRunningFromZip():\n  import shutil\n  import tempfile\n  import zipfile\nelse:\n  import re\n\n# Return True if running on Windows\ndef IsWindows():\n  return os.name \u003d\u003d \u0027nt\u0027\n\ndef GetWindowsPathWithUNCPrefix(path):\n  \"\"\"Adds UNC prefix after getting a normalized absolute Windows path.\n\n  No-op for non-Windows platforms or if running under python2.\n  \"\"\"\n  path \u003d path.strip()\n\n  # No need to add prefix for non-Windows platforms.\n  # And \\\\?\\ doesn\u0027t work in python 2 or on mingw\n  if not IsWindows() or sys.version_info[0] \u003c 3:\n    return path\n\n  # Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been\n  # removed from common Win32 file and directory functions.\n  # Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs\u003dcmd#enable-long-paths-in-windows-10-version-1607-and-later\n  import platform\n  if platform.win32_ver()[1] \u003e\u003d \u002710.0.14393\u0027:\n    return path\n\n  # import sysconfig only now to maintain python 2.6 compatibility\n  import sysconfig\n  if sysconfig.get_platform() \u003d\u003d \u0027mingw\u0027:\n    return path\n\n  # Lets start the unicode fun\n  unicode_prefix \u003d \u0027\\\\\\\\?\\\\\u0027\n  if path.startswith(unicode_prefix):\n    return path\n\n  # os.path.abspath returns a normalized absolute path\n  return unicode_prefix + os.path.abspath(path)\n\ndef HasWindowsExecutableExtension(path):\n  return path.endswith(\u0027.exe\u0027) or path.endswith(\u0027.com\u0027) or path.endswith(\u0027.bat\u0027)\n\nPYTHON_BINARY \u003d \u0027%python_binary%\u0027\nif IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):\n  PYTHON_BINARY \u003d PYTHON_BINARY + \u0027.exe\u0027\n\ndef SearchPath(name):\n  \"\"\"Finds a file in a given search path.\"\"\"\n  search_path \u003d os.getenv(\u0027PATH\u0027, os.defpath).split(os.pathsep)\n  for directory in search_path:\n    if directory:\n      path \u003d os.path.join(directory, name)\n      if os.path.isfile(path) and os.access(path, os.X_OK):\n        return path\n  return None\n\ndef FindPythonBinary(module_space):\n  \"\"\"Finds the real Python binary if it\u0027s not a normal absolute path.\"\"\"\n  return FindBinary(module_space, PYTHON_BINARY)\n\ndef PrintVerboseCoverage(*args):\n  \"\"\"Print output if VERBOSE_COVERAGE is non-empty in the environment.\"\"\"\n  if os.environ.get(\"VERBOSE_COVERAGE\"):\n    print(*args, file\u003dsys.stderr)\n\ndef FindCoverageEntryPoint(module_space):\n  cov_tool \u003d \u0027%coverage_tool%\u0027\n  if cov_tool:\n    PrintVerboseCoverage(\u0027Using toolchain coverage_tool %r\u0027 % cov_tool)\n  else:\n    cov_tool \u003d os.environ.get(\u0027PYTHON_COVERAGE\u0027)\n    if cov_tool:\n      PrintVerboseCoverage(\u0027PYTHON_COVERAGE: %r\u0027 % cov_tool)\n  if cov_tool:\n    return FindBinary(module_space, cov_tool)\n  return None\n\ndef FindBinary(module_space, bin_name):\n  \"\"\"Finds the real binary if it\u0027s not a normal absolute path.\"\"\"\n  if not bin_name:\n    return None\n  if bin_name.startswith(\"//\"):\n    # Case 1: Path is a label. Not supported yet.\n    raise AssertionError(\n        \"Bazel does not support execution of Python interpreters via labels yet\"\n    )\n  elif os.path.isabs(bin_name):\n    # Case 2: Absolute path.\n    return bin_name\n  # Use normpath() to convert slashes to os.sep on Windows.\n  elif os.sep in os.path.normpath(bin_name):\n    # Case 3: Path is relative to the repo root.\n    return os.path.join(module_space, bin_name)\n  else:\n    # Case 4: Path has to be looked up in the search path.\n    return SearchPath(bin_name)\n\ndef CreatePythonPathEntries(python_imports, module_space):\n  parts \u003d python_imports.split(\u0027:\u0027)\n  return [module_space] + [\u0027%s/%s\u0027 % (module_space, path) for path in parts]\n\ndef FindModuleSpace(main_rel_path):\n  \"\"\"Finds the runfiles tree.\"\"\"\n  # When the calling process used the runfiles manifest to resolve the\n  # location of this stub script, the path may be expanded. This means\n  # argv[0] may no longer point to a location inside the runfiles\n  # directory. We should therefore respect RUNFILES_DIR and\n  # RUNFILES_MANIFEST_FILE set by the caller.\n  runfiles_dir \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if not runfiles_dir:\n    runfiles_manifest_file \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, \u0027\u0027)\n    if (runfiles_manifest_file.endswith(\u0027.runfiles_manifest\u0027) or\n        runfiles_manifest_file.endswith(\u0027.runfiles/MANIFEST\u0027)):\n      runfiles_dir \u003d runfiles_manifest_file[:-9]\n  # Be defensive: the runfiles dir should contain our main entry point. If\n  # it doesn\u0027t, then it must not be our runfiles directory.\n  if runfiles_dir and os.path.exists(os.path.join(runfiles_dir, main_rel_path)):\n    return runfiles_dir\n\n  stub_filename \u003d sys.argv[0]\n  if not os.path.isabs(stub_filename):\n    stub_filename \u003d os.path.join(os.getcwd(), stub_filename)\n\n  while True:\n    module_space \u003d stub_filename + (\u0027.exe\u0027 if IsWindows() else \u0027\u0027) + \u0027.runfiles\u0027\n    if os.path.isdir(module_space):\n      return module_space\n\n    runfiles_pattern \u003d r\u0027(.*\\.runfiles)\u0027 + (r\u0027\\\\\u0027 if IsWindows() else \u0027/\u0027) + \u0027.*\u0027\n    matchobj \u003d re.match(runfiles_pattern, stub_filename)\n    if matchobj:\n      return matchobj.group(1)\n\n    if not os.path.islink(stub_filename):\n      break\n    target \u003d os.readlink(stub_filename)\n    if os.path.isabs(target):\n      stub_filename \u003d target\n    else:\n      stub_filename \u003d os.path.join(os.path.dirname(stub_filename), target)\n\n  raise AssertionError(\u0027Cannot find .runfiles directory for %s\u0027 % sys.argv[0])\n\ndef ExtractZip(zip_path, dest_dir):\n  \"\"\"Extracts the contents of a zip file, preserving the unix file mode bits.\n\n  These include the permission bits, and in particular, the executable bit.\n\n  Ideally the zipfile module should set these bits, but it doesn\u0027t. See:\n  https://bugs.python.org/issue15795.\n\n  Args:\n      zip_path: The path to the zip file to extract\n      dest_dir: The path to the destination directory\n  \"\"\"\n  zip_path \u003d GetWindowsPathWithUNCPrefix(zip_path)\n  dest_dir \u003d GetWindowsPathWithUNCPrefix(dest_dir)\n  with zipfile.ZipFile(zip_path) as zf:\n    for info in zf.infolist():\n      zf.extract(info, dest_dir)\n      # UNC-prefixed paths must be absolute/normalized. See\n      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation\n      file_path \u003d os.path.abspath(os.path.join(dest_dir, info.filename))\n      # The Unix st_mode bits (see \"man 7 inode\") are stored in the upper 16\n      # bits of external_attr. Of those, we set the lower 12 bits, which are the\n      # file mode bits (since the file type bits can\u0027t be set by chmod anyway).\n      attrs \u003d info.external_attr \u003e\u003e 16\n      if attrs !\u003d 0:  # Rumor has it these can be 0 for zips created on Windows.\n        os.chmod(file_path, attrs \u0026 0o7777)\n\n# Create the runfiles tree by extracting the zip file\ndef CreateModuleSpace():\n  temp_dir \u003d tempfile.mkdtemp(\u0027\u0027, \u0027Bazel.runfiles_\u0027)\n  ExtractZip(os.path.dirname(__file__), temp_dir)\n  # IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it\u0027s\n  # important that deletion code be in sync with this directory structure\n  return os.path.join(temp_dir, \u0027runfiles\u0027)\n\n# Returns repository roots to add to the import path.\ndef GetRepositoriesImports(module_space, import_all):\n  if import_all:\n    repo_dirs \u003d [os.path.join(module_space, d) for d in os.listdir(module_space)]\n    repo_dirs.sort()\n    return [d for d in repo_dirs if os.path.isdir(d)]\n  return [os.path.join(module_space, \u0027%workspace_name%\u0027)]\n\ndef RunfilesEnvvar(module_space):\n  \"\"\"Finds the runfiles manifest or the runfiles directory.\n\n  Returns:\n    A tuple of (var_name, var_value) where var_name is either \u0027RUNFILES_DIR\u0027 or\n    \u0027RUNFILES_MANIFEST_FILE\u0027 and var_value is the path to that directory or\n    file, or (None, None) if runfiles couldn\u0027t be found.\n  \"\"\"\n  # If this binary is the data-dependency of another one, the other sets\n  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.\n  runfiles \u003d os.environ.get(\u0027RUNFILES_MANIFEST_FILE\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  runfiles \u003d os.environ.get(\u0027RUNFILES_DIR\u0027, None)\n  if runfiles:\n    return (\u0027RUNFILES_DIR\u0027, runfiles)\n\n  # If running from a zip, there\u0027s no manifest file.\n  if IsRunningFromZip():\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  # Look for the runfiles \"output\" manifest, argv[0] + \".runfiles_manifest\"\n  runfiles \u003d module_space + \u0027_manifest\u0027\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # Look for the runfiles \"input\" manifest, argv[0] + \".runfiles/MANIFEST\"\n  # Normally .runfiles_manifest and MANIFEST are both present, but the\n  # former will be missing for zip-based builds or if someone copies the\n  # runfiles tree elsewhere.\n  runfiles \u003d os.path.join(module_space, \u0027MANIFEST\u0027)\n  if os.path.exists(runfiles):\n    return (\u0027RUNFILES_MANIFEST_FILE\u0027, runfiles)\n\n  # If running in a sandbox and no environment variables are set, then\n  # Look for the runfiles  next to the binary.\n  if module_space.endswith(\u0027.runfiles\u0027) and os.path.isdir(module_space):\n    return (\u0027RUNFILES_DIR\u0027, module_space)\n\n  return (None, None)\n\ndef Deduplicate(items):\n  \"\"\"Efficiently filter out duplicates, keeping the first element only.\"\"\"\n  seen \u003d set()\n  for it in items:\n      if it not in seen:\n          seen.add(it)\n          yield it\n\ndef InstrumentedFilePaths():\n  \"\"\"Yields tuples of realpath of each instrumented file with the relative path.\"\"\"\n  manifest_filename \u003d os.environ.get(\u0027COVERAGE_MANIFEST\u0027)\n  if not manifest_filename:\n    return\n  with open(manifest_filename, \"r\") as manifest:\n    for line in manifest:\n      filename \u003d line.strip()\n      if not filename:\n        continue\n      try:\n        realpath \u003d os.path.realpath(filename)\n      except OSError:\n        print(\n          \"Could not find instrumented file {}\".format(filename),\n          file\u003dsys.stderr)\n        continue\n      if realpath !\u003d filename:\n        PrintVerboseCoverage(\"Fixing up {} -\u003e {}\".format(realpath, filename))\n        yield (realpath, filename)\n\ndef UnresolveSymlinks(output_filename):\n  # type: (str) -\u003e None\n  \"\"\"Replace realpath of instrumented files with the relative path in the lcov output.\n\n  Though we are asking coveragepy to use relative file names, currently\n  ignore that for purposes of generating the lcov report (and other reports\n  which are not the XML report), so we need to go and fix up the report.\n\n  This function is a workaround for that issue. Once that issue is fixed\n  upstream and the updated version is widely in use, this should be removed.\n\n  See https://github.com/nedbat/coveragepy/issues/963.\n  \"\"\"\n  substitutions \u003d list(InstrumentedFilePaths())\n  if substitutions:\n    unfixed_file \u003d output_filename + \u0027.tmp\u0027\n    os.rename(output_filename, unfixed_file)\n    with open(unfixed_file, \"r\") as unfixed:\n      with open(output_filename, \"w\") as output_file:\n        for line in unfixed:\n          if line.startswith(\u0027SF:\u0027):\n            for (realpath, filename) in substitutions:\n              line \u003d line.replace(realpath, filename)\n          output_file.write(line)\n    os.unlink(unfixed_file)\n\ndef ExecuteFile(python_program, main_filename, args, env, module_space,\n                coverage_entrypoint, workspace, delete_module_space):\n  # type: (str, str, list[str], dict[str, str], str, str|None, str|None) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\n\n  This will not return, and acts much like os.execv, except is much\n  more restricted, and handles Bazel-related edge cases.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    module_space: (str) Path to the module space/runfiles tree directory\n    coverage_entrypoint: (str|None) Path to the coverage tool entry point file.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree.\n    delete_module_space: (bool), True if the module space should be deleted\n        after a successful (exit code zero) program run, False if not.\n  \"\"\"\n  # We want to use os.execv instead of subprocess.call, which causes\n  # problems with signal passing (making it difficult to kill\n  # Bazel). However, these conditions force us to run via\n  # subprocess.call instead:\n  #\n  # - On Windows, os.execv doesn\u0027t handle arguments with spaces\n  #   correctly, and it actually starts a subprocess just like\n  #   subprocess.call.\n  # - When running in a workspace or zip file, we need to clean up the\n  #   workspace after the process finishes so control must return here.\n  # - If we may need to emit a host config warning after execution, we\n  #   can\u0027t execv because we need control to return here. This only\n  #   happens for targets built in the host config.\n  # - For coverage targets, at least coveragepy requires running in\n  #   two invocations, which also requires control to return here.\n  #\n  if not (IsWindows() or workspace or coverage_entrypoint or delete_module_space):\n    _RunExecv(python_program, main_filename, args, env)\n\n  if coverage_entrypoint is not None:\n    ret_code \u003d _RunForCoverage(python_program, main_filename, args, env,\n                               coverage_entrypoint, workspace)\n  else:\n    ret_code \u003d subprocess.call(\n      [python_program, main_filename] + args,\n      env\u003denv,\n      cwd\u003dworkspace\n    )\n\n  if delete_module_space:\n    # NOTE: dirname() is called because CreateModuleSpace() creates a\n    # sub-directory within a temporary directory, and we want to remove the\n    # whole temporary directory.\n    shutil.rmtree(os.path.dirname(module_space), True)\n  sys.exit(ret_code)\n\ndef _RunExecv(python_program, main_filename, args, env):\n  # type: (str, str, list[str], dict[str, str]) -\u003e ...\n  \"\"\"Executes the given Python file using the various environment settings.\"\"\"\n  os.environ.update(env)\n  os.execv(python_program, [python_program, main_filename] + args)\n\ndef _RunForCoverage(python_program, main_filename, args, env,\n                    coverage_entrypoint, workspace):\n  # type: (str, str, list[str], dict[str, str], str, str|None) -\u003e int\n  \"\"\"Collects coverage infomration for the given Python file.\n\n  Args:\n    python_program: (str) Path to the Python binary to use for execution\n    main_filename: (str) The Python file to execute\n    args: (list[str]) Additional args to pass to the Python file\n    env: (dict[str, str]) A dict of environment variables to set for the execution\n    coverage_entrypoint: (str|None) Path to the coverage entry point to execute with.\n    workspace: (str|None) Name of the workspace to execute in. This is expected to be a\n        directory under the runfiles tree, and will recursively delete the\n        runfiles directory if set.\n  \"\"\"\n  # We need for coveragepy to use relative paths.  This can only be configured\n  # via an rc file, so we need to make one.\n  rcfile_name \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027.coveragerc\u0027)\n  with open(rcfile_name, \"w\") as rcfile:\n    rcfile.write(\u0027\u0027\u0027[run]\nrelative_files \u003d True\n\u0027\u0027\u0027)\n  PrintVerboseCoverage(\u0027Coverage entrypoint:\u0027, coverage_entrypoint)\n  # First run the target Python file via coveragepy to create a .coverage\n  # database file, from which we can later export lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"run\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"--append\",\n      \"--branch\",\n      main_filename\n    ] + args,\n    env\u003denv,\n    cwd\u003dworkspace\n  )\n  output_filename \u003d os.path.join(os.environ[\u0027COVERAGE_DIR\u0027], \u0027pylcov.dat\u0027)\n\n  PrintVerboseCoverage(\u0027Converting coveragepy database to lcov:\u0027, output_filename)\n  # Run coveragepy again to convert its .coverage database file into lcov.\n  ret_code \u003d subprocess.call(\n    [\n      python_program,\n      coverage_entrypoint,\n      \"lcov\",\n      \"--rcfile\u003d\" + rcfile_name,\n      \"-o\",\n      output_filename\n    ],\n    env\u003denv,\n    cwd\u003dworkspace\n  ) or ret_code\n  try:\n    os.unlink(rcfile_name)\n  except OSError as err:\n    # It\u0027s possible that the profiled program might execute another Python\n    # binary through a wrapper that would then delete the rcfile.  Not much\n    # we can do about that, besides ignore the failure here.\n    PrintVerboseCoverage(\u0027Error removing temporary coverage rc file:\u0027, err)\n  if os.path.isfile(output_filename):\n    UnresolveSymlinks(output_filename)\n  return ret_code\n\ndef Main():\n  args \u003d sys.argv[1:]\n\n  new_env \u003d {}\n\n  # The main Python source file.\n  # The magic string percent-main-percent is replaced with the runfiles-relative\n  # filename of the main file of the Python binary in BazelPythonSemantics.java.\n  main_rel_path \u003d \u0027%main%\u0027\n  if IsWindows():\n    main_rel_path \u003d main_rel_path.replace(\u0027/\u0027, os.sep)\n\n  if IsRunningFromZip():\n    module_space \u003d CreateModuleSpace()\n    delete_module_space \u003d True\n  else:\n    module_space \u003d FindModuleSpace(main_rel_path)\n    delete_module_space \u003d False\n\n  python_imports \u003d \u0027%imports%\u0027\n  python_path_entries \u003d CreatePythonPathEntries(python_imports, module_space)\n  python_path_entries +\u003d GetRepositoriesImports(module_space, %import_all%)\n  # Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,\n  # keep first occurrence only.\n  python_path_entries \u003d [\n    GetWindowsPathWithUNCPrefix(d)\n    for d in python_path_entries\n  ]\n\n  old_python_path \u003d os.environ.get(\u0027PYTHONPATH\u0027)\n  if old_python_path:\n    python_path_entries +\u003d old_python_path.split(os.pathsep)\n\n  python_path \u003d os.pathsep.join(Deduplicate(python_path_entries))\n\n  if IsWindows():\n    python_path \u003d python_path.replace(\u0027/\u0027, os.sep)\n\n  new_env[\u0027PYTHONPATH\u0027] \u003d python_path\n  runfiles_envkey, runfiles_envvalue \u003d RunfilesEnvvar(module_space)\n  if runfiles_envkey:\n    new_env[runfiles_envkey] \u003d runfiles_envvalue\n\n  # Don\u0027t prepend a potentially unsafe path to sys.path\n  # See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH\n  new_env[\u0027PYTHONSAFEPATH\u0027] \u003d \u00271\u0027\n\n  main_filename \u003d os.path.join(module_space, main_rel_path)\n  main_filename \u003d GetWindowsPathWithUNCPrefix(main_filename)\n  assert os.path.exists(main_filename), \\\n         \u0027Cannot exec() %r: file not found.\u0027 % main_filename\n  assert os.access(main_filename, os.R_OK), \\\n         \u0027Cannot exec() %r: file not readable.\u0027 % main_filename\n\n  program \u003d python_program \u003d FindPythonBinary(module_space)\n  if python_program is None:\n    raise AssertionError(\u0027Could not find python binary: \u0027 + PYTHON_BINARY)\n\n  # COVERAGE_DIR is set if coverage is enabled and instrumentation is configured\n  # for something, though it could be another program executing this one or\n  # one executed by this one (e.g. an extension module).\n  if os.environ.get(\u0027COVERAGE_DIR\u0027):\n    cov_tool \u003d FindCoverageEntryPoint(module_space)\n    if cov_tool is None:\n      PrintVerboseCoverage(\u0027Coverage was enabled, but python coverage tool was not configured.\u0027)\n    else:\n      # Inhibit infinite recursion:\n      if \u0027PYTHON_COVERAGE\u0027 in os.environ:\n        del os.environ[\u0027PYTHON_COVERAGE\u0027]\n\n      if not os.path.exists(cov_tool):\n        raise EnvironmentError(\n          \u0027Python coverage tool %r not found. \u0027\n          \u0027Try running with VERBOSE_COVERAGE\u003d1 to collect more information.\u0027\n          % cov_tool\n        )\n\n      # coverage library expects sys.path[0] to contain the library, and replaces\n      # it with the directory of the program it starts. Our actual sys.path[0] is\n      # the runfiles directory, which must not be replaced.\n      # CoverageScript.do_execute() undoes this sys.path[0] setting.\n      #\n      # Update sys.path such that python finds the coverage package. The coverage\n      # entry point is coverage.coverage_main, so we need to do twice the dirname.\n      python_path_entries \u003d new_env[\u0027PYTHONPATH\u0027].split(os.pathsep)\n      python_path_entries.append(os.path.dirname(os.path.dirname(cov_tool)))\n      new_env[\u0027PYTHONPATH\u0027] \u003d os.pathsep.join(Deduplicate(python_path_entries))\n  else:\n    cov_tool \u003d None\n\n  new_env.update((key, val) for key, val in os.environ.items() if key not in new_env)\n\n  workspace \u003d None\n  if IsRunningFromZip():\n    # If RUN_UNDER_RUNFILES equals 1, it means we need to\n    # change directory to the right runfiles directory.\n    # (So that the data files are accessible)\n    if os.environ.get(\u0027RUN_UNDER_RUNFILES\u0027) \u003d\u003d \u00271\u0027:\n      workspace \u003d os.path.join(module_space, \u0027%workspace_name%\u0027)\n\n  try:\n    sys.stdout.flush()\n    # NOTE: ExecuteFile may call execve() and lines after this will never run.\n    ExecuteFile(\n      python_program, main_filename, args, new_env, module_space,\n      cov_tool, workspace,\n      delete_module_space \u003d delete_module_space,\n    )\n\n  except EnvironmentError:\n    # This works from Python 2.4 all the way to 3.x.\n    e \u003d sys.exc_info()[1]\n    # This exception occurs when os.execv() fails for some reason.\n    if not getattr(e, \u0027filename\u0027, None):\n      e.filename \u003d program  # Add info to error message\n    raise\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n  Main()\n",
    "substitutions": [{
      "key": "%shebang%",
      "value": "#!/usr/bin/env python3"
    }, {
      "key": "%main%",
      "value": "__main__/alluxio/test_alluxio.py"
    }, {
      "key": "%python_binary%",
      "value": "bazel_tools/tools/python/py3wrapper.sh"
    }, {
      "key": "%coverage_tool%"
    }, {
      "key": "%imports%"
    }, {
      "key": "%workspace_name%",
      "value": "__main__"
    }, {
      "key": "%is_zipfile%",
      "value": "True"
    }, {
      "key": "%import_all%",
      "value": "True"
    }, {
      "key": "%target%",
      "value": "//alluxio:test_alluxio"
    }, {
      "key": "%python_version_from_config%",
      "value": "\"3\""
    }, {
      "key": "%python_version_from_attr%",
      "value": "\"3\""
    }, {
      "key": "%python_version_specified_explicitly%",
      "value": "False"
    }]
  }, {
    "targetId": 32,
    "actionKey": "df04598c1390a29a52a61d81aae5a6fdc1393086e3ea4a5556499e9c4a4c983e",
    "mnemonic": "PythonZipper",
    "configurationId": 1,
    "inputDepSetIds": [274],
    "outputIds": [602],
    "primaryOutputId": 602,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "588d7dd1ac6755e4dae423eea84b7a0da0378768df88f785d84d739ea7a1ee70",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [276],
    "outputIds": [603, 604],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 603,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "67799f0759c61375cf857c69d397f08f72309e45944dea88d1934bebf323dbfe",
    "mnemonic": "TestRunner",
    "configurationId": 1,
    "inputDepSetIds": [276],
    "outputIds": [605, 606],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 605,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "655aeb4dd55b9117514abac3731c7cfda9bc04fd4c4be43fa4480238ea5e7f4d",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "inputDepSetIds": [277],
    "outputIds": [608],
    "primaryOutputId": 608,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: external/bazel_tools/tools/python/pywrapper_template.txt",
    "substitutions": [{
      "key": "%VERSION%",
      "value": "2"
    }, {
      "key": "%STRICT%",
      "value": "1"
    }]
  }, {
    "targetId": 33,
    "actionKey": "8f868f2f7554dae4c01bb55ff3220e40178651bcf67301a027491dbdd470c326",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "inputDepSetIds": [277],
    "outputIds": [29],
    "primaryOutputId": 29,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: external/bazel_tools/tools/python/pywrapper_template.txt",
    "substitutions": [{
      "key": "%VERSION%",
      "value": "3"
    }, {
      "key": "%STRICT%",
      "value": "1"
    }]
  }, {
    "targetId": 33,
    "actionKey": "95b0222542640f8378cca607abc38965df59a7778217eca42122159fc62012a9",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "inputDepSetIds": [277],
    "outputIds": [609],
    "primaryOutputId": 609,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: external/bazel_tools/tools/python/pywrapper_template.txt",
    "substitutions": [{
      "key": "%VERSION%",
      "value": "2"
    }, {
      "key": "%STRICT%",
      "value": "0"
    }]
  }, {
    "targetId": 33,
    "actionKey": "419886b344f52b0244eb1a35cb420ede7d5aa3014e95c96ba9135514d3db12f1",
    "mnemonic": "TemplateExpand",
    "configurationId": 2,
    "inputDepSetIds": [277],
    "outputIds": [610],
    "primaryOutputId": 610,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: external/bazel_tools/tools/python/pywrapper_template.txt",
    "substitutions": [{
      "key": "%VERSION%",
      "value": "3"
    }, {
      "key": "%STRICT%",
      "value": "0"
    }]
  }],
  "targets": [{
    "id": 1,
    "label": "//:test_hive_hcatalog",
    "ruleClassId": 1
  }, {
    "id": 2,
    "label": "//:test_starburst_presto",
    "ruleClassId": 1
  }, {
    "id": 3,
    "label": "//:test_dr_elephant",
    "ruleClassId": 1
  }, {
    "id": 4,
    "label": "//:test_spark_rapids",
    "ruleClassId": 1
  }, {
    "id": 5,
    "label": "//:test_cloud_sql_proxy",
    "ruleClassId": 1
  }, {
    "id": 6,
    "label": "//:test_hive_llap",
    "ruleClassId": 1
  }, {
    "id": 7,
    "label": "//rapids:test_rapids",
    "ruleClassId": 1
  }, {
    "id": 8,
    "label": "//connectors:test_connectors",
    "ruleClassId": 1
  }, {
    "id": 9,
    "label": "//flink:test_flink",
    "ruleClassId": 1
  }, {
    "id": 10,
    "label": "//mlvm:test_mlvm",
    "ruleClassId": 1
  }, {
    "id": 11,
    "label": "//oozie:test_oozie",
    "ruleClassId": 1
  }, {
    "id": 12,
    "label": "//tony:test_tony",
    "ruleClassId": 1
  }, {
    "id": 13,
    "label": "//presto:test_presto",
    "ruleClassId": 1
  }, {
    "id": 14,
    "label": "//solr:test_solr",
    "ruleClassId": 1
  }, {
    "id": 15,
    "label": "//ganglia:test_ganglia",
    "ruleClassId": 1
  }, {
    "id": 16,
    "label": "//dask:test_dask",
    "ruleClassId": 1
  }, {
    "id": 17,
    "label": "//hbase:test_hbase",
    "ruleClassId": 1
  }, {
    "id": 18,
    "label": "//sqoop:test_sqoop",
    "ruleClassId": 1
  }, {
    "id": 19,
    "label": "//hue:test_hue",
    "ruleClassId": 1
  }, {
    "id": 20,
    "label": "//h2o:test_h2o",
    "ruleClassId": 1
  }, {
    "id": 21,
    "label": "//bigtable:test_bigtable",
    "ruleClassId": 1
  }, {
    "id": 22,
    "label": "//horovod:test_horovod",
    "ruleClassId": 1
  }, {
    "id": 23,
    "label": "//kafka:test_kafka",
    "ruleClassId": 1
  }, {
    "id": 24,
    "label": "//drill:test_drill",
    "ruleClassId": 1
  }, {
    "id": 25,
    "label": "//knox:test_knox",
    "ruleClassId": 1
  }, {
    "id": 26,
    "label": "//livy:test_livy",
    "ruleClassId": 1
  }, {
    "id": 27,
    "label": "//gpu:test_gpu",
    "ruleClassId": 1
  }, {
    "id": 28,
    "label": "//rstudio:test_rstudio",
    "ruleClassId": 1
  }, {
    "id": 29,
    "label": "//ranger:test_ranger",
    "ruleClassId": 1
  }, {
    "id": 30,
    "label": "//conda:test_conda",
    "ruleClassId": 1
  }, {
    "id": 31,
    "label": "//atlas:test_atlas",
    "ruleClassId": 1
  }, {
    "id": 32,
    "label": "//alluxio:test_alluxio",
    "ruleClassId": 1
  }, {
    "id": 33,
    "label": "@bazel_tools//tools/python:_generate_wrappers",
    "ruleClassId": 2
  }],
  "depSetOfFiles": [{
    "id": 1,
    "directArtifactIds": [2]
  }, {
    "id": 5,
    "directArtifactIds": [4, 1]
  }, {
    "id": 9,
    "directArtifactIds": [5, 6]
  }, {
    "id": 8,
    "transitiveDepSetIds": [9],
    "directArtifactIds": [7, 6]
  }, {
    "id": 11,
    "transitiveDepSetIds": [9],
    "directArtifactIds": [8]
  }, {
    "id": 13,
    "directArtifactIds": [9, 6]
  }, {
    "id": 12,
    "transitiveDepSetIds": [8, 11, 9, 13],
    "directArtifactIds": [10, 6]
  }, {
    "id": 14,
    "transitiveDepSetIds": [11, 12, 9],
    "directArtifactIds": [11, 6]
  }, {
    "id": 15,
    "transitiveDepSetIds": [11, 14],
    "directArtifactIds": [12]
  }, {
    "id": 10,
    "transitiveDepSetIds": [8, 11, 12, 14, 9, 15],
    "directArtifactIds": [13]
  }, {
    "id": 7,
    "transitiveDepSetIds": [8, 10, 11, 12, 14, 9, 15],
    "directArtifactIds": [14, 6]
  }, {
    "id": 20,
    "directArtifactIds": [15, 6]
  }, {
    "id": 21,
    "directArtifactIds": [16, 6]
  }, {
    "id": 19,
    "transitiveDepSetIds": [20, 21],
    "directArtifactIds": [17]
  }, {
    "id": 18,
    "transitiveDepSetIds": [19],
    "directArtifactIds": [18]
  }, {
    "id": 22,
    "transitiveDepSetIds": [18, 19],
    "directArtifactIds": [19, 6]
  }, {
    "id": 23,
    "directArtifactIds": [20, 6]
  }, {
    "id": 25,
    "transitiveDepSetIds": [7],
    "directArtifactIds": [21, 22, 6]
  }, {
    "id": 24,
    "transitiveDepSetIds": [7, 25],
    "directArtifactIds": [23, 24]
  }, {
    "id": 17,
    "transitiveDepSetIds": [18, 22, 13, 23, 24, 7, 25, 19],
    "directArtifactIds": [25, 6]
  }, {
    "id": 16,
    "transitiveDepSetIds": [17, 13],
    "directArtifactIds": [26, 6]
  }, {
    "id": 6,
    "transitiveDepSetIds": [7, 16],
    "directArtifactIds": [27]
  }, {
    "id": 4,
    "transitiveDepSetIds": [5, 6, 16],
    "directArtifactIds": [28, 1, 29]
  }, {
    "id": 3,
    "transitiveDepSetIds": [4],
    "directArtifactIds": [29]
  }, {
    "id": 2,
    "transitiveDepSetIds": [3],
    "directArtifactIds": [3]
  }, {
    "id": 27,
    "directArtifactIds": [31, 4, 28, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 26,
    "transitiveDepSetIds": [27],
    "directArtifactIds": [32]
  }, {
    "id": 28,
    "directArtifactIds": [30, 34, 35]
  }, {
    "id": 29,
    "directArtifactIds": [49]
  }, {
    "id": 33,
    "directArtifactIds": [51, 48]
  }, {
    "id": 32,
    "transitiveDepSetIds": [33, 6, 16],
    "directArtifactIds": [52, 48, 29]
  }, {
    "id": 31,
    "transitiveDepSetIds": [32],
    "directArtifactIds": [29]
  }, {
    "id": 30,
    "transitiveDepSetIds": [31],
    "directArtifactIds": [50]
  }, {
    "id": 35,
    "directArtifactIds": [54, 51, 52, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 34,
    "transitiveDepSetIds": [35],
    "directArtifactIds": [32]
  }, {
    "id": 36,
    "directArtifactIds": [53, 34, 35]
  }, {
    "id": 37,
    "directArtifactIds": [65]
  }, {
    "id": 41,
    "directArtifactIds": [67, 64]
  }, {
    "id": 40,
    "transitiveDepSetIds": [41, 6, 16],
    "directArtifactIds": [68, 64, 29]
  }, {
    "id": 39,
    "transitiveDepSetIds": [40],
    "directArtifactIds": [29]
  }, {
    "id": 38,
    "transitiveDepSetIds": [39],
    "directArtifactIds": [66]
  }, {
    "id": 43,
    "directArtifactIds": [70, 67, 68, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 42,
    "transitiveDepSetIds": [43],
    "directArtifactIds": [32]
  }, {
    "id": 44,
    "directArtifactIds": [69, 34, 35]
  }, {
    "id": 45,
    "directArtifactIds": [77]
  }, {
    "id": 49,
    "directArtifactIds": [79, 76]
  }, {
    "id": 48,
    "transitiveDepSetIds": [49, 6, 16],
    "directArtifactIds": [80, 81, 82, 76, 29]
  }, {
    "id": 47,
    "transitiveDepSetIds": [48],
    "directArtifactIds": [29]
  }, {
    "id": 46,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [78]
  }, {
    "id": 51,
    "directArtifactIds": [84, 79, 80, 81, 82, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 50,
    "transitiveDepSetIds": [51],
    "directArtifactIds": [32]
  }, {
    "id": 52,
    "directArtifactIds": [83, 34, 35]
  }, {
    "id": 53,
    "directArtifactIds": [93]
  }, {
    "id": 57,
    "directArtifactIds": [95, 92]
  }, {
    "id": 56,
    "transitiveDepSetIds": [57, 6, 16],
    "directArtifactIds": [96, 97, 92, 29]
  }, {
    "id": 55,
    "transitiveDepSetIds": [56],
    "directArtifactIds": [29]
  }, {
    "id": 54,
    "transitiveDepSetIds": [55],
    "directArtifactIds": [94]
  }, {
    "id": 59,
    "directArtifactIds": [99, 95, 96, 97, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 58,
    "transitiveDepSetIds": [59],
    "directArtifactIds": [32]
  }, {
    "id": 60,
    "directArtifactIds": [98, 34, 35]
  }, {
    "id": 61,
    "directArtifactIds": [108]
  }, {
    "id": 65,
    "directArtifactIds": [110, 111, 107]
  }, {
    "id": 64,
    "transitiveDepSetIds": [65, 6, 16],
    "directArtifactIds": [112, 113, 107, 29]
  }, {
    "id": 63,
    "transitiveDepSetIds": [64],
    "directArtifactIds": [29]
  }, {
    "id": 62,
    "transitiveDepSetIds": [63],
    "directArtifactIds": [109]
  }, {
    "id": 67,
    "directArtifactIds": [115, 110, 111, 112, 113, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 66,
    "transitiveDepSetIds": [67],
    "directArtifactIds": [32]
  }, {
    "id": 68,
    "directArtifactIds": [114, 34, 35]
  }, {
    "id": 69,
    "directArtifactIds": [130]
  }, {
    "id": 73,
    "directArtifactIds": [132, 129]
  }, {
    "id": 72,
    "transitiveDepSetIds": [73, 6, 16],
    "directArtifactIds": [133, 134, 135, 136, 137, 129, 29]
  }, {
    "id": 71,
    "transitiveDepSetIds": [72],
    "directArtifactIds": [29]
  }, {
    "id": 70,
    "transitiveDepSetIds": [71],
    "directArtifactIds": [131]
  }, {
    "id": 75,
    "directArtifactIds": [139, 132, 133, 134, 135, 136, 137, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 74,
    "transitiveDepSetIds": [75],
    "directArtifactIds": [32]
  }, {
    "id": 76,
    "directArtifactIds": [138, 34, 35]
  }, {
    "id": 77,
    "directArtifactIds": [154]
  }, {
    "id": 81,
    "directArtifactIds": [156, 153]
  }, {
    "id": 80,
    "transitiveDepSetIds": [81, 6, 16],
    "directArtifactIds": [157, 153, 29]
  }, {
    "id": 79,
    "transitiveDepSetIds": [80],
    "directArtifactIds": [29]
  }, {
    "id": 78,
    "transitiveDepSetIds": [79],
    "directArtifactIds": [155]
  }, {
    "id": 83,
    "directArtifactIds": [159, 156, 157, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 82,
    "transitiveDepSetIds": [83],
    "directArtifactIds": [32]
  }, {
    "id": 84,
    "directArtifactIds": [158, 34, 35]
  }, {
    "id": 85,
    "directArtifactIds": [182]
  }, {
    "id": 89,
    "directArtifactIds": [184, 181]
  }, {
    "id": 88,
    "transitiveDepSetIds": [89, 6, 16],
    "directArtifactIds": [185, 186, 181, 29]
  }, {
    "id": 87,
    "transitiveDepSetIds": [88],
    "directArtifactIds": [29]
  }, {
    "id": 86,
    "transitiveDepSetIds": [87],
    "directArtifactIds": [183]
  }, {
    "id": 91,
    "directArtifactIds": [188, 184, 185, 186, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 90,
    "transitiveDepSetIds": [91],
    "directArtifactIds": [32]
  }, {
    "id": 92,
    "directArtifactIds": [187, 34, 35]
  }, {
    "id": 93,
    "directArtifactIds": [201]
  }, {
    "id": 97,
    "directArtifactIds": [203, 200]
  }, {
    "id": 96,
    "transitiveDepSetIds": [97, 6, 16],
    "directArtifactIds": [204, 205, 206, 207, 208, 209, 210, 211, 135, 136, 133, 200, 29]
  }, {
    "id": 95,
    "transitiveDepSetIds": [96],
    "directArtifactIds": [29]
  }, {
    "id": 94,
    "transitiveDepSetIds": [95],
    "directArtifactIds": [202]
  }, {
    "id": 99,
    "directArtifactIds": [213, 203, 204, 205, 206, 207, 208, 209, 210, 211, 135, 136, 133, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 98,
    "transitiveDepSetIds": [99],
    "directArtifactIds": [32]
  }, {
    "id": 100,
    "directArtifactIds": [212, 34, 35]
  }, {
    "id": 101,
    "directArtifactIds": [230]
  }, {
    "id": 105,
    "directArtifactIds": [232, 229]
  }, {
    "id": 104,
    "transitiveDepSetIds": [105, 6, 16],
    "directArtifactIds": [233, 234, 229, 29]
  }, {
    "id": 103,
    "transitiveDepSetIds": [104],
    "directArtifactIds": [29]
  }, {
    "id": 102,
    "transitiveDepSetIds": [103],
    "directArtifactIds": [231]
  }, {
    "id": 107,
    "directArtifactIds": [236, 232, 233, 234, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 106,
    "transitiveDepSetIds": [107],
    "directArtifactIds": [32]
  }, {
    "id": 108,
    "directArtifactIds": [235, 34, 35]
  }, {
    "id": 109,
    "directArtifactIds": [245]
  }, {
    "id": 113,
    "directArtifactIds": [247, 244]
  }, {
    "id": 112,
    "transitiveDepSetIds": [113, 6, 16],
    "directArtifactIds": [248, 136, 244, 29]
  }, {
    "id": 111,
    "transitiveDepSetIds": [112],
    "directArtifactIds": [29]
  }, {
    "id": 110,
    "transitiveDepSetIds": [111],
    "directArtifactIds": [246]
  }, {
    "id": 115,
    "directArtifactIds": [250, 247, 248, 136, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 114,
    "transitiveDepSetIds": [115],
    "directArtifactIds": [32]
  }, {
    "id": 116,
    "directArtifactIds": [249, 34, 35]
  }, {
    "id": 117,
    "directArtifactIds": [261]
  }, {
    "id": 121,
    "directArtifactIds": [263, 260]
  }, {
    "id": 120,
    "transitiveDepSetIds": [121, 6, 16],
    "directArtifactIds": [264, 260, 29]
  }, {
    "id": 119,
    "transitiveDepSetIds": [120],
    "directArtifactIds": [29]
  }, {
    "id": 118,
    "transitiveDepSetIds": [119],
    "directArtifactIds": [262]
  }, {
    "id": 123,
    "directArtifactIds": [266, 263, 264, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 122,
    "transitiveDepSetIds": [123],
    "directArtifactIds": [32]
  }, {
    "id": 124,
    "directArtifactIds": [265, 34, 35]
  }, {
    "id": 125,
    "directArtifactIds": [277]
  }, {
    "id": 129,
    "directArtifactIds": [279, 276]
  }, {
    "id": 128,
    "transitiveDepSetIds": [129, 6, 16],
    "directArtifactIds": [280, 281, 276, 29]
  }, {
    "id": 127,
    "transitiveDepSetIds": [128],
    "directArtifactIds": [29]
  }, {
    "id": 126,
    "transitiveDepSetIds": [127],
    "directArtifactIds": [278]
  }, {
    "id": 131,
    "directArtifactIds": [283, 279, 280, 281, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 130,
    "transitiveDepSetIds": [131],
    "directArtifactIds": [32]
  }, {
    "id": 132,
    "directArtifactIds": [282, 34, 35]
  }, {
    "id": 133,
    "directArtifactIds": [292]
  }, {
    "id": 137,
    "directArtifactIds": [294, 291]
  }, {
    "id": 136,
    "transitiveDepSetIds": [137, 6, 16],
    "directArtifactIds": [295, 296, 291, 29]
  }, {
    "id": 135,
    "transitiveDepSetIds": [136],
    "directArtifactIds": [29]
  }, {
    "id": 134,
    "transitiveDepSetIds": [135],
    "directArtifactIds": [293]
  }, {
    "id": 139,
    "directArtifactIds": [298, 294, 295, 296, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 138,
    "transitiveDepSetIds": [139],
    "directArtifactIds": [32]
  }, {
    "id": 140,
    "directArtifactIds": [297, 34, 35]
  }, {
    "id": 141,
    "directArtifactIds": [307]
  }, {
    "id": 145,
    "directArtifactIds": [309, 306]
  }, {
    "id": 144,
    "transitiveDepSetIds": [145, 6, 16],
    "directArtifactIds": [135, 310, 311, 306, 29]
  }, {
    "id": 143,
    "transitiveDepSetIds": [144],
    "directArtifactIds": [29]
  }, {
    "id": 142,
    "transitiveDepSetIds": [143],
    "directArtifactIds": [308]
  }, {
    "id": 147,
    "directArtifactIds": [313, 309, 135, 310, 311, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 146,
    "transitiveDepSetIds": [147],
    "directArtifactIds": [32]
  }, {
    "id": 148,
    "directArtifactIds": [312, 34, 35]
  }, {
    "id": 149,
    "directArtifactIds": [322]
  }, {
    "id": 153,
    "directArtifactIds": [324, 321]
  }, {
    "id": 152,
    "transitiveDepSetIds": [153, 6, 16],
    "directArtifactIds": [325, 326, 321, 29]
  }, {
    "id": 151,
    "transitiveDepSetIds": [152],
    "directArtifactIds": [29]
  }, {
    "id": 150,
    "transitiveDepSetIds": [151],
    "directArtifactIds": [323]
  }, {
    "id": 155,
    "directArtifactIds": [328, 324, 325, 326, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 154,
    "transitiveDepSetIds": [155],
    "directArtifactIds": [32]
  }, {
    "id": 156,
    "directArtifactIds": [327, 34, 35]
  }, {
    "id": 157,
    "directArtifactIds": [343]
  }, {
    "id": 161,
    "directArtifactIds": [345, 342]
  }, {
    "id": 160,
    "transitiveDepSetIds": [161, 6, 16],
    "directArtifactIds": [346, 347, 342, 29]
  }, {
    "id": 159,
    "transitiveDepSetIds": [160],
    "directArtifactIds": [29]
  }, {
    "id": 158,
    "transitiveDepSetIds": [159],
    "directArtifactIds": [344]
  }, {
    "id": 163,
    "directArtifactIds": [349, 345, 346, 347, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 162,
    "transitiveDepSetIds": [163],
    "directArtifactIds": [32]
  }, {
    "id": 164,
    "directArtifactIds": [348, 34, 35]
  }, {
    "id": 165,
    "directArtifactIds": [360]
  }, {
    "id": 169,
    "directArtifactIds": [362, 359]
  }, {
    "id": 168,
    "transitiveDepSetIds": [169, 6, 16],
    "directArtifactIds": [363, 359, 29]
  }, {
    "id": 167,
    "transitiveDepSetIds": [168],
    "directArtifactIds": [29]
  }, {
    "id": 166,
    "transitiveDepSetIds": [167],
    "directArtifactIds": [361]
  }, {
    "id": 171,
    "directArtifactIds": [365, 362, 363, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 170,
    "transitiveDepSetIds": [171],
    "directArtifactIds": [32]
  }, {
    "id": 172,
    "directArtifactIds": [364, 34, 35]
  }, {
    "id": 173,
    "directArtifactIds": [374]
  }, {
    "id": 177,
    "directArtifactIds": [376, 373]
  }, {
    "id": 176,
    "transitiveDepSetIds": [177, 6, 16],
    "directArtifactIds": [377, 378, 379, 373, 29]
  }, {
    "id": 175,
    "transitiveDepSetIds": [176],
    "directArtifactIds": [29]
  }, {
    "id": 174,
    "transitiveDepSetIds": [175],
    "directArtifactIds": [375]
  }, {
    "id": 179,
    "directArtifactIds": [381, 376, 377, 378, 379, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 178,
    "transitiveDepSetIds": [179],
    "directArtifactIds": [32]
  }, {
    "id": 180,
    "directArtifactIds": [380, 34, 35]
  }, {
    "id": 181,
    "directArtifactIds": [388]
  }, {
    "id": 185,
    "directArtifactIds": [390, 387]
  }, {
    "id": 184,
    "transitiveDepSetIds": [185, 6, 16],
    "directArtifactIds": [391, 392, 387, 29]
  }, {
    "id": 183,
    "transitiveDepSetIds": [184],
    "directArtifactIds": [29]
  }, {
    "id": 182,
    "transitiveDepSetIds": [183],
    "directArtifactIds": [389]
  }, {
    "id": 187,
    "directArtifactIds": [394, 390, 391, 392, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 186,
    "transitiveDepSetIds": [187],
    "directArtifactIds": [32]
  }, {
    "id": 188,
    "directArtifactIds": [393, 34, 35]
  }, {
    "id": 189,
    "directArtifactIds": [403]
  }, {
    "id": 193,
    "directArtifactIds": [405, 402]
  }, {
    "id": 192,
    "transitiveDepSetIds": [193, 6, 16],
    "directArtifactIds": [406, 136, 407, 408, 409, 402, 29]
  }, {
    "id": 191,
    "transitiveDepSetIds": [192],
    "directArtifactIds": [29]
  }, {
    "id": 190,
    "transitiveDepSetIds": [191],
    "directArtifactIds": [404]
  }, {
    "id": 195,
    "directArtifactIds": [411, 405, 406, 136, 407, 408, 409, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 194,
    "transitiveDepSetIds": [195],
    "directArtifactIds": [32]
  }, {
    "id": 196,
    "directArtifactIds": [410, 34, 35]
  }, {
    "id": 197,
    "directArtifactIds": [422]
  }, {
    "id": 201,
    "directArtifactIds": [424, 421]
  }, {
    "id": 200,
    "transitiveDepSetIds": [201, 6, 16],
    "directArtifactIds": [425, 426, 421, 29]
  }, {
    "id": 199,
    "transitiveDepSetIds": [200],
    "directArtifactIds": [29]
  }, {
    "id": 198,
    "transitiveDepSetIds": [199],
    "directArtifactIds": [423]
  }, {
    "id": 203,
    "directArtifactIds": [428, 424, 425, 426, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 202,
    "transitiveDepSetIds": [203],
    "directArtifactIds": [32]
  }, {
    "id": 204,
    "directArtifactIds": [427, 34, 35]
  }, {
    "id": 205,
    "directArtifactIds": [433]
  }, {
    "id": 209,
    "directArtifactIds": [435, 432]
  }, {
    "id": 208,
    "transitiveDepSetIds": [209, 6, 16],
    "directArtifactIds": [436, 437, 326, 432, 29]
  }, {
    "id": 207,
    "transitiveDepSetIds": [208],
    "directArtifactIds": [29]
  }, {
    "id": 206,
    "transitiveDepSetIds": [207],
    "directArtifactIds": [434]
  }, {
    "id": 211,
    "directArtifactIds": [439, 435, 436, 437, 326, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 210,
    "transitiveDepSetIds": [211],
    "directArtifactIds": [32]
  }, {
    "id": 212,
    "directArtifactIds": [438, 34, 35]
  }, {
    "id": 213,
    "directArtifactIds": [448]
  }, {
    "id": 217,
    "directArtifactIds": [450, 447]
  }, {
    "id": 216,
    "transitiveDepSetIds": [217, 6, 16],
    "directArtifactIds": [451, 452, 453, 454, 455, 456, 457, 458, 447, 29]
  }, {
    "id": 215,
    "transitiveDepSetIds": [216],
    "directArtifactIds": [29]
  }, {
    "id": 214,
    "transitiveDepSetIds": [215],
    "directArtifactIds": [449]
  }, {
    "id": 219,
    "directArtifactIds": [460, 450, 451, 452, 453, 454, 455, 456, 457, 458, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 218,
    "transitiveDepSetIds": [219],
    "directArtifactIds": [32]
  }, {
    "id": 220,
    "directArtifactIds": [459, 34, 35]
  }, {
    "id": 221,
    "directArtifactIds": [475]
  }, {
    "id": 225,
    "directArtifactIds": [477, 474]
  }, {
    "id": 224,
    "transitiveDepSetIds": [225, 6, 16],
    "directArtifactIds": [478, 479, 474, 29]
  }, {
    "id": 223,
    "transitiveDepSetIds": [224],
    "directArtifactIds": [29]
  }, {
    "id": 222,
    "transitiveDepSetIds": [223],
    "directArtifactIds": [476]
  }, {
    "id": 227,
    "directArtifactIds": [481, 477, 478, 479, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 226,
    "transitiveDepSetIds": [227],
    "directArtifactIds": [32]
  }, {
    "id": 228,
    "directArtifactIds": [480, 34, 35]
  }, {
    "id": 229,
    "directArtifactIds": [490]
  }, {
    "id": 233,
    "directArtifactIds": [492, 489]
  }, {
    "id": 232,
    "transitiveDepSetIds": [233, 6, 16],
    "directArtifactIds": [136, 493, 489, 29]
  }, {
    "id": 231,
    "transitiveDepSetIds": [232],
    "directArtifactIds": [29]
  }, {
    "id": 230,
    "transitiveDepSetIds": [231],
    "directArtifactIds": [491]
  }, {
    "id": 235,
    "directArtifactIds": [495, 492, 136, 493, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 234,
    "transitiveDepSetIds": [235],
    "directArtifactIds": [32]
  }, {
    "id": 236,
    "directArtifactIds": [494, 34, 35]
  }, {
    "id": 237,
    "directArtifactIds": [528]
  }, {
    "id": 241,
    "directArtifactIds": [530, 527]
  }, {
    "id": 240,
    "transitiveDepSetIds": [241, 6, 16],
    "directArtifactIds": [531, 527, 29]
  }, {
    "id": 239,
    "transitiveDepSetIds": [240],
    "directArtifactIds": [29]
  }, {
    "id": 238,
    "transitiveDepSetIds": [239],
    "directArtifactIds": [529]
  }, {
    "id": 243,
    "directArtifactIds": [533, 530, 531, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 242,
    "transitiveDepSetIds": [243],
    "directArtifactIds": [32]
  }, {
    "id": 244,
    "directArtifactIds": [532, 34, 35]
  }, {
    "id": 245,
    "directArtifactIds": [544]
  }, {
    "id": 249,
    "directArtifactIds": [546, 543]
  }, {
    "id": 248,
    "transitiveDepSetIds": [249, 6, 16],
    "directArtifactIds": [547, 280, 548, 543, 29]
  }, {
    "id": 247,
    "transitiveDepSetIds": [248],
    "directArtifactIds": [29]
  }, {
    "id": 246,
    "transitiveDepSetIds": [247],
    "directArtifactIds": [545]
  }, {
    "id": 251,
    "directArtifactIds": [550, 546, 547, 280, 548, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 250,
    "transitiveDepSetIds": [251],
    "directArtifactIds": [32]
  }, {
    "id": 252,
    "directArtifactIds": [549, 34, 35]
  }, {
    "id": 253,
    "directArtifactIds": [559]
  }, {
    "id": 257,
    "directArtifactIds": [561, 558]
  }, {
    "id": 256,
    "transitiveDepSetIds": [257, 6, 16],
    "directArtifactIds": [379, 562, 563, 558, 29]
  }, {
    "id": 255,
    "transitiveDepSetIds": [256],
    "directArtifactIds": [29]
  }, {
    "id": 254,
    "transitiveDepSetIds": [255],
    "directArtifactIds": [560]
  }, {
    "id": 259,
    "directArtifactIds": [565, 561, 379, 562, 563, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 258,
    "transitiveDepSetIds": [259],
    "directArtifactIds": [32]
  }, {
    "id": 260,
    "directArtifactIds": [564, 34, 35]
  }, {
    "id": 261,
    "directArtifactIds": [572]
  }, {
    "id": 265,
    "directArtifactIds": [574, 571]
  }, {
    "id": 264,
    "transitiveDepSetIds": [265, 6, 16],
    "directArtifactIds": [575, 576, 425, 577, 571, 29]
  }, {
    "id": 263,
    "transitiveDepSetIds": [264],
    "directArtifactIds": [29]
  }, {
    "id": 262,
    "transitiveDepSetIds": [263],
    "directArtifactIds": [573]
  }, {
    "id": 267,
    "directArtifactIds": [579, 574, 575, 576, 425, 577, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 266,
    "transitiveDepSetIds": [267],
    "directArtifactIds": [32]
  }, {
    "id": 268,
    "directArtifactIds": [578, 34, 35]
  }, {
    "id": 269,
    "directArtifactIds": [596]
  }, {
    "id": 273,
    "directArtifactIds": [598, 595]
  }, {
    "id": 272,
    "transitiveDepSetIds": [273, 6, 16],
    "directArtifactIds": [599, 595, 29]
  }, {
    "id": 271,
    "transitiveDepSetIds": [272],
    "directArtifactIds": [29]
  }, {
    "id": 270,
    "transitiveDepSetIds": [271],
    "directArtifactIds": [597]
  }, {
    "id": 275,
    "directArtifactIds": [601, 598, 599, 27, 14, 7, 5, 6, 13, 8, 10, 9, 11, 12, 26, 25, 18, 17, 15, 16, 19, 20, 23, 24, 21, 22, 29]
  }, {
    "id": 274,
    "transitiveDepSetIds": [275],
    "directArtifactIds": [32]
  }, {
    "id": 276,
    "directArtifactIds": [600, 34, 35]
  }, {
    "id": 277,
    "directArtifactIds": [607]
  }],
  "configuration": [{
    "id": 1,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "6953f50a4ed022a2378305ea5b0bdb7d6e9ee5908a343a30208648fc7160feea"
  }, {
    "id": 2,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "4e67ca85ce50afa1c60118c9ac5cb28f1e0a8fe7c49020037cc89ebbb414d9ff"
  }],
  "ruleClasses": [{
    "id": 1,
    "name": "py_test"
  }, {
    "id": 2,
    "name": "expand_pyversion_template"
  }],
  "pathFragments": [{
    "id": 4,
    "label": "bazel-out"
  }, {
    "id": 3,
    "label": "k8-fastbuild",
    "parentId": 4
  }, {
    "id": 2,
    "label": "bin",
    "parentId": 3
  }, {
    "id": 1,
    "label": "test_hive_hcatalog",
    "parentId": 2
  }, {
    "id": 5,
    "label": "test_hive_hcatalog.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 7,
    "label": "test_hive_hcatalog.runfiles",
    "parentId": 2
  }, {
    "id": 6,
    "label": "MANIFEST",
    "parentId": 7
  }, {
    "id": 9,
    "label": "hive-hcatalog"
  }, {
    "id": 8,
    "label": "test_hive_hcatalog.py",
    "parentId": 9
  }, {
    "id": 14,
    "label": "external"
  }, {
    "id": 13,
    "label": "io_abseil_py",
    "parentId": 14
  }, {
    "id": 12,
    "label": "absl",
    "parentId": 13
  }, {
    "id": 11,
    "label": "flags",
    "parentId": 12
  }, {
    "id": 10,
    "label": "_helpers.py",
    "parentId": 11
  }, {
    "id": 16,
    "label": "six_archive",
    "parentId": 14
  }, {
    "id": 15,
    "label": "six.py",
    "parentId": 16
  }, {
    "id": 17,
    "label": "_argument_parser.py",
    "parentId": 11
  }, {
    "id": 18,
    "label": "_exceptions.py",
    "parentId": 11
  }, {
    "id": 19,
    "label": "_collections_abc.py",
    "parentId": 12
  }, {
    "id": 20,
    "label": "_flag.py",
    "parentId": 11
  }, {
    "id": 21,
    "label": "_flagvalues.py",
    "parentId": 11
  }, {
    "id": 22,
    "label": "_validators.py",
    "parentId": 11
  }, {
    "id": 23,
    "label": "_defines.py",
    "parentId": 11
  }, {
    "id": 24,
    "label": "__init__.py",
    "parentId": 11
  }, {
    "id": 27,
    "label": "third_party",
    "parentId": 12
  }, {
    "id": 26,
    "label": "unittest3_backport",
    "parentId": 27
  }, {
    "id": 25,
    "label": "case.py",
    "parentId": 26
  }, {
    "id": 28,
    "label": "result.py",
    "parentId": 26
  }, {
    "id": 29,
    "label": "__init__.py",
    "parentId": 26
  }, {
    "id": 31,
    "label": "testing",
    "parentId": 12
  }, {
    "id": 30,
    "label": "_pretty_print_reporter.py",
    "parentId": 31
  }, {
    "id": 32,
    "label": "xml_reporter.py",
    "parentId": 31
  }, {
    "id": 33,
    "label": "_enum_module.py",
    "parentId": 12
  }, {
    "id": 35,
    "label": "logging",
    "parentId": 12
  }, {
    "id": 34,
    "label": "__init__.py",
    "parentId": 35
  }, {
    "id": 36,
    "label": "converter.py",
    "parentId": 35
  }, {
    "id": 37,
    "label": "app.py",
    "parentId": 12
  }, {
    "id": 38,
    "label": "command_name.py",
    "parentId": 12
  }, {
    "id": 39,
    "label": "absltest.py",
    "parentId": 31
  }, {
    "id": 40,
    "label": "parameterized.py",
    "parentId": 31
  }, {
    "id": 42,
    "label": "integration_tests"
  }, {
    "id": 41,
    "label": "dataproc_test_case.py",
    "parentId": 42
  }, {
    "id": 43,
    "label": "hive-hcatalog.sh",
    "parentId": 9
  }, {
    "id": 48,
    "label": "external",
    "parentId": 2
  }, {
    "id": 47,
    "label": "bazel_tools",
    "parentId": 48
  }, {
    "id": 46,
    "label": "tools",
    "parentId": 47
  }, {
    "id": 45,
    "label": "python",
    "parentId": 46
  }, {
    "id": 44,
    "label": "py3wrapper.sh",
    "parentId": 45
  }, {
    "id": 51,
    "label": "internal",
    "parentId": 3
  }, {
    "id": 50,
    "label": "_middlemen",
    "parentId": 51
  }, {
    "id": 49,
    "label": "test_Uhive_Uhcatalog-runfiles",
    "parentId": 50
  }, {
    "id": 52,
    "label": "test_hive_hcatalog.temp",
    "parentId": 2
  }, {
    "id": 57,
    "label": "bazel_tools",
    "parentId": 14
  }, {
    "id": 56,
    "label": "tools",
    "parentId": 57
  }, {
    "id": 55,
    "label": "zip",
    "parentId": 56
  }, {
    "id": 54,
    "label": "zipper",
    "parentId": 55
  }, {
    "id": 53,
    "label": "zipper",
    "parentId": 54
  }, {
    "id": 58,
    "label": "test_hive_hcatalog.zip",
    "parentId": 2
  }, {
    "id": 60,
    "label": "test",
    "parentId": 56
  }, {
    "id": 59,
    "label": "test-setup.sh",
    "parentId": 60
  }, {
    "id": 61,
    "label": "generate-xml.sh",
    "parentId": 60
  }, {
    "id": 65,
    "label": "testlogs",
    "parentId": 3
  }, {
    "id": 64,
    "label": "test_hive_hcatalog",
    "parentId": 65
  }, {
    "id": 63,
    "label": "shard_1_of_6",
    "parentId": 64
  }, {
    "id": 62,
    "label": "test.log",
    "parentId": 63
  }, {
    "id": 66,
    "label": "test.cache_status",
    "parentId": 63
  }, {
    "id": 68,
    "label": "shard_2_of_6",
    "parentId": 64
  }, {
    "id": 67,
    "label": "test.log",
    "parentId": 68
  }, {
    "id": 69,
    "label": "test.cache_status",
    "parentId": 68
  }, {
    "id": 71,
    "label": "shard_3_of_6",
    "parentId": 64
  }, {
    "id": 70,
    "label": "test.log",
    "parentId": 71
  }, {
    "id": 72,
    "label": "test.cache_status",
    "parentId": 71
  }, {
    "id": 74,
    "label": "shard_4_of_6",
    "parentId": 64
  }, {
    "id": 73,
    "label": "test.log",
    "parentId": 74
  }, {
    "id": 75,
    "label": "test.cache_status",
    "parentId": 74
  }, {
    "id": 77,
    "label": "shard_5_of_6",
    "parentId": 64
  }, {
    "id": 76,
    "label": "test.log",
    "parentId": 77
  }, {
    "id": 78,
    "label": "test.cache_status",
    "parentId": 77
  }, {
    "id": 80,
    "label": "shard_6_of_6",
    "parentId": 64
  }, {
    "id": 79,
    "label": "test.log",
    "parentId": 80
  }, {
    "id": 81,
    "label": "test.cache_status",
    "parentId": 80
  }, {
    "id": 82,
    "label": "test_starburst_presto",
    "parentId": 2
  }, {
    "id": 83,
    "label": "test_starburst_presto.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 85,
    "label": "test_starburst_presto.runfiles",
    "parentId": 2
  }, {
    "id": 84,
    "label": "MANIFEST",
    "parentId": 85
  }, {
    "id": 87,
    "label": "starburst-presto"
  }, {
    "id": 86,
    "label": "test_starburst_presto.py",
    "parentId": 87
  }, {
    "id": 88,
    "label": "presto.sh",
    "parentId": 87
  }, {
    "id": 89,
    "label": "test_Ustarburst_Upresto-runfiles",
    "parentId": 50
  }, {
    "id": 90,
    "label": "test_starburst_presto.temp",
    "parentId": 2
  }, {
    "id": 91,
    "label": "test_starburst_presto.zip",
    "parentId": 2
  }, {
    "id": 94,
    "label": "test_starburst_presto",
    "parentId": 65
  }, {
    "id": 93,
    "label": "shard_1_of_4",
    "parentId": 94
  }, {
    "id": 92,
    "label": "test.log",
    "parentId": 93
  }, {
    "id": 95,
    "label": "test.cache_status",
    "parentId": 93
  }, {
    "id": 97,
    "label": "shard_2_of_4",
    "parentId": 94
  }, {
    "id": 96,
    "label": "test.log",
    "parentId": 97
  }, {
    "id": 98,
    "label": "test.cache_status",
    "parentId": 97
  }, {
    "id": 100,
    "label": "shard_3_of_4",
    "parentId": 94
  }, {
    "id": 99,
    "label": "test.log",
    "parentId": 100
  }, {
    "id": 101,
    "label": "test.cache_status",
    "parentId": 100
  }, {
    "id": 103,
    "label": "shard_4_of_4",
    "parentId": 94
  }, {
    "id": 102,
    "label": "test.log",
    "parentId": 103
  }, {
    "id": 104,
    "label": "test.cache_status",
    "parentId": 103
  }, {
    "id": 105,
    "label": "test_dr_elephant",
    "parentId": 2
  }, {
    "id": 106,
    "label": "test_dr_elephant.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 108,
    "label": "test_dr_elephant.runfiles",
    "parentId": 2
  }, {
    "id": 107,
    "label": "MANIFEST",
    "parentId": 108
  }, {
    "id": 110,
    "label": "dr-elephant"
  }, {
    "id": 109,
    "label": "test_dr_elephant.py",
    "parentId": 110
  }, {
    "id": 111,
    "label": "dr-elephant.sh",
    "parentId": 110
  }, {
    "id": 112,
    "label": "test_Udr_Uelephant-runfiles",
    "parentId": 50
  }, {
    "id": 113,
    "label": "test_dr_elephant.temp",
    "parentId": 2
  }, {
    "id": 114,
    "label": "test_dr_elephant.zip",
    "parentId": 2
  }, {
    "id": 117,
    "label": "test_dr_elephant",
    "parentId": 65
  }, {
    "id": 116,
    "label": "shard_1_of_2",
    "parentId": 117
  }, {
    "id": 115,
    "label": "test.log",
    "parentId": 116
  }, {
    "id": 118,
    "label": "test.cache_status",
    "parentId": 116
  }, {
    "id": 120,
    "label": "shard_2_of_2",
    "parentId": 117
  }, {
    "id": 119,
    "label": "test.log",
    "parentId": 120
  }, {
    "id": 121,
    "label": "test.cache_status",
    "parentId": 120
  }, {
    "id": 122,
    "label": "test_spark_rapids",
    "parentId": 2
  }, {
    "id": 123,
    "label": "test_spark_rapids.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 125,
    "label": "test_spark_rapids.runfiles",
    "parentId": 2
  }, {
    "id": 124,
    "label": "MANIFEST",
    "parentId": 125
  }, {
    "id": 127,
    "label": "spark-rapids"
  }, {
    "id": 126,
    "label": "test_spark_rapids.py",
    "parentId": 127
  }, {
    "id": 128,
    "label": "spark-rapids.sh",
    "parentId": 127
  }, {
    "id": 129,
    "label": "verify_xgboost_spark_rapids.scala",
    "parentId": 127
  }, {
    "id": 130,
    "label": "mig.sh",
    "parentId": 127
  }, {
    "id": 131,
    "label": "test_Uspark_Urapids-runfiles",
    "parentId": 50
  }, {
    "id": 132,
    "label": "test_spark_rapids.temp",
    "parentId": 2
  }, {
    "id": 133,
    "label": "test_spark_rapids.zip",
    "parentId": 2
  }, {
    "id": 136,
    "label": "test_spark_rapids",
    "parentId": 65
  }, {
    "id": 135,
    "label": "shard_1_of_3",
    "parentId": 136
  }, {
    "id": 134,
    "label": "test.log",
    "parentId": 135
  }, {
    "id": 137,
    "label": "test.cache_status",
    "parentId": 135
  }, {
    "id": 139,
    "label": "shard_2_of_3",
    "parentId": 136
  }, {
    "id": 138,
    "label": "test.log",
    "parentId": 139
  }, {
    "id": 140,
    "label": "test.cache_status",
    "parentId": 139
  }, {
    "id": 142,
    "label": "shard_3_of_3",
    "parentId": 136
  }, {
    "id": 141,
    "label": "test.log",
    "parentId": 142
  }, {
    "id": 143,
    "label": "test.cache_status",
    "parentId": 142
  }, {
    "id": 144,
    "label": "test_cloud_sql_proxy",
    "parentId": 2
  }, {
    "id": 145,
    "label": "test_cloud_sql_proxy.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 147,
    "label": "test_cloud_sql_proxy.runfiles",
    "parentId": 2
  }, {
    "id": 146,
    "label": "MANIFEST",
    "parentId": 147
  }, {
    "id": 149,
    "label": "cloud-sql-proxy"
  }, {
    "id": 148,
    "label": "test_cloud_sql_proxy.py",
    "parentId": 149
  }, {
    "id": 150,
    "label": "cloud-sql-proxy.sh",
    "parentId": 149
  }, {
    "id": 151,
    "label": "pyspark_metastore_test.py",
    "parentId": 149
  }, {
    "id": 152,
    "label": "test_Ucloud_Usql_Uproxy-runfiles",
    "parentId": 50
  }, {
    "id": 153,
    "label": "test_cloud_sql_proxy.temp",
    "parentId": 2
  }, {
    "id": 154,
    "label": "test_cloud_sql_proxy.zip",
    "parentId": 2
  }, {
    "id": 157,
    "label": "test_cloud_sql_proxy",
    "parentId": 65
  }, {
    "id": 156,
    "label": "shard_1_of_3",
    "parentId": 157
  }, {
    "id": 155,
    "label": "test.log",
    "parentId": 156
  }, {
    "id": 158,
    "label": "test.cache_status",
    "parentId": 156
  }, {
    "id": 160,
    "label": "shard_2_of_3",
    "parentId": 157
  }, {
    "id": 159,
    "label": "test.log",
    "parentId": 160
  }, {
    "id": 161,
    "label": "test.cache_status",
    "parentId": 160
  }, {
    "id": 163,
    "label": "shard_3_of_3",
    "parentId": 157
  }, {
    "id": 162,
    "label": "test.log",
    "parentId": 163
  }, {
    "id": 164,
    "label": "test.cache_status",
    "parentId": 163
  }, {
    "id": 165,
    "label": "test_hive_llap",
    "parentId": 2
  }, {
    "id": 166,
    "label": "test_hive_llap.runfiles_manifest",
    "parentId": 2
  }, {
    "id": 168,
    "label": "test_hive_llap.runfiles",
    "parentId": 2
  }, {
    "id": 167,
    "label": "MANIFEST",
    "parentId": 168
  }, {
    "id": 170,
    "label": "hive-llap"
  }, {
    "id": 169,
    "label": "run_hive_commands.py",
    "parentId": 170
  }, {
    "id": 171,
    "label": "test_hive_llap.py",
    "parentId": 170
  }, {
    "id": 172,
    "label": "llap.sh",
    "parentId": 170
  }, {
    "id": 173,
    "label": "start_llap.sh",
    "parentId": 170
  }, {
    "id": 174,
    "label": "test_Uhive_Ullap-runfiles",
    "parentId": 50
  }, {
    "id": 175,
    "label": "test_hive_llap.temp",
    "parentId": 2
  }, {
    "id": 176,
    "label": "test_hive_llap.zip",
    "parentId": 2
  }, {
    "id": 179,
    "label": "test_hive_llap",
    "parentId": 65
  }, {
    "id": 178,
    "label": "shard_1_of_6",
    "parentId": 179
  }, {
    "id": 177,
    "label": "test.log",
    "parentId": 178
  }, {
    "id": 180,
    "label": "test.cache_status",
    "parentId": 178
  }, {
    "id": 182,
    "label": "shard_2_of_6",
    "parentId": 179
  }, {
    "id": 181,
    "label": "test.log",
    "parentId": 182
  }, {
    "id": 183,
    "label": "test.cache_status",
    "parentId": 182
  }, {
    "id": 185,
    "label": "shard_3_of_6",
    "parentId": 179
  }, {
    "id": 184,
    "label": "test.log",
    "parentId": 185
  }, {
    "id": 186,
    "label": "test.cache_status",
    "parentId": 185
  }, {
    "id": 188,
    "label": "shard_4_of_6",
    "parentId": 179
  }, {
    "id": 187,
    "label": "test.log",
    "parentId": 188
  }, {
    "id": 189,
    "label": "test.cache_status",
    "parentId": 188
  }, {
    "id": 191,
    "label": "shard_5_of_6",
    "parentId": 179
  }, {
    "id": 190,
    "label": "test.log",
    "parentId": 191
  }, {
    "id": 192,
    "label": "test.cache_status",
    "parentId": 191
  }, {
    "id": 194,
    "label": "shard_6_of_6",
    "parentId": 179
  }, {
    "id": 193,
    "label": "test.log",
    "parentId": 194
  }, {
    "id": 195,
    "label": "test.cache_status",
    "parentId": 194
  }, {
    "id": 197,
    "label": "rapids",
    "parentId": 2
  }, {
    "id": 196,
    "label": "test_rapids",
    "parentId": 197
  }, {
    "id": 198,
    "label": "test_rapids.runfiles_manifest",
    "parentId": 197
  }, {
    "id": 200,
    "label": "test_rapids.runfiles",
    "parentId": 197
  }, {
    "id": 199,
    "label": "MANIFEST",
    "parentId": 200
  }, {
    "id": 202,
    "label": "rapids"
  }, {
    "id": 201,
    "label": "test_rapids.py",
    "parentId": 202
  }, {
    "id": 203,
    "label": "rapids.sh",
    "parentId": 202
  }, {
    "id": 204,
    "label": "verify_xgboost_spark.scala",
    "parentId": 202
  }, {
    "id": 206,
    "label": "dask"
  }, {
    "id": 205,
    "label": "dask.sh",
    "parentId": 206
  }, {
    "id": 208,
    "label": "gpu"
  }, {
    "id": 207,
    "label": "install_gpu_driver.sh",
    "parentId": 208
  }, {
    "id": 209,
    "label": "verify_rapids_dask.py",
    "parentId": 202
  }, {
    "id": 210,
    "label": "rapids_Stest_Urapids-runfiles",
    "parentId": 50
  }, {
    "id": 211,
    "label": "test_rapids.temp",
    "parentId": 197
  }, {
    "id": 212,
    "label": "test_rapids.zip",
    "parentId": 197
  }, {
    "id": 216,
    "label": "rapids",
    "parentId": 65
  }, {
    "id": 215,
    "label": "test_rapids",
    "parentId": 216
  }, {
    "id": 214,
    "label": "shard_1_of_6",
    "parentId": 215
  }, {
    "id": 213,
    "label": "test.log",
    "parentId": 214
  }, {
    "id": 217,
    "label": "test.cache_status",
    "parentId": 214
  }, {
    "id": 219,
    "label": "shard_2_of_6",
    "parentId": 215
  }, {
    "id": 218,
    "label": "test.log",
    "parentId": 219
  }, {
    "id": 220,
    "label": "test.cache_status",
    "parentId": 219
  }, {
    "id": 222,
    "label": "shard_3_of_6",
    "parentId": 215
  }, {
    "id": 221,
    "label": "test.log",
    "parentId": 222
  }, {
    "id": 223,
    "label": "test.cache_status",
    "parentId": 222
  }, {
    "id": 225,
    "label": "shard_4_of_6",
    "parentId": 215
  }, {
    "id": 224,
    "label": "test.log",
    "parentId": 225
  }, {
    "id": 226,
    "label": "test.cache_status",
    "parentId": 225
  }, {
    "id": 228,
    "label": "shard_5_of_6",
    "parentId": 215
  }, {
    "id": 227,
    "label": "test.log",
    "parentId": 228
  }, {
    "id": 229,
    "label": "test.cache_status",
    "parentId": 228
  }, {
    "id": 231,
    "label": "shard_6_of_6",
    "parentId": 215
  }, {
    "id": 230,
    "label": "test.log",
    "parentId": 231
  }, {
    "id": 232,
    "label": "test.cache_status",
    "parentId": 231
  }, {
    "id": 234,
    "label": "connectors",
    "parentId": 2
  }, {
    "id": 233,
    "label": "test_connectors",
    "parentId": 234
  }, {
    "id": 235,
    "label": "test_connectors.runfiles_manifest",
    "parentId": 234
  }, {
    "id": 237,
    "label": "test_connectors.runfiles",
    "parentId": 234
  }, {
    "id": 236,
    "label": "MANIFEST",
    "parentId": 237
  }, {
    "id": 239,
    "label": "connectors"
  }, {
    "id": 238,
    "label": "test_connectors.py",
    "parentId": 239
  }, {
    "id": 240,
    "label": "connectors.sh",
    "parentId": 239
  }, {
    "id": 241,
    "label": "connectors_Stest_Uconnectors-runfiles",
    "parentId": 50
  }, {
    "id": 242,
    "label": "test_connectors.temp",
    "parentId": 234
  }, {
    "id": 243,
    "label": "test_connectors.zip",
    "parentId": 234
  }, {
    "id": 247,
    "label": "connectors",
    "parentId": 65
  }, {
    "id": 246,
    "label": "test_connectors",
    "parentId": 247
  }, {
    "id": 245,
    "label": "shard_1_of_10",
    "parentId": 246
  }, {
    "id": 244,
    "label": "test.log",
    "parentId": 245
  }, {
    "id": 248,
    "label": "test.cache_status",
    "parentId": 245
  }, {
    "id": 250,
    "label": "shard_2_of_10",
    "parentId": 246
  }, {
    "id": 249,
    "label": "test.log",
    "parentId": 250
  }, {
    "id": 251,
    "label": "test.cache_status",
    "parentId": 250
  }, {
    "id": 253,
    "label": "shard_3_of_10",
    "parentId": 246
  }, {
    "id": 252,
    "label": "test.log",
    "parentId": 253
  }, {
    "id": 254,
    "label": "test.cache_status",
    "parentId": 253
  }, {
    "id": 256,
    "label": "shard_4_of_10",
    "parentId": 246
  }, {
    "id": 255,
    "label": "test.log",
    "parentId": 256
  }, {
    "id": 257,
    "label": "test.cache_status",
    "parentId": 256
  }, {
    "id": 259,
    "label": "shard_5_of_10",
    "parentId": 246
  }, {
    "id": 258,
    "label": "test.log",
    "parentId": 259
  }, {
    "id": 260,
    "label": "test.cache_status",
    "parentId": 259
  }, {
    "id": 262,
    "label": "shard_6_of_10",
    "parentId": 246
  }, {
    "id": 261,
    "label": "test.log",
    "parentId": 262
  }, {
    "id": 263,
    "label": "test.cache_status",
    "parentId": 262
  }, {
    "id": 265,
    "label": "shard_7_of_10",
    "parentId": 246
  }, {
    "id": 264,
    "label": "test.log",
    "parentId": 265
  }, {
    "id": 266,
    "label": "test.cache_status",
    "parentId": 265
  }, {
    "id": 268,
    "label": "shard_8_of_10",
    "parentId": 246
  }, {
    "id": 267,
    "label": "test.log",
    "parentId": 268
  }, {
    "id": 269,
    "label": "test.cache_status",
    "parentId": 268
  }, {
    "id": 271,
    "label": "shard_9_of_10",
    "parentId": 246
  }, {
    "id": 270,
    "label": "test.log",
    "parentId": 271
  }, {
    "id": 272,
    "label": "test.cache_status",
    "parentId": 271
  }, {
    "id": 274,
    "label": "shard_10_of_10",
    "parentId": 246
  }, {
    "id": 273,
    "label": "test.log",
    "parentId": 274
  }, {
    "id": 275,
    "label": "test.cache_status",
    "parentId": 274
  }, {
    "id": 277,
    "label": "flink",
    "parentId": 2
  }, {
    "id": 276,
    "label": "test_flink",
    "parentId": 277
  }, {
    "id": 278,
    "label": "test_flink.runfiles_manifest",
    "parentId": 277
  }, {
    "id": 280,
    "label": "test_flink.runfiles",
    "parentId": 277
  }, {
    "id": 279,
    "label": "MANIFEST",
    "parentId": 280
  }, {
    "id": 282,
    "label": "flink"
  }, {
    "id": 281,
    "label": "test_flink.py",
    "parentId": 282
  }, {
    "id": 283,
    "label": "flink.sh",
    "parentId": 282
  }, {
    "id": 284,
    "label": "validate.sh",
    "parentId": 282
  }, {
    "id": 285,
    "label": "flink_Stest_Uflink-runfiles",
    "parentId": 50
  }, {
    "id": 286,
    "label": "test_flink.temp",
    "parentId": 277
  }, {
    "id": 287,
    "label": "test_flink.zip",
    "parentId": 277
  }, {
    "id": 291,
    "label": "flink",
    "parentId": 65
  }, {
    "id": 290,
    "label": "test_flink",
    "parentId": 291
  }, {
    "id": 289,
    "label": "shard_1_of_5",
    "parentId": 290
  }, {
    "id": 288,
    "label": "test.log",
    "parentId": 289
  }, {
    "id": 292,
    "label": "test.cache_status",
    "parentId": 289
  }, {
    "id": 294,
    "label": "shard_2_of_5",
    "parentId": 290
  }, {
    "id": 293,
    "label": "test.log",
    "parentId": 294
  }, {
    "id": 295,
    "label": "test.cache_status",
    "parentId": 294
  }, {
    "id": 297,
    "label": "shard_3_of_5",
    "parentId": 290
  }, {
    "id": 296,
    "label": "test.log",
    "parentId": 297
  }, {
    "id": 298,
    "label": "test.cache_status",
    "parentId": 297
  }, {
    "id": 300,
    "label": "shard_4_of_5",
    "parentId": 290
  }, {
    "id": 299,
    "label": "test.log",
    "parentId": 300
  }, {
    "id": 301,
    "label": "test.cache_status",
    "parentId": 300
  }, {
    "id": 303,
    "label": "shard_5_of_5",
    "parentId": 290
  }, {
    "id": 302,
    "label": "test.log",
    "parentId": 303
  }, {
    "id": 304,
    "label": "test.cache_status",
    "parentId": 303
  }, {
    "id": 306,
    "label": "mlvm",
    "parentId": 2
  }, {
    "id": 305,
    "label": "test_mlvm",
    "parentId": 306
  }, {
    "id": 307,
    "label": "test_mlvm.runfiles_manifest",
    "parentId": 306
  }, {
    "id": 309,
    "label": "test_mlvm.runfiles",
    "parentId": 306
  }, {
    "id": 308,
    "label": "MANIFEST",
    "parentId": 309
  }, {
    "id": 311,
    "label": "mlvm"
  }, {
    "id": 310,
    "label": "test_mlvm.py",
    "parentId": 311
  }, {
    "id": 312,
    "label": "mlvm.sh",
    "parentId": 311
  }, {
    "id": 314,
    "label": "scripts",
    "parentId": 311
  }, {
    "id": 313,
    "label": "python_packages.py",
    "parentId": 314
  }, {
    "id": 315,
    "label": "r_packages.R",
    "parentId": 314
  }, {
    "id": 316,
    "label": "spark_bq.py",
    "parentId": 314
  }, {
    "id": 317,
    "label": "verify_dask_standalone.py",
    "parentId": 314
  }, {
    "id": 318,
    "label": "verify_dask_yarn.py",
    "parentId": 314
  }, {
    "id": 319,
    "label": "verify_rapids_dask.py",
    "parentId": 314
  }, {
    "id": 320,
    "label": "verify_rapids_spark.py",
    "parentId": 314
  }, {
    "id": 321,
    "label": "mlvm_Stest_Umlvm-runfiles",
    "parentId": 50
  }, {
    "id": 322,
    "label": "test_mlvm.temp",
    "parentId": 306
  }, {
    "id": 323,
    "label": "test_mlvm.zip",
    "parentId": 306
  }, {
    "id": 327,
    "label": "mlvm",
    "parentId": 65
  }, {
    "id": 326,
    "label": "test_mlvm",
    "parentId": 327
  }, {
    "id": 325,
    "label": "shard_1_of_7",
    "parentId": 326
  }, {
    "id": 324,
    "label": "test.log",
    "parentId": 325
  }, {
    "id": 328,
    "label": "test.cache_status",
    "parentId": 325
  }, {
    "id": 330,
    "label": "shard_2_of_7",
    "parentId": 326
  }, {
    "id": 329,
    "label": "test.log",
    "parentId": 330
  }, {
    "id": 331,
    "label": "test.cache_status",
    "parentId": 330
  }, {
    "id": 333,
    "label": "shard_3_of_7",
    "parentId": 326
  }, {
    "id": 332,
    "label": "test.log",
    "parentId": 333
  }, {
    "id": 334,
    "label": "test.cache_status",
    "parentId": 333
  }, {
    "id": 336,
    "label": "shard_4_of_7",
    "parentId": 326
  }, {
    "id": 335,
    "label": "test.log",
    "parentId": 336
  }, {
    "id": 337,
    "label": "test.cache_status",
    "parentId": 336
  }, {
    "id": 339,
    "label": "shard_5_of_7",
    "parentId": 326
  }, {
    "id": 338,
    "label": "test.log",
    "parentId": 339
  }, {
    "id": 340,
    "label": "test.cache_status",
    "parentId": 339
  }, {
    "id": 342,
    "label": "shard_6_of_7",
    "parentId": 326
  }, {
    "id": 341,
    "label": "test.log",
    "parentId": 342
  }, {
    "id": 343,
    "label": "test.cache_status",
    "parentId": 342
  }, {
    "id": 345,
    "label": "shard_7_of_7",
    "parentId": 326
  }, {
    "id": 344,
    "label": "test.log",
    "parentId": 345
  }, {
    "id": 346,
    "label": "test.cache_status",
    "parentId": 345
  }, {
    "id": 348,
    "label": "oozie",
    "parentId": 2
  }, {
    "id": 347,
    "label": "test_oozie",
    "parentId": 348
  }, {
    "id": 349,
    "label": "test_oozie.runfiles_manifest",
    "parentId": 348
  }, {
    "id": 351,
    "label": "test_oozie.runfiles",
    "parentId": 348
  }, {
    "id": 350,
    "label": "MANIFEST",
    "parentId": 351
  }, {
    "id": 353,
    "label": "oozie"
  }, {
    "id": 352,
    "label": "test_oozie.py",
    "parentId": 353
  }, {
    "id": 354,
    "label": "oozie.sh",
    "parentId": 353
  }, {
    "id": 355,
    "label": "validate.sh",
    "parentId": 353
  }, {
    "id": 356,
    "label": "oozie_Stest_Uoozie-runfiles",
    "parentId": 50
  }, {
    "id": 357,
    "label": "test_oozie.temp",
    "parentId": 348
  }, {
    "id": 358,
    "label": "test_oozie.zip",
    "parentId": 348
  }, {
    "id": 362,
    "label": "oozie",
    "parentId": 65
  }, {
    "id": 361,
    "label": "test_oozie",
    "parentId": 362
  }, {
    "id": 360,
    "label": "shard_1_of_3",
    "parentId": 361
  }, {
    "id": 359,
    "label": "test.log",
    "parentId": 360
  }, {
    "id": 363,
    "label": "test.cache_status",
    "parentId": 360
  }, {
    "id": 365,
    "label": "shard_2_of_3",
    "parentId": 361
  }, {
    "id": 364,
    "label": "test.log",
    "parentId": 365
  }, {
    "id": 366,
    "label": "test.cache_status",
    "parentId": 365
  }, {
    "id": 368,
    "label": "shard_3_of_3",
    "parentId": 361
  }, {
    "id": 367,
    "label": "test.log",
    "parentId": 368
  }, {
    "id": 369,
    "label": "test.cache_status",
    "parentId": 368
  }, {
    "id": 371,
    "label": "tony",
    "parentId": 2
  }, {
    "id": 370,
    "label": "test_tony",
    "parentId": 371
  }, {
    "id": 372,
    "label": "test_tony.runfiles_manifest",
    "parentId": 371
  }, {
    "id": 374,
    "label": "test_tony.runfiles",
    "parentId": 371
  }, {
    "id": 373,
    "label": "MANIFEST",
    "parentId": 374
  }, {
    "id": 376,
    "label": "tony"
  }, {
    "id": 375,
    "label": "test_tony.py",
    "parentId": 376
  }, {
    "id": 377,
    "label": "tony.sh",
    "parentId": 376
  }, {
    "id": 378,
    "label": "tony_Stest_Utony-runfiles",
    "parentId": 50
  }, {
    "id": 379,
    "label": "test_tony.temp",
    "parentId": 371
  }, {
    "id": 380,
    "label": "test_tony.zip",
    "parentId": 371
  }, {
    "id": 384,
    "label": "tony",
    "parentId": 65
  }, {
    "id": 383,
    "label": "test_tony",
    "parentId": 384
  }, {
    "id": 382,
    "label": "shard_1_of_4",
    "parentId": 383
  }, {
    "id": 381,
    "label": "test.log",
    "parentId": 382
  }, {
    "id": 385,
    "label": "test.cache_status",
    "parentId": 382
  }, {
    "id": 387,
    "label": "shard_2_of_4",
    "parentId": 383
  }, {
    "id": 386,
    "label": "test.log",
    "parentId": 387
  }, {
    "id": 388,
    "label": "test.cache_status",
    "parentId": 387
  }, {
    "id": 390,
    "label": "shard_3_of_4",
    "parentId": 383
  }, {
    "id": 389,
    "label": "test.log",
    "parentId": 390
  }, {
    "id": 391,
    "label": "test.cache_status",
    "parentId": 390
  }, {
    "id": 393,
    "label": "shard_4_of_4",
    "parentId": 383
  }, {
    "id": 392,
    "label": "test.log",
    "parentId": 393
  }, {
    "id": 394,
    "label": "test.cache_status",
    "parentId": 393
  }, {
    "id": 396,
    "label": "presto",
    "parentId": 2
  }, {
    "id": 395,
    "label": "test_presto",
    "parentId": 396
  }, {
    "id": 397,
    "label": "test_presto.runfiles_manifest",
    "parentId": 396
  }, {
    "id": 399,
    "label": "test_presto.runfiles",
    "parentId": 396
  }, {
    "id": 398,
    "label": "MANIFEST",
    "parentId": 399
  }, {
    "id": 401,
    "label": "presto"
  }, {
    "id": 400,
    "label": "test_presto.py",
    "parentId": 401
  }, {
    "id": 402,
    "label": "presto.sh",
    "parentId": 401
  }, {
    "id": 403,
    "label": "presto_Stest_Upresto-runfiles",
    "parentId": 50
  }, {
    "id": 404,
    "label": "test_presto.temp",
    "parentId": 396
  }, {
    "id": 405,
    "label": "test_presto.zip",
    "parentId": 396
  }, {
    "id": 409,
    "label": "presto",
    "parentId": 65
  }, {
    "id": 408,
    "label": "test_presto",
    "parentId": 409
  }, {
    "id": 407,
    "label": "shard_1_of_4",
    "parentId": 408
  }, {
    "id": 406,
    "label": "test.log",
    "parentId": 407
  }, {
    "id": 410,
    "label": "test.cache_status",
    "parentId": 407
  }, {
    "id": 412,
    "label": "shard_2_of_4",
    "parentId": 408
  }, {
    "id": 411,
    "label": "test.log",
    "parentId": 412
  }, {
    "id": 413,
    "label": "test.cache_status",
    "parentId": 412
  }, {
    "id": 415,
    "label": "shard_3_of_4",
    "parentId": 408
  }, {
    "id": 414,
    "label": "test.log",
    "parentId": 415
  }, {
    "id": 416,
    "label": "test.cache_status",
    "parentId": 415
  }, {
    "id": 418,
    "label": "shard_4_of_4",
    "parentId": 408
  }, {
    "id": 417,
    "label": "test.log",
    "parentId": 418
  }, {
    "id": 419,
    "label": "test.cache_status",
    "parentId": 418
  }, {
    "id": 421,
    "label": "solr",
    "parentId": 2
  }, {
    "id": 420,
    "label": "test_solr",
    "parentId": 421
  }, {
    "id": 422,
    "label": "test_solr.runfiles_manifest",
    "parentId": 421
  }, {
    "id": 424,
    "label": "test_solr.runfiles",
    "parentId": 421
  }, {
    "id": 423,
    "label": "MANIFEST",
    "parentId": 424
  }, {
    "id": 426,
    "label": "solr"
  }, {
    "id": 425,
    "label": "test_solr.py",
    "parentId": 426
  }, {
    "id": 427,
    "label": "solr.sh",
    "parentId": 426
  }, {
    "id": 428,
    "label": "verify_solr.py",
    "parentId": 426
  }, {
    "id": 429,
    "label": "solr_Stest_Usolr-runfiles",
    "parentId": 50
  }, {
    "id": 430,
    "label": "test_solr.temp",
    "parentId": 421
  }, {
    "id": 431,
    "label": "test_solr.zip",
    "parentId": 421
  }, {
    "id": 435,
    "label": "solr",
    "parentId": 65
  }, {
    "id": 434,
    "label": "test_solr",
    "parentId": 435
  }, {
    "id": 433,
    "label": "shard_1_of_3",
    "parentId": 434
  }, {
    "id": 432,
    "label": "test.log",
    "parentId": 433
  }, {
    "id": 436,
    "label": "test.cache_status",
    "parentId": 433
  }, {
    "id": 438,
    "label": "shard_2_of_3",
    "parentId": 434
  }, {
    "id": 437,
    "label": "test.log",
    "parentId": 438
  }, {
    "id": 439,
    "label": "test.cache_status",
    "parentId": 438
  }, {
    "id": 441,
    "label": "shard_3_of_3",
    "parentId": 434
  }, {
    "id": 440,
    "label": "test.log",
    "parentId": 441
  }, {
    "id": 442,
    "label": "test.cache_status",
    "parentId": 441
  }, {
    "id": 444,
    "label": "ganglia",
    "parentId": 2
  }, {
    "id": 443,
    "label": "test_ganglia",
    "parentId": 444
  }, {
    "id": 445,
    "label": "test_ganglia.runfiles_manifest",
    "parentId": 444
  }, {
    "id": 447,
    "label": "test_ganglia.runfiles",
    "parentId": 444
  }, {
    "id": 446,
    "label": "MANIFEST",
    "parentId": 447
  }, {
    "id": 449,
    "label": "ganglia"
  }, {
    "id": 448,
    "label": "test_ganglia.py",
    "parentId": 449
  }, {
    "id": 450,
    "label": "ganglia.sh",
    "parentId": 449
  }, {
    "id": 451,
    "label": "verify_ganglia_running.py",
    "parentId": 449
  }, {
    "id": 452,
    "label": "ganglia_Stest_Uganglia-runfiles",
    "parentId": 50
  }, {
    "id": 453,
    "label": "test_ganglia.temp",
    "parentId": 444
  }, {
    "id": 454,
    "label": "test_ganglia.zip",
    "parentId": 444
  }, {
    "id": 458,
    "label": "ganglia",
    "parentId": 65
  }, {
    "id": 457,
    "label": "test_ganglia",
    "parentId": 458
  }, {
    "id": 456,
    "label": "shard_1_of_3",
    "parentId": 457
  }, {
    "id": 455,
    "label": "test.log",
    "parentId": 456
  }, {
    "id": 459,
    "label": "test.cache_status",
    "parentId": 456
  }, {
    "id": 461,
    "label": "shard_2_of_3",
    "parentId": 457
  }, {
    "id": 460,
    "label": "test.log",
    "parentId": 461
  }, {
    "id": 462,
    "label": "test.cache_status",
    "parentId": 461
  }, {
    "id": 464,
    "label": "shard_3_of_3",
    "parentId": 457
  }, {
    "id": 463,
    "label": "test.log",
    "parentId": 464
  }, {
    "id": 465,
    "label": "test.cache_status",
    "parentId": 464
  }, {
    "id": 467,
    "label": "dask",
    "parentId": 2
  }, {
    "id": 466,
    "label": "test_dask",
    "parentId": 467
  }, {
    "id": 468,
    "label": "test_dask.runfiles_manifest",
    "parentId": 467
  }, {
    "id": 470,
    "label": "test_dask.runfiles",
    "parentId": 467
  }, {
    "id": 469,
    "label": "MANIFEST",
    "parentId": 470
  }, {
    "id": 471,
    "label": "test_dask.py",
    "parentId": 206
  }, {
    "id": 472,
    "label": "verify_dask_yarn.py",
    "parentId": 206
  }, {
    "id": 473,
    "label": "verify_dask_standalone.py",
    "parentId": 206
  }, {
    "id": 474,
    "label": "dask_Stest_Udask-runfiles",
    "parentId": 50
  }, {
    "id": 475,
    "label": "test_dask.temp",
    "parentId": 467
  }, {
    "id": 476,
    "label": "test_dask.zip",
    "parentId": 467
  }, {
    "id": 480,
    "label": "dask",
    "parentId": 65
  }, {
    "id": 479,
    "label": "test_dask",
    "parentId": 480
  }, {
    "id": 478,
    "label": "shard_1_of_3",
    "parentId": 479
  }, {
    "id": 477,
    "label": "test.log",
    "parentId": 478
  }, {
    "id": 481,
    "label": "test.cache_status",
    "parentId": 478
  }, {
    "id": 483,
    "label": "shard_2_of_3",
    "parentId": 479
  }, {
    "id": 482,
    "label": "test.log",
    "parentId": 483
  }, {
    "id": 484,
    "label": "test.cache_status",
    "parentId": 483
  }, {
    "id": 486,
    "label": "shard_3_of_3",
    "parentId": 479
  }, {
    "id": 485,
    "label": "test.log",
    "parentId": 486
  }, {
    "id": 487,
    "label": "test.cache_status",
    "parentId": 486
  }, {
    "id": 489,
    "label": "hbase",
    "parentId": 2
  }, {
    "id": 488,
    "label": "test_hbase",
    "parentId": 489
  }, {
    "id": 490,
    "label": "test_hbase.runfiles_manifest",
    "parentId": 489
  }, {
    "id": 492,
    "label": "test_hbase.runfiles",
    "parentId": 489
  }, {
    "id": 491,
    "label": "MANIFEST",
    "parentId": 492
  }, {
    "id": 494,
    "label": "hbase"
  }, {
    "id": 493,
    "label": "test_hbase.py",
    "parentId": 494
  }, {
    "id": 495,
    "label": "hbase.sh",
    "parentId": 494
  }, {
    "id": 497,
    "label": "zookeeper"
  }, {
    "id": 496,
    "label": "zookeeper.sh",
    "parentId": 497
  }, {
    "id": 498,
    "label": "hbase_Stest_Uhbase-runfiles",
    "parentId": 50
  }, {
    "id": 499,
    "label": "test_hbase.temp",
    "parentId": 489
  }, {
    "id": 500,
    "label": "test_hbase.zip",
    "parentId": 489
  }, {
    "id": 504,
    "label": "hbase",
    "parentId": 65
  }, {
    "id": 503,
    "label": "test_hbase",
    "parentId": 504
  }, {
    "id": 502,
    "label": "shard_1_of_6",
    "parentId": 503
  }, {
    "id": 501,
    "label": "test.log",
    "parentId": 502
  }, {
    "id": 505,
    "label": "test.cache_status",
    "parentId": 502
  }, {
    "id": 507,
    "label": "shard_2_of_6",
    "parentId": 503
  }, {
    "id": 506,
    "label": "test.log",
    "parentId": 507
  }, {
    "id": 508,
    "label": "test.cache_status",
    "parentId": 507
  }, {
    "id": 510,
    "label": "shard_3_of_6",
    "parentId": 503
  }, {
    "id": 509,
    "label": "test.log",
    "parentId": 510
  }, {
    "id": 511,
    "label": "test.cache_status",
    "parentId": 510
  }, {
    "id": 513,
    "label": "shard_4_of_6",
    "parentId": 503
  }, {
    "id": 512,
    "label": "test.log",
    "parentId": 513
  }, {
    "id": 514,
    "label": "test.cache_status",
    "parentId": 513
  }, {
    "id": 516,
    "label": "shard_5_of_6",
    "parentId": 503
  }, {
    "id": 515,
    "label": "test.log",
    "parentId": 516
  }, {
    "id": 517,
    "label": "test.cache_status",
    "parentId": 516
  }, {
    "id": 519,
    "label": "shard_6_of_6",
    "parentId": 503
  }, {
    "id": 518,
    "label": "test.log",
    "parentId": 519
  }, {
    "id": 520,
    "label": "test.cache_status",
    "parentId": 519
  }, {
    "id": 522,
    "label": "sqoop",
    "parentId": 2
  }, {
    "id": 521,
    "label": "test_sqoop",
    "parentId": 522
  }, {
    "id": 523,
    "label": "test_sqoop.runfiles_manifest",
    "parentId": 522
  }, {
    "id": 525,
    "label": "test_sqoop.runfiles",
    "parentId": 522
  }, {
    "id": 524,
    "label": "MANIFEST",
    "parentId": 525
  }, {
    "id": 527,
    "label": "sqoop"
  }, {
    "id": 526,
    "label": "test_sqoop.py",
    "parentId": 527
  }, {
    "id": 528,
    "label": "sqoop.sh",
    "parentId": 527
  }, {
    "id": 529,
    "label": "test_sql_db_dump.gz",
    "parentId": 527
  }, {
    "id": 530,
    "label": "sqoop_Stest_Usqoop-runfiles",
    "parentId": 50
  }, {
    "id": 531,
    "label": "test_sqoop.temp",
    "parentId": 522
  }, {
    "id": 532,
    "label": "test_sqoop.zip",
    "parentId": 522
  }, {
    "id": 536,
    "label": "sqoop",
    "parentId": 65
  }, {
    "id": 535,
    "label": "test_sqoop",
    "parentId": 536
  }, {
    "id": 534,
    "label": "shard_1_of_4",
    "parentId": 535
  }, {
    "id": 533,
    "label": "test.log",
    "parentId": 534
  }, {
    "id": 537,
    "label": "test.cache_status",
    "parentId": 534
  }, {
    "id": 539,
    "label": "shard_2_of_4",
    "parentId": 535
  }, {
    "id": 538,
    "label": "test.log",
    "parentId": 539
  }, {
    "id": 540,
    "label": "test.cache_status",
    "parentId": 539
  }, {
    "id": 542,
    "label": "shard_3_of_4",
    "parentId": 535
  }, {
    "id": 541,
    "label": "test.log",
    "parentId": 542
  }, {
    "id": 543,
    "label": "test.cache_status",
    "parentId": 542
  }, {
    "id": 545,
    "label": "shard_4_of_4",
    "parentId": 535
  }, {
    "id": 544,
    "label": "test.log",
    "parentId": 545
  }, {
    "id": 546,
    "label": "test.cache_status",
    "parentId": 545
  }, {
    "id": 548,
    "label": "hue",
    "parentId": 2
  }, {
    "id": 547,
    "label": "test_hue",
    "parentId": 548
  }, {
    "id": 549,
    "label": "test_hue.runfiles_manifest",
    "parentId": 548
  }, {
    "id": 551,
    "label": "test_hue.runfiles",
    "parentId": 548
  }, {
    "id": 550,
    "label": "MANIFEST",
    "parentId": 551
  }, {
    "id": 553,
    "label": "hue"
  }, {
    "id": 552,
    "label": "test_hue.py",
    "parentId": 553
  }, {
    "id": 554,
    "label": "hue.sh",
    "parentId": 553
  }, {
    "id": 555,
    "label": "hue_Stest_Uhue-runfiles",
    "parentId": 50
  }, {
    "id": 556,
    "label": "test_hue.temp",
    "parentId": 548
  }, {
    "id": 557,
    "label": "test_hue.zip",
    "parentId": 548
  }, {
    "id": 561,
    "label": "hue",
    "parentId": 65
  }, {
    "id": 560,
    "label": "test_hue",
    "parentId": 561
  }, {
    "id": 559,
    "label": "shard_1_of_3",
    "parentId": 560
  }, {
    "id": 558,
    "label": "test.log",
    "parentId": 559
  }, {
    "id": 562,
    "label": "test.cache_status",
    "parentId": 559
  }, {
    "id": 564,
    "label": "shard_2_of_3",
    "parentId": 560
  }, {
    "id": 563,
    "label": "test.log",
    "parentId": 564
  }, {
    "id": 565,
    "label": "test.cache_status",
    "parentId": 564
  }, {
    "id": 567,
    "label": "shard_3_of_3",
    "parentId": 560
  }, {
    "id": 566,
    "label": "test.log",
    "parentId": 567
  }, {
    "id": 568,
    "label": "test.cache_status",
    "parentId": 567
  }, {
    "id": 570,
    "label": "h2o",
    "parentId": 2
  }, {
    "id": 569,
    "label": "test_h2o",
    "parentId": 570
  }, {
    "id": 571,
    "label": "test_h2o.runfiles_manifest",
    "parentId": 570
  }, {
    "id": 573,
    "label": "test_h2o.runfiles",
    "parentId": 570
  }, {
    "id": 572,
    "label": "MANIFEST",
    "parentId": 573
  }, {
    "id": 575,
    "label": "h2o"
  }, {
    "id": 574,
    "label": "test_h2o.py",
    "parentId": 575
  }, {
    "id": 576,
    "label": "h2o.sh",
    "parentId": 575
  }, {
    "id": 577,
    "label": "sample-script.py",
    "parentId": 575
  }, {
    "id": 579,
    "label": "conda"
  }, {
    "id": 578,
    "label": "bootstrap-conda.sh",
    "parentId": 579
  }, {
    "id": 580,
    "label": "h2o_Stest_Uh2o-runfiles",
    "parentId": 50
  }, {
    "id": 581,
    "label": "test_h2o.temp",
    "parentId": 570
  }, {
    "id": 582,
    "label": "test_h2o.zip",
    "parentId": 570
  }, {
    "id": 586,
    "label": "h2o",
    "parentId": 65
  }, {
    "id": 585,
    "label": "test_h2o",
    "parentId": 586
  }, {
    "id": 584,
    "label": "shard_1_of_2",
    "parentId": 585
  }, {
    "id": 583,
    "label": "test.log",
    "parentId": 584
  }, {
    "id": 587,
    "label": "test.cache_status",
    "parentId": 584
  }, {
    "id": 589,
    "label": "shard_2_of_2",
    "parentId": 585
  }, {
    "id": 588,
    "label": "test.log",
    "parentId": 589
  }, {
    "id": 590,
    "label": "test.cache_status",
    "parentId": 589
  }, {
    "id": 592,
    "label": "bigtable",
    "parentId": 2
  }, {
    "id": 591,
    "label": "test_bigtable",
    "parentId": 592
  }, {
    "id": 593,
    "label": "test_bigtable.runfiles_manifest",
    "parentId": 592
  }, {
    "id": 595,
    "label": "test_bigtable.runfiles",
    "parentId": 592
  }, {
    "id": 594,
    "label": "MANIFEST",
    "parentId": 595
  }, {
    "id": 597,
    "label": "bigtable"
  }, {
    "id": 596,
    "label": "test_bigtable.py",
    "parentId": 597
  }, {
    "id": 598,
    "label": "bigtable.sh",
    "parentId": 597
  }, {
    "id": 599,
    "label": "run_hbase_commands.py",
    "parentId": 597
  }, {
    "id": 600,
    "label": "bigtable_Stest_Ubigtable-runfiles",
    "parentId": 50
  }, {
    "id": 601,
    "label": "test_bigtable.temp",
    "parentId": 592
  }, {
    "id": 602,
    "label": "test_bigtable.zip",
    "parentId": 592
  }, {
    "id": 606,
    "label": "bigtable",
    "parentId": 65
  }, {
    "id": 605,
    "label": "test_bigtable",
    "parentId": 606
  }, {
    "id": 604,
    "label": "shard_1_of_3",
    "parentId": 605
  }, {
    "id": 603,
    "label": "test.log",
    "parentId": 604
  }, {
    "id": 607,
    "label": "test.cache_status",
    "parentId": 604
  }, {
    "id": 609,
    "label": "shard_2_of_3",
    "parentId": 605
  }, {
    "id": 608,
    "label": "test.log",
    "parentId": 609
  }, {
    "id": 610,
    "label": "test.cache_status",
    "parentId": 609
  }, {
    "id": 612,
    "label": "shard_3_of_3",
    "parentId": 605
  }, {
    "id": 611,
    "label": "test.log",
    "parentId": 612
  }, {
    "id": 613,
    "label": "test.cache_status",
    "parentId": 612
  }, {
    "id": 615,
    "label": "horovod",
    "parentId": 2
  }, {
    "id": 614,
    "label": "test_horovod",
    "parentId": 615
  }, {
    "id": 616,
    "label": "test_horovod.runfiles_manifest",
    "parentId": 615
  }, {
    "id": 618,
    "label": "test_horovod.runfiles",
    "parentId": 615
  }, {
    "id": 617,
    "label": "MANIFEST",
    "parentId": 618
  }, {
    "id": 620,
    "label": "horovod"
  }, {
    "id": 619,
    "label": "test_horovod.py",
    "parentId": 620
  }, {
    "id": 621,
    "label": "horovod.sh",
    "parentId": 620
  }, {
    "id": 623,
    "label": "scripts",
    "parentId": 620
  }, {
    "id": 622,
    "label": "verify_mxnet.py",
    "parentId": 623
  }, {
    "id": 624,
    "label": "verify_pytorch.py",
    "parentId": 623
  }, {
    "id": 625,
    "label": "verify_tensorflow.py",
    "parentId": 623
  }, {
    "id": 626,
    "label": "horovod_Stest_Uhorovod-runfiles",
    "parentId": 50
  }, {
    "id": 627,
    "label": "test_horovod.temp",
    "parentId": 615
  }, {
    "id": 628,
    "label": "test_horovod.zip",
    "parentId": 615
  }, {
    "id": 632,
    "label": "horovod",
    "parentId": 65
  }, {
    "id": 631,
    "label": "test_horovod",
    "parentId": 632
  }, {
    "id": 630,
    "label": "shard_1_of_4",
    "parentId": 631
  }, {
    "id": 629,
    "label": "test.log",
    "parentId": 630
  }, {
    "id": 633,
    "label": "test.cache_status",
    "parentId": 630
  }, {
    "id": 635,
    "label": "shard_2_of_4",
    "parentId": 631
  }, {
    "id": 634,
    "label": "test.log",
    "parentId": 635
  }, {
    "id": 636,
    "label": "test.cache_status",
    "parentId": 635
  }, {
    "id": 638,
    "label": "shard_3_of_4",
    "parentId": 631
  }, {
    "id": 637,
    "label": "test.log",
    "parentId": 638
  }, {
    "id": 639,
    "label": "test.cache_status",
    "parentId": 638
  }, {
    "id": 641,
    "label": "shard_4_of_4",
    "parentId": 631
  }, {
    "id": 640,
    "label": "test.log",
    "parentId": 641
  }, {
    "id": 642,
    "label": "test.cache_status",
    "parentId": 641
  }, {
    "id": 644,
    "label": "kafka",
    "parentId": 2
  }, {
    "id": 643,
    "label": "test_kafka",
    "parentId": 644
  }, {
    "id": 645,
    "label": "test_kafka.runfiles_manifest",
    "parentId": 644
  }, {
    "id": 647,
    "label": "test_kafka.runfiles",
    "parentId": 644
  }, {
    "id": 646,
    "label": "MANIFEST",
    "parentId": 647
  }, {
    "id": 649,
    "label": "kafka"
  }, {
    "id": 648,
    "label": "test_kafka.py",
    "parentId": 649
  }, {
    "id": 650,
    "label": "kafka.sh",
    "parentId": 649
  }, {
    "id": 651,
    "label": "validate.sh",
    "parentId": 649
  }, {
    "id": 652,
    "label": "kafka_Stest_Ukafka-runfiles",
    "parentId": 50
  }, {
    "id": 653,
    "label": "test_kafka.temp",
    "parentId": 644
  }, {
    "id": 654,
    "label": "test_kafka.zip",
    "parentId": 644
  }, {
    "id": 657,
    "label": "kafka",
    "parentId": 65
  }, {
    "id": 656,
    "label": "test_kafka",
    "parentId": 657
  }, {
    "id": 655,
    "label": "test.log",
    "parentId": 656
  }, {
    "id": 658,
    "label": "test.cache_status",
    "parentId": 656
  }, {
    "id": 660,
    "label": "drill",
    "parentId": 2
  }, {
    "id": 659,
    "label": "test_drill",
    "parentId": 660
  }, {
    "id": 661,
    "label": "test_drill.runfiles_manifest",
    "parentId": 660
  }, {
    "id": 663,
    "label": "test_drill.runfiles",
    "parentId": 660
  }, {
    "id": 662,
    "label": "MANIFEST",
    "parentId": 663
  }, {
    "id": 665,
    "label": "drill"
  }, {
    "id": 664,
    "label": "test_drill.py",
    "parentId": 665
  }, {
    "id": 666,
    "label": "drill.sh",
    "parentId": 665
  }, {
    "id": 667,
    "label": "validate.sh",
    "parentId": 665
  }, {
    "id": 668,
    "label": "drill_Stest_Udrill-runfiles",
    "parentId": 50
  }, {
    "id": 669,
    "label": "test_drill.temp",
    "parentId": 660
  }, {
    "id": 670,
    "label": "test_drill.zip",
    "parentId": 660
  }, {
    "id": 674,
    "label": "drill",
    "parentId": 65
  }, {
    "id": 673,
    "label": "test_drill",
    "parentId": 674
  }, {
    "id": 672,
    "label": "shard_1_of_3",
    "parentId": 673
  }, {
    "id": 671,
    "label": "test.log",
    "parentId": 672
  }, {
    "id": 675,
    "label": "test.cache_status",
    "parentId": 672
  }, {
    "id": 677,
    "label": "shard_2_of_3",
    "parentId": 673
  }, {
    "id": 676,
    "label": "test.log",
    "parentId": 677
  }, {
    "id": 678,
    "label": "test.cache_status",
    "parentId": 677
  }, {
    "id": 680,
    "label": "shard_3_of_3",
    "parentId": 673
  }, {
    "id": 679,
    "label": "test.log",
    "parentId": 680
  }, {
    "id": 681,
    "label": "test.cache_status",
    "parentId": 680
  }, {
    "id": 683,
    "label": "knox",
    "parentId": 2
  }, {
    "id": 682,
    "label": "test_knox",
    "parentId": 683
  }, {
    "id": 684,
    "label": "test_knox.runfiles_manifest",
    "parentId": 683
  }, {
    "id": 686,
    "label": "test_knox.runfiles",
    "parentId": 683
  }, {
    "id": 685,
    "label": "MANIFEST",
    "parentId": 686
  }, {
    "id": 688,
    "label": "knox"
  }, {
    "id": 687,
    "label": "test_knox.py",
    "parentId": 688
  }, {
    "id": 689,
    "label": "gateway-site.xml",
    "parentId": 688
  }, {
    "id": 690,
    "label": "knox.sh",
    "parentId": 688
  }, {
    "id": 691,
    "label": "knox-config.yaml",
    "parentId": 688
  }, {
    "id": 692,
    "label": "verify_knox.sh",
    "parentId": 688
  }, {
    "id": 694,
    "label": "services",
    "parentId": 688
  }, {
    "id": 693,
    "label": "knox.service",
    "parentId": 694
  }, {
    "id": 695,
    "label": "knoxldapdemo.service",
    "parentId": 694
  }, {
    "id": 697,
    "label": "topologies",
    "parentId": 688
  }, {
    "id": 696,
    "label": "example-hive-nonpii.xml",
    "parentId": 697
  }, {
    "id": 698,
    "label": "example-hive-pii.xml",
    "parentId": 697
  }, {
    "id": 699,
    "label": "knox_Stest_Uknox-runfiles",
    "parentId": 50
  }, {
    "id": 700,
    "label": "test_knox.temp",
    "parentId": 683
  }, {
    "id": 701,
    "label": "test_knox.zip",
    "parentId": 683
  }, {
    "id": 705,
    "label": "knox",
    "parentId": 65
  }, {
    "id": 704,
    "label": "test_knox",
    "parentId": 705
  }, {
    "id": 703,
    "label": "shard_1_of_6",
    "parentId": 704
  }, {
    "id": 702,
    "label": "test.log",
    "parentId": 703
  }, {
    "id": 706,
    "label": "test.cache_status",
    "parentId": 703
  }, {
    "id": 708,
    "label": "shard_2_of_6",
    "parentId": 704
  }, {
    "id": 707,
    "label": "test.log",
    "parentId": 708
  }, {
    "id": 709,
    "label": "test.cache_status",
    "parentId": 708
  }, {
    "id": 711,
    "label": "shard_3_of_6",
    "parentId": 704
  }, {
    "id": 710,
    "label": "test.log",
    "parentId": 711
  }, {
    "id": 712,
    "label": "test.cache_status",
    "parentId": 711
  }, {
    "id": 714,
    "label": "shard_4_of_6",
    "parentId": 704
  }, {
    "id": 713,
    "label": "test.log",
    "parentId": 714
  }, {
    "id": 715,
    "label": "test.cache_status",
    "parentId": 714
  }, {
    "id": 717,
    "label": "shard_5_of_6",
    "parentId": 704
  }, {
    "id": 716,
    "label": "test.log",
    "parentId": 717
  }, {
    "id": 718,
    "label": "test.cache_status",
    "parentId": 717
  }, {
    "id": 720,
    "label": "shard_6_of_6",
    "parentId": 704
  }, {
    "id": 719,
    "label": "test.log",
    "parentId": 720
  }, {
    "id": 721,
    "label": "test.cache_status",
    "parentId": 720
  }, {
    "id": 723,
    "label": "livy",
    "parentId": 2
  }, {
    "id": 722,
    "label": "test_livy",
    "parentId": 723
  }, {
    "id": 724,
    "label": "test_livy.runfiles_manifest",
    "parentId": 723
  }, {
    "id": 726,
    "label": "test_livy.runfiles",
    "parentId": 723
  }, {
    "id": 725,
    "label": "MANIFEST",
    "parentId": 726
  }, {
    "id": 728,
    "label": "livy"
  }, {
    "id": 727,
    "label": "test_livy.py",
    "parentId": 728
  }, {
    "id": 729,
    "label": "livy.sh",
    "parentId": 728
  }, {
    "id": 730,
    "label": "verify_livy_running.py",
    "parentId": 728
  }, {
    "id": 731,
    "label": "livy_Stest_Ulivy-runfiles",
    "parentId": 50
  }, {
    "id": 732,
    "label": "test_livy.temp",
    "parentId": 723
  }, {
    "id": 733,
    "label": "test_livy.zip",
    "parentId": 723
  }, {
    "id": 737,
    "label": "livy",
    "parentId": 65
  }, {
    "id": 736,
    "label": "test_livy",
    "parentId": 737
  }, {
    "id": 735,
    "label": "shard_1_of_3",
    "parentId": 736
  }, {
    "id": 734,
    "label": "test.log",
    "parentId": 735
  }, {
    "id": 738,
    "label": "test.cache_status",
    "parentId": 735
  }, {
    "id": 740,
    "label": "shard_2_of_3",
    "parentId": 736
  }, {
    "id": 739,
    "label": "test.log",
    "parentId": 740
  }, {
    "id": 741,
    "label": "test.cache_status",
    "parentId": 740
  }, {
    "id": 743,
    "label": "shard_3_of_3",
    "parentId": 736
  }, {
    "id": 742,
    "label": "test.log",
    "parentId": 743
  }, {
    "id": 744,
    "label": "test.cache_status",
    "parentId": 743
  }, {
    "id": 746,
    "label": "gpu",
    "parentId": 2
  }, {
    "id": 745,
    "label": "test_gpu",
    "parentId": 746
  }, {
    "id": 747,
    "label": "test_gpu.runfiles_manifest",
    "parentId": 746
  }, {
    "id": 749,
    "label": "test_gpu.runfiles",
    "parentId": 746
  }, {
    "id": 748,
    "label": "MANIFEST",
    "parentId": 749
  }, {
    "id": 750,
    "label": "test_gpu.py",
    "parentId": 208
  }, {
    "id": 751,
    "label": "mig.sh",
    "parentId": 208
  }, {
    "id": 752,
    "label": "gpu_Stest_Ugpu-runfiles",
    "parentId": 50
  }, {
    "id": 753,
    "label": "test_gpu.temp",
    "parentId": 746
  }, {
    "id": 754,
    "label": "test_gpu.zip",
    "parentId": 746
  }, {
    "id": 758,
    "label": "gpu",
    "parentId": 65
  }, {
    "id": 757,
    "label": "test_gpu",
    "parentId": 758
  }, {
    "id": 756,
    "label": "shard_1_of_15",
    "parentId": 757
  }, {
    "id": 755,
    "label": "test.log",
    "parentId": 756
  }, {
    "id": 759,
    "label": "test.cache_status",
    "parentId": 756
  }, {
    "id": 761,
    "label": "shard_2_of_15",
    "parentId": 757
  }, {
    "id": 760,
    "label": "test.log",
    "parentId": 761
  }, {
    "id": 762,
    "label": "test.cache_status",
    "parentId": 761
  }, {
    "id": 764,
    "label": "shard_3_of_15",
    "parentId": 757
  }, {
    "id": 763,
    "label": "test.log",
    "parentId": 764
  }, {
    "id": 765,
    "label": "test.cache_status",
    "parentId": 764
  }, {
    "id": 767,
    "label": "shard_4_of_15",
    "parentId": 757
  }, {
    "id": 766,
    "label": "test.log",
    "parentId": 767
  }, {
    "id": 768,
    "label": "test.cache_status",
    "parentId": 767
  }, {
    "id": 770,
    "label": "shard_5_of_15",
    "parentId": 757
  }, {
    "id": 769,
    "label": "test.log",
    "parentId": 770
  }, {
    "id": 771,
    "label": "test.cache_status",
    "parentId": 770
  }, {
    "id": 773,
    "label": "shard_6_of_15",
    "parentId": 757
  }, {
    "id": 772,
    "label": "test.log",
    "parentId": 773
  }, {
    "id": 774,
    "label": "test.cache_status",
    "parentId": 773
  }, {
    "id": 776,
    "label": "shard_7_of_15",
    "parentId": 757
  }, {
    "id": 775,
    "label": "test.log",
    "parentId": 776
  }, {
    "id": 777,
    "label": "test.cache_status",
    "parentId": 776
  }, {
    "id": 779,
    "label": "shard_8_of_15",
    "parentId": 757
  }, {
    "id": 778,
    "label": "test.log",
    "parentId": 779
  }, {
    "id": 780,
    "label": "test.cache_status",
    "parentId": 779
  }, {
    "id": 782,
    "label": "shard_9_of_15",
    "parentId": 757
  }, {
    "id": 781,
    "label": "test.log",
    "parentId": 782
  }, {
    "id": 783,
    "label": "test.cache_status",
    "parentId": 782
  }, {
    "id": 785,
    "label": "shard_10_of_15",
    "parentId": 757
  }, {
    "id": 784,
    "label": "test.log",
    "parentId": 785
  }, {
    "id": 786,
    "label": "test.cache_status",
    "parentId": 785
  }, {
    "id": 788,
    "label": "shard_11_of_15",
    "parentId": 757
  }, {
    "id": 787,
    "label": "test.log",
    "parentId": 788
  }, {
    "id": 789,
    "label": "test.cache_status",
    "parentId": 788
  }, {
    "id": 791,
    "label": "shard_12_of_15",
    "parentId": 757
  }, {
    "id": 790,
    "label": "test.log",
    "parentId": 791
  }, {
    "id": 792,
    "label": "test.cache_status",
    "parentId": 791
  }, {
    "id": 794,
    "label": "shard_13_of_15",
    "parentId": 757
  }, {
    "id": 793,
    "label": "test.log",
    "parentId": 794
  }, {
    "id": 795,
    "label": "test.cache_status",
    "parentId": 794
  }, {
    "id": 797,
    "label": "shard_14_of_15",
    "parentId": 757
  }, {
    "id": 796,
    "label": "test.log",
    "parentId": 797
  }, {
    "id": 798,
    "label": "test.cache_status",
    "parentId": 797
  }, {
    "id": 800,
    "label": "shard_15_of_15",
    "parentId": 757
  }, {
    "id": 799,
    "label": "test.log",
    "parentId": 800
  }, {
    "id": 801,
    "label": "test.cache_status",
    "parentId": 800
  }, {
    "id": 803,
    "label": "rstudio",
    "parentId": 2
  }, {
    "id": 802,
    "label": "test_rstudio",
    "parentId": 803
  }, {
    "id": 804,
    "label": "test_rstudio.runfiles_manifest",
    "parentId": 803
  }, {
    "id": 806,
    "label": "test_rstudio.runfiles",
    "parentId": 803
  }, {
    "id": 805,
    "label": "MANIFEST",
    "parentId": 806
  }, {
    "id": 808,
    "label": "rstudio"
  }, {
    "id": 807,
    "label": "test_rstudio.py",
    "parentId": 808
  }, {
    "id": 809,
    "label": "rstudio.sh",
    "parentId": 808
  }, {
    "id": 810,
    "label": "rstudio_Stest_Urstudio-runfiles",
    "parentId": 50
  }, {
    "id": 811,
    "label": "test_rstudio.temp",
    "parentId": 803
  }, {
    "id": 812,
    "label": "test_rstudio.zip",
    "parentId": 803
  }, {
    "id": 816,
    "label": "rstudio",
    "parentId": 65
  }, {
    "id": 815,
    "label": "test_rstudio",
    "parentId": 816
  }, {
    "id": 814,
    "label": "shard_1_of_4",
    "parentId": 815
  }, {
    "id": 813,
    "label": "test.log",
    "parentId": 814
  }, {
    "id": 817,
    "label": "test.cache_status",
    "parentId": 814
  }, {
    "id": 819,
    "label": "shard_2_of_4",
    "parentId": 815
  }, {
    "id": 818,
    "label": "test.log",
    "parentId": 819
  }, {
    "id": 820,
    "label": "test.cache_status",
    "parentId": 819
  }, {
    "id": 822,
    "label": "shard_3_of_4",
    "parentId": 815
  }, {
    "id": 821,
    "label": "test.log",
    "parentId": 822
  }, {
    "id": 823,
    "label": "test.cache_status",
    "parentId": 822
  }, {
    "id": 825,
    "label": "shard_4_of_4",
    "parentId": 815
  }, {
    "id": 824,
    "label": "test.log",
    "parentId": 825
  }, {
    "id": 826,
    "label": "test.cache_status",
    "parentId": 825
  }, {
    "id": 828,
    "label": "ranger",
    "parentId": 2
  }, {
    "id": 827,
    "label": "test_ranger",
    "parentId": 828
  }, {
    "id": 829,
    "label": "test_ranger.runfiles_manifest",
    "parentId": 828
  }, {
    "id": 831,
    "label": "test_ranger.runfiles",
    "parentId": 828
  }, {
    "id": 830,
    "label": "MANIFEST",
    "parentId": 831
  }, {
    "id": 833,
    "label": "ranger"
  }, {
    "id": 832,
    "label": "test_ranger.py",
    "parentId": 833
  }, {
    "id": 834,
    "label": "ranger.sh",
    "parentId": 833
  }, {
    "id": 835,
    "label": "verify_ranger.py",
    "parentId": 833
  }, {
    "id": 836,
    "label": "ranger_Stest_Uranger-runfiles",
    "parentId": 50
  }, {
    "id": 837,
    "label": "test_ranger.temp",
    "parentId": 828
  }, {
    "id": 838,
    "label": "test_ranger.zip",
    "parentId": 828
  }, {
    "id": 842,
    "label": "ranger",
    "parentId": 65
  }, {
    "id": 841,
    "label": "test_ranger",
    "parentId": 842
  }, {
    "id": 840,
    "label": "shard_1_of_3",
    "parentId": 841
  }, {
    "id": 839,
    "label": "test.log",
    "parentId": 840
  }, {
    "id": 843,
    "label": "test.cache_status",
    "parentId": 840
  }, {
    "id": 845,
    "label": "shard_2_of_3",
    "parentId": 841
  }, {
    "id": 844,
    "label": "test.log",
    "parentId": 845
  }, {
    "id": 846,
    "label": "test.cache_status",
    "parentId": 845
  }, {
    "id": 848,
    "label": "shard_3_of_3",
    "parentId": 841
  }, {
    "id": 847,
    "label": "test.log",
    "parentId": 848
  }, {
    "id": 849,
    "label": "test.cache_status",
    "parentId": 848
  }, {
    "id": 851,
    "label": "conda",
    "parentId": 2
  }, {
    "id": 850,
    "label": "test_conda",
    "parentId": 851
  }, {
    "id": 852,
    "label": "test_conda.runfiles_manifest",
    "parentId": 851
  }, {
    "id": 854,
    "label": "test_conda.runfiles",
    "parentId": 851
  }, {
    "id": 853,
    "label": "MANIFEST",
    "parentId": 854
  }, {
    "id": 855,
    "label": "test_conda.py",
    "parentId": 579
  }, {
    "id": 856,
    "label": "install-conda-env.sh",
    "parentId": 579
  }, {
    "id": 857,
    "label": "get-sys-exec.py",
    "parentId": 579
  }, {
    "id": 858,
    "label": "conda_Stest_Uconda-runfiles",
    "parentId": 50
  }, {
    "id": 859,
    "label": "test_conda.temp",
    "parentId": 851
  }, {
    "id": 860,
    "label": "test_conda.zip",
    "parentId": 851
  }, {
    "id": 864,
    "label": "conda",
    "parentId": 65
  }, {
    "id": 863,
    "label": "test_conda",
    "parentId": 864
  }, {
    "id": 862,
    "label": "shard_1_of_2",
    "parentId": 863
  }, {
    "id": 861,
    "label": "test.log",
    "parentId": 862
  }, {
    "id": 865,
    "label": "test.cache_status",
    "parentId": 862
  }, {
    "id": 867,
    "label": "shard_2_of_2",
    "parentId": 863
  }, {
    "id": 866,
    "label": "test.log",
    "parentId": 867
  }, {
    "id": 868,
    "label": "test.cache_status",
    "parentId": 867
  }, {
    "id": 870,
    "label": "atlas",
    "parentId": 2
  }, {
    "id": 869,
    "label": "test_atlas",
    "parentId": 870
  }, {
    "id": 871,
    "label": "test_atlas.runfiles_manifest",
    "parentId": 870
  }, {
    "id": 873,
    "label": "test_atlas.runfiles",
    "parentId": 870
  }, {
    "id": 872,
    "label": "MANIFEST",
    "parentId": 873
  }, {
    "id": 875,
    "label": "atlas"
  }, {
    "id": 874,
    "label": "test_atlas.py",
    "parentId": 875
  }, {
    "id": 876,
    "label": "atlas.sh",
    "parentId": 875
  }, {
    "id": 877,
    "label": "populate_atlas.sh",
    "parentId": 875
  }, {
    "id": 878,
    "label": "validate_atlas.py",
    "parentId": 875
  }, {
    "id": 879,
    "label": "atlas_Stest_Uatlas-runfiles",
    "parentId": 50
  }, {
    "id": 880,
    "label": "test_atlas.temp",
    "parentId": 870
  }, {
    "id": 881,
    "label": "test_atlas.zip",
    "parentId": 870
  }, {
    "id": 885,
    "label": "atlas",
    "parentId": 65
  }, {
    "id": 884,
    "label": "test_atlas",
    "parentId": 885
  }, {
    "id": 883,
    "label": "shard_1_of_7",
    "parentId": 884
  }, {
    "id": 882,
    "label": "test.log",
    "parentId": 883
  }, {
    "id": 886,
    "label": "test.cache_status",
    "parentId": 883
  }, {
    "id": 888,
    "label": "shard_2_of_7",
    "parentId": 884
  }, {
    "id": 887,
    "label": "test.log",
    "parentId": 888
  }, {
    "id": 889,
    "label": "test.cache_status",
    "parentId": 888
  }, {
    "id": 891,
    "label": "shard_3_of_7",
    "parentId": 884
  }, {
    "id": 890,
    "label": "test.log",
    "parentId": 891
  }, {
    "id": 892,
    "label": "test.cache_status",
    "parentId": 891
  }, {
    "id": 894,
    "label": "shard_4_of_7",
    "parentId": 884
  }, {
    "id": 893,
    "label": "test.log",
    "parentId": 894
  }, {
    "id": 895,
    "label": "test.cache_status",
    "parentId": 894
  }, {
    "id": 897,
    "label": "shard_5_of_7",
    "parentId": 884
  }, {
    "id": 896,
    "label": "test.log",
    "parentId": 897
  }, {
    "id": 898,
    "label": "test.cache_status",
    "parentId": 897
  }, {
    "id": 900,
    "label": "shard_6_of_7",
    "parentId": 884
  }, {
    "id": 899,
    "label": "test.log",
    "parentId": 900
  }, {
    "id": 901,
    "label": "test.cache_status",
    "parentId": 900
  }, {
    "id": 903,
    "label": "shard_7_of_7",
    "parentId": 884
  }, {
    "id": 902,
    "label": "test.log",
    "parentId": 903
  }, {
    "id": 904,
    "label": "test.cache_status",
    "parentId": 903
  }, {
    "id": 906,
    "label": "alluxio",
    "parentId": 2
  }, {
    "id": 905,
    "label": "test_alluxio",
    "parentId": 906
  }, {
    "id": 907,
    "label": "test_alluxio.runfiles_manifest",
    "parentId": 906
  }, {
    "id": 909,
    "label": "test_alluxio.runfiles",
    "parentId": 906
  }, {
    "id": 908,
    "label": "MANIFEST",
    "parentId": 909
  }, {
    "id": 911,
    "label": "alluxio"
  }, {
    "id": 910,
    "label": "test_alluxio.py",
    "parentId": 911
  }, {
    "id": 912,
    "label": "alluxio.sh",
    "parentId": 911
  }, {
    "id": 913,
    "label": "alluxio_Stest_Ualluxio-runfiles",
    "parentId": 50
  }, {
    "id": 914,
    "label": "test_alluxio.temp",
    "parentId": 906
  }, {
    "id": 915,
    "label": "test_alluxio.zip",
    "parentId": 906
  }, {
    "id": 919,
    "label": "alluxio",
    "parentId": 65
  }, {
    "id": 918,
    "label": "test_alluxio",
    "parentId": 919
  }, {
    "id": 917,
    "label": "shard_1_of_2",
    "parentId": 918
  }, {
    "id": 916,
    "label": "test.log",
    "parentId": 917
  }, {
    "id": 920,
    "label": "test.cache_status",
    "parentId": 917
  }, {
    "id": 922,
    "label": "shard_2_of_2",
    "parentId": 918
  }, {
    "id": 921,
    "label": "test.log",
    "parentId": 922
  }, {
    "id": 923,
    "label": "test.cache_status",
    "parentId": 922
  }, {
    "id": 925,
    "label": "python",
    "parentId": 56
  }, {
    "id": 924,
    "label": "pywrapper_template.txt",
    "parentId": 925
  }, {
    "id": 926,
    "label": "py2wrapper.sh",
    "parentId": 45
  }, {
    "id": 927,
    "label": "py2wrapper_nonstrict.sh",
    "parentId": 45
  }, {
    "id": 928,
    "label": "py3wrapper_nonstrict.sh",
    "parentId": 45
  }]
}

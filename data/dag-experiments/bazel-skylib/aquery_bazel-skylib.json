{
  "artifacts": [{
    "id": 1,
    "pathFragmentId": 1
  }, {
    "id": 2,
    "pathFragmentId": 2
  }, {
    "id": 3,
    "pathFragmentId": 7
  }, {
    "id": 4,
    "pathFragmentId": 12
  }, {
    "id": 5,
    "pathFragmentId": 14
  }, {
    "id": 6,
    "pathFragmentId": 16
  }, {
    "id": 7,
    "pathFragmentId": 17
  }, {
    "id": 8,
    "pathFragmentId": 20
  }, {
    "id": 9,
    "pathFragmentId": 22
  }, {
    "id": 10,
    "pathFragmentId": 23
  }, {
    "id": 11,
    "pathFragmentId": 27
  }, {
    "id": 12,
    "pathFragmentId": 28
  }, {
    "id": 13,
    "pathFragmentId": 31
  }, {
    "id": 14,
    "pathFragmentId": 32
  }, {
    "id": 15,
    "pathFragmentId": 33
  }, {
    "id": 16,
    "pathFragmentId": 35
  }, {
    "id": 17,
    "pathFragmentId": 36
  }, {
    "id": 18,
    "pathFragmentId": 37
  }, {
    "id": 19,
    "pathFragmentId": 38
  }, {
    "id": 20,
    "pathFragmentId": 40
  }, {
    "id": 21,
    "pathFragmentId": 41
  }, {
    "id": 22,
    "pathFragmentId": 43
  }, {
    "id": 23,
    "pathFragmentId": 44
  }, {
    "id": 24,
    "pathFragmentId": 48
  }, {
    "id": 25,
    "pathFragmentId": 49
  }, {
    "id": 26,
    "pathFragmentId": 52
  }, {
    "id": 27,
    "pathFragmentId": 55
  }, {
    "id": 28,
    "pathFragmentId": 60
  }, {
    "id": 29,
    "pathFragmentId": 61
  }, {
    "id": 30,
    "pathFragmentId": 62
  }, {
    "id": 31,
    "pathFragmentId": 63
  }, {
    "id": 32,
    "pathFragmentId": 64
  }, {
    "id": 33,
    "pathFragmentId": 68
  }, {
    "id": 34,
    "pathFragmentId": 69
  }, {
    "id": 35,
    "pathFragmentId": 70
  }, {
    "id": 36,
    "pathFragmentId": 71
  }, {
    "id": 37,
    "pathFragmentId": 72
  }, {
    "id": 38,
    "pathFragmentId": 73
  }, {
    "id": 39,
    "pathFragmentId": 74
  }, {
    "id": 40,
    "pathFragmentId": 75
  }, {
    "id": 41,
    "pathFragmentId": 77
  }, {
    "id": 42,
    "pathFragmentId": 78
  }, {
    "id": 43,
    "pathFragmentId": 79
  }, {
    "id": 44,
    "pathFragmentId": 80
  }, {
    "id": 45,
    "pathFragmentId": 81
  }, {
    "id": 46,
    "pathFragmentId": 83
  }, {
    "id": 47,
    "pathFragmentId": 84
  }, {
    "id": 48,
    "pathFragmentId": 85
  }, {
    "id": 49,
    "pathFragmentId": 89
  }, {
    "id": 50,
    "pathFragmentId": 90
  }, {
    "id": 51,
    "pathFragmentId": 95
  }, {
    "id": 52,
    "pathFragmentId": 100
  }, {
    "id": 53,
    "pathFragmentId": 101
  }, {
    "id": 54,
    "pathFragmentId": 102
  }, {
    "id": 55,
    "pathFragmentId": 103
  }, {
    "id": 56,
    "pathFragmentId": 104
  }, {
    "id": 57,
    "pathFragmentId": 106
  }, {
    "id": 58,
    "pathFragmentId": 107
  }, {
    "id": 59,
    "pathFragmentId": 109
  }, {
    "id": 60,
    "pathFragmentId": 110
  }, {
    "id": 61,
    "pathFragmentId": 113
  }, {
    "id": 62,
    "pathFragmentId": 114
  }, {
    "id": 63,
    "pathFragmentId": 116
  }, {
    "id": 64,
    "pathFragmentId": 117
  }, {
    "id": 65,
    "pathFragmentId": 118
  }, {
    "id": 66,
    "pathFragmentId": 120
  }, {
    "id": 67,
    "pathFragmentId": 121
  }, {
    "id": 68,
    "pathFragmentId": 122
  }, {
    "id": 69,
    "pathFragmentId": 123
  }, {
    "id": 70,
    "pathFragmentId": 124
  }, {
    "id": 71,
    "pathFragmentId": 126
  }, {
    "id": 72,
    "pathFragmentId": 127
  }, {
    "id": 73,
    "pathFragmentId": 128
  }, {
    "id": 74,
    "pathFragmentId": 129
  }, {
    "id": 75,
    "pathFragmentId": 131
  }, {
    "id": 76,
    "pathFragmentId": 132
  }, {
    "id": 77,
    "pathFragmentId": 134
  }, {
    "id": 78,
    "pathFragmentId": 135
  }, {
    "id": 79,
    "pathFragmentId": 136
  }, {
    "id": 80,
    "pathFragmentId": 137
  }, {
    "id": 81,
    "pathFragmentId": 139
  }, {
    "id": 82,
    "pathFragmentId": 140
  }, {
    "id": 83,
    "pathFragmentId": 142
  }, {
    "id": 84,
    "pathFragmentId": 143
  }, {
    "id": 85,
    "pathFragmentId": 144
  }, {
    "id": 86,
    "pathFragmentId": 146
  }, {
    "id": 87,
    "pathFragmentId": 147
  }, {
    "id": 88,
    "pathFragmentId": 148
  }, {
    "id": 89,
    "pathFragmentId": 150
  }, {
    "id": 90,
    "pathFragmentId": 151
  }, {
    "id": 91,
    "pathFragmentId": 154
  }, {
    "id": 92,
    "pathFragmentId": 155
  }, {
    "id": 93,
    "pathFragmentId": 156
  }, {
    "id": 94,
    "pathFragmentId": 157
  }, {
    "id": 95,
    "pathFragmentId": 158
  }, {
    "id": 96,
    "pathFragmentId": 159
  }, {
    "id": 97,
    "pathFragmentId": 160
  }, {
    "id": 98,
    "pathFragmentId": 161
  }, {
    "id": 99,
    "pathFragmentId": 162
  }, {
    "id": 100,
    "pathFragmentId": 163
  }, {
    "id": 101,
    "pathFragmentId": 164
  }, {
    "id": 102,
    "pathFragmentId": 165
  }, {
    "id": 103,
    "pathFragmentId": 166
  }, {
    "id": 104,
    "pathFragmentId": 167
  }, {
    "id": 105,
    "pathFragmentId": 168
  }, {
    "id": 106,
    "pathFragmentId": 169
  }, {
    "id": 107,
    "pathFragmentId": 170
  }, {
    "id": 108,
    "pathFragmentId": 171
  }, {
    "id": 109,
    "pathFragmentId": 172
  }, {
    "id": 110,
    "pathFragmentId": 173
  }, {
    "id": 111,
    "pathFragmentId": 174
  }, {
    "id": 112,
    "pathFragmentId": 175
  }, {
    "id": 113,
    "pathFragmentId": 176
  }, {
    "id": 114,
    "pathFragmentId": 177
  }, {
    "id": 115,
    "pathFragmentId": 178
  }, {
    "id": 116,
    "pathFragmentId": 179
  }, {
    "id": 117,
    "pathFragmentId": 180
  }, {
    "id": 118,
    "pathFragmentId": 181
  }, {
    "id": 119,
    "pathFragmentId": 182
  }, {
    "id": 120,
    "pathFragmentId": 183
  }, {
    "id": 121,
    "pathFragmentId": 184
  }, {
    "id": 122,
    "pathFragmentId": 185
  }, {
    "id": 123,
    "pathFragmentId": 186
  }, {
    "id": 124,
    "pathFragmentId": 188
  }, {
    "id": 125,
    "pathFragmentId": 190
  }, {
    "id": 126,
    "pathFragmentId": 191
  }, {
    "id": 127,
    "pathFragmentId": 192
  }, {
    "id": 128,
    "pathFragmentId": 193
  }, {
    "id": 129,
    "pathFragmentId": 195
  }, {
    "id": 130,
    "pathFragmentId": 196
  }, {
    "id": 131,
    "pathFragmentId": 198
  }, {
    "id": 132,
    "pathFragmentId": 200
  }, {
    "id": 133,
    "pathFragmentId": 201
  }, {
    "id": 134,
    "pathFragmentId": 202
  }, {
    "id": 135,
    "pathFragmentId": 204
  }, {
    "id": 136,
    "pathFragmentId": 205
  }, {
    "id": 137,
    "pathFragmentId": 206
  }, {
    "id": 138,
    "pathFragmentId": 208
  }, {
    "id": 139,
    "pathFragmentId": 209
  }, {
    "id": 140,
    "pathFragmentId": 210
  }, {
    "id": 141,
    "pathFragmentId": 211
  }, {
    "id": 142,
    "pathFragmentId": 212
  }, {
    "id": 143,
    "pathFragmentId": 213
  }, {
    "id": 144,
    "pathFragmentId": 215
  }, {
    "id": 145,
    "pathFragmentId": 216
  }, {
    "id": 146,
    "pathFragmentId": 218
  }, {
    "id": 147,
    "pathFragmentId": 219
  }, {
    "id": 148,
    "pathFragmentId": 220
  }, {
    "id": 149,
    "pathFragmentId": 222
  }, {
    "id": 150,
    "pathFragmentId": 223
  }, {
    "id": 151,
    "pathFragmentId": 225
  }, {
    "id": 152,
    "pathFragmentId": 226
  }, {
    "id": 153,
    "pathFragmentId": 227
  }, {
    "id": 154,
    "pathFragmentId": 228
  }, {
    "id": 155,
    "pathFragmentId": 229
  }, {
    "id": 156,
    "pathFragmentId": 230
  }, {
    "id": 157,
    "pathFragmentId": 231
  }, {
    "id": 158,
    "pathFragmentId": 232
  }, {
    "id": 159,
    "pathFragmentId": 233
  }, {
    "id": 160,
    "pathFragmentId": 234
  }, {
    "id": 161,
    "pathFragmentId": 235
  }, {
    "id": 162,
    "pathFragmentId": 236
  }, {
    "id": 163,
    "pathFragmentId": 237
  }, {
    "id": 164,
    "pathFragmentId": 238
  }, {
    "id": 165,
    "pathFragmentId": 239
  }, {
    "id": 166,
    "pathFragmentId": 240
  }, {
    "id": 167,
    "pathFragmentId": 241
  }, {
    "id": 168,
    "pathFragmentId": 242
  }, {
    "id": 169,
    "pathFragmentId": 243
  }, {
    "id": 170,
    "pathFragmentId": 244
  }, {
    "id": 171,
    "pathFragmentId": 245
  }, {
    "id": 172,
    "pathFragmentId": 246
  }, {
    "id": 173,
    "pathFragmentId": 247
  }, {
    "id": 174,
    "pathFragmentId": 248
  }, {
    "id": 175,
    "pathFragmentId": 249
  }, {
    "id": 176,
    "pathFragmentId": 250
  }, {
    "id": 177,
    "pathFragmentId": 251
  }, {
    "id": 178,
    "pathFragmentId": 252
  }, {
    "id": 179,
    "pathFragmentId": 253
  }, {
    "id": 180,
    "pathFragmentId": 254
  }, {
    "id": 181,
    "pathFragmentId": 255
  }, {
    "id": 182,
    "pathFragmentId": 256
  }, {
    "id": 183,
    "pathFragmentId": 257
  }, {
    "id": 184,
    "pathFragmentId": 258
  }, {
    "id": 185,
    "pathFragmentId": 259
  }, {
    "id": 186,
    "pathFragmentId": 260
  }, {
    "id": 187,
    "pathFragmentId": 261
  }, {
    "id": 188,
    "pathFragmentId": 262
  }, {
    "id": 189,
    "pathFragmentId": 263
  }, {
    "id": 190,
    "pathFragmentId": 264
  }, {
    "id": 191,
    "pathFragmentId": 265
  }, {
    "id": 192,
    "pathFragmentId": 266
  }, {
    "id": 193,
    "pathFragmentId": 267
  }, {
    "id": 194,
    "pathFragmentId": 269
  }, {
    "id": 195,
    "pathFragmentId": 270
  }, {
    "id": 196,
    "pathFragmentId": 271
  }, {
    "id": 197,
    "pathFragmentId": 272
  }, {
    "id": 198,
    "pathFragmentId": 274
  }, {
    "id": 199,
    "pathFragmentId": 275
  }, {
    "id": 200,
    "pathFragmentId": 276
  }, {
    "id": 201,
    "pathFragmentId": 277
  }, {
    "id": 202,
    "pathFragmentId": 278
  }, {
    "id": 203,
    "pathFragmentId": 281
  }, {
    "id": 204,
    "pathFragmentId": 285
  }, {
    "id": 205,
    "pathFragmentId": 286
  }, {
    "id": 206,
    "pathFragmentId": 287
  }, {
    "id": 207,
    "pathFragmentId": 288
  }, {
    "id": 208,
    "pathFragmentId": 294
  }, {
    "id": 209,
    "pathFragmentId": 295
  }, {
    "id": 210,
    "pathFragmentId": 296
  }, {
    "id": 211,
    "pathFragmentId": 297
  }, {
    "id": 212,
    "pathFragmentId": 298
  }, {
    "id": 213,
    "pathFragmentId": 300
  }, {
    "id": 214,
    "pathFragmentId": 303
  }, {
    "id": 215,
    "pathFragmentId": 304
  }, {
    "id": 216,
    "pathFragmentId": 305
  }, {
    "id": 217,
    "pathFragmentId": 306
  }, {
    "id": 218,
    "pathFragmentId": 307
  }, {
    "id": 219,
    "pathFragmentId": 308
  }, {
    "id": 220,
    "pathFragmentId": 309
  }, {
    "id": 221,
    "pathFragmentId": 310
  }, {
    "id": 222,
    "pathFragmentId": 311
  }, {
    "id": 223,
    "pathFragmentId": 312
  }, {
    "id": 224,
    "pathFragmentId": 313
  }, {
    "id": 225,
    "pathFragmentId": 314
  }, {
    "id": 226,
    "pathFragmentId": 315
  }, {
    "id": 227,
    "pathFragmentId": 316
  }, {
    "id": 228,
    "pathFragmentId": 317
  }, {
    "id": 229,
    "pathFragmentId": 318
  }, {
    "id": 230,
    "pathFragmentId": 319
  }, {
    "id": 231,
    "pathFragmentId": 320
  }, {
    "id": 232,
    "pathFragmentId": 321
  }, {
    "id": 233,
    "pathFragmentId": 322
  }, {
    "id": 234,
    "pathFragmentId": 323
  }, {
    "id": 235,
    "pathFragmentId": 324
  }, {
    "id": 236,
    "pathFragmentId": 325
  }, {
    "id": 237,
    "pathFragmentId": 326
  }, {
    "id": 238,
    "pathFragmentId": 327
  }, {
    "id": 239,
    "pathFragmentId": 328
  }, {
    "id": 240,
    "pathFragmentId": 329
  }, {
    "id": 241,
    "pathFragmentId": 330
  }, {
    "id": 242,
    "pathFragmentId": 332
  }, {
    "id": 243,
    "pathFragmentId": 333
  }, {
    "id": 244,
    "pathFragmentId": 335
  }, {
    "id": 245,
    "pathFragmentId": 336
  }, {
    "id": 246,
    "pathFragmentId": 337
  }, {
    "id": 247,
    "pathFragmentId": 339
  }, {
    "id": 248,
    "pathFragmentId": 340
  }, {
    "id": 249,
    "pathFragmentId": 341
  }, {
    "id": 250,
    "pathFragmentId": 343
  }, {
    "id": 251,
    "pathFragmentId": 345
  }, {
    "id": 252,
    "pathFragmentId": 346
  }, {
    "id": 253,
    "pathFragmentId": 347
  }, {
    "id": 254,
    "pathFragmentId": 349
  }, {
    "id": 255,
    "pathFragmentId": 350
  }, {
    "id": 256,
    "pathFragmentId": 351
  }, {
    "id": 257,
    "pathFragmentId": 352
  }, {
    "id": 258,
    "pathFragmentId": 354
  }, {
    "id": 259,
    "pathFragmentId": 355
  }, {
    "id": 260,
    "pathFragmentId": 356
  }, {
    "id": 261,
    "pathFragmentId": 357
  }, {
    "id": 262,
    "pathFragmentId": 358
  }, {
    "id": 263,
    "pathFragmentId": 359
  }, {
    "id": 264,
    "pathFragmentId": 361
  }, {
    "id": 265,
    "pathFragmentId": 362
  }, {
    "id": 266,
    "pathFragmentId": 364
  }, {
    "id": 267,
    "pathFragmentId": 365
  }, {
    "id": 268,
    "pathFragmentId": 366
  }, {
    "id": 269,
    "pathFragmentId": 367
  }, {
    "id": 270,
    "pathFragmentId": 369
  }, {
    "id": 271,
    "pathFragmentId": 370
  }, {
    "id": 272,
    "pathFragmentId": 371
  }, {
    "id": 273,
    "pathFragmentId": 372
  }, {
    "id": 274,
    "pathFragmentId": 373
  }, {
    "id": 275,
    "pathFragmentId": 374
  }, {
    "id": 276,
    "pathFragmentId": 375
  }, {
    "id": 277,
    "pathFragmentId": 376
  }, {
    "id": 278,
    "pathFragmentId": 377
  }, {
    "id": 279,
    "pathFragmentId": 378
  }, {
    "id": 280,
    "pathFragmentId": 379
  }, {
    "id": 281,
    "pathFragmentId": 380
  }, {
    "id": 282,
    "pathFragmentId": 381
  }, {
    "id": 283,
    "pathFragmentId": 382
  }, {
    "id": 284,
    "pathFragmentId": 383
  }, {
    "id": 285,
    "pathFragmentId": 384
  }, {
    "id": 286,
    "pathFragmentId": 385
  }, {
    "id": 287,
    "pathFragmentId": 386
  }, {
    "id": 288,
    "pathFragmentId": 387
  }, {
    "id": 289,
    "pathFragmentId": 388
  }, {
    "id": 290,
    "pathFragmentId": 389
  }, {
    "id": 291,
    "pathFragmentId": 390
  }, {
    "id": 292,
    "pathFragmentId": 391
  }, {
    "id": 293,
    "pathFragmentId": 392
  }, {
    "id": 294,
    "pathFragmentId": 393
  }, {
    "id": 295,
    "pathFragmentId": 394
  }, {
    "id": 296,
    "pathFragmentId": 395
  }, {
    "id": 297,
    "pathFragmentId": 396
  }, {
    "id": 298,
    "pathFragmentId": 397
  }, {
    "id": 299,
    "pathFragmentId": 398
  }, {
    "id": 300,
    "pathFragmentId": 399
  }, {
    "id": 301,
    "pathFragmentId": 400
  }, {
    "id": 302,
    "pathFragmentId": 401
  }, {
    "id": 303,
    "pathFragmentId": 402
  }, {
    "id": 304,
    "pathFragmentId": 403
  }, {
    "id": 305,
    "pathFragmentId": 404
  }, {
    "id": 306,
    "pathFragmentId": 405
  }, {
    "id": 307,
    "pathFragmentId": 406
  }, {
    "id": 308,
    "pathFragmentId": 407
  }, {
    "id": 309,
    "pathFragmentId": 408
  }, {
    "id": 310,
    "pathFragmentId": 409
  }, {
    "id": 311,
    "pathFragmentId": 410
  }, {
    "id": 312,
    "pathFragmentId": 411
  }, {
    "id": 313,
    "pathFragmentId": 412
  }, {
    "id": 314,
    "pathFragmentId": 413
  }, {
    "id": 315,
    "pathFragmentId": 414
  }, {
    "id": 316,
    "pathFragmentId": 416
  }, {
    "id": 317,
    "pathFragmentId": 417
  }, {
    "id": 318,
    "pathFragmentId": 418
  }, {
    "id": 319,
    "pathFragmentId": 419
  }, {
    "id": 320,
    "pathFragmentId": 421
  }, {
    "id": 321,
    "pathFragmentId": 422
  }, {
    "id": 322,
    "pathFragmentId": 423
  }, {
    "id": 323,
    "pathFragmentId": 424
  }, {
    "id": 324,
    "pathFragmentId": 425
  }, {
    "id": 325,
    "pathFragmentId": 427
  }, {
    "id": 326,
    "pathFragmentId": 428
  }, {
    "id": 327,
    "pathFragmentId": 429
  }, {
    "id": 328,
    "pathFragmentId": 431
  }, {
    "id": 329,
    "pathFragmentId": 432
  }, {
    "id": 330,
    "pathFragmentId": 433
  }, {
    "id": 331,
    "pathFragmentId": 434
  }, {
    "id": 332,
    "pathFragmentId": 436
  }, {
    "id": 333,
    "pathFragmentId": 437
  }, {
    "id": 334,
    "pathFragmentId": 438
  }, {
    "id": 335,
    "pathFragmentId": 440
  }, {
    "id": 336,
    "pathFragmentId": 441
  }, {
    "id": 337,
    "pathFragmentId": 442
  }, {
    "id": 338,
    "pathFragmentId": 443
  }, {
    "id": 339,
    "pathFragmentId": 444
  }, {
    "id": 340,
    "pathFragmentId": 445
  }, {
    "id": 341,
    "pathFragmentId": 446
  }, {
    "id": 342,
    "pathFragmentId": 447
  }, {
    "id": 343,
    "pathFragmentId": 449
  }, {
    "id": 344,
    "pathFragmentId": 450
  }, {
    "id": 345,
    "pathFragmentId": 451
  }, {
    "id": 346,
    "pathFragmentId": 453
  }, {
    "id": 347,
    "pathFragmentId": 454
  }, {
    "id": 348,
    "pathFragmentId": 455
  }, {
    "id": 349,
    "pathFragmentId": 456
  }, {
    "id": 350,
    "pathFragmentId": 458
  }, {
    "id": 351,
    "pathFragmentId": 459
  }, {
    "id": 352,
    "pathFragmentId": 461
  }, {
    "id": 353,
    "pathFragmentId": 462
  }, {
    "id": 354,
    "pathFragmentId": 463
  }, {
    "id": 355,
    "pathFragmentId": 464
  }, {
    "id": 356,
    "pathFragmentId": 466
  }, {
    "id": 357,
    "pathFragmentId": 467
  }, {
    "id": 358,
    "pathFragmentId": 469
  }, {
    "id": 359,
    "pathFragmentId": 470
  }, {
    "id": 360,
    "pathFragmentId": 471
  }, {
    "id": 361,
    "pathFragmentId": 472
  }, {
    "id": 362,
    "pathFragmentId": 473
  }, {
    "id": 363,
    "pathFragmentId": 474
  }, {
    "id": 364,
    "pathFragmentId": 475
  }, {
    "id": 365,
    "pathFragmentId": 476
  }, {
    "id": 366,
    "pathFragmentId": 477
  }, {
    "id": 367,
    "pathFragmentId": 478
  }, {
    "id": 368,
    "pathFragmentId": 479
  }, {
    "id": 369,
    "pathFragmentId": 480
  }, {
    "id": 370,
    "pathFragmentId": 481
  }, {
    "id": 371,
    "pathFragmentId": 482
  }, {
    "id": 372,
    "pathFragmentId": 484
  }, {
    "id": 373,
    "pathFragmentId": 485
  }, {
    "id": 374,
    "pathFragmentId": 486
  }, {
    "id": 375,
    "pathFragmentId": 487
  }, {
    "id": 376,
    "pathFragmentId": 488
  }, {
    "id": 377,
    "pathFragmentId": 489
  }, {
    "id": 378,
    "pathFragmentId": 490
  }, {
    "id": 379,
    "pathFragmentId": 492
  }, {
    "id": 380,
    "pathFragmentId": 494
  }, {
    "id": 381,
    "pathFragmentId": 495
  }, {
    "id": 382,
    "pathFragmentId": 496
  }, {
    "id": 383,
    "pathFragmentId": 499
  }, {
    "id": 384,
    "pathFragmentId": 500
  }, {
    "id": 385,
    "pathFragmentId": 501
  }, {
    "id": 386,
    "pathFragmentId": 502
  }, {
    "id": 387,
    "pathFragmentId": 503
  }, {
    "id": 388,
    "pathFragmentId": 504
  }, {
    "id": 389,
    "pathFragmentId": 505
  }, {
    "id": 390,
    "pathFragmentId": 506
  }, {
    "id": 391,
    "pathFragmentId": 507
  }, {
    "id": 392,
    "pathFragmentId": 509
  }, {
    "id": 393,
    "pathFragmentId": 510
  }, {
    "id": 394,
    "pathFragmentId": 512
  }, {
    "id": 395,
    "pathFragmentId": 513
  }, {
    "id": 396,
    "pathFragmentId": 514
  }, {
    "id": 397,
    "pathFragmentId": 515
  }, {
    "id": 398,
    "pathFragmentId": 516
  }, {
    "id": 399,
    "pathFragmentId": 517
  }, {
    "id": 400,
    "pathFragmentId": 518
  }, {
    "id": 401,
    "pathFragmentId": 519
  }, {
    "id": 402,
    "pathFragmentId": 520
  }, {
    "id": 403,
    "pathFragmentId": 522
  }, {
    "id": 404,
    "pathFragmentId": 523
  }, {
    "id": 405,
    "pathFragmentId": 525
  }, {
    "id": 406,
    "pathFragmentId": 526
  }, {
    "id": 407,
    "pathFragmentId": 527
  }, {
    "id": 408,
    "pathFragmentId": 528
  }, {
    "id": 409,
    "pathFragmentId": 530
  }, {
    "id": 410,
    "pathFragmentId": 531
  }, {
    "id": 411,
    "pathFragmentId": 532
  }, {
    "id": 412,
    "pathFragmentId": 533
  }, {
    "id": 413,
    "pathFragmentId": 535
  }, {
    "id": 414,
    "pathFragmentId": 536
  }, {
    "id": 415,
    "pathFragmentId": 539
  }, {
    "id": 416,
    "pathFragmentId": 540
  }, {
    "id": 417,
    "pathFragmentId": 541
  }, {
    "id": 418,
    "pathFragmentId": 543
  }, {
    "id": 419,
    "pathFragmentId": 544
  }, {
    "id": 420,
    "pathFragmentId": 545
  }, {
    "id": 421,
    "pathFragmentId": 546
  }, {
    "id": 422,
    "pathFragmentId": 547
  }, {
    "id": 423,
    "pathFragmentId": 550
  }, {
    "id": 424,
    "pathFragmentId": 551
  }, {
    "id": 425,
    "pathFragmentId": 554
  }, {
    "id": 426,
    "pathFragmentId": 555
  }, {
    "id": 427,
    "pathFragmentId": 556
  }, {
    "id": 428,
    "pathFragmentId": 558
  }, {
    "id": 429,
    "pathFragmentId": 559
  }, {
    "id": 430,
    "pathFragmentId": 560
  }, {
    "id": 431,
    "pathFragmentId": 562
  }, {
    "id": 432,
    "pathFragmentId": 563
  }, {
    "id": 433,
    "pathFragmentId": 564
  }, {
    "id": 434,
    "pathFragmentId": 565
  }, {
    "id": 435,
    "pathFragmentId": 567
  }, {
    "id": 436,
    "pathFragmentId": 568
  }, {
    "id": 437,
    "pathFragmentId": 570
  }, {
    "id": 438,
    "pathFragmentId": 571
  }, {
    "id": 439,
    "pathFragmentId": 572
  }, {
    "id": 440,
    "pathFragmentId": 573
  }, {
    "id": 441,
    "pathFragmentId": 575
  }, {
    "id": 442,
    "pathFragmentId": 576
  }, {
    "id": 443,
    "pathFragmentId": 577
  }, {
    "id": 444,
    "pathFragmentId": 579
  }, {
    "id": 445,
    "pathFragmentId": 580
  }, {
    "id": 446,
    "pathFragmentId": 581
  }, {
    "id": 447,
    "pathFragmentId": 582
  }, {
    "id": 448,
    "pathFragmentId": 584
  }, {
    "id": 449,
    "pathFragmentId": 585
  }, {
    "id": 450,
    "pathFragmentId": 586
  }, {
    "id": 451,
    "pathFragmentId": 587
  }, {
    "id": 452,
    "pathFragmentId": 589
  }, {
    "id": 453,
    "pathFragmentId": 590
  }, {
    "id": 454,
    "pathFragmentId": 591
  }, {
    "id": 455,
    "pathFragmentId": 593
  }, {
    "id": 456,
    "pathFragmentId": 594
  }, {
    "id": 457,
    "pathFragmentId": 595
  }, {
    "id": 458,
    "pathFragmentId": 597
  }, {
    "id": 459,
    "pathFragmentId": 598
  }, {
    "id": 460,
    "pathFragmentId": 599
  }, {
    "id": 461,
    "pathFragmentId": 601
  }, {
    "id": 462,
    "pathFragmentId": 602
  }, {
    "id": 463,
    "pathFragmentId": 603
  }, {
    "id": 464,
    "pathFragmentId": 604
  }, {
    "id": 465,
    "pathFragmentId": 606
  }, {
    "id": 466,
    "pathFragmentId": 607
  }, {
    "id": 467,
    "pathFragmentId": 609
  }, {
    "id": 468,
    "pathFragmentId": 610,
    "isTreeArtifact": true
  }, {
    "id": 469,
    "pathFragmentId": 612,
    "isTreeArtifact": true
  }, {
    "id": 470,
    "pathFragmentId": 613
  }, {
    "id": 471,
    "pathFragmentId": 615
  }, {
    "id": 472,
    "pathFragmentId": 616
  }, {
    "id": 473,
    "pathFragmentId": 618
  }, {
    "id": 474,
    "pathFragmentId": 620
  }, {
    "id": 475,
    "pathFragmentId": 621
  }, {
    "id": 476,
    "pathFragmentId": 622
  }, {
    "id": 477,
    "pathFragmentId": 625
  }, {
    "id": 478,
    "pathFragmentId": 626
  }, {
    "id": 479,
    "pathFragmentId": 627
  }, {
    "id": 480,
    "pathFragmentId": 628
  }, {
    "id": 481,
    "pathFragmentId": 629
  }, {
    "id": 482,
    "pathFragmentId": 631
  }, {
    "id": 483,
    "pathFragmentId": 632
  }, {
    "id": 484,
    "pathFragmentId": 633
  }, {
    "id": 485,
    "pathFragmentId": 634
  }, {
    "id": 486,
    "pathFragmentId": 635
  }, {
    "id": 487,
    "pathFragmentId": 636
  }, {
    "id": 488,
    "pathFragmentId": 637
  }, {
    "id": 489,
    "pathFragmentId": 638
  }, {
    "id": 490,
    "pathFragmentId": 639
  }, {
    "id": 491,
    "pathFragmentId": 640
  }, {
    "id": 492,
    "pathFragmentId": 641
  }, {
    "id": 493,
    "pathFragmentId": 642
  }, {
    "id": 494,
    "pathFragmentId": 643
  }, {
    "id": 495,
    "pathFragmentId": 644
  }, {
    "id": 496,
    "pathFragmentId": 645
  }, {
    "id": 497,
    "pathFragmentId": 646
  }, {
    "id": 498,
    "pathFragmentId": 647
  }, {
    "id": 499,
    "pathFragmentId": 648
  }, {
    "id": 500,
    "pathFragmentId": 649
  }, {
    "id": 501,
    "pathFragmentId": 650
  }, {
    "id": 502,
    "pathFragmentId": 652
  }, {
    "id": 503,
    "pathFragmentId": 653
  }, {
    "id": 504,
    "pathFragmentId": 654
  }, {
    "id": 505,
    "pathFragmentId": 656
  }, {
    "id": 506,
    "pathFragmentId": 657
  }, {
    "id": 507,
    "pathFragmentId": 658
  }, {
    "id": 508,
    "pathFragmentId": 659
  }, {
    "id": 509,
    "pathFragmentId": 661
  }, {
    "id": 510,
    "pathFragmentId": 662
  }, {
    "id": 511,
    "pathFragmentId": 663
  }, {
    "id": 512,
    "pathFragmentId": 665
  }, {
    "id": 513,
    "pathFragmentId": 666
  }, {
    "id": 514,
    "pathFragmentId": 667
  }, {
    "id": 515,
    "pathFragmentId": 668
  }, {
    "id": 516,
    "pathFragmentId": 670
  }, {
    "id": 517,
    "pathFragmentId": 671
  }, {
    "id": 518,
    "pathFragmentId": 672
  }, {
    "id": 519,
    "pathFragmentId": 674
  }, {
    "id": 520,
    "pathFragmentId": 675
  }, {
    "id": 521,
    "pathFragmentId": 677
  }, {
    "id": 522,
    "pathFragmentId": 678
  }, {
    "id": 523,
    "pathFragmentId": 680
  }, {
    "id": 524,
    "pathFragmentId": 682
  }, {
    "id": 525,
    "pathFragmentId": 685
  }, {
    "id": 526,
    "pathFragmentId": 686
  }, {
    "id": 527,
    "pathFragmentId": 687
  }, {
    "id": 528,
    "pathFragmentId": 689
  }, {
    "id": 529,
    "pathFragmentId": 690
  }, {
    "id": 530,
    "pathFragmentId": 691
  }, {
    "id": 531,
    "pathFragmentId": 692
  }, {
    "id": 532,
    "pathFragmentId": 693
  }, {
    "id": 533,
    "pathFragmentId": 694
  }, {
    "id": 534,
    "pathFragmentId": 696
  }, {
    "id": 535,
    "pathFragmentId": 697
  }, {
    "id": 536,
    "pathFragmentId": 700
  }, {
    "id": 537,
    "pathFragmentId": 701
  }, {
    "id": 538,
    "pathFragmentId": 702
  }, {
    "id": 539,
    "pathFragmentId": 704
  }, {
    "id": 540,
    "pathFragmentId": 705
  }, {
    "id": 541,
    "pathFragmentId": 706
  }, {
    "id": 542,
    "pathFragmentId": 708
  }, {
    "id": 543,
    "pathFragmentId": 709
  }, {
    "id": 544,
    "pathFragmentId": 710
  }, {
    "id": 545,
    "pathFragmentId": 711
  }, {
    "id": 546,
    "pathFragmentId": 713
  }, {
    "id": 547,
    "pathFragmentId": 714
  }, {
    "id": 548,
    "pathFragmentId": 715
  }, {
    "id": 549,
    "pathFragmentId": 717
  }, {
    "id": 550,
    "pathFragmentId": 718
  }, {
    "id": 551,
    "pathFragmentId": 719
  }, {
    "id": 552,
    "pathFragmentId": 720
  }, {
    "id": 553,
    "pathFragmentId": 722
  }, {
    "id": 554,
    "pathFragmentId": 723
  }, {
    "id": 555,
    "pathFragmentId": 724
  }, {
    "id": 556,
    "pathFragmentId": 726
  }, {
    "id": 557,
    "pathFragmentId": 727
  }, {
    "id": 558,
    "pathFragmentId": 728
  }, {
    "id": 559,
    "pathFragmentId": 729
  }, {
    "id": 560,
    "pathFragmentId": 731
  }, {
    "id": 561,
    "pathFragmentId": 732
  }, {
    "id": 562,
    "pathFragmentId": 733
  }, {
    "id": 563,
    "pathFragmentId": 735
  }, {
    "id": 564,
    "pathFragmentId": 736
  }, {
    "id": 565,
    "pathFragmentId": 737
  }, {
    "id": 566,
    "pathFragmentId": 738
  }, {
    "id": 567,
    "pathFragmentId": 739
  }, {
    "id": 568,
    "pathFragmentId": 740
  }, {
    "id": 569,
    "pathFragmentId": 741
  }, {
    "id": 570,
    "pathFragmentId": 742
  }, {
    "id": 571,
    "pathFragmentId": 744
  }, {
    "id": 572,
    "pathFragmentId": 745
  }, {
    "id": 573,
    "pathFragmentId": 746
  }, {
    "id": 574,
    "pathFragmentId": 748
  }, {
    "id": 575,
    "pathFragmentId": 749
  }, {
    "id": 576,
    "pathFragmentId": 750
  }, {
    "id": 577,
    "pathFragmentId": 751
  }, {
    "id": 578,
    "pathFragmentId": 752
  }, {
    "id": 579,
    "pathFragmentId": 753
  }, {
    "id": 580,
    "pathFragmentId": 754
  }, {
    "id": 581,
    "pathFragmentId": 755
  }, {
    "id": 582,
    "pathFragmentId": 757
  }, {
    "id": 583,
    "pathFragmentId": 758
  }, {
    "id": 584,
    "pathFragmentId": 759
  }, {
    "id": 585,
    "pathFragmentId": 761
  }, {
    "id": 586,
    "pathFragmentId": 762
  }, {
    "id": 587,
    "pathFragmentId": 763
  }, {
    "id": 588,
    "pathFragmentId": 764
  }, {
    "id": 589,
    "pathFragmentId": 766
  }, {
    "id": 590,
    "pathFragmentId": 767
  }, {
    "id": 591,
    "pathFragmentId": 769
  }, {
    "id": 592,
    "pathFragmentId": 770
  }, {
    "id": 593,
    "pathFragmentId": 771
  }, {
    "id": 594,
    "pathFragmentId": 773
  }, {
    "id": 595,
    "pathFragmentId": 774
  }, {
    "id": 596,
    "pathFragmentId": 775
  }, {
    "id": 597,
    "pathFragmentId": 776
  }, {
    "id": 598,
    "pathFragmentId": 778
  }, {
    "id": 599,
    "pathFragmentId": 779
  }, {
    "id": 600,
    "pathFragmentId": 781
  }, {
    "id": 601,
    "pathFragmentId": 782
  }, {
    "id": 602,
    "pathFragmentId": 783
  }, {
    "id": 603,
    "pathFragmentId": 784
  }, {
    "id": 604,
    "pathFragmentId": 785
  }, {
    "id": 605,
    "pathFragmentId": 786
  }, {
    "id": 606,
    "pathFragmentId": 787
  }, {
    "id": 607,
    "pathFragmentId": 788
  }, {
    "id": 608,
    "pathFragmentId": 789
  }, {
    "id": 609,
    "pathFragmentId": 791
  }, {
    "id": 610,
    "pathFragmentId": 792
  }, {
    "id": 611,
    "pathFragmentId": 793
  }, {
    "id": 612,
    "pathFragmentId": 794
  }, {
    "id": 613,
    "pathFragmentId": 795
  }, {
    "id": 614,
    "pathFragmentId": 796
  }, {
    "id": 615,
    "pathFragmentId": 797
  }, {
    "id": 616,
    "pathFragmentId": 798
  }, {
    "id": 617,
    "pathFragmentId": 799
  }, {
    "id": 618,
    "pathFragmentId": 800
  }, {
    "id": 619,
    "pathFragmentId": 801
  }, {
    "id": 620,
    "pathFragmentId": 802
  }, {
    "id": 621,
    "pathFragmentId": 804
  }, {
    "id": 622,
    "pathFragmentId": 806
  }, {
    "id": 623,
    "pathFragmentId": 807
  }, {
    "id": 624,
    "pathFragmentId": 808
  }, {
    "id": 625,
    "pathFragmentId": 809
  }, {
    "id": 626,
    "pathFragmentId": 810
  }, {
    "id": 627,
    "pathFragmentId": 811
  }, {
    "id": 628,
    "pathFragmentId": 812
  }, {
    "id": 629,
    "pathFragmentId": 814
  }, {
    "id": 630,
    "pathFragmentId": 815
  }, {
    "id": 631,
    "pathFragmentId": 817
  }, {
    "id": 632,
    "pathFragmentId": 818
  }, {
    "id": 633,
    "pathFragmentId": 819
  }, {
    "id": 634,
    "pathFragmentId": 820
  }, {
    "id": 635,
    "pathFragmentId": 822
  }, {
    "id": 636,
    "pathFragmentId": 823
  }, {
    "id": 637,
    "pathFragmentId": 825
  }, {
    "id": 638,
    "pathFragmentId": 826
  }, {
    "id": 639,
    "pathFragmentId": 828,
    "isTreeArtifact": true
  }, {
    "id": 640,
    "pathFragmentId": 829
  }, {
    "id": 641,
    "pathFragmentId": 830
  }, {
    "id": 642,
    "pathFragmentId": 831
  }, {
    "id": 643,
    "pathFragmentId": 833
  }, {
    "id": 644,
    "pathFragmentId": 834
  }, {
    "id": 645,
    "pathFragmentId": 836
  }, {
    "id": 646,
    "pathFragmentId": 837
  }, {
    "id": 647,
    "pathFragmentId": 838
  }, {
    "id": 648,
    "pathFragmentId": 839
  }, {
    "id": 649,
    "pathFragmentId": 840
  }, {
    "id": 650,
    "pathFragmentId": 841
  }, {
    "id": 651,
    "pathFragmentId": 842
  }, {
    "id": 652,
    "pathFragmentId": 843
  }, {
    "id": 653,
    "pathFragmentId": 845
  }, {
    "id": 654,
    "pathFragmentId": 846
  }, {
    "id": 655,
    "pathFragmentId": 847
  }, {
    "id": 656,
    "pathFragmentId": 849
  }, {
    "id": 657,
    "pathFragmentId": 850
  }, {
    "id": 658,
    "pathFragmentId": 851
  }, {
    "id": 659,
    "pathFragmentId": 852
  }, {
    "id": 660,
    "pathFragmentId": 854
  }, {
    "id": 661,
    "pathFragmentId": 855
  }, {
    "id": 662,
    "pathFragmentId": 857
  }, {
    "id": 663,
    "pathFragmentId": 858
  }, {
    "id": 664,
    "pathFragmentId": 859
  }, {
    "id": 665,
    "pathFragmentId": 860
  }, {
    "id": 666,
    "pathFragmentId": 861
  }, {
    "id": 667,
    "pathFragmentId": 862
  }, {
    "id": 668,
    "pathFragmentId": 863
  }, {
    "id": 669,
    "pathFragmentId": 864
  }, {
    "id": 670,
    "pathFragmentId": 865
  }, {
    "id": 671,
    "pathFragmentId": 866
  }, {
    "id": 672,
    "pathFragmentId": 867
  }, {
    "id": 673,
    "pathFragmentId": 868
  }, {
    "id": 674,
    "pathFragmentId": 869
  }, {
    "id": 675,
    "pathFragmentId": 871
  }, {
    "id": 676,
    "pathFragmentId": 872
  }, {
    "id": 677,
    "pathFragmentId": 873
  }, {
    "id": 678,
    "pathFragmentId": 874
  }, {
    "id": 679,
    "pathFragmentId": 875
  }, {
    "id": 680,
    "pathFragmentId": 877
  }, {
    "id": 681,
    "pathFragmentId": 878
  }, {
    "id": 682,
    "pathFragmentId": 879
  }, {
    "id": 683,
    "pathFragmentId": 881
  }, {
    "id": 684,
    "pathFragmentId": 883
  }, {
    "id": 685,
    "pathFragmentId": 884
  }, {
    "id": 686,
    "pathFragmentId": 887
  }, {
    "id": 687,
    "pathFragmentId": 888
  }, {
    "id": 688,
    "pathFragmentId": 889
  }, {
    "id": 689,
    "pathFragmentId": 890
  }, {
    "id": 690,
    "pathFragmentId": 891
  }, {
    "id": 691,
    "pathFragmentId": 892
  }, {
    "id": 692,
    "pathFragmentId": 893
  }, {
    "id": 693,
    "pathFragmentId": 894
  }, {
    "id": 694,
    "pathFragmentId": 895
  }, {
    "id": 695,
    "pathFragmentId": 897
  }, {
    "id": 696,
    "pathFragmentId": 898
  }, {
    "id": 697,
    "pathFragmentId": 899
  }, {
    "id": 698,
    "pathFragmentId": 900
  }, {
    "id": 699,
    "pathFragmentId": 901
  }, {
    "id": 700,
    "pathFragmentId": 902
  }, {
    "id": 701,
    "pathFragmentId": 903
  }, {
    "id": 702,
    "pathFragmentId": 904
  }, {
    "id": 703,
    "pathFragmentId": 905
  }, {
    "id": 704,
    "pathFragmentId": 906
  }, {
    "id": 705,
    "pathFragmentId": 907
  }, {
    "id": 706,
    "pathFragmentId": 908
  }, {
    "id": 707,
    "pathFragmentId": 909
  }, {
    "id": 708,
    "pathFragmentId": 911
  }, {
    "id": 709,
    "pathFragmentId": 912
  }, {
    "id": 710,
    "pathFragmentId": 913
  }, {
    "id": 711,
    "pathFragmentId": 914
  }, {
    "id": 712,
    "pathFragmentId": 915
  }, {
    "id": 713,
    "pathFragmentId": 917
  }, {
    "id": 714,
    "pathFragmentId": 918
  }, {
    "id": 715,
    "pathFragmentId": 919
  }, {
    "id": 716,
    "pathFragmentId": 921
  }, {
    "id": 717,
    "pathFragmentId": 922
  }, {
    "id": 718,
    "pathFragmentId": 923
  }, {
    "id": 719,
    "pathFragmentId": 925
  }, {
    "id": 720,
    "pathFragmentId": 926
  }, {
    "id": 721,
    "pathFragmentId": 927
  }, {
    "id": 722,
    "pathFragmentId": 929
  }, {
    "id": 723,
    "pathFragmentId": 930
  }, {
    "id": 724,
    "pathFragmentId": 932
  }, {
    "id": 725,
    "pathFragmentId": 933
  }, {
    "id": 726,
    "pathFragmentId": 935
  }, {
    "id": 727,
    "pathFragmentId": 938
  }, {
    "id": 728,
    "pathFragmentId": 939
  }, {
    "id": 729,
    "pathFragmentId": 942
  }, {
    "id": 730,
    "pathFragmentId": 943
  }, {
    "id": 731,
    "pathFragmentId": 944
  }, {
    "id": 732,
    "pathFragmentId": 945
  }, {
    "id": 733,
    "pathFragmentId": 946
  }, {
    "id": 734,
    "pathFragmentId": 947
  }, {
    "id": 735,
    "pathFragmentId": 948
  }, {
    "id": 736,
    "pathFragmentId": 949
  }, {
    "id": 737,
    "pathFragmentId": 950
  }, {
    "id": 738,
    "pathFragmentId": 952
  }, {
    "id": 739,
    "pathFragmentId": 953
  }, {
    "id": 740,
    "pathFragmentId": 954
  }, {
    "id": 741,
    "pathFragmentId": 955
  }, {
    "id": 742,
    "pathFragmentId": 956
  }, {
    "id": 743,
    "pathFragmentId": 957
  }, {
    "id": 744,
    "pathFragmentId": 958
  }, {
    "id": 745,
    "pathFragmentId": 960
  }, {
    "id": 746,
    "pathFragmentId": 961
  }, {
    "id": 747,
    "pathFragmentId": 963
  }, {
    "id": 748,
    "pathFragmentId": 964
  }, {
    "id": 749,
    "pathFragmentId": 965
  }, {
    "id": 750,
    "pathFragmentId": 966
  }, {
    "id": 751,
    "pathFragmentId": 967
  }, {
    "id": 752,
    "pathFragmentId": 968
  }, {
    "id": 753,
    "pathFragmentId": 969
  }, {
    "id": 754,
    "pathFragmentId": 970
  }, {
    "id": 755,
    "pathFragmentId": 971
  }, {
    "id": 756,
    "pathFragmentId": 973
  }, {
    "id": 757,
    "pathFragmentId": 974
  }, {
    "id": 758,
    "pathFragmentId": 975
  }, {
    "id": 759,
    "pathFragmentId": 976
  }, {
    "id": 760,
    "pathFragmentId": 977
  }, {
    "id": 761,
    "pathFragmentId": 978
  }, {
    "id": 762,
    "pathFragmentId": 979
  }, {
    "id": 763,
    "pathFragmentId": 981
  }, {
    "id": 764,
    "pathFragmentId": 982
  }, {
    "id": 765,
    "pathFragmentId": 983
  }, {
    "id": 766,
    "pathFragmentId": 984
  }, {
    "id": 767,
    "pathFragmentId": 986
  }, {
    "id": 768,
    "pathFragmentId": 987
  }, {
    "id": 769,
    "pathFragmentId": 989
  }, {
    "id": 770,
    "pathFragmentId": 990
  }, {
    "id": 771,
    "pathFragmentId": 991
  }, {
    "id": 772,
    "pathFragmentId": 992
  }, {
    "id": 773,
    "pathFragmentId": 993
  }, {
    "id": 774,
    "pathFragmentId": 994
  }, {
    "id": 775,
    "pathFragmentId": 995
  }, {
    "id": 776,
    "pathFragmentId": 996
  }, {
    "id": 777,
    "pathFragmentId": 997
  }, {
    "id": 778,
    "pathFragmentId": 998
  }, {
    "id": 779,
    "pathFragmentId": 999
  }, {
    "id": 780,
    "pathFragmentId": 1001
  }, {
    "id": 781,
    "pathFragmentId": 1002
  }, {
    "id": 782,
    "pathFragmentId": 1003
  }, {
    "id": 783,
    "pathFragmentId": 1005
  }, {
    "id": 784,
    "pathFragmentId": 1006
  }, {
    "id": 785,
    "pathFragmentId": 1007
  }, {
    "id": 786,
    "pathFragmentId": 1008
  }, {
    "id": 787,
    "pathFragmentId": 1010
  }, {
    "id": 788,
    "pathFragmentId": 1011
  }, {
    "id": 789,
    "pathFragmentId": 1013
  }, {
    "id": 790,
    "pathFragmentId": 1014
  }, {
    "id": 791,
    "pathFragmentId": 1015
  }, {
    "id": 792,
    "pathFragmentId": 1016
  }, {
    "id": 793,
    "pathFragmentId": 1018
  }, {
    "id": 794,
    "pathFragmentId": 1019
  }, {
    "id": 795,
    "pathFragmentId": 1021
  }, {
    "id": 796,
    "pathFragmentId": 1022
  }, {
    "id": 797,
    "pathFragmentId": 1023
  }, {
    "id": 798,
    "pathFragmentId": 1024
  }, {
    "id": 799,
    "pathFragmentId": 1026
  }, {
    "id": 800,
    "pathFragmentId": 1027
  }, {
    "id": 801,
    "pathFragmentId": 1029
  }, {
    "id": 802,
    "pathFragmentId": 1030
  }, {
    "id": 803,
    "pathFragmentId": 1031
  }, {
    "id": 804,
    "pathFragmentId": 1032
  }, {
    "id": 805,
    "pathFragmentId": 1034
  }, {
    "id": 806,
    "pathFragmentId": 1035
  }, {
    "id": 807,
    "pathFragmentId": 1036
  }, {
    "id": 808,
    "pathFragmentId": 1038
  }, {
    "id": 809,
    "pathFragmentId": 1039
  }, {
    "id": 810,
    "pathFragmentId": 1040
  }, {
    "id": 811,
    "pathFragmentId": 1041
  }, {
    "id": 812,
    "pathFragmentId": 1043
  }, {
    "id": 813,
    "pathFragmentId": 1044
  }, {
    "id": 814,
    "pathFragmentId": 1046
  }, {
    "id": 815,
    "pathFragmentId": 1047
  }, {
    "id": 816,
    "pathFragmentId": 1049
  }, {
    "id": 817,
    "pathFragmentId": 1053
  }, {
    "id": 818,
    "pathFragmentId": 1054
  }, {
    "id": 819,
    "pathFragmentId": 1055
  }, {
    "id": 820,
    "pathFragmentId": 1056
  }, {
    "id": 821,
    "pathFragmentId": 1057
  }, {
    "id": 822,
    "pathFragmentId": 1058
  }, {
    "id": 823,
    "pathFragmentId": 1059
  }, {
    "id": 824,
    "pathFragmentId": 1061
  }, {
    "id": 825,
    "pathFragmentId": 1062
  }, {
    "id": 826,
    "pathFragmentId": 1063
  }, {
    "id": 827,
    "pathFragmentId": 1064
  }, {
    "id": 828,
    "pathFragmentId": 1065
  }, {
    "id": 829,
    "pathFragmentId": 1067
  }, {
    "id": 830,
    "pathFragmentId": 1068
  }, {
    "id": 831,
    "pathFragmentId": 1070
  }, {
    "id": 832,
    "pathFragmentId": 1071
  }, {
    "id": 833,
    "pathFragmentId": 1072
  }, {
    "id": 834,
    "pathFragmentId": 1074
  }, {
    "id": 835,
    "pathFragmentId": 1075
  }, {
    "id": 836,
    "pathFragmentId": 1076
  }, {
    "id": 837,
    "pathFragmentId": 1078
  }, {
    "id": 838,
    "pathFragmentId": 809
  }, {
    "id": 839,
    "pathFragmentId": 1079
  }, {
    "id": 840,
    "pathFragmentId": 1080
  }, {
    "id": 841,
    "pathFragmentId": 1082
  }, {
    "id": 842,
    "pathFragmentId": 1083
  }, {
    "id": 843,
    "pathFragmentId": 1084
  }, {
    "id": 844,
    "pathFragmentId": 1086
  }, {
    "id": 845,
    "pathFragmentId": 1087
  }, {
    "id": 846,
    "pathFragmentId": 1088
  }, {
    "id": 847,
    "pathFragmentId": 1089
  }, {
    "id": 848,
    "pathFragmentId": 1091
  }, {
    "id": 849,
    "pathFragmentId": 1092
  }, {
    "id": 850,
    "pathFragmentId": 1094
  }, {
    "id": 851,
    "pathFragmentId": 1095
  }, {
    "id": 852,
    "pathFragmentId": 1096
  }, {
    "id": 853,
    "pathFragmentId": 1097
  }, {
    "id": 854,
    "pathFragmentId": 1099
  }, {
    "id": 855,
    "pathFragmentId": 1100
  }, {
    "id": 856,
    "pathFragmentId": 1101
  }, {
    "id": 857,
    "pathFragmentId": 1103
  }, {
    "id": 858,
    "pathFragmentId": 1104
  }, {
    "id": 859,
    "pathFragmentId": 1105
  }, {
    "id": 860,
    "pathFragmentId": 1106
  }, {
    "id": 861,
    "pathFragmentId": 1108
  }, {
    "id": 862,
    "pathFragmentId": 1109
  }, {
    "id": 863,
    "pathFragmentId": 1111
  }, {
    "id": 864,
    "pathFragmentId": 1112
  }, {
    "id": 865,
    "pathFragmentId": 1113
  }, {
    "id": 866,
    "pathFragmentId": 1115
  }, {
    "id": 867,
    "pathFragmentId": 1116
  }, {
    "id": 868,
    "pathFragmentId": 1117
  }, {
    "id": 869,
    "pathFragmentId": 1119
  }, {
    "id": 870,
    "pathFragmentId": 1120
  }, {
    "id": 871,
    "pathFragmentId": 1121
  }, {
    "id": 872,
    "pathFragmentId": 1122
  }, {
    "id": 873,
    "pathFragmentId": 1123
  }, {
    "id": 874,
    "pathFragmentId": 1124
  }, {
    "id": 875,
    "pathFragmentId": 1125
  }, {
    "id": 876,
    "pathFragmentId": 1126
  }, {
    "id": 877,
    "pathFragmentId": 1127
  }, {
    "id": 878,
    "pathFragmentId": 1128
  }, {
    "id": 879,
    "pathFragmentId": 1129
  }, {
    "id": 880,
    "pathFragmentId": 1130
  }, {
    "id": 881,
    "pathFragmentId": 1131
  }, {
    "id": 882,
    "pathFragmentId": 1132
  }, {
    "id": 883,
    "pathFragmentId": 1133
  }, {
    "id": 884,
    "pathFragmentId": 1134
  }, {
    "id": 885,
    "pathFragmentId": 1135
  }, {
    "id": 886,
    "pathFragmentId": 1136
  }, {
    "id": 887,
    "pathFragmentId": 1137
  }, {
    "id": 888,
    "pathFragmentId": 1138
  }, {
    "id": 889,
    "pathFragmentId": 1139
  }, {
    "id": 890,
    "pathFragmentId": 1140
  }, {
    "id": 891,
    "pathFragmentId": 1141
  }, {
    "id": 892,
    "pathFragmentId": 1142
  }, {
    "id": 893,
    "pathFragmentId": 1143
  }, {
    "id": 894,
    "pathFragmentId": 1145
  }, {
    "id": 895,
    "pathFragmentId": 1146
  }, {
    "id": 896,
    "pathFragmentId": 1147
  }, {
    "id": 897,
    "pathFragmentId": 1148
  }, {
    "id": 898,
    "pathFragmentId": 1149
  }, {
    "id": 899,
    "pathFragmentId": 1150
  }, {
    "id": 900,
    "pathFragmentId": 1153
  }, {
    "id": 901,
    "pathFragmentId": 1154
  }, {
    "id": 902,
    "pathFragmentId": 1155
  }, {
    "id": 903,
    "pathFragmentId": 1156
  }, {
    "id": 904,
    "pathFragmentId": 1157
  }, {
    "id": 905,
    "pathFragmentId": 1158
  }, {
    "id": 906,
    "pathFragmentId": 1159
  }, {
    "id": 907,
    "pathFragmentId": 1160
  }, {
    "id": 908,
    "pathFragmentId": 1161
  }, {
    "id": 909,
    "pathFragmentId": 1163
  }, {
    "id": 910,
    "pathFragmentId": 1164
  }, {
    "id": 911,
    "pathFragmentId": 1165
  }, {
    "id": 912,
    "pathFragmentId": 1167
  }, {
    "id": 913,
    "pathFragmentId": 1168
  }, {
    "id": 914,
    "pathFragmentId": 1169
  }, {
    "id": 915,
    "pathFragmentId": 1170
  }, {
    "id": 916,
    "pathFragmentId": 1172
  }, {
    "id": 917,
    "pathFragmentId": 1173
  }, {
    "id": 918,
    "pathFragmentId": 1174
  }, {
    "id": 919,
    "pathFragmentId": 1176
  }, {
    "id": 920,
    "pathFragmentId": 1177
  }, {
    "id": 921,
    "pathFragmentId": 1178
  }, {
    "id": 922,
    "pathFragmentId": 1179
  }, {
    "id": 923,
    "pathFragmentId": 1181
  }, {
    "id": 924,
    "pathFragmentId": 1182
  }, {
    "id": 925,
    "pathFragmentId": 1184
  }, {
    "id": 926,
    "pathFragmentId": 1185
  }, {
    "id": 927,
    "pathFragmentId": 1186
  }, {
    "id": 928,
    "pathFragmentId": 1187
  }, {
    "id": 929,
    "pathFragmentId": 1188
  }, {
    "id": 930,
    "pathFragmentId": 1190
  }, {
    "id": 931,
    "pathFragmentId": 1191
  }, {
    "id": 932,
    "pathFragmentId": 1193
  }, {
    "id": 933,
    "pathFragmentId": 1194
  }, {
    "id": 934,
    "pathFragmentId": 1195
  }, {
    "id": 935,
    "pathFragmentId": 1196
  }, {
    "id": 936,
    "pathFragmentId": 1197
  }, {
    "id": 937,
    "pathFragmentId": 1199
  }, {
    "id": 938,
    "pathFragmentId": 1200
  }, {
    "id": 939,
    "pathFragmentId": 1202
  }, {
    "id": 940,
    "pathFragmentId": 1203
  }, {
    "id": 941,
    "pathFragmentId": 1204
  }, {
    "id": 942,
    "pathFragmentId": 1205
  }, {
    "id": 943,
    "pathFragmentId": 1206
  }, {
    "id": 944,
    "pathFragmentId": 1207
  }, {
    "id": 945,
    "pathFragmentId": 1208
  }, {
    "id": 946,
    "pathFragmentId": 1209
  }, {
    "id": 947,
    "pathFragmentId": 1210
  }, {
    "id": 948,
    "pathFragmentId": 1212
  }, {
    "id": 949,
    "pathFragmentId": 1213
  }, {
    "id": 950,
    "pathFragmentId": 1214
  }, {
    "id": 951,
    "pathFragmentId": 1215
  }, {
    "id": 952,
    "pathFragmentId": 1216
  }, {
    "id": 953,
    "pathFragmentId": 1217
  }, {
    "id": 954,
    "pathFragmentId": 1219
  }, {
    "id": 955,
    "pathFragmentId": 1220
  }, {
    "id": 956,
    "pathFragmentId": 1222
  }, {
    "id": 957,
    "pathFragmentId": 1223
  }, {
    "id": 958,
    "pathFragmentId": 1224
  }, {
    "id": 959,
    "pathFragmentId": 1225
  }, {
    "id": 960,
    "pathFragmentId": 1227
  }, {
    "id": 961,
    "pathFragmentId": 1228
  }, {
    "id": 962,
    "pathFragmentId": 1230
  }, {
    "id": 963,
    "pathFragmentId": 1231
  }, {
    "id": 964,
    "pathFragmentId": 1232
  }, {
    "id": 965,
    "pathFragmentId": 1233
  }, {
    "id": 966,
    "pathFragmentId": 1235
  }, {
    "id": 967,
    "pathFragmentId": 1236
  }, {
    "id": 968,
    "pathFragmentId": 1237
  }, {
    "id": 969,
    "pathFragmentId": 1240
  }, {
    "id": 970,
    "pathFragmentId": 1241
  }, {
    "id": 971,
    "pathFragmentId": 1242
  }, {
    "id": 972,
    "pathFragmentId": 1243
  }, {
    "id": 973,
    "pathFragmentId": 1245
  }, {
    "id": 974,
    "pathFragmentId": 1246
  }, {
    "id": 975,
    "pathFragmentId": 1248
  }, {
    "id": 976,
    "pathFragmentId": 1249
  }, {
    "id": 977,
    "pathFragmentId": 1250
  }, {
    "id": 978,
    "pathFragmentId": 1252
  }, {
    "id": 979,
    "pathFragmentId": 1253
  }, {
    "id": 980,
    "pathFragmentId": 1254
  }, {
    "id": 981,
    "pathFragmentId": 1256
  }, {
    "id": 982,
    "pathFragmentId": 1257
  }, {
    "id": 983,
    "pathFragmentId": 1258
  }, {
    "id": 984,
    "pathFragmentId": 1259
  }, {
    "id": 985,
    "pathFragmentId": 1261
  }, {
    "id": 986,
    "pathFragmentId": 1262
  }, {
    "id": 987,
    "pathFragmentId": 1264
  }, {
    "id": 988,
    "pathFragmentId": 1265
  }, {
    "id": 989,
    "pathFragmentId": 1266
  }, {
    "id": 990,
    "pathFragmentId": 1267
  }, {
    "id": 991,
    "pathFragmentId": 1269
  }, {
    "id": 992,
    "pathFragmentId": 1270
  }, {
    "id": 993,
    "pathFragmentId": 1272
  }, {
    "id": 994,
    "pathFragmentId": 1273
  }, {
    "id": 995,
    "pathFragmentId": 1274
  }, {
    "id": 996,
    "pathFragmentId": 1275
  }, {
    "id": 997,
    "pathFragmentId": 1277
  }, {
    "id": 998,
    "pathFragmentId": 1278
  }, {
    "id": 999,
    "pathFragmentId": 1279
  }, {
    "id": 1000,
    "pathFragmentId": 1281
  }, {
    "id": 1001,
    "pathFragmentId": 1282
  }, {
    "id": 1002,
    "pathFragmentId": 1283
  }, {
    "id": 1003,
    "pathFragmentId": 1284
  }, {
    "id": 1004,
    "pathFragmentId": 1285
  }, {
    "id": 1005,
    "pathFragmentId": 1287
  }, {
    "id": 1006,
    "pathFragmentId": 1288
  }, {
    "id": 1007,
    "pathFragmentId": 1290
  }, {
    "id": 1008,
    "pathFragmentId": 1291
  }, {
    "id": 1009,
    "pathFragmentId": 1292
  }, {
    "id": 1010,
    "pathFragmentId": 1293
  }, {
    "id": 1011,
    "pathFragmentId": 1294
  }, {
    "id": 1012,
    "pathFragmentId": 1295
  }, {
    "id": 1013,
    "pathFragmentId": 1296
  }, {
    "id": 1014,
    "pathFragmentId": 1297
  }, {
    "id": 1015,
    "pathFragmentId": 1299
  }, {
    "id": 1016,
    "pathFragmentId": 1300
  }, {
    "id": 1017,
    "pathFragmentId": 1302
  }, {
    "id": 1018,
    "pathFragmentId": 1303
  }, {
    "id": 1019,
    "pathFragmentId": 1304
  }, {
    "id": 1020,
    "pathFragmentId": 1305
  }, {
    "id": 1021,
    "pathFragmentId": 1307
  }, {
    "id": 1022,
    "pathFragmentId": 1308
  }, {
    "id": 1023,
    "pathFragmentId": 1309
  }, {
    "id": 1024,
    "pathFragmentId": 1310
  }, {
    "id": 1025,
    "pathFragmentId": 1311
  }, {
    "id": 1026,
    "pathFragmentId": 1313
  }, {
    "id": 1027,
    "pathFragmentId": 1314
  }, {
    "id": 1028,
    "pathFragmentId": 1315
  }, {
    "id": 1029,
    "pathFragmentId": 1316
  }, {
    "id": 1030,
    "pathFragmentId": 1318
  }, {
    "id": 1031,
    "pathFragmentId": 1319
  }, {
    "id": 1032,
    "pathFragmentId": 1320
  }, {
    "id": 1033,
    "pathFragmentId": 1321
  }, {
    "id": 1034,
    "pathFragmentId": 1323
  }, {
    "id": 1035,
    "pathFragmentId": 1324
  }, {
    "id": 1036,
    "pathFragmentId": 1325
  }, {
    "id": 1037,
    "pathFragmentId": 1326
  }, {
    "id": 1038,
    "pathFragmentId": 1328
  }, {
    "id": 1039,
    "pathFragmentId": 1329
  }, {
    "id": 1040,
    "pathFragmentId": 1330
  }, {
    "id": 1041,
    "pathFragmentId": 1332
  }, {
    "id": 1042,
    "pathFragmentId": 1333
  }, {
    "id": 1043,
    "pathFragmentId": 1334
  }, {
    "id": 1044,
    "pathFragmentId": 1335
  }, {
    "id": 1045,
    "pathFragmentId": 1336
  }, {
    "id": 1046,
    "pathFragmentId": 1338
  }, {
    "id": 1047,
    "pathFragmentId": 1339
  }, {
    "id": 1048,
    "pathFragmentId": 1341
  }, {
    "id": 1049,
    "pathFragmentId": 1342
  }, {
    "id": 1050,
    "pathFragmentId": 1343
  }, {
    "id": 1051,
    "pathFragmentId": 1346
  }, {
    "id": 1052,
    "pathFragmentId": 1347
  }, {
    "id": 1053,
    "pathFragmentId": 1348
  }, {
    "id": 1054,
    "pathFragmentId": 1349
  }, {
    "id": 1055,
    "pathFragmentId": 1350
  }, {
    "id": 1056,
    "pathFragmentId": 1351
  }, {
    "id": 1057,
    "pathFragmentId": 1352
  }, {
    "id": 1058,
    "pathFragmentId": 1353
  }, {
    "id": 1059,
    "pathFragmentId": 1354
  }, {
    "id": 1060,
    "pathFragmentId": 1355
  }, {
    "id": 1061,
    "pathFragmentId": 1357
  }, {
    "id": 1062,
    "pathFragmentId": 1358
  }, {
    "id": 1063,
    "pathFragmentId": 1359
  }, {
    "id": 1064,
    "pathFragmentId": 1360
  }, {
    "id": 1065,
    "pathFragmentId": 1361
  }, {
    "id": 1066,
    "pathFragmentId": 1362
  }, {
    "id": 1067,
    "pathFragmentId": 1363
  }, {
    "id": 1068,
    "pathFragmentId": 1364
  }, {
    "id": 1069,
    "pathFragmentId": 1365
  }, {
    "id": 1070,
    "pathFragmentId": 1366
  }, {
    "id": 1071,
    "pathFragmentId": 1367
  }, {
    "id": 1072,
    "pathFragmentId": 1369
  }, {
    "id": 1073,
    "pathFragmentId": 1370
  }, {
    "id": 1074,
    "pathFragmentId": 1372
  }, {
    "id": 1075,
    "pathFragmentId": 1373
  }, {
    "id": 1076,
    "pathFragmentId": 1374
  }, {
    "id": 1077,
    "pathFragmentId": 1375
  }, {
    "id": 1078,
    "pathFragmentId": 1377
  }, {
    "id": 1079,
    "pathFragmentId": 1378
  }, {
    "id": 1080,
    "pathFragmentId": 1380
  }, {
    "id": 1081,
    "pathFragmentId": 1381
  }, {
    "id": 1082,
    "pathFragmentId": 1382
  }, {
    "id": 1083,
    "pathFragmentId": 1383
  }, {
    "id": 1084,
    "pathFragmentId": 1385
  }, {
    "id": 1085,
    "pathFragmentId": 1386
  }, {
    "id": 1086,
    "pathFragmentId": 1387
  }, {
    "id": 1087,
    "pathFragmentId": 1389
  }, {
    "id": 1088,
    "pathFragmentId": 1390
  }, {
    "id": 1089,
    "pathFragmentId": 1391
  }, {
    "id": 1090,
    "pathFragmentId": 1392
  }, {
    "id": 1091,
    "pathFragmentId": 1393
  }, {
    "id": 1092,
    "pathFragmentId": 1394
  }, {
    "id": 1093,
    "pathFragmentId": 1395
  }, {
    "id": 1094,
    "pathFragmentId": 1396
  }, {
    "id": 1095,
    "pathFragmentId": 1398
  }, {
    "id": 1096,
    "pathFragmentId": 1399
  }, {
    "id": 1097,
    "pathFragmentId": 1400
  }, {
    "id": 1098,
    "pathFragmentId": 1402
  }, {
    "id": 1099,
    "pathFragmentId": 1403
  }, {
    "id": 1100,
    "pathFragmentId": 1404
  }, {
    "id": 1101,
    "pathFragmentId": 1405
  }, {
    "id": 1102,
    "pathFragmentId": 1407
  }, {
    "id": 1103,
    "pathFragmentId": 1408
  }, {
    "id": 1104,
    "pathFragmentId": 1410
  }, {
    "id": 1105,
    "pathFragmentId": 1411
  }, {
    "id": 1106,
    "pathFragmentId": 1412
  }, {
    "id": 1107,
    "pathFragmentId": 1413
  }, {
    "id": 1108,
    "pathFragmentId": 1414
  }, {
    "id": 1109,
    "pathFragmentId": 1415
  }, {
    "id": 1110,
    "pathFragmentId": 1416
  }, {
    "id": 1111,
    "pathFragmentId": 1417
  }, {
    "id": 1112,
    "pathFragmentId": 1418
  }, {
    "id": 1113,
    "pathFragmentId": 1420
  }, {
    "id": 1114,
    "pathFragmentId": 1421
  }, {
    "id": 1115,
    "pathFragmentId": 1422
  }, {
    "id": 1116,
    "pathFragmentId": 1423
  }, {
    "id": 1117,
    "pathFragmentId": 1424
  }, {
    "id": 1118,
    "pathFragmentId": 1425
  }, {
    "id": 1119,
    "pathFragmentId": 1427
  }, {
    "id": 1120,
    "pathFragmentId": 1428
  }, {
    "id": 1121,
    "pathFragmentId": 1430
  }, {
    "id": 1122,
    "pathFragmentId": 1431
  }, {
    "id": 1123,
    "pathFragmentId": 1432
  }, {
    "id": 1124,
    "pathFragmentId": 1434
  }, {
    "id": 1125,
    "pathFragmentId": 1435
  }, {
    "id": 1126,
    "pathFragmentId": 1436
  }, {
    "id": 1127,
    "pathFragmentId": 1438
  }, {
    "id": 1128,
    "pathFragmentId": 1439
  }, {
    "id": 1129,
    "pathFragmentId": 1440
  }, {
    "id": 1130,
    "pathFragmentId": 1442
  }, {
    "id": 1131,
    "pathFragmentId": 1443
  }, {
    "id": 1132,
    "pathFragmentId": 1444
  }, {
    "id": 1133,
    "pathFragmentId": 1445
  }, {
    "id": 1134,
    "pathFragmentId": 1447
  }, {
    "id": 1135,
    "pathFragmentId": 1448
  }, {
    "id": 1136,
    "pathFragmentId": 1450
  }, {
    "id": 1137,
    "pathFragmentId": 1451
  }, {
    "id": 1138,
    "pathFragmentId": 1452
  }, {
    "id": 1139,
    "pathFragmentId": 1453
  }, {
    "id": 1140,
    "pathFragmentId": 1454
  }, {
    "id": 1141,
    "pathFragmentId": 1456
  }, {
    "id": 1142,
    "pathFragmentId": 1457
  }, {
    "id": 1143,
    "pathFragmentId": 1458
  }, {
    "id": 1144,
    "pathFragmentId": 1459
  }, {
    "id": 1145,
    "pathFragmentId": 1461
  }, {
    "id": 1146,
    "pathFragmentId": 1462
  }, {
    "id": 1147,
    "pathFragmentId": 1464
  }, {
    "id": 1148,
    "pathFragmentId": 1465
  }, {
    "id": 1149,
    "pathFragmentId": 1466
  }, {
    "id": 1150,
    "pathFragmentId": 1467
  }, {
    "id": 1151,
    "pathFragmentId": 1469
  }, {
    "id": 1152,
    "pathFragmentId": 1470
  }, {
    "id": 1153,
    "pathFragmentId": 1472
  }, {
    "id": 1154,
    "pathFragmentId": 1473
  }, {
    "id": 1155,
    "pathFragmentId": 1474
  }, {
    "id": 1156,
    "pathFragmentId": 1475
  }, {
    "id": 1157,
    "pathFragmentId": 1476
  }, {
    "id": 1158,
    "pathFragmentId": 1477
  }, {
    "id": 1159,
    "pathFragmentId": 1478
  }, {
    "id": 1160,
    "pathFragmentId": 1479
  }, {
    "id": 1161,
    "pathFragmentId": 1480
  }, {
    "id": 1162,
    "pathFragmentId": 1481
  }, {
    "id": 1163,
    "pathFragmentId": 1482
  }, {
    "id": 1164,
    "pathFragmentId": 1484
  }, {
    "id": 1165,
    "pathFragmentId": 1485
  }, {
    "id": 1166,
    "pathFragmentId": 1486
  }, {
    "id": 1167,
    "pathFragmentId": 1488
  }, {
    "id": 1168,
    "pathFragmentId": 1489
  }, {
    "id": 1169,
    "pathFragmentId": 1490
  }, {
    "id": 1170,
    "pathFragmentId": 1491,
    "isTreeArtifact": true
  }, {
    "id": 1171,
    "pathFragmentId": 1492
  }, {
    "id": 1172,
    "pathFragmentId": 1493
  }, {
    "id": 1173,
    "pathFragmentId": 1496
  }, {
    "id": 1174,
    "pathFragmentId": 1497
  }, {
    "id": 1175,
    "pathFragmentId": 1498
  }, {
    "id": 1176,
    "pathFragmentId": 1499
  }, {
    "id": 1177,
    "pathFragmentId": 1500
  }, {
    "id": 1178,
    "pathFragmentId": 1501
  }, {
    "id": 1179,
    "pathFragmentId": 1503
  }, {
    "id": 1180,
    "pathFragmentId": 1504
  }, {
    "id": 1181,
    "pathFragmentId": 1505
  }, {
    "id": 1182,
    "pathFragmentId": 1506
  }, {
    "id": 1183,
    "pathFragmentId": 1508
  }, {
    "id": 1184,
    "pathFragmentId": 1509
  }, {
    "id": 1185,
    "pathFragmentId": 1511
  }, {
    "id": 1186,
    "pathFragmentId": 1512
  }, {
    "id": 1187,
    "pathFragmentId": 1513
  }, {
    "id": 1188,
    "pathFragmentId": 1514
  }, {
    "id": 1189,
    "pathFragmentId": 1515
  }, {
    "id": 1190,
    "pathFragmentId": 1516
  }, {
    "id": 1191,
    "pathFragmentId": 1517
  }, {
    "id": 1192,
    "pathFragmentId": 1519
  }, {
    "id": 1193,
    "pathFragmentId": 1520
  }, {
    "id": 1194,
    "pathFragmentId": 1521
  }, {
    "id": 1195,
    "pathFragmentId": 1523
  }, {
    "id": 1196,
    "pathFragmentId": 1524
  }, {
    "id": 1197,
    "pathFragmentId": 1525
  }, {
    "id": 1198,
    "pathFragmentId": 1526
  }, {
    "id": 1199,
    "pathFragmentId": 1528
  }, {
    "id": 1200,
    "pathFragmentId": 1529
  }, {
    "id": 1201,
    "pathFragmentId": 1531
  }, {
    "id": 1202,
    "pathFragmentId": 1532
  }, {
    "id": 1203,
    "pathFragmentId": 1533
  }, {
    "id": 1204,
    "pathFragmentId": 1534
  }, {
    "id": 1205,
    "pathFragmentId": 1536
  }, {
    "id": 1206,
    "pathFragmentId": 1537
  }, {
    "id": 1207,
    "pathFragmentId": 1538
  }, {
    "id": 1208,
    "pathFragmentId": 1539
  }, {
    "id": 1209,
    "pathFragmentId": 1541
  }, {
    "id": 1210,
    "pathFragmentId": 1542
  }, {
    "id": 1211,
    "pathFragmentId": 1544
  }, {
    "id": 1212,
    "pathFragmentId": 1545
  }, {
    "id": 1213,
    "pathFragmentId": 1546
  }, {
    "id": 1214,
    "pathFragmentId": 1548
  }, {
    "id": 1215,
    "pathFragmentId": 1549
  }, {
    "id": 1216,
    "pathFragmentId": 1550
  }, {
    "id": 1217,
    "pathFragmentId": 1552
  }, {
    "id": 1218,
    "pathFragmentId": 1553
  }, {
    "id": 1219,
    "pathFragmentId": 1554
  }, {
    "id": 1220,
    "pathFragmentId": 1555
  }, {
    "id": 1221,
    "pathFragmentId": 1557
  }, {
    "id": 1222,
    "pathFragmentId": 1558
  }, {
    "id": 1223,
    "pathFragmentId": 1560
  }, {
    "id": 1224,
    "pathFragmentId": 1561
  }, {
    "id": 1225,
    "pathFragmentId": 1562
  }, {
    "id": 1226,
    "pathFragmentId": 1563
  }, {
    "id": 1227,
    "pathFragmentId": 1564
  }, {
    "id": 1228,
    "pathFragmentId": 1565
  }, {
    "id": 1229,
    "pathFragmentId": 1566
  }, {
    "id": 1230,
    "pathFragmentId": 1567
  }, {
    "id": 1231,
    "pathFragmentId": 1568
  }, {
    "id": 1232,
    "pathFragmentId": 1570
  }, {
    "id": 1233,
    "pathFragmentId": 1571
  }, {
    "id": 1234,
    "pathFragmentId": 1572
  }, {
    "id": 1235,
    "pathFragmentId": 1573
  }, {
    "id": 1236,
    "pathFragmentId": 1574
  }, {
    "id": 1237,
    "pathFragmentId": 1575
  }, {
    "id": 1238,
    "pathFragmentId": 1576
  }, {
    "id": 1239,
    "pathFragmentId": 1578
  }, {
    "id": 1240,
    "pathFragmentId": 1579
  }, {
    "id": 1241,
    "pathFragmentId": 1580
  }, {
    "id": 1242,
    "pathFragmentId": 1582
  }, {
    "id": 1243,
    "pathFragmentId": 1583
  }, {
    "id": 1244,
    "pathFragmentId": 1584
  }, {
    "id": 1245,
    "pathFragmentId": 1585
  }, {
    "id": 1246,
    "pathFragmentId": 1586
  }, {
    "id": 1247,
    "pathFragmentId": 1587
  }, {
    "id": 1248,
    "pathFragmentId": 1588
  }, {
    "id": 1249,
    "pathFragmentId": 1589
  }, {
    "id": 1250,
    "pathFragmentId": 1591
  }, {
    "id": 1251,
    "pathFragmentId": 1592
  }, {
    "id": 1252,
    "pathFragmentId": 1593
  }, {
    "id": 1253,
    "pathFragmentId": 1594
  }, {
    "id": 1254,
    "pathFragmentId": 1596
  }, {
    "id": 1255,
    "pathFragmentId": 1597
  }, {
    "id": 1256,
    "pathFragmentId": 1599
  }, {
    "id": 1257,
    "pathFragmentId": 1600
  }, {
    "id": 1258,
    "pathFragmentId": 1601
  }, {
    "id": 1259,
    "pathFragmentId": 1602
  }, {
    "id": 1260,
    "pathFragmentId": 1603
  }, {
    "id": 1261,
    "pathFragmentId": 1605
  }, {
    "id": 1262,
    "pathFragmentId": 1606
  }, {
    "id": 1263,
    "pathFragmentId": 1608
  }, {
    "id": 1264,
    "pathFragmentId": 1609
  }, {
    "id": 1265,
    "pathFragmentId": 1610
  }, {
    "id": 1266,
    "pathFragmentId": 1611
  }, {
    "id": 1267,
    "pathFragmentId": 1612
  }, {
    "id": 1268,
    "pathFragmentId": 1613
  }, {
    "id": 1269,
    "pathFragmentId": 1614
  }, {
    "id": 1270,
    "pathFragmentId": 1615
  }, {
    "id": 1271,
    "pathFragmentId": 1616
  }, {
    "id": 1272,
    "pathFragmentId": 1618
  }, {
    "id": 1273,
    "pathFragmentId": 1619
  }, {
    "id": 1274,
    "pathFragmentId": 1620
  }, {
    "id": 1275,
    "pathFragmentId": 1621
  }, {
    "id": 1276,
    "pathFragmentId": 1622
  }, {
    "id": 1277,
    "pathFragmentId": 1623
  }, {
    "id": 1278,
    "pathFragmentId": 1624
  }, {
    "id": 1279,
    "pathFragmentId": 1625
  }, {
    "id": 1280,
    "pathFragmentId": 1628
  }, {
    "id": 1281,
    "pathFragmentId": 1629
  }, {
    "id": 1282,
    "pathFragmentId": 1630
  }, {
    "id": 1283,
    "pathFragmentId": 1631
  }, {
    "id": 1284,
    "pathFragmentId": 1632
  }, {
    "id": 1285,
    "pathFragmentId": 1633
  }, {
    "id": 1286,
    "pathFragmentId": 1634
  }, {
    "id": 1287,
    "pathFragmentId": 1636
  }, {
    "id": 1288,
    "pathFragmentId": 1637
  }, {
    "id": 1289,
    "pathFragmentId": 1638
  }, {
    "id": 1290,
    "pathFragmentId": 1640
  }, {
    "id": 1291,
    "pathFragmentId": 1641
  }, {
    "id": 1292,
    "pathFragmentId": 1642
  }, {
    "id": 1293,
    "pathFragmentId": 1643
  }, {
    "id": 1294,
    "pathFragmentId": 1645
  }, {
    "id": 1295,
    "pathFragmentId": 1646
  }, {
    "id": 1296,
    "pathFragmentId": 1648
  }, {
    "id": 1297,
    "pathFragmentId": 1649
  }, {
    "id": 1298,
    "pathFragmentId": 1650
  }, {
    "id": 1299,
    "pathFragmentId": 1651
  }, {
    "id": 1300,
    "pathFragmentId": 1653
  }, {
    "id": 1301,
    "pathFragmentId": 1654
  }, {
    "id": 1302,
    "pathFragmentId": 1655
  }, {
    "id": 1303,
    "pathFragmentId": 1657
  }, {
    "id": 1304,
    "pathFragmentId": 1658
  }, {
    "id": 1305,
    "pathFragmentId": 1659
  }, {
    "id": 1306,
    "pathFragmentId": 1660
  }, {
    "id": 1307,
    "pathFragmentId": 1661
  }, {
    "id": 1308,
    "pathFragmentId": 1662
  }, {
    "id": 1309,
    "pathFragmentId": 1663
  }, {
    "id": 1310,
    "pathFragmentId": 1664
  }, {
    "id": 1311,
    "pathFragmentId": 1665
  }, {
    "id": 1312,
    "pathFragmentId": 1667
  }, {
    "id": 1313,
    "pathFragmentId": 1668
  }, {
    "id": 1314,
    "pathFragmentId": 1669
  }, {
    "id": 1315,
    "pathFragmentId": 1670
  }, {
    "id": 1316,
    "pathFragmentId": 1671
  }, {
    "id": 1317,
    "pathFragmentId": 1672
  }, {
    "id": 1318,
    "pathFragmentId": 1674
  }, {
    "id": 1319,
    "pathFragmentId": 1675
  }, {
    "id": 1320,
    "pathFragmentId": 1677
  }, {
    "id": 1321,
    "pathFragmentId": 1678
  }, {
    "id": 1322,
    "pathFragmentId": 1679
  }, {
    "id": 1323,
    "pathFragmentId": 1680
  }, {
    "id": 1324,
    "pathFragmentId": 1681
  }, {
    "id": 1325,
    "pathFragmentId": 1682
  }, {
    "id": 1326,
    "pathFragmentId": 1683
  }, {
    "id": 1327,
    "pathFragmentId": 1684
  }, {
    "id": 1328,
    "pathFragmentId": 1685
  }, {
    "id": 1329,
    "pathFragmentId": 1687
  }, {
    "id": 1330,
    "pathFragmentId": 1688
  }, {
    "id": 1331,
    "pathFragmentId": 1689
  }, {
    "id": 1332,
    "pathFragmentId": 1690
  }, {
    "id": 1333,
    "pathFragmentId": 1691
  }, {
    "id": 1334,
    "pathFragmentId": 1692
  }, {
    "id": 1335,
    "pathFragmentId": 1693
  }, {
    "id": 1336,
    "pathFragmentId": 1695
  }, {
    "id": 1337,
    "pathFragmentId": 1696
  }, {
    "id": 1338,
    "pathFragmentId": 1697
  }, {
    "id": 1339,
    "pathFragmentId": 1702
  }, {
    "id": 1340,
    "pathFragmentId": 1703
  }, {
    "id": 1341,
    "pathFragmentId": 1704
  }, {
    "id": 1342,
    "pathFragmentId": 1705
  }, {
    "id": 1343,
    "pathFragmentId": 1707
  }, {
    "id": 1344,
    "pathFragmentId": 1708
  }, {
    "id": 1345,
    "pathFragmentId": 1709
  }, {
    "id": 1346,
    "pathFragmentId": 1711
  }, {
    "id": 1347,
    "pathFragmentId": 1712
  }, {
    "id": 1348,
    "pathFragmentId": 1713
  }, {
    "id": 1349,
    "pathFragmentId": 1714
  }, {
    "id": 1350,
    "pathFragmentId": 1716
  }, {
    "id": 1351,
    "pathFragmentId": 1717
  }, {
    "id": 1352,
    "pathFragmentId": 1718
  }, {
    "id": 1353,
    "pathFragmentId": 1719
  }, {
    "id": 1354,
    "pathFragmentId": 1721
  }, {
    "id": 1355,
    "pathFragmentId": 1722
  }, {
    "id": 1356,
    "pathFragmentId": 1723
  }, {
    "id": 1357,
    "pathFragmentId": 1725
  }, {
    "id": 1358,
    "pathFragmentId": 1726
  }, {
    "id": 1359,
    "pathFragmentId": 1727
  }, {
    "id": 1360,
    "pathFragmentId": 1728
  }, {
    "id": 1361,
    "pathFragmentId": 1730
  }, {
    "id": 1362,
    "pathFragmentId": 1731
  }, {
    "id": 1363,
    "pathFragmentId": 1732
  }, {
    "id": 1364,
    "pathFragmentId": 1734
  }, {
    "id": 1365,
    "pathFragmentId": 1735
  }, {
    "id": 1366,
    "pathFragmentId": 1736
  }, {
    "id": 1367,
    "pathFragmentId": 1737
  }, {
    "id": 1368,
    "pathFragmentId": 1738
  }, {
    "id": 1369,
    "pathFragmentId": 1739
  }, {
    "id": 1370,
    "pathFragmentId": 1740
  }, {
    "id": 1371,
    "pathFragmentId": 1741
  }, {
    "id": 1372,
    "pathFragmentId": 1742
  }, {
    "id": 1373,
    "pathFragmentId": 1744
  }, {
    "id": 1374,
    "pathFragmentId": 1745
  }, {
    "id": 1375,
    "pathFragmentId": 1746
  }, {
    "id": 1376,
    "pathFragmentId": 1747
  }, {
    "id": 1377,
    "pathFragmentId": 1750
  }, {
    "id": 1378,
    "pathFragmentId": 1751
  }, {
    "id": 1379,
    "pathFragmentId": 1752
  }, {
    "id": 1380,
    "pathFragmentId": 1753
  }, {
    "id": 1381,
    "pathFragmentId": 1754
  }, {
    "id": 1382,
    "pathFragmentId": 1755
  }, {
    "id": 1383,
    "pathFragmentId": 1756
  }, {
    "id": 1384,
    "pathFragmentId": 1757
  }, {
    "id": 1385,
    "pathFragmentId": 1758
  }, {
    "id": 1386,
    "pathFragmentId": 1759
  }, {
    "id": 1387,
    "pathFragmentId": 1760
  }, {
    "id": 1388,
    "pathFragmentId": 1761
  }, {
    "id": 1389,
    "pathFragmentId": 1762
  }, {
    "id": 1390,
    "pathFragmentId": 1763
  }, {
    "id": 1391,
    "pathFragmentId": 1764
  }, {
    "id": 1392,
    "pathFragmentId": 1765
  }, {
    "id": 1393,
    "pathFragmentId": 1766
  }, {
    "id": 1394,
    "pathFragmentId": 1767
  }, {
    "id": 1395,
    "pathFragmentId": 1769
  }, {
    "id": 1396,
    "pathFragmentId": 1770
  }, {
    "id": 1397,
    "pathFragmentId": 1772
  }, {
    "id": 1398,
    "pathFragmentId": 1773
  }, {
    "id": 1399,
    "pathFragmentId": 1774
  }, {
    "id": 1400,
    "pathFragmentId": 1775
  }, {
    "id": 1401,
    "pathFragmentId": 1776
  }, {
    "id": 1402,
    "pathFragmentId": 1777
  }, {
    "id": 1403,
    "pathFragmentId": 1778
  }, {
    "id": 1404,
    "pathFragmentId": 1779
  }, {
    "id": 1405,
    "pathFragmentId": 1780
  }, {
    "id": 1406,
    "pathFragmentId": 1782
  }, {
    "id": 1407,
    "pathFragmentId": 1783
  }, {
    "id": 1408,
    "pathFragmentId": 1784
  }, {
    "id": 1409,
    "pathFragmentId": 1785
  }, {
    "id": 1410,
    "pathFragmentId": 1786
  }, {
    "id": 1411,
    "pathFragmentId": 1787
  }, {
    "id": 1412,
    "pathFragmentId": 1789
  }, {
    "id": 1413,
    "pathFragmentId": 1790
  }, {
    "id": 1414,
    "pathFragmentId": 1791
  }, {
    "id": 1415,
    "pathFragmentId": 1793
  }, {
    "id": 1416,
    "pathFragmentId": 1794
  }, {
    "id": 1417,
    "pathFragmentId": 1795
  }, {
    "id": 1418,
    "pathFragmentId": 1796
  }, {
    "id": 1419,
    "pathFragmentId": 1798
  }, {
    "id": 1420,
    "pathFragmentId": 1799
  }, {
    "id": 1421,
    "pathFragmentId": 1800
  }, {
    "id": 1422,
    "pathFragmentId": 1801
  }, {
    "id": 1423,
    "pathFragmentId": 1803
  }, {
    "id": 1424,
    "pathFragmentId": 1804
  }, {
    "id": 1425,
    "pathFragmentId": 1806
  }, {
    "id": 1426,
    "pathFragmentId": 1807
  }, {
    "id": 1427,
    "pathFragmentId": 1808
  }, {
    "id": 1428,
    "pathFragmentId": 1809
  }, {
    "id": 1429,
    "pathFragmentId": 1811
  }, {
    "id": 1430,
    "pathFragmentId": 1812
  }, {
    "id": 1431,
    "pathFragmentId": 1814
  }, {
    "id": 1432,
    "pathFragmentId": 1815
  }, {
    "id": 1433,
    "pathFragmentId": 1816
  }, {
    "id": 1434,
    "pathFragmentId": 1818
  }, {
    "id": 1435,
    "pathFragmentId": 1819
  }, {
    "id": 1436,
    "pathFragmentId": 1820
  }, {
    "id": 1437,
    "pathFragmentId": 1822
  }, {
    "id": 1438,
    "pathFragmentId": 1823
  }, {
    "id": 1439,
    "pathFragmentId": 1824
  }, {
    "id": 1440,
    "pathFragmentId": 1825
  }, {
    "id": 1441,
    "pathFragmentId": 1826
  }, {
    "id": 1442,
    "pathFragmentId": 1828
  }, {
    "id": 1443,
    "pathFragmentId": 1829
  }, {
    "id": 1444,
    "pathFragmentId": 1832
  }, {
    "id": 1445,
    "pathFragmentId": 1833
  }, {
    "id": 1446,
    "pathFragmentId": 1834
  }, {
    "id": 1447,
    "pathFragmentId": 1835
  }, {
    "id": 1448,
    "pathFragmentId": 1837
  }, {
    "id": 1449,
    "pathFragmentId": 1838
  }, {
    "id": 1450,
    "pathFragmentId": 1840
  }, {
    "id": 1451,
    "pathFragmentId": 1841
  }, {
    "id": 1452,
    "pathFragmentId": 1842
  }, {
    "id": 1453,
    "pathFragmentId": 1844
  }, {
    "id": 1454,
    "pathFragmentId": 1845
  }, {
    "id": 1455,
    "pathFragmentId": 1846
  }, {
    "id": 1456,
    "pathFragmentId": 1848
  }, {
    "id": 1457,
    "pathFragmentId": 1849
  }, {
    "id": 1458,
    "pathFragmentId": 1850
  }, {
    "id": 1459,
    "pathFragmentId": 1851
  }, {
    "id": 1460,
    "pathFragmentId": 1852
  }, {
    "id": 1461,
    "pathFragmentId": 1854
  }, {
    "id": 1462,
    "pathFragmentId": 1855
  }, {
    "id": 1463,
    "pathFragmentId": 1858
  }, {
    "id": 1464,
    "pathFragmentId": 1859
  }, {
    "id": 1465,
    "pathFragmentId": 1860
  }, {
    "id": 1466,
    "pathFragmentId": 1861
  }, {
    "id": 1467,
    "pathFragmentId": 1863
  }, {
    "id": 1468,
    "pathFragmentId": 1864
  }, {
    "id": 1469,
    "pathFragmentId": 1866
  }, {
    "id": 1470,
    "pathFragmentId": 1867
  }, {
    "id": 1471,
    "pathFragmentId": 1868
  }, {
    "id": 1472,
    "pathFragmentId": 1869
  }, {
    "id": 1473,
    "pathFragmentId": 1870
  }, {
    "id": 1474,
    "pathFragmentId": 1872
  }, {
    "id": 1475,
    "pathFragmentId": 1873
  }, {
    "id": 1476,
    "pathFragmentId": 1875
  }, {
    "id": 1477,
    "pathFragmentId": 1876
  }, {
    "id": 1478,
    "pathFragmentId": 1877
  }, {
    "id": 1479,
    "pathFragmentId": 1878
  }, {
    "id": 1480,
    "pathFragmentId": 1880
  }, {
    "id": 1481,
    "pathFragmentId": 1881
  }, {
    "id": 1482,
    "pathFragmentId": 1883
  }, {
    "id": 1483,
    "pathFragmentId": 1884
  }, {
    "id": 1484,
    "pathFragmentId": 1885
  }, {
    "id": 1485,
    "pathFragmentId": 1886
  }, {
    "id": 1486,
    "pathFragmentId": 1887
  }, {
    "id": 1487,
    "pathFragmentId": 1888
  }, {
    "id": 1488,
    "pathFragmentId": 1889
  }, {
    "id": 1489,
    "pathFragmentId": 1890
  }, {
    "id": 1490,
    "pathFragmentId": 1891
  }, {
    "id": 1491,
    "pathFragmentId": 1893
  }, {
    "id": 1492,
    "pathFragmentId": 1894
  }, {
    "id": 1493,
    "pathFragmentId": 1895
  }, {
    "id": 1494,
    "pathFragmentId": 1896
  }, {
    "id": 1495,
    "pathFragmentId": 1897
  }, {
    "id": 1496,
    "pathFragmentId": 1898
  }, {
    "id": 1497,
    "pathFragmentId": 1900
  }, {
    "id": 1498,
    "pathFragmentId": 1901
  }, {
    "id": 1499,
    "pathFragmentId": 1902
  }, {
    "id": 1500,
    "pathFragmentId": 1904
  }, {
    "id": 1501,
    "pathFragmentId": 1905
  }, {
    "id": 1502,
    "pathFragmentId": 1906
  }, {
    "id": 1503,
    "pathFragmentId": 1907
  }, {
    "id": 1504,
    "pathFragmentId": 1909
  }, {
    "id": 1505,
    "pathFragmentId": 1910
  }, {
    "id": 1506,
    "pathFragmentId": 1911
  }, {
    "id": 1507,
    "pathFragmentId": 1912
  }, {
    "id": 1508,
    "pathFragmentId": 1914
  }, {
    "id": 1509,
    "pathFragmentId": 1915
  }, {
    "id": 1510,
    "pathFragmentId": 1916
  }, {
    "id": 1511,
    "pathFragmentId": 1918
  }, {
    "id": 1512,
    "pathFragmentId": 1919
  }, {
    "id": 1513,
    "pathFragmentId": 1920
  }, {
    "id": 1514,
    "pathFragmentId": 1921
  }, {
    "id": 1515,
    "pathFragmentId": 1922
  }, {
    "id": 1516,
    "pathFragmentId": 1924
  }, {
    "id": 1517,
    "pathFragmentId": 1925
  }, {
    "id": 1518,
    "pathFragmentId": 1926
  }, {
    "id": 1519,
    "pathFragmentId": 1927
  }, {
    "id": 1520,
    "pathFragmentId": 1928
  }, {
    "id": 1521,
    "pathFragmentId": 1929
  }, {
    "id": 1522,
    "pathFragmentId": 1931
  }, {
    "id": 1523,
    "pathFragmentId": 1932
  }, {
    "id": 1524,
    "pathFragmentId": 1933
  }, {
    "id": 1525,
    "pathFragmentId": 1934
  }, {
    "id": 1526,
    "pathFragmentId": 1935
  }, {
    "id": 1527,
    "pathFragmentId": 1936
  }, {
    "id": 1528,
    "pathFragmentId": 1937
  }, {
    "id": 1529,
    "pathFragmentId": 1938
  }, {
    "id": 1530,
    "pathFragmentId": 1940
  }, {
    "id": 1531,
    "pathFragmentId": 1941
  }, {
    "id": 1532,
    "pathFragmentId": 1942
  }, {
    "id": 1533,
    "pathFragmentId": 1944
  }, {
    "id": 1534,
    "pathFragmentId": 1945
  }, {
    "id": 1535,
    "pathFragmentId": 1946
  }, {
    "id": 1536,
    "pathFragmentId": 1947
  }, {
    "id": 1537,
    "pathFragmentId": 1948
  }, {
    "id": 1538,
    "pathFragmentId": 1949
  }, {
    "id": 1539,
    "pathFragmentId": 1950
  }, {
    "id": 1540,
    "pathFragmentId": 1951
  }, {
    "id": 1541,
    "pathFragmentId": 1952
  }, {
    "id": 1542,
    "pathFragmentId": 1954
  }, {
    "id": 1543,
    "pathFragmentId": 1955
  }, {
    "id": 1544,
    "pathFragmentId": 1956
  }, {
    "id": 1545,
    "pathFragmentId": 1957
  }, {
    "id": 1546,
    "pathFragmentId": 1958
  }, {
    "id": 1547,
    "pathFragmentId": 1961
  }, {
    "id": 1548,
    "pathFragmentId": 1962
  }, {
    "id": 1549,
    "pathFragmentId": 1963
  }, {
    "id": 1550,
    "pathFragmentId": 1964
  }, {
    "id": 1551,
    "pathFragmentId": 1966
  }, {
    "id": 1552,
    "pathFragmentId": 1967
  }, {
    "id": 1553,
    "pathFragmentId": 1968
  }, {
    "id": 1554,
    "pathFragmentId": 1970
  }, {
    "id": 1555,
    "pathFragmentId": 1971
  }, {
    "id": 1556,
    "pathFragmentId": 1973
  }, {
    "id": 1557,
    "pathFragmentId": 1974
  }, {
    "id": 1558,
    "pathFragmentId": 1975
  }, {
    "id": 1559,
    "pathFragmentId": 1976
  }, {
    "id": 1560,
    "pathFragmentId": 1977
  }, {
    "id": 1561,
    "pathFragmentId": 1978
  }, {
    "id": 1562,
    "pathFragmentId": 1979
  }, {
    "id": 1563,
    "pathFragmentId": 1980
  }, {
    "id": 1564,
    "pathFragmentId": 1982
  }, {
    "id": 1565,
    "pathFragmentId": 1983
  }, {
    "id": 1566,
    "pathFragmentId": 1984
  }, {
    "id": 1567,
    "pathFragmentId": 1986
  }, {
    "id": 1568,
    "pathFragmentId": 1987
  }, {
    "id": 1569,
    "pathFragmentId": 1988
  }, {
    "id": 1570,
    "pathFragmentId": 1990
  }, {
    "id": 1571,
    "pathFragmentId": 1991
  }, {
    "id": 1572,
    "pathFragmentId": 1992
  }, {
    "id": 1573,
    "pathFragmentId": 1993
  }, {
    "id": 1574,
    "pathFragmentId": 1995
  }, {
    "id": 1575,
    "pathFragmentId": 1996
  }, {
    "id": 1576,
    "pathFragmentId": 1998
  }, {
    "id": 1577,
    "pathFragmentId": 1999
  }, {
    "id": 1578,
    "pathFragmentId": 2000
  }, {
    "id": 1579,
    "pathFragmentId": 2001
  }, {
    "id": 1580,
    "pathFragmentId": 2002
  }, {
    "id": 1581,
    "pathFragmentId": 2003
  }, {
    "id": 1582,
    "pathFragmentId": 2004
  }, {
    "id": 1583,
    "pathFragmentId": 2005
  }, {
    "id": 1584,
    "pathFragmentId": 2006
  }, {
    "id": 1585,
    "pathFragmentId": 2007
  }, {
    "id": 1586,
    "pathFragmentId": 2008
  }, {
    "id": 1587,
    "pathFragmentId": 2009
  }, {
    "id": 1588,
    "pathFragmentId": 2010
  }, {
    "id": 1589,
    "pathFragmentId": 2011
  }, {
    "id": 1590,
    "pathFragmentId": 2012
  }, {
    "id": 1591,
    "pathFragmentId": 2013
  }, {
    "id": 1592,
    "pathFragmentId": 2014
  }, {
    "id": 1593,
    "pathFragmentId": 2016
  }, {
    "id": 1594,
    "pathFragmentId": 2017
  }, {
    "id": 1595,
    "pathFragmentId": 2018
  }, {
    "id": 1596,
    "pathFragmentId": 2019
  }, {
    "id": 1597,
    "pathFragmentId": 2020
  }, {
    "id": 1598,
    "pathFragmentId": 2022
  }, {
    "id": 1599,
    "pathFragmentId": 2023
  }, {
    "id": 1600,
    "pathFragmentId": 2024
  }, {
    "id": 1601,
    "pathFragmentId": 2026
  }, {
    "id": 1602,
    "pathFragmentId": 2027
  }, {
    "id": 1603,
    "pathFragmentId": 2028
  }, {
    "id": 1604,
    "pathFragmentId": 2029
  }, {
    "id": 1605,
    "pathFragmentId": 2030
  }, {
    "id": 1606,
    "pathFragmentId": 2031
  }, {
    "id": 1607,
    "pathFragmentId": 2032
  }, {
    "id": 1608,
    "pathFragmentId": 2033
  }, {
    "id": 1609,
    "pathFragmentId": 2035
  }, {
    "id": 1610,
    "pathFragmentId": 2036
  }, {
    "id": 1611,
    "pathFragmentId": 2038
  }, {
    "id": 1612,
    "pathFragmentId": 2039
  }, {
    "id": 1613,
    "pathFragmentId": 2040
  }, {
    "id": 1614,
    "pathFragmentId": 2041
  }, {
    "id": 1615,
    "pathFragmentId": 2042
  }, {
    "id": 1616,
    "pathFragmentId": 2043
  }, {
    "id": 1617,
    "pathFragmentId": 2044
  }, {
    "id": 1618,
    "pathFragmentId": 2045
  }, {
    "id": 1619,
    "pathFragmentId": 2046
  }, {
    "id": 1620,
    "pathFragmentId": 2048
  }, {
    "id": 1621,
    "pathFragmentId": 2049
  }, {
    "id": 1622,
    "pathFragmentId": 2050
  }, {
    "id": 1623,
    "pathFragmentId": 2051
  }, {
    "id": 1624,
    "pathFragmentId": 2052
  }, {
    "id": 1625,
    "pathFragmentId": 2053
  }, {
    "id": 1626,
    "pathFragmentId": 2055
  }, {
    "id": 1627,
    "pathFragmentId": 2056
  }, {
    "id": 1628,
    "pathFragmentId": 2058
  }, {
    "id": 1629,
    "pathFragmentId": 2059
  }, {
    "id": 1630,
    "pathFragmentId": 2060
  }, {
    "id": 1631,
    "pathFragmentId": 2061
  }, {
    "id": 1632,
    "pathFragmentId": 2063
  }, {
    "id": 1633,
    "pathFragmentId": 2064
  }, {
    "id": 1634,
    "pathFragmentId": 2066
  }, {
    "id": 1635,
    "pathFragmentId": 2067
  }, {
    "id": 1636,
    "pathFragmentId": 2068
  }, {
    "id": 1637,
    "pathFragmentId": 2069
  }, {
    "id": 1638,
    "pathFragmentId": 2071
  }, {
    "id": 1639,
    "pathFragmentId": 2072
  }, {
    "id": 1640,
    "pathFragmentId": 2074
  }, {
    "id": 1641,
    "pathFragmentId": 2075
  }, {
    "id": 1642,
    "pathFragmentId": 2076
  }, {
    "id": 1643,
    "pathFragmentId": 2077
  }, {
    "id": 1644,
    "pathFragmentId": 2078
  }, {
    "id": 1645,
    "pathFragmentId": 2079
  }, {
    "id": 1646,
    "pathFragmentId": 2080
  }, {
    "id": 1647,
    "pathFragmentId": 2081
  }, {
    "id": 1648,
    "pathFragmentId": 2082
  }, {
    "id": 1649,
    "pathFragmentId": 2084
  }, {
    "id": 1650,
    "pathFragmentId": 2085
  }, {
    "id": 1651,
    "pathFragmentId": 2086
  }, {
    "id": 1652,
    "pathFragmentId": 2087
  }, {
    "id": 1653,
    "pathFragmentId": 2091
  }, {
    "id": 1654,
    "pathFragmentId": 2092
  }, {
    "id": 1655,
    "pathFragmentId": 2093
  }, {
    "id": 1656,
    "pathFragmentId": 2094
  }, {
    "id": 1657,
    "pathFragmentId": 2095
  }, {
    "id": 1658,
    "pathFragmentId": 2096
  }, {
    "id": 1659,
    "pathFragmentId": 2098
  }, {
    "id": 1660,
    "pathFragmentId": 2100
  }, {
    "id": 1661,
    "pathFragmentId": 2101
  }, {
    "id": 1662,
    "pathFragmentId": 2102
  }, {
    "id": 1663,
    "pathFragmentId": 2103
  }, {
    "id": 1664,
    "pathFragmentId": 2104
  }, {
    "id": 1665,
    "pathFragmentId": 2105
  }, {
    "id": 1666,
    "pathFragmentId": 2106
  }, {
    "id": 1667,
    "pathFragmentId": 2107
  }, {
    "id": 1668,
    "pathFragmentId": 2109
  }, {
    "id": 1669,
    "pathFragmentId": 2110
  }, {
    "id": 1670,
    "pathFragmentId": 2111
  }, {
    "id": 1671,
    "pathFragmentId": 2112
  }, {
    "id": 1672,
    "pathFragmentId": 2113
  }, {
    "id": 1673,
    "pathFragmentId": 2114
  }, {
    "id": 1674,
    "pathFragmentId": 2115
  }, {
    "id": 1675,
    "pathFragmentId": 2116
  }, {
    "id": 1676,
    "pathFragmentId": 2118
  }, {
    "id": 1677,
    "pathFragmentId": 2119
  }, {
    "id": 1678,
    "pathFragmentId": 2120
  }, {
    "id": 1679,
    "pathFragmentId": 2121
  }, {
    "id": 1680,
    "pathFragmentId": 2122
  }, {
    "id": 1681,
    "pathFragmentId": 2123
  }, {
    "id": 1682,
    "pathFragmentId": 2124
  }, {
    "id": 1683,
    "pathFragmentId": 2125
  }, {
    "id": 1684,
    "pathFragmentId": 2126
  }, {
    "id": 1685,
    "pathFragmentId": 2128
  }, {
    "id": 1686,
    "pathFragmentId": 2129
  }, {
    "id": 1687,
    "pathFragmentId": 2130
  }, {
    "id": 1688,
    "pathFragmentId": 2131
  }, {
    "id": 1689,
    "pathFragmentId": 2132
  }, {
    "id": 1690,
    "pathFragmentId": 2133
  }, {
    "id": 1691,
    "pathFragmentId": 2134
  }, {
    "id": 1692,
    "pathFragmentId": 2135
  }, {
    "id": 1693,
    "pathFragmentId": 2137
  }, {
    "id": 1694,
    "pathFragmentId": 2138
  }, {
    "id": 1695,
    "pathFragmentId": 2139
  }, {
    "id": 1696,
    "pathFragmentId": 2141
  }, {
    "id": 1697,
    "pathFragmentId": 2147
  }, {
    "id": 1698,
    "pathFragmentId": 2148
  }, {
    "id": 1699,
    "pathFragmentId": 2150
  }, {
    "id": 1700,
    "pathFragmentId": 2151
  }, {
    "id": 1701,
    "pathFragmentId": 2152
  }, {
    "id": 1702,
    "pathFragmentId": 2153
  }, {
    "id": 1703,
    "pathFragmentId": 2154
  }, {
    "id": 1704,
    "pathFragmentId": 2155
  }, {
    "id": 1705,
    "pathFragmentId": 2157
  }, {
    "id": 1706,
    "pathFragmentId": 2158
  }, {
    "id": 1707,
    "pathFragmentId": 2159
  }, {
    "id": 1708,
    "pathFragmentId": 2160
  }, {
    "id": 1709,
    "pathFragmentId": 2161
  }, {
    "id": 1710,
    "pathFragmentId": 2162
  }, {
    "id": 1711,
    "pathFragmentId": 2163
  }, {
    "id": 1712,
    "pathFragmentId": 2164
  }, {
    "id": 1713,
    "pathFragmentId": 2166
  }, {
    "id": 1714,
    "pathFragmentId": 2167
  }, {
    "id": 1715,
    "pathFragmentId": 2168
  }, {
    "id": 1716,
    "pathFragmentId": 2169
  }, {
    "id": 1717,
    "pathFragmentId": 2170
  }, {
    "id": 1718,
    "pathFragmentId": 2171
  }, {
    "id": 1719,
    "pathFragmentId": 2172
  }, {
    "id": 1720,
    "pathFragmentId": 2173
  }, {
    "id": 1721,
    "pathFragmentId": 2175
  }, {
    "id": 1722,
    "pathFragmentId": 2176
  }, {
    "id": 1723,
    "pathFragmentId": 2177
  }, {
    "id": 1724,
    "pathFragmentId": 2178
  }, {
    "id": 1725,
    "pathFragmentId": 2180
  }, {
    "id": 1726,
    "pathFragmentId": 2181
  }, {
    "id": 1727,
    "pathFragmentId": 2182
  }, {
    "id": 1728,
    "pathFragmentId": 2183
  }, {
    "id": 1729,
    "pathFragmentId": 2184
  }, {
    "id": 1730,
    "pathFragmentId": 2185
  }, {
    "id": 1731,
    "pathFragmentId": 2187
  }, {
    "id": 1732,
    "pathFragmentId": 2188
  }, {
    "id": 1733,
    "pathFragmentId": 2189
  }, {
    "id": 1734,
    "pathFragmentId": 2190
  }, {
    "id": 1735,
    "pathFragmentId": 2191
  }, {
    "id": 1736,
    "pathFragmentId": 2192
  }, {
    "id": 1737,
    "pathFragmentId": 2193
  }, {
    "id": 1738,
    "pathFragmentId": 2194
  }, {
    "id": 1739,
    "pathFragmentId": 2196
  }, {
    "id": 1740,
    "pathFragmentId": 2197
  }, {
    "id": 1741,
    "pathFragmentId": 2198
  }, {
    "id": 1742,
    "pathFragmentId": 2200
  }, {
    "id": 1743,
    "pathFragmentId": 2201
  }, {
    "id": 1744,
    "pathFragmentId": 2202
  }, {
    "id": 1745,
    "pathFragmentId": 2203
  }, {
    "id": 1746,
    "pathFragmentId": 2204
  }, {
    "id": 1747,
    "pathFragmentId": 2205
  }, {
    "id": 1748,
    "pathFragmentId": 2206
  }, {
    "id": 1749,
    "pathFragmentId": 2207
  }, {
    "id": 1750,
    "pathFragmentId": 2208
  }, {
    "id": 1751,
    "pathFragmentId": 2209
  }, {
    "id": 1752,
    "pathFragmentId": 2210
  }, {
    "id": 1753,
    "pathFragmentId": 2211
  }, {
    "id": 1754,
    "pathFragmentId": 2212
  }, {
    "id": 1755,
    "pathFragmentId": 2214
  }, {
    "id": 1756,
    "pathFragmentId": 2215
  }, {
    "id": 1757,
    "pathFragmentId": 2216
  }, {
    "id": 1758,
    "pathFragmentId": 2217
  }, {
    "id": 1759,
    "pathFragmentId": 2219
  }, {
    "id": 1760,
    "pathFragmentId": 2220
  }, {
    "id": 1761,
    "pathFragmentId": 2222
  }, {
    "id": 1762,
    "pathFragmentId": 2223
  }, {
    "id": 1763,
    "pathFragmentId": 2224
  }, {
    "id": 1764,
    "pathFragmentId": 2225
  }, {
    "id": 1765,
    "pathFragmentId": 2226
  }, {
    "id": 1766,
    "pathFragmentId": 2227
  }, {
    "id": 1767,
    "pathFragmentId": 2229
  }, {
    "id": 1768,
    "pathFragmentId": 2230
  }, {
    "id": 1769,
    "pathFragmentId": 2231
  }, {
    "id": 1770,
    "pathFragmentId": 2232
  }, {
    "id": 1771,
    "pathFragmentId": 2234
  }, {
    "id": 1772,
    "pathFragmentId": 2235
  }, {
    "id": 1773,
    "pathFragmentId": 2237
  }, {
    "id": 1774,
    "pathFragmentId": 2240
  }, {
    "id": 1775,
    "pathFragmentId": 2241
  }, {
    "id": 1776,
    "pathFragmentId": 2242
  }, {
    "id": 1777,
    "pathFragmentId": 2243
  }, {
    "id": 1778,
    "pathFragmentId": 2244
  }, {
    "id": 1779,
    "pathFragmentId": 2245
  }, {
    "id": 1780,
    "pathFragmentId": 2246
  }, {
    "id": 1781,
    "pathFragmentId": 2247
  }, {
    "id": 1782,
    "pathFragmentId": 2249
  }, {
    "id": 1783,
    "pathFragmentId": 2250
  }, {
    "id": 1784,
    "pathFragmentId": 2251
  }, {
    "id": 1785,
    "pathFragmentId": 2252
  }, {
    "id": 1786,
    "pathFragmentId": 2253
  }, {
    "id": 1787,
    "pathFragmentId": 2254
  }, {
    "id": 1788,
    "pathFragmentId": 2256
  }, {
    "id": 1789,
    "pathFragmentId": 2257
  }, {
    "id": 1790,
    "pathFragmentId": 2258
  }, {
    "id": 1791,
    "pathFragmentId": 2259
  }, {
    "id": 1792,
    "pathFragmentId": 2261
  }, {
    "id": 1793,
    "pathFragmentId": 2262
  }, {
    "id": 1794,
    "pathFragmentId": 2263
  }, {
    "id": 1795,
    "pathFragmentId": 2264
  }, {
    "id": 1796,
    "pathFragmentId": 2265
  }, {
    "id": 1797,
    "pathFragmentId": 2266
  }, {
    "id": 1798,
    "pathFragmentId": 2268
  }, {
    "id": 1799,
    "pathFragmentId": 2269
  }, {
    "id": 1800,
    "pathFragmentId": 2270
  }, {
    "id": 1801,
    "pathFragmentId": 2271
  }, {
    "id": 1802,
    "pathFragmentId": 2272
  }, {
    "id": 1803,
    "pathFragmentId": 2273
  }, {
    "id": 1804,
    "pathFragmentId": 2274
  }, {
    "id": 1805,
    "pathFragmentId": 2275
  }, {
    "id": 1806,
    "pathFragmentId": 2277
  }, {
    "id": 1807,
    "pathFragmentId": 2278
  }, {
    "id": 1808,
    "pathFragmentId": 2279
  }, {
    "id": 1809,
    "pathFragmentId": 2280
  }, {
    "id": 1810,
    "pathFragmentId": 2281
  }, {
    "id": 1811,
    "pathFragmentId": 2282
  }, {
    "id": 1812,
    "pathFragmentId": 2283
  }, {
    "id": 1813,
    "pathFragmentId": 2284
  }, {
    "id": 1814,
    "pathFragmentId": 2286
  }, {
    "id": 1815,
    "pathFragmentId": 2287
  }, {
    "id": 1816,
    "pathFragmentId": 2288
  }, {
    "id": 1817,
    "pathFragmentId": 2289
  }, {
    "id": 1818,
    "pathFragmentId": 2290
  }, {
    "id": 1819,
    "pathFragmentId": 2291
  }, {
    "id": 1820,
    "pathFragmentId": 2292
  }, {
    "id": 1821,
    "pathFragmentId": 2293
  }, {
    "id": 1822,
    "pathFragmentId": 2295
  }, {
    "id": 1823,
    "pathFragmentId": 2296
  }, {
    "id": 1824,
    "pathFragmentId": 2297
  }, {
    "id": 1825,
    "pathFragmentId": 2298
  }, {
    "id": 1826,
    "pathFragmentId": 2299
  }, {
    "id": 1827,
    "pathFragmentId": 2300
  }, {
    "id": 1828,
    "pathFragmentId": 2301
  }, {
    "id": 1829,
    "pathFragmentId": 2302
  }, {
    "id": 1830,
    "pathFragmentId": 2304
  }, {
    "id": 1831,
    "pathFragmentId": 2305
  }, {
    "id": 1832,
    "pathFragmentId": 2306
  }, {
    "id": 1833,
    "pathFragmentId": 2307
  }, {
    "id": 1834,
    "pathFragmentId": 2308
  }, {
    "id": 1835,
    "pathFragmentId": 2309
  }, {
    "id": 1836,
    "pathFragmentId": 2310
  }, {
    "id": 1837,
    "pathFragmentId": 2311
  }, {
    "id": 1838,
    "pathFragmentId": 2313
  }, {
    "id": 1839,
    "pathFragmentId": 2314
  }, {
    "id": 1840,
    "pathFragmentId": 2315
  }, {
    "id": 1841,
    "pathFragmentId": 2316
  }, {
    "id": 1842,
    "pathFragmentId": 2317
  }, {
    "id": 1843,
    "pathFragmentId": 2318
  }, {
    "id": 1844,
    "pathFragmentId": 2319
  }, {
    "id": 1845,
    "pathFragmentId": 2320
  }, {
    "id": 1846,
    "pathFragmentId": 2322
  }, {
    "id": 1847,
    "pathFragmentId": 2323
  }, {
    "id": 1848,
    "pathFragmentId": 2324
  }, {
    "id": 1849,
    "pathFragmentId": 2325
  }, {
    "id": 1850,
    "pathFragmentId": 2326
  }, {
    "id": 1851,
    "pathFragmentId": 2327
  }, {
    "id": 1852,
    "pathFragmentId": 2328
  }, {
    "id": 1853,
    "pathFragmentId": 2329
  }, {
    "id": 1854,
    "pathFragmentId": 2331
  }, {
    "id": 1855,
    "pathFragmentId": 2332
  }, {
    "id": 1856,
    "pathFragmentId": 2333
  }, {
    "id": 1857,
    "pathFragmentId": 2334
  }, {
    "id": 1858,
    "pathFragmentId": 2335
  }, {
    "id": 1859,
    "pathFragmentId": 2336
  }, {
    "id": 1860,
    "pathFragmentId": 2337
  }, {
    "id": 1861,
    "pathFragmentId": 2338
  }, {
    "id": 1862,
    "pathFragmentId": 2340
  }, {
    "id": 1863,
    "pathFragmentId": 2341
  }, {
    "id": 1864,
    "pathFragmentId": 2342
  }, {
    "id": 1865,
    "pathFragmentId": 2343
  }, {
    "id": 1866,
    "pathFragmentId": 2344
  }, {
    "id": 1867,
    "pathFragmentId": 2345
  }, {
    "id": 1868,
    "pathFragmentId": 2346
  }, {
    "id": 1869,
    "pathFragmentId": 2347
  }, {
    "id": 1870,
    "pathFragmentId": 2349
  }, {
    "id": 1871,
    "pathFragmentId": 2350
  }, {
    "id": 1872,
    "pathFragmentId": 2351
  }, {
    "id": 1873,
    "pathFragmentId": 2352
  }, {
    "id": 1874,
    "pathFragmentId": 2353
  }, {
    "id": 1875,
    "pathFragmentId": 2354
  }, {
    "id": 1876,
    "pathFragmentId": 2355
  }, {
    "id": 1877,
    "pathFragmentId": 2356
  }, {
    "id": 1878,
    "pathFragmentId": 2358
  }, {
    "id": 1879,
    "pathFragmentId": 2359
  }, {
    "id": 1880,
    "pathFragmentId": 2360
  }, {
    "id": 1881,
    "pathFragmentId": 2361
  }, {
    "id": 1882,
    "pathFragmentId": 2362
  }, {
    "id": 1883,
    "pathFragmentId": 2363
  }, {
    "id": 1884,
    "pathFragmentId": 2364
  }, {
    "id": 1885,
    "pathFragmentId": 2365
  }, {
    "id": 1886,
    "pathFragmentId": 2367
  }, {
    "id": 1887,
    "pathFragmentId": 2368
  }, {
    "id": 1888,
    "pathFragmentId": 2369
  }, {
    "id": 1889,
    "pathFragmentId": 2373
  }, {
    "id": 1890,
    "pathFragmentId": 2376
  }, {
    "id": 1891,
    "pathFragmentId": 2377
  }, {
    "id": 1892,
    "pathFragmentId": 2379
  }, {
    "id": 1893,
    "pathFragmentId": 2380
  }, {
    "id": 1894,
    "pathFragmentId": 2381
  }, {
    "id": 1895,
    "pathFragmentId": 2383
  }, {
    "id": 1896,
    "pathFragmentId": 2384
  }, {
    "id": 1897,
    "pathFragmentId": 2385
  }, {
    "id": 1898,
    "pathFragmentId": 2386
  }, {
    "id": 1899,
    "pathFragmentId": 2388
  }, {
    "id": 1900,
    "pathFragmentId": 2389
  }, {
    "id": 1901,
    "pathFragmentId": 2390
  }, {
    "id": 1902,
    "pathFragmentId": 2392
  }, {
    "id": 1903,
    "pathFragmentId": 2393
  }, {
    "id": 1904,
    "pathFragmentId": 2394
  }, {
    "id": 1905,
    "pathFragmentId": 2396
  }, {
    "id": 1906,
    "pathFragmentId": 2397
  }, {
    "id": 1907,
    "pathFragmentId": 2398
  }, {
    "id": 1908,
    "pathFragmentId": 2400
  }],
  "actions": [{
    "targetId": 1,
    "actionKey": "6d7c5783176c3a4942a042ba7a212806a36712c2a9a8e3a7d4463073374f1634",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [1],
    "outputIds": [3],
    "primaryOutputId": 3,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "28e0309fc0897b7666dab61cc6c1ed157d12b7e8447192a72e86d5e733cfee50",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [4],
    "primaryOutputId": 4,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "dea84241bc58e21a644e553156ed5520dbfd4569a469070138640351b70b8f82",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [2],
    "outputIds": [5],
    "primaryOutputId": 5,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [3],
    "outputIds": [7],
    "primaryOutputId": 7,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [4],
    "outputIds": [10, 11],
    "primaryOutputId": 10,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 2,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [6],
    "primaryOutputId": 6,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [5],
    "outputIds": [13],
    "primaryOutputId": 13,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "beaebb48f6fee80e8de5e63e8920dd7dc287d46e5b2799b82f4c8543e16c89ea",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [14],
    "primaryOutputId": 14,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "dfa215ea877ee31bbb54389c230a2d7548e97b1e28ece7f2dddea1f1154546b2",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [6],
    "outputIds": [15],
    "primaryOutputId": 15,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [7],
    "outputIds": [16],
    "primaryOutputId": 16,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [17],
    "primaryOutputId": 17,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "4f4abfd23103b5ad23b87303600fd5bc7109421517e4f8dc75063db3ba49cf7d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [18],
    "primaryOutputId": 18,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "09663e4d8fe069c70d79e1fde7b9add0b1d7116db2210e80a332db8ff3082a41",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [10],
    "outputIds": [19],
    "primaryOutputId": 19,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [11],
    "outputIds": [20],
    "primaryOutputId": 20,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 4,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [12],
    "outputIds": [21, 22],
    "primaryOutputId": 21,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "26d4be097407a826b97159ca777e4bae3891d9be9eaa42a08fe94ec0695aba80",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [13],
    "outputIds": [26],
    "primaryOutputId": 26,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 5,
    "actionKey": "f771eb1ed27db179839dfed11dd8f3fbe5cf0b39a81955d208d2dae77a5163b5",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [15],
    "outputIds": [35],
    "primaryOutputId": 35,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 6,
    "actionKey": "a3787e50bad54634a8283f66f5522a88df51602fed5969d7f7a68f34e2083dc7",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [19],
    "outputIds": [38],
    "primaryOutputId": 38,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "cf1ffede9bf21b20173e7700fd2c326d72f9e57b8c1844f5c54f60083f5f46d7",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [39],
    "primaryOutputId": 39,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 7,
    "actionKey": "90eaffb6bf6188fb5853d68f6a02519c56a8aa871184883726469c01c1eb1e4f",
    "mnemonic": "PackageTar",
    "configurationId": 1,
    "inputDepSetIds": [21],
    "outputIds": [53],
    "primaryOutputId": 53,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [54],
    "primaryOutputId": 54,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "fec9756d55c747c1da2ec257a94d0a615922058a3b9e4274d2a0a36f5272b037",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [55],
    "primaryOutputId": 55,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "b559710e3aa36b343a26cd3ccb68b48081332a34d89a0a746f65edce96411229",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [25],
    "outputIds": [56],
    "primaryOutputId": 56,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [26],
    "outputIds": [57],
    "primaryOutputId": 57,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 8,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [27],
    "outputIds": [58, 59],
    "primaryOutputId": 58,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 9,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [60],
    "primaryOutputId": 60,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "cf6fcf062ba1f6552d5e60b785cbe78bd47dc33474c26461b9016ce5aafc6fd2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [61],
    "primaryOutputId": 61,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "57194d820168370b0a73892e3408aa956ca23b95bbe301ce90a17f786ad7ae22",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [28],
    "outputIds": [62],
    "primaryOutputId": 62,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [29],
    "outputIds": [64],
    "primaryOutputId": 64,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [30],
    "outputIds": [65, 66],
    "primaryOutputId": 65,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 10,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [63],
    "primaryOutputId": 63,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [31],
    "outputIds": [68],
    "primaryOutputId": 68,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "05fe24d087c78af3e18b8f0c8747f5b6c20b7fe0b000006e17e14ae93b40a11e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [69],
    "primaryOutputId": 69,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "2f9a61f478f9e22f4ba3c86f743f7d3e50681b4ffe88c6d60b69a1a6158cd83e",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [32],
    "outputIds": [70],
    "primaryOutputId": 70,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [33],
    "outputIds": [71],
    "primaryOutputId": 71,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [72],
    "primaryOutputId": 72,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "50029629dd7d6239024f5b760b08e0b37a1ec93608c6436c720f711b3e7d7645",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [73],
    "primaryOutputId": 73,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "f952b942c48c01f1d1ab7b9720301a7624042481f3a8a8d69cc174d278f0146a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [36],
    "outputIds": [74],
    "primaryOutputId": 74,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [37],
    "outputIds": [75],
    "primaryOutputId": 75,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 12,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [38],
    "outputIds": [76, 77],
    "primaryOutputId": 76,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "3cf96fad76fc8e8947ee511ba967f2e447c1ffa5f6621bd34fda1fbe4b888aa0",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [78],
    "primaryOutputId": 78,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "ee797daa5bc8bbf3f6ce93dc0e10a7d50eca8758b42ac51591ccf30a95c68135",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [79],
    "primaryOutputId": 79,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "30efd2c99d6afcf0993a63ca197334a8292f603c1683596196fcbfeb9339dd30",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [39],
    "outputIds": [80],
    "primaryOutputId": 80,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [40],
    "outputIds": [81],
    "primaryOutputId": 81,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 13,
    "actionKey": "8ffa9a197a4ceb253e421bb21072728de0c16182c6b577f6c27313d8305ff5f3",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [42],
    "outputIds": [82, 83],
    "primaryOutputId": 82,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "a4d0d52c050c6ef83b69217d711644f09b5f5514c94c4a0b4342b10875fba5e8",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [84],
    "primaryOutputId": 84,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "2842ceb7161745ed2576a5265462ebd96e341d079c6736c36a2c1cec7c7d9cb4",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [43],
    "outputIds": [85],
    "primaryOutputId": 85,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [44],
    "outputIds": [87],
    "primaryOutputId": 87,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [45],
    "outputIds": [88, 89],
    "primaryOutputId": 88,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 14,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [86],
    "primaryOutputId": 86,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "d216b04ec201a5f2ab3d4a7224ffa2975231c514ce28a58d21eb82a7d70480ca",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [46],
    "outputIds": [204, 205, 206],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 204,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "05698b84c0ae3cd928dfd98b8be34af8bd2e8f667806df51a18065909a641285",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [208],
    "primaryOutputId": 208,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [209],
    "primaryOutputId": 209,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 15,
    "actionKey": "18d6f04887aeea3117e0ec8146b6079f24c0edc26b396034ba2583586b579994",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [54],
    "outputIds": [210],
    "primaryOutputId": 210,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "82640e3d41a9ca51d10f096a907cc04d20a6527036ef41693338e51f01822fbe",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [211],
    "primaryOutputId": 211,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "1c21bf5046ddedcb29f69245040c4c80804ccb12c8ccd6da26d314e7d0caaff4",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [55],
    "outputIds": [212],
    "primaryOutputId": 212,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [56],
    "outputIds": [326],
    "primaryOutputId": 326,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "e84d5e46dde43cf18cbeae1537197404b75810ac4f417f6acbabcef16d310989",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [64],
    "outputIds": [328],
    "primaryOutputId": 328,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [329],
    "primaryOutputId": 329,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "2cc6700f65ea4467e524b52ea9b716b3fe7e1b67ec1dcd77f5383420ca3a0f7d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [330],
    "primaryOutputId": 330,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "7a5c63cbad183837cb4d6c9702e42e30c98405af4399cd4df2a14405483929ad",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [66],
    "outputIds": [331],
    "primaryOutputId": 331,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [67],
    "outputIds": [333],
    "primaryOutputId": 333,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [68],
    "outputIds": [334, 335],
    "primaryOutputId": 334,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 16,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [332],
    "primaryOutputId": 332,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "ee8d5b9ff46197036f99c01e0b8195bd481a5cf337230f1a48d260ae9f231846",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [69],
    "outputIds": [339],
    "primaryOutputId": 339,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 17,
    "actionKey": "d313163ec4bff16e0650716aa2508313a4f59cf521df33e3735e3e7fc459bb74",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [71],
    "outputIds": [340],
    "primaryOutputId": 340,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "94bfd08f8ddbfc6443ec6e9da61956535e6de8e7229292c23d931bc0ab197d4f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [341],
    "primaryOutputId": 341,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "c2a05d2304adb7ab85563af6562cf365af4555caa9c999489533290233e82642",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [73],
    "outputIds": [342],
    "primaryOutputId": 342,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [74],
    "outputIds": [344],
    "primaryOutputId": 344,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [75],
    "outputIds": [345, 346],
    "primaryOutputId": 345,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 18,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [343],
    "primaryOutputId": 343,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [347],
    "primaryOutputId": 347,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "487bf78412e5d10d270b81e67bdcb21d3d46467d50d4649391a45fc1a638f0fe",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [348],
    "primaryOutputId": 348,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "53b041c313867d19e166eae578dbcc9e40b54e69d585d8f38aee2dd7df5febb0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [76],
    "outputIds": [349],
    "primaryOutputId": 349,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [77],
    "outputIds": [350],
    "primaryOutputId": 350,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 19,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [78],
    "outputIds": [351, 352],
    "primaryOutputId": 351,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [353],
    "primaryOutputId": 353,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "9a0666a4f998b1c895961ab99dc89c136d61f0f7dc09bbb9e37a97b3e9f17de7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [354],
    "primaryOutputId": 354,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "d695ccc04f51c6bb278f00902b6aec040672e2b80c42dc59b978bfe28c5edf55",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [79],
    "outputIds": [355],
    "primaryOutputId": 355,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [80],
    "outputIds": [356],
    "primaryOutputId": 356,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 20,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [81],
    "outputIds": [357, 358],
    "primaryOutputId": 357,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "9c2f17e32c9dd2aca9aaa504ed1e65427429144a0fb92a9f92151b932aaae116",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [82],
    "outputIds": [362],
    "primaryOutputId": 362,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 21,
    "actionKey": "b56ccf70a8299e4e173ffd8e1623da925ce70ee4a24f0264e65ec0c6b39f919b",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [84],
    "outputIds": [363],
    "primaryOutputId": 363,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "023a8d346821f07d55b352927856bb07d558398d3d3d6c04fc942811822ca2ef",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [86],
    "outputIds": [364, 365, 366],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 364,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "24355ce7de3a8b09441b0e0771ecf61d71b09c36b96dff827a2d51f9ebe26fb9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [367],
    "primaryOutputId": 367,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [368],
    "primaryOutputId": 368,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 22,
    "actionKey": "db5e45af17408115abe1b2ce3ee2b49f09d86992c56a025dddccacb1fadb6aba",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [88],
    "outputIds": [369],
    "primaryOutputId": 369,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "4e78e3b3465fe989af715e15366bb6f6fdf333ce8752d6c0a2ad83113ba5e984",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [370],
    "primaryOutputId": 370,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "7063b2ca8b2647dd319c6fd582bc93c56d1bc72209610810d251a90a27a98fa0",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [89],
    "outputIds": [371],
    "primaryOutputId": 371,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [90],
    "outputIds": [373],
    "primaryOutputId": 373,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "e70bfc2d7f47f8176f61c4853edd41a15e2cc620aa65da9181e8d0cc94b421ad",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [93],
    "outputIds": [374],
    "primaryOutputId": 374,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [375],
    "primaryOutputId": 375,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "9fdb4cfbd88725c4489713716c21910bfeb0d71434bd0892add13edd046bd24e",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [376],
    "primaryOutputId": 376,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "42d7383f2eb4d3e5c1a8b92b230f5858fe951e8aecefd7d626cb3e937ab7d7de",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [377],
    "primaryOutputId": 377,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "eb3179e299f964365545c2bdf5ed337556d4b69aa0f69b8781dbdbdf65b4c77f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [95],
    "outputIds": [378],
    "primaryOutputId": 378,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [96],
    "outputIds": [381],
    "primaryOutputId": 381,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 23,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [99],
    "outputIds": [382, 383],
    "primaryOutputId": 382,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "7dbb664feffb829361b5e36eca35aa9e8f9066ed4f122c84139083e39cf32183",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [100],
    "outputIds": [387],
    "primaryOutputId": 387,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 24,
    "actionKey": "ab3a00b6a9e7d6f004eff847f5e3b7287e76d75c837662c602dd3e75086b772c",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [102],
    "outputIds": [388],
    "primaryOutputId": 388,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [389],
    "primaryOutputId": 389,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "26fa15bb3e4115535948fac07486eabdae6ad581c5c4953437baf2adaf6e00d9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [390],
    "primaryOutputId": 390,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "9cc019dbb6f5e852d508968bac2a9890624ffa1962310c6572855d112a774dd4",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [104],
    "outputIds": [391],
    "primaryOutputId": 391,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [105],
    "outputIds": [392],
    "primaryOutputId": 392,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 25,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [106],
    "outputIds": [393, 394],
    "primaryOutputId": 393,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "b6ff7baa62edf9e34516f01e55c2281f34839d2ec52cb9579b9372301a1b5e53",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [107],
    "outputIds": [398],
    "primaryOutputId": 398,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 26,
    "actionKey": "ae81ee20861641a624a7861dc7a6b47156ec7f7cdefcb31f047c8dcbc9272674",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [109],
    "outputIds": [399],
    "primaryOutputId": 399,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [400],
    "primaryOutputId": 400,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "43d813446d8b43b3e61e4479c0f576c6fddd180e3d64c7df3188103984600a6e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [401],
    "primaryOutputId": 401,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "84db58e5cfd07ade75c9709f364de91bdf870463249972bb23adf4dd08f1f809",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [111],
    "outputIds": [402],
    "primaryOutputId": 402,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [112],
    "outputIds": [403],
    "primaryOutputId": 403,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 27,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [113],
    "outputIds": [404, 405],
    "primaryOutputId": 404,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "216ac3406ec7e9a571f6f6e33cb6d293a32be3e997bbd0e2b46579efa630bfd3",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [406],
    "primaryOutputId": 406,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "0a2b1264de7c61f6bab4afaf063cd91658cdf2a7cc4a3c0a68986ffd2b3f43b0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [407],
    "primaryOutputId": 407,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "440db4181a0c65eb594b93a833590ab70df296d0dddc6d69f0bf42bbef1edaf9",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [114],
    "outputIds": [408],
    "primaryOutputId": 408,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [115],
    "outputIds": [411],
    "primaryOutputId": 411,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 28,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [118],
    "outputIds": [412, 413],
    "primaryOutputId": 412,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [119],
    "outputIds": [415],
    "primaryOutputId": 415,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "1510792ade4e4f6b439ebeb1f8ffd79bd155e5a773593abf2f73791678602523",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [416],
    "primaryOutputId": 416,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "508bdef5656e0df13011a99f7012fbe4bd70daa74496b3f56fa6af73058ee016",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [120],
    "outputIds": [417],
    "primaryOutputId": 417,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [121],
    "outputIds": [423],
    "primaryOutputId": 423,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 29,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [125],
    "outputIds": [424, 425],
    "primaryOutputId": 424,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "616530091362ec905ff8fc2234962b6a9bfa7aa59e3622399e8e5993f5bfbed1",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [426],
    "primaryOutputId": 426,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "42de6613231f7ef5b362aa7d79877ee59e7a78dc21a441b4ee3695ef129709c6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [126],
    "outputIds": [427],
    "primaryOutputId": 427,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [127],
    "outputIds": [429],
    "primaryOutputId": 429,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [128],
    "outputIds": [430, 431],
    "primaryOutputId": 430,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 30,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [428],
    "primaryOutputId": 428,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [432],
    "primaryOutputId": 432,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "cea3c69f8de26d5ab35084074efb88b5759e1e8753b04604a70bff2f2af3af8f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [433],
    "primaryOutputId": 433,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "9a53cb7d5ec1485481fb9aabf28d61a6b263d33fb74f745a39c2bfe94ec3854a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [129],
    "outputIds": [434],
    "primaryOutputId": 434,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [130],
    "outputIds": [435],
    "primaryOutputId": 435,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 31,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [131],
    "outputIds": [436, 437],
    "primaryOutputId": 436,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 32,
    "actionKey": "85ad9e48cb4022311fd81a077a64b07f3c77fbba5b831f37d29321c36f3057c3",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [438],
    "primaryOutputId": 438,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "6e29b75191bfb2d760c30395888cebacb30d726ac7db9ff8ac14dd7af5b9a938",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [439],
    "primaryOutputId": 439,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "162651f05329fa8a1bd618f04a30f8d44f74190bda7ad411b44692b0847df306",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [132],
    "outputIds": [440],
    "primaryOutputId": 440,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [133],
    "outputIds": [442],
    "primaryOutputId": 442,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [134],
    "outputIds": [443, 444],
    "primaryOutputId": 443,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 33,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [441],
    "primaryOutputId": 441,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "c2e7759e4df71448f491ccfeb5fcf5373b6cdad0f74a3d0953c130130c20754a",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [445],
    "primaryOutputId": 445,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "ac67e40b4bc70783c01832efd2218f432055add33121a791d0c6c8c77ebae5bf",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [446],
    "primaryOutputId": 446,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "a18afc6798e0ac246cbdb8444c4fcaab8a167f8dc4904947341eb26d04265408",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [135],
    "outputIds": [447],
    "primaryOutputId": 447,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [136],
    "outputIds": [450],
    "primaryOutputId": 450,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 34,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [139],
    "outputIds": [451, 452],
    "primaryOutputId": 451,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 35,
    "actionKey": "9ee9f54e7f4c3f3619cf6ce05be2d23b3f531ced3c713c2241ac653e7bbb69d3",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [454],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 454,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "34099f1f16afabad769671ce774ffe678e797131f1f0add88aeb8632f0e425e9",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [455],
    "primaryOutputId": 455,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "c37da3d3268f478e92ea020e7741c526b79806ca911f998120c8f5c86f569df9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [456],
    "primaryOutputId": 456,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "746759493cac8a48457e8359605206dd7e719441b68cca00d5258f5680578c9c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [141],
    "outputIds": [457],
    "primaryOutputId": 457,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [142],
    "outputIds": [459],
    "primaryOutputId": 459,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 36,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [145],
    "outputIds": [460, 461],
    "primaryOutputId": 460,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [462],
    "primaryOutputId": 462,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "499df086bd7d24faa8c2f52815eaf26edc5fc23909052b17a72a77e69b052f4e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [463],
    "primaryOutputId": 463,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "e72f6f98e61cf5d2db863e3ff808b7361e339df3dfa3c29553568eaa1a11c03f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [146],
    "outputIds": [464],
    "primaryOutputId": 464,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [147],
    "outputIds": [465],
    "primaryOutputId": 465,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 37,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [148],
    "outputIds": [466, 467],
    "primaryOutputId": 466,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 38,
    "actionKey": "7f67df1958095fdec9cf446f34c7b5e799fa3a37579646e4f1c4614fcebaf47a",
    "mnemonic": "CopyDirectory",
    "configurationId": 1,
    "inputDepSetIds": [149],
    "outputIds": [469],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 469,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "c5e67935c514886ebb40649477c0f87453e20ce539037664036c2d9478b7f668",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [470],
    "primaryOutputId": 470,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "1e96dd91c0424bb69e1a4d7ced4fe0f4ba444dcb3923314643c05d2e4edfb4a1",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [471],
    "primaryOutputId": 471,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "fea7ae1f04ef476a2b9cfc4257f6f155381819fd2dc439200b5a7067d11aed76",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [150],
    "outputIds": [472],
    "primaryOutputId": 472,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [151],
    "outputIds": [475],
    "primaryOutputId": 475,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 39,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [154],
    "outputIds": [476, 477],
    "primaryOutputId": 476,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 40,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [155],
    "outputIds": [479],
    "primaryOutputId": 479,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 40,
    "actionKey": "ece4220e54c1b961c228133948d4e0e4a49f07608a49f8cb25300395ad9de376",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [480],
    "primaryOutputId": 480,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 40,
    "actionKey": "4343706edf8b23b449fe3198eb12b6957d6cf68b04636abf771b1c89e8ff5867",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [156],
    "outputIds": [481],
    "primaryOutputId": 481,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 40,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [157],
    "outputIds": [498],
    "primaryOutputId": 498,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 41,
    "actionKey": "98cb6dbe57bb2b95ab93708850d6ddebb13fc756f8be96445ed21f38e03724e2",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [499],
    "primaryOutputId": 499,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "bdaad7d5a9637fec912c88fef045d7bdbbf145d1fe82b5b87ffbc3cd1d288b85",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [500],
    "primaryOutputId": 500,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "e5fd3de0d8d86cf1cde266cb37cd674e480fd5455e38130f6df263783fd84e10",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [160],
    "outputIds": [501],
    "primaryOutputId": 501,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [161],
    "outputIds": [503],
    "primaryOutputId": 503,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [162],
    "outputIds": [504, 505],
    "primaryOutputId": 504,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 42,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [502],
    "primaryOutputId": 502,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "0ad2458335cca3f6e454067360d5454686ebd167ed56ffd7a8df52713f32c4b9",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [506],
    "primaryOutputId": 506,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "13d00c1a0fa9083685a448e5ae94cfc6a2e19c43b75262a5a9cedca8d1a5806a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [507],
    "primaryOutputId": 507,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "79553739f79f7ebf0118c1653721b84d1470b6e7a3e1bc5c72a4fad74b99af8a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [163],
    "outputIds": [508],
    "primaryOutputId": 508,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [164],
    "outputIds": [510],
    "primaryOutputId": 510,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 43,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [167],
    "outputIds": [511, 512],
    "primaryOutputId": 511,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "0112c502271ab8ddceb8ed658a018f8a65e864e13a27380c86451c33c6fa75e6",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [513],
    "primaryOutputId": 513,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "4f3b7985ed7300c1e585d367431ec02abf4746e2b39e6ddf6574bd05ea490a7b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [514],
    "primaryOutputId": 514,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "97abcd6aa50f6048dff95261ee1cfcfa733f5a8fa0815ef09ed5e47fb36f3546",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [168],
    "outputIds": [515],
    "primaryOutputId": 515,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [169],
    "outputIds": [517],
    "primaryOutputId": 517,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 44,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [172],
    "outputIds": [518, 519],
    "primaryOutputId": 518,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [173],
    "outputIds": [521],
    "primaryOutputId": 521,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "763b874980b602129e2c46d24d9a57690d13329fe69e9894ae212cb54f9125cc",
    "mnemonic": "CppCompile",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [174],
    "outputIds": [524, 525],
    "discoversInputs": true,
    "primaryOutputId": 524,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "b4cf3e55a8797eb18ab67b76c028471d6cdaf7c51774dc63cf96cf4521a2fe25",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [526],
    "primaryOutputId": 526,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "467c72206464956fd24c6ec5bc4a99bdd25241bbb7549f7753e4d252566e29fa",
    "mnemonic": "CppLink",
    "configurationId": 2,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [176],
    "outputIds": [529],
    "primaryOutputId": 529,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "bc0ce7512caa1314d926cc999387260e8affe72969a83a861a0d58713e8c2d38",
    "mnemonic": "CcStrip",
    "configurationId": 2,
    "inputDepSetIds": [178],
    "outputIds": [530],
    "primaryOutputId": 530,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [531],
    "primaryOutputId": 531,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "ea217f677f8c905576b128f76eee665631739f59307094b30f866486a9e6ed76",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [532],
    "primaryOutputId": 532,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "106c526fda9e8569a2ba6fc0705ac97f4d15313c3d28af0a1d0d4534d13ad91d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [179],
    "outputIds": [533],
    "primaryOutputId": 533,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [180],
    "outputIds": [534],
    "primaryOutputId": 534,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 45,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [181],
    "outputIds": [535, 536],
    "primaryOutputId": 535,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "25c0f6846788a3f49294b22135916f66a3b37abd106b8eac29d368ef933593f0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [537],
    "primaryOutputId": 537,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "75d588d63096474b592434948523e2f7847d0d8b2fecb7aab3a4d52c8901726f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [182],
    "outputIds": [538],
    "primaryOutputId": 538,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [183],
    "outputIds": [540],
    "primaryOutputId": 540,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [184],
    "outputIds": [541, 542],
    "primaryOutputId": 541,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 46,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [539],
    "primaryOutputId": 539,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "59e692dcb415f4e8102ecccea0312cfc97b7145d4e7605c256319067025b8116",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [543],
    "primaryOutputId": 543,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "17690dea114adc945bfbf12390c9f80738afdcc49249c426680ed88dc33507c7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [544],
    "primaryOutputId": 544,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "f9b6fdd91bfad9ffa54d833a9279a4a8d0e67164a0bde49e359caeedbb6d768f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [185],
    "outputIds": [545],
    "primaryOutputId": 545,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [186],
    "outputIds": [547],
    "primaryOutputId": 547,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 47,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [189],
    "outputIds": [548, 549],
    "primaryOutputId": 548,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 48,
    "actionKey": "49d7aac2e02ef82423649ab09085ff8490d584195d28230ecf6887919a7d3ca7",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [190],
    "outputIds": [453],
    "primaryOutputId": 453,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "b23dac17e3f6bf69e32f465c1d254360b51d5e0fd677e9da9c4e0bd2b611eff9",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [550],
    "primaryOutputId": 550,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "28136f669364b6b46375e2fd559c751a6269438feb07bfd2e144426e5546bb4c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [551],
    "primaryOutputId": 551,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "460b554842861b333fb937adee12c668751be9135638d11e30f719dbc2d1861f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [191],
    "outputIds": [552],
    "primaryOutputId": 552,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [192],
    "outputIds": [554],
    "primaryOutputId": 554,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 49,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [195],
    "outputIds": [555, 556],
    "primaryOutputId": 555,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 50,
    "actionKey": "62493045a03bdc04fdfece1d8179ee2d14ad15849f1ec2edb13c0b90828df242",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [557],
    "primaryOutputId": 557,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 50,
    "actionKey": "7cd9b7bfff0c935464841a590cdce51bfa832b733db81d6b91ad387349d663b9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [558],
    "primaryOutputId": 558,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 50,
    "actionKey": "b10d4683c17ecd7ab06f59f946d0292245b14b235bd00a35d1ef30cab92afe97",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [196],
    "outputIds": [559],
    "primaryOutputId": 559,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 50,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [197],
    "outputIds": [561],
    "primaryOutputId": 561,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 50,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [200],
    "outputIds": [562, 563],
    "primaryOutputId": 562,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "f8c0fbe57ffd24ff1b4b06cf98eb204f61a4451dd6eb955dc0ac0dd2ace3740e",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [201],
    "outputIds": [567],
    "primaryOutputId": 567,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 51,
    "actionKey": "57c369e55c20bd7fc225977d74304d74693b9f9f4f8c4d025051aacedbc7507e",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [203],
    "outputIds": [488],
    "primaryOutputId": 488,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "f7751d259892b9377b86a3e0ac8947786fe757bab4ec7fd4edb2072e76623735",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [568],
    "primaryOutputId": 568,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "354837b36e6ac4d8d25db809dba192a99afdef80e5dd7651e11eaa720597c225",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [569],
    "primaryOutputId": 569,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "fb77293991fbab413e8b304cc3e818e1c0550479208171bad9915630631f5976",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [205],
    "outputIds": [570],
    "primaryOutputId": 570,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [206],
    "outputIds": [572],
    "primaryOutputId": 572,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 52,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [209],
    "outputIds": [573, 574],
    "primaryOutputId": 573,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 53,
    "actionKey": "33f624b45be8457ac115dce1b36e3030c17e2c70b0d5234014fe2a9b8ea36655",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [210],
    "outputIds": [578],
    "primaryOutputId": 578,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 53,
    "actionKey": "b6aae8828642037659d7b0709e9bd9b9c5aeffc58a75aa9c20db8e9f664e2c0d",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [212],
    "outputIds": [494],
    "primaryOutputId": 494,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "457c346e359866b6a1d085321cf6412dcaf704e37e520e614e9495d9c039aa82",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [579],
    "primaryOutputId": 579,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "e99c40322207bfa3386334d7b70ce298239070652e60469f8322be841cc9a37a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [580],
    "primaryOutputId": 580,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "9ba258ca35734603cc2be2bc846bf91a1eef31daaf8d64faa46eb9df1f8fc566",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [214],
    "outputIds": [581],
    "primaryOutputId": 581,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [215],
    "outputIds": [583],
    "primaryOutputId": 583,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 54,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [218],
    "outputIds": [584, 585],
    "primaryOutputId": 584,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [586],
    "primaryOutputId": 586,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "e4ee5b213b26f990a5e6578bb6a57c3122696039abff02fd26b1afac15cf4a61",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [587],
    "primaryOutputId": 587,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "3ba4a20a36d94bbd2a7a16162860487053224338cad2a11a132edb9fa8c3b05d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [219],
    "outputIds": [588],
    "primaryOutputId": 588,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [220],
    "outputIds": [589],
    "primaryOutputId": 589,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 55,
    "actionKey": "fa0fe1c620805feca48f4d77b9d6b555499d51872cd3536ec4df20c3ff0c99d8",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [221],
    "outputIds": [590, 591],
    "primaryOutputId": 590,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "268ee9c7a3df08415f2b85dbb4ca4c9ff246842cfc53bb016689528e15cf414a",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [12],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 12,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "a62d660db702d10358bded2e23a94df9e11da638e66dc17c20ab56e957c90a5b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [592],
    "primaryOutputId": 592,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "aa25186d3de172a1961f588394599854032326c3f227dc5f351b3a4f03641fa4",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [222],
    "outputIds": [593],
    "primaryOutputId": 593,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [223],
    "outputIds": [594],
    "primaryOutputId": 594,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [595],
    "primaryOutputId": 595,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "1e2ebda7c54e4d899003588d0dcf0ac81ad2fa5977ebf9077fcee71c4cc7792a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [596],
    "primaryOutputId": 596,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "84c8f47c9143ca835bfb0cf4a010c53789414de170e824266c407c6b62f84dc1",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [224],
    "outputIds": [597],
    "primaryOutputId": 597,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [225],
    "outputIds": [598],
    "primaryOutputId": 598,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 57,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [226],
    "outputIds": [599, 600],
    "primaryOutputId": 599,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "d769f0f68460a644ff8b4d14d20856ee30bde62c109739be7ac90e68443b9f7b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [227],
    "outputIds": [601, 602, 603],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 601,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "5fd9725b22e9834ede3235d4d9370dd57d3169f0e1b0aeb157b1409bd9e11f6e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [604],
    "primaryOutputId": 604,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [605],
    "primaryOutputId": 605,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 58,
    "actionKey": "cb7910d4bd89149cd0a43dbe4881eccabc61a5fe7dccdbd1a8517cf7f5314e49",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [229],
    "outputIds": [606],
    "primaryOutputId": 606,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "69fe983b76d615476be170493ada47f282ce753fe57083594e88ddc3b5cd46e9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [607],
    "primaryOutputId": 607,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "003ce670ef8664dacfc9a9b8bdb0d64046fde81e455f4eeeb47ac5c0254f01b0",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [230],
    "outputIds": [608],
    "primaryOutputId": 608,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [231],
    "outputIds": [610],
    "primaryOutputId": 610,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "15bfc54709bd90fd705a10a5bb241039ffed3bdf3a896da8e921a965aaae1168",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [234],
    "outputIds": [611],
    "primaryOutputId": 611,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [612],
    "primaryOutputId": 612,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "bba55e9f39e4a2f61bc50877729864d5c0bc22030c0228761a74996694261c32",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [236],
    "outputIds": [613, 614, 615],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 613,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "196cf7af23354cdce67eb4b75106fb05ccb27bb41973c524b85f1c816d1dd41a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [616],
    "primaryOutputId": 616,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [617],
    "primaryOutputId": 617,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 59,
    "actionKey": "ba57b34d498bc92b5e0827980eedfca765c42c21c8e48416180513a4a1f86ca8",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [238],
    "outputIds": [618],
    "primaryOutputId": 618,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "8db9f1a06a87fdc75993d5f5d9914c5cc76ecec27911667404c64b69cea119a2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [619],
    "primaryOutputId": 619,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "f865c757f59e8eabb6d903418a01ceb91a66c53a25d244afcb2a95558b9d2bb6",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [239],
    "outputIds": [620],
    "primaryOutputId": 620,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [240],
    "outputIds": [622],
    "primaryOutputId": 622,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "1bd9bb71d36bf173a7c7dba04efaa0e05f2285884791cec1066d43790e8c75bc",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [243],
    "outputIds": [623],
    "primaryOutputId": 623,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [624],
    "primaryOutputId": 624,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 60,
    "actionKey": "7ecbbe1690d18840f0a72791e14edda899b551adfee43444d211b83a4975b0ea",
    "mnemonic": "Action",
    "configurationId": 1,
    "outputIds": [625],
    "primaryOutputId": 625,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [626],
    "primaryOutputId": 626,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "b7000cdd64b45fea9593c38b9424eed98e5dfcfc90dfdaf8b20f2bc146343e53",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [627],
    "primaryOutputId": 627,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "cd32bcc3acf27febf727f8b3ac3b39f0a526b6c1d0d69f7f2ba70cfc1052e167",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [245],
    "outputIds": [628],
    "primaryOutputId": 628,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [246],
    "outputIds": [629],
    "primaryOutputId": 629,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 61,
    "actionKey": "fa0fe1c620805feca48f4d77b9d6b555499d51872cd3536ec4df20c3ff0c99d8",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [247],
    "outputIds": [630, 631],
    "primaryOutputId": 630,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [632],
    "primaryOutputId": 632,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "4a1763f1aa8bc52b0e5f8cf74ef64a85d8f931f2041b5e0ab1362dbf83a334d6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [633],
    "primaryOutputId": 633,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "075ffacfcc3a46547ac2aabbf8e7ccc0e17312a5e2776fa9a35b5a469568a6d1",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [248],
    "outputIds": [634],
    "primaryOutputId": 634,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [249],
    "outputIds": [635],
    "primaryOutputId": 635,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 62,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [250],
    "outputIds": [636, 637],
    "primaryOutputId": 636,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 63,
    "actionKey": "49e94af29adfc38c9945fd8182654ecea957b3bd4f0a180a5f6a968bdbe71ed3",
    "mnemonic": "CopyDirectory",
    "configurationId": 1,
    "inputDepSetIds": [251],
    "outputIds": [639],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 639,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [640],
    "primaryOutputId": 640,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "7666ed4c39137b0d846d0b1249271644ec8ac1bc9f45a68e888d14aefac731e3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [641],
    "primaryOutputId": 641,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "73425fa597ebc707a468d3dc68ca60ad90755b717ad8f3bd3d04c0074a84fb83",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [252],
    "outputIds": [642],
    "primaryOutputId": 642,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [253],
    "outputIds": [643],
    "primaryOutputId": 643,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 64,
    "actionKey": "d2260fc9d3fd435c7b4435a4144abd0666654573f9c5c3782dfbab57fc50060f",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [254],
    "outputIds": [644, 645],
    "primaryOutputId": 644,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 65,
    "actionKey": "b401b5ec4a5a070ee034779cd85ce9c514a80e2f540f86031ee92246a6f68424",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [255],
    "outputIds": [649],
    "primaryOutputId": 649,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 65,
    "actionKey": "ea5274dc9d403c7f657376d05e1919de8c2c4db9604618cc6e272b85f4b403d3",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [257],
    "outputIds": [486],
    "primaryOutputId": 486,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "acc60d3d1f86d70f97e5b950c6cb95bf427b53d7ffe17e848cce217ee5e459ad",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [650],
    "primaryOutputId": 650,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "63506fc358f0cd30c3dcf2d4d95ce3c02ac3eb19b97c8a8b8350108bd19995bd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [651],
    "primaryOutputId": 651,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "f27ce447134a4bfc2191e75453e999b328479629f29291d1dc9c9460b932eb24",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [259],
    "outputIds": [652],
    "primaryOutputId": 652,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [260],
    "outputIds": [654],
    "primaryOutputId": 654,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 66,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [263],
    "outputIds": [655, 656],
    "primaryOutputId": 655,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [657],
    "primaryOutputId": 657,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "1d93719d509fa4b7fd80b6a46f9ca389bd69bcd2ff1cb20afc57c7bd32ca95b7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [658],
    "primaryOutputId": 658,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "879587f2b9403c7f0da98ab89b716e60eb2a6c85a1f0a844d72e2fa98a33d056",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [264],
    "outputIds": [659],
    "primaryOutputId": 659,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [265],
    "outputIds": [660],
    "primaryOutputId": 660,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 67,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [266],
    "outputIds": [661, 662],
    "primaryOutputId": 661,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 68,
    "actionKey": "ff81ae4adccc36264b7c2533c65d4b47a9e7d8ddf780ee84d191d0fccc252316",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [267],
    "outputIds": [666],
    "primaryOutputId": 666,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 68,
    "actionKey": "2b3f8ca1e860d9a02f7ee2671024e9154bceb7ab1964811594e1a9a3b33e0078",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [269],
    "outputIds": [483],
    "primaryOutputId": 483,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "447c112280b034dbd88abc84a72d779f9e19d32d23c7d8c0e06ca6c9296c98b5",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [271],
    "outputIds": [667, 668, 669],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 667,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "1fd09252fd3759722372680afb935b7d85e5ec509dc46e85f13512392e7fe98a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [670],
    "primaryOutputId": 670,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [671],
    "primaryOutputId": 671,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 69,
    "actionKey": "23f9eaae6717f3a0a3441722b4f72a7c9998b85716915a4f7a4e13315627f01c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [273],
    "outputIds": [672],
    "primaryOutputId": 672,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "3caa4596a0fe7c6ce69c418a54f063a353314ed4fa94863c9b30da3e0ec74d58",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [673],
    "primaryOutputId": 673,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "ba9fd3a20ded3394d9fac7567e254d563d1af57226f23f0d980054cb5efb5f78",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [274],
    "outputIds": [674],
    "primaryOutputId": 674,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [275],
    "outputIds": [676],
    "primaryOutputId": 676,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "cac2692d01524b274a4674ba97b87e6a7c9998d6c1cd391bd145925fab2e6ffb",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [278],
    "outputIds": [677],
    "primaryOutputId": 677,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [678],
    "primaryOutputId": 678,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [280],
    "outputIds": [680],
    "primaryOutputId": 680,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "02abba78f276eb5d5ed8d03c51588f0067905340b5201c2db5ea6a5b305d8146",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [681],
    "primaryOutputId": 681,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "6a4f05c7f5a3c56373abbba4866800a60a6124336826ac34fb9fcd87e2295fca",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [281],
    "outputIds": [682],
    "primaryOutputId": 682,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [282],
    "outputIds": [684],
    "primaryOutputId": 684,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 70,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [286],
    "outputIds": [685, 686],
    "primaryOutputId": 685,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "11f508f5e464e82ef9f7c82859684d7a05fa1277f518b473fbdfdd4373ea972b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [287],
    "outputIds": [687, 688, 689],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 687,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "b89cab73507c27138f548c25575c4d37746710cb0be122d28a97278122925981",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [690],
    "primaryOutputId": 690,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [691],
    "primaryOutputId": 691,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 71,
    "actionKey": "02fc91d79c684758ebf44a45da5d142cbfbeb33a3e679bf4f8988ba61e002fd1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [289],
    "outputIds": [692],
    "primaryOutputId": 692,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "67b8ae7b939226aded1ce3e8dc2cabc28b038fad2ee952aac633fa91d4a29173",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [693],
    "primaryOutputId": 693,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "3aff42389b2a73bbdd0f3b4e06b27f19f8c884ba31f0c0435761da06e04eb193",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [290],
    "outputIds": [694],
    "primaryOutputId": 694,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [291],
    "outputIds": [697],
    "primaryOutputId": 697,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "ffa9f58877c02cbc7a656b8c39126a7f2aa4331b2452630a806c4c384c5c1cb5",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [295],
    "outputIds": [698],
    "primaryOutputId": 698,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [699],
    "primaryOutputId": 699,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "16d99a913915c41e92b06c1b4a4b602f5139a3ab7e61a1eeb255e61615e1f085",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [297],
    "outputIds": [700, 701, 702],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 700,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "fb0332d301e57bef07442f28346cbaa3953de4952c20951596b2cf49c0336f93",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [703],
    "primaryOutputId": 703,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [704],
    "primaryOutputId": 704,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 72,
    "actionKey": "0182aa40baf051f836bfa623500690c848a9cc96963e80b33924f60356666de5",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [299],
    "outputIds": [705],
    "primaryOutputId": 705,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "8a5ba2f5bbadaa445cf01a6b2c7d09720ecae3f313eb4da0665baceb625de501",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [706],
    "primaryOutputId": 706,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "bd8093b7e9e49f862c4684880cd3607fb4949723e3ac727325b0d7b68cfec0ee",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [300],
    "outputIds": [707],
    "primaryOutputId": 707,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [301],
    "outputIds": [709],
    "primaryOutputId": 709,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "fadb6549ca2645cae172f57e3ba9593f1f60486e1c5683431a9343b3a6b3c4ce",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [305],
    "outputIds": [710],
    "primaryOutputId": 710,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [711],
    "primaryOutputId": 711,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "b67ca4308918ec0e8bcaf51fae84ff665af5c3c1c98fb2346495aeb3ab64b4f8",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [307],
    "outputIds": [713],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 713,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "734b9ba43cab980a264af07f6ee8a60682594f01c122a9e320cb63c3b847cc60",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [714],
    "primaryOutputId": 714,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "8881e1ccdc9424f2c6c9817688c51474c3df0ebff9f51536a03d0968200860e5",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [308],
    "outputIds": [715],
    "primaryOutputId": 715,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [309],
    "outputIds": [716],
    "primaryOutputId": 716,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 74,
    "actionKey": "cd5566b275bec39f064fdbd5aa00f1b287eab7d1c5a46023b32c51b8b92f997b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [717],
    "primaryOutputId": 717,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 74,
    "actionKey": "533f581870630ec92b41084268dc4385975abdeac447c7a500f42ad8a6e9f585",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [310],
    "outputIds": [718],
    "primaryOutputId": 718,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 74,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [311],
    "outputIds": [720],
    "primaryOutputId": 720,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 74,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [312],
    "outputIds": [721, 722],
    "primaryOutputId": 721,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 74,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [719],
    "primaryOutputId": 719,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "fc46bf3055ecfc5d077d43853468c9f77f3665aae83ad4d5451becafee9edef5",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [723],
    "primaryOutputId": 723,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "cb2c2550e18e390563f368cca839fcfed06ec88cb4cca92ed9af47c0a17b1e02",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [724],
    "primaryOutputId": 724,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "bcf443a468084fb1be77e85b89f3a7d85dc8e09bc38f84cfa5ae80d2f2d74084",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [313],
    "outputIds": [725],
    "primaryOutputId": 725,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [314],
    "outputIds": [727],
    "primaryOutputId": 727,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 75,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [317],
    "outputIds": [728, 729],
    "primaryOutputId": 728,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "72a5a9f28dcde60ca9f008fa6f31becede727c8636cfa7b314a06cff999db8cd",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [318],
    "outputIds": [730, 731, 732],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 730,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "052a2492e91b9f01af3a299702f8bcb45702e8895c30b10cb7ee0c2e8f74a532",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [733],
    "primaryOutputId": 733,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [734],
    "primaryOutputId": 734,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 76,
    "actionKey": "f6ddef7d027b1e873e8834dff0b83210279aba39451df9478bee45f902658eba",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [320],
    "outputIds": [735],
    "primaryOutputId": 735,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "aa4129a7d51ed52fd790b9613a1e52f17e81670bc023960296ebba52a65adc6a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [736],
    "primaryOutputId": 736,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "eb831e71312fec8d478958fde152b914f318e934b4dcc9eab094ee4536def7c5",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [321],
    "outputIds": [737],
    "primaryOutputId": 737,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [322],
    "outputIds": [739],
    "primaryOutputId": 739,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "f07e61570953f8872bc92571d003f02b0accff8fa13fc372d4453b4f462ed29a",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [325],
    "outputIds": [740],
    "primaryOutputId": 740,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [741],
    "primaryOutputId": 741,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [742],
    "primaryOutputId": 742,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "28d19c4f744e054b2228d987c51858adecdfb770e5e4d82a81ba28cce1e17e8c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [743],
    "primaryOutputId": 743,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "a71f4035d93d51ef05273f9d9f905f47fcd924bbf59c1b4cd98420a3c5264c19",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [327],
    "outputIds": [744],
    "primaryOutputId": 744,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [328],
    "outputIds": [745],
    "primaryOutputId": 745,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 77,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [329],
    "outputIds": [746, 747],
    "primaryOutputId": 746,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "97a669a2ce78ae35f92273bfb22ec0ed625514e7993747cf8f7446e901526072",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [330],
    "outputIds": [748, 749, 750],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 748,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "ca06067aa495c77bfc4ba0871264a8c3c052f2aae8697f89aff6ab0ae7f6e4b5",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [751],
    "primaryOutputId": 751,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [752],
    "primaryOutputId": 752,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 78,
    "actionKey": "42d744393d1293caff9743c3ea7a9091e8b559b3fb330b8eb683804493d6ffa2",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [332],
    "outputIds": [753],
    "primaryOutputId": 753,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "f6f41a6058de1153a65fbcf249fcc540eb70d77db3e045f374bcc6771a1da7ca",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [754],
    "primaryOutputId": 754,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "65485655fd4b759a00bfe3020827d6cf678021f363fa7295da94806ef43a7f61",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [333],
    "outputIds": [755],
    "primaryOutputId": 755,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [334],
    "outputIds": [757],
    "primaryOutputId": 757,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "548f7a8086677ae1a3386b4d708d0f6757e774867c3a231dadb4952f11624d07",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [337],
    "outputIds": [758],
    "primaryOutputId": 758,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [759],
    "primaryOutputId": 759,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [339],
    "outputIds": [67],
    "primaryOutputId": 67,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "375dbb56e1331a3dc5dac7291b176503ae669d95941c3d28951cac89a3b84ee6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [761],
    "primaryOutputId": 761,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "8732708cb4c8cffd1989d78d0dcbd1eaf9c226dd34b4a26320ede1175a77b079",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [340],
    "outputIds": [762],
    "primaryOutputId": 762,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [341],
    "outputIds": [763],
    "primaryOutputId": 763,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [764],
    "primaryOutputId": 764,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "22ece3066f927ca11203d6bafbd17a310c26333d6ff1eff9b552af75afa79b29",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [765],
    "primaryOutputId": 765,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "b331abf4bd486e956c8c3a5b1593075e5900a65b65bc0ec4c9c367a869967ae3",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [342],
    "outputIds": [766],
    "primaryOutputId": 766,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [343],
    "outputIds": [767],
    "primaryOutputId": 767,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 80,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [344],
    "outputIds": [768, 769],
    "primaryOutputId": 768,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 81,
    "actionKey": "077f4b50b5efef3f6207006d54ad1f05e2bfd2cbb16cef46c55ca0aa381a0cfe",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [345],
    "outputIds": [773],
    "primaryOutputId": 773,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 81,
    "actionKey": "a2a5420f43d5134a778b1561852cbeaf0b34afb8c7cb242377caf226c660d729",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [347],
    "outputIds": [490],
    "primaryOutputId": 490,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 82,
    "actionKey": "be6d3c1561ea2e69e204925f9d9013ff073d0d90154c80b69f012800b0a466eb",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [349],
    "outputIds": [777],
    "primaryOutputId": 777,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 82,
    "actionKey": "36f10a61b852fdcc8fc7079fec4b00f23f44c6eab4725151fb73665393475fcb",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [351],
    "outputIds": [410],
    "primaryOutputId": 410,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "0588ab16456cc8ea015ef8a770c9bce3538306a00e6d4b1a8215624d7bedc879",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [778],
    "primaryOutputId": 778,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "14563d6bc5534d1eac2021cd52a73a5fe4f4b14cf54410083c845339c7ad0319",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [353],
    "outputIds": [779],
    "primaryOutputId": 779,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [354],
    "outputIds": [781],
    "primaryOutputId": 781,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [355],
    "outputIds": [782, 783],
    "primaryOutputId": 782,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 83,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [780],
    "primaryOutputId": 780,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [784],
    "primaryOutputId": 784,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "0430885ed6f0e6128e0ec863e2ddf996bbc5a643d3c4da12d0241ae8f73e328f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [785],
    "primaryOutputId": 785,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "f4846163b66734fbd16acc848dc5bb7b06b5eccf339ff72fd172e349f9d718ff",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [356],
    "outputIds": [786],
    "primaryOutputId": 786,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [357],
    "outputIds": [787],
    "primaryOutputId": 787,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 84,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [358],
    "outputIds": [788, 789],
    "primaryOutputId": 788,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [790],
    "primaryOutputId": 790,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "14b169a47ce169b48eb2b9df12c71f24d6d84b74020c75af6e0d77b99647ddbc",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [791],
    "primaryOutputId": 791,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "51bdc92debc4a8ebcd6ae1eafb5b876568fd0ecb0e865b55e27b5a937476c97e",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [359],
    "outputIds": [792],
    "primaryOutputId": 792,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [360],
    "outputIds": [793],
    "primaryOutputId": 793,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 85,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [361],
    "outputIds": [794, 795],
    "primaryOutputId": 794,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 86,
    "actionKey": "060d3bc669db0d997f8265de06667998618df70186c4e355161577faaabeee89",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [420],
    "primaryOutputId": 420,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [796],
    "primaryOutputId": 796,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "c2aef027fb8bbd26f3fd371c7cba245a4f661d0abca9a73effd5cd5f4c39c33f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [797],
    "primaryOutputId": 797,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "4e1103ab0193b50133f2559eae0e68446e4bc93fae51dd13b1e070b500065670",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [362],
    "outputIds": [798],
    "primaryOutputId": 798,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [363],
    "outputIds": [799],
    "primaryOutputId": 799,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 87,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [364],
    "outputIds": [800, 801],
    "primaryOutputId": 800,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "493f96e534f7b86a40782c2d6868de5a07bb320261a6560eee7aaf0780df2179",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [802],
    "primaryOutputId": 802,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "dde5cff062b8033badc59658ded9b5ce45a7b7b28ad03dd8df00c3e75fbf0018",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [803],
    "primaryOutputId": 803,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "825342740bb4470d00fd0a76d790a193c705848d3d094b51dc8d726803c60106",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [365],
    "outputIds": [804],
    "primaryOutputId": 804,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [366],
    "outputIds": [806],
    "primaryOutputId": 806,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 88,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [369],
    "outputIds": [807, 808],
    "primaryOutputId": 807,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [809],
    "primaryOutputId": 809,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "b5ed625b4dbacbf4a7ea7cec799ffe60ff7bf04846df15f0bae339f6aa3846c2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [810],
    "primaryOutputId": 810,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "1ad3eb67db6bf5b2bc5706c724279d789f21235b2adb74c313539d407497a7d7",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [370],
    "outputIds": [811],
    "primaryOutputId": 811,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [371],
    "outputIds": [812],
    "primaryOutputId": 812,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 89,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [372],
    "outputIds": [813, 814],
    "primaryOutputId": 813,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "75b839a0438dcffacd5070ff27284339f577bb89b0861de21a6e7e014de81874",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [373],
    "outputIds": [816, 817],
    "discoversInputs": true,
    "primaryOutputId": 816,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "385ae8b4f82c4e182c436a019602fd2c054dfa0c302eada40d0f2206bbfeef13",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [818],
    "primaryOutputId": 818,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "a772c8a74cb26a45967730f9a180463a13bbc4420bbbb9a9bcf86bfbc5a99e01",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [374],
    "outputIds": [819],
    "primaryOutputId": 819,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "5c509ac9557eb466bd8872ff5005c641d58bd46b156027d0244900b5433921ac",
    "mnemonic": "CcStrip",
    "configurationId": 1,
    "inputDepSetIds": [375],
    "outputIds": [820],
    "primaryOutputId": 820,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [821],
    "primaryOutputId": 821,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "427cfa0592421dbe2f72c23f7133804faa6f34778ef5f9b39179bb8a35f76d36",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [822],
    "primaryOutputId": 822,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "17b6f7774b2dd8aa1af55d8c6e73a03c489be7267850afec56a2541904f158e2",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [376],
    "outputIds": [823],
    "primaryOutputId": 823,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [377],
    "outputIds": [824],
    "primaryOutputId": 824,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [378],
    "outputIds": [826],
    "primaryOutputId": 826,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "37683e689d63501da1d6091456c9837576a48d543710b57e8c32d8f96702b1d1",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [827],
    "primaryOutputId": 827,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "17a2fcf7afe0460c50c2cd777d0d583ea027f5f46015130b36514971e1ced486",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [379],
    "outputIds": [828],
    "primaryOutputId": 828,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [380],
    "outputIds": [829],
    "primaryOutputId": 829,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 91,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [383],
    "outputIds": [830, 831],
    "primaryOutputId": 830,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "e720f37a35d5a89b90c6cf479a3631da0ef88ed3db1b6cfdf4bd04a27077e624",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [832],
    "primaryOutputId": 832,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "691c67ddd4a2984c48677bb174b56cb0cf11ce0c73fbd392182db36f06ebd856",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [384],
    "outputIds": [833],
    "primaryOutputId": 833,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [385],
    "outputIds": [835],
    "primaryOutputId": 835,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [386],
    "outputIds": [836, 837],
    "primaryOutputId": 836,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 92,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [834],
    "primaryOutputId": 834,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 93,
    "actionKey": "7ecbbe1690d18840f0a72791e14edda899b551adfee43444d211b83a4975b0ea",
    "mnemonic": "Action",
    "configurationId": 1,
    "outputIds": [838],
    "primaryOutputId": 838,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "000d098d1ae2f37208253ba1147a2e3e6f711bc16c06f69abfed4c7d2384e415",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [839],
    "primaryOutputId": 839,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "c3119d6c9c75bf4578ec3604eea7e558ff898bd17197a6c17d886b15ccc1767c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [387],
    "outputIds": [840],
    "primaryOutputId": 840,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [388],
    "outputIds": [842],
    "primaryOutputId": 842,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [389],
    "outputIds": [843, 844],
    "primaryOutputId": 843,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 94,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [841],
    "primaryOutputId": 841,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [845],
    "primaryOutputId": 845,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "229632c4994de82ae38450fa2755978771e71c5f588da604db13d758d2191053",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [846],
    "primaryOutputId": 846,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "2c484d3e4eb05366bbc5cb1221375228723b5004860c339d588aef4c33bf48d6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [390],
    "outputIds": [847],
    "primaryOutputId": 847,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [391],
    "outputIds": [848],
    "primaryOutputId": 848,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 95,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [392],
    "outputIds": [849, 850],
    "primaryOutputId": 849,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "82af4b9b564a83a5138adf7d655718d4e77c06875a0835059500de21a3341cf7",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [851],
    "primaryOutputId": 851,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "753a22021de7b56b413e82a1cc972912edce9b300ab762d197da68e3c8026bfd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [852],
    "primaryOutputId": 852,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "654928fb3f7dba6a1f4dbd8826be809411caf1234cecd9a7fe8e5afdb0b344f0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [393],
    "outputIds": [853],
    "primaryOutputId": 853,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [394],
    "outputIds": [855],
    "primaryOutputId": 855,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 96,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [397],
    "outputIds": [856, 857],
    "primaryOutputId": 856,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [858],
    "primaryOutputId": 858,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "fdce00f8c21f53f7f42fca3e248a718190d85f51378fc9ed3f481576d813b0b7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [859],
    "primaryOutputId": 859,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "7f5f1bb5928716795179e5a9a38d41199b1bead4f41d77afca1cdd208268acf0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [398],
    "outputIds": [860],
    "primaryOutputId": 860,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [399],
    "outputIds": [861],
    "primaryOutputId": 861,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 97,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [400],
    "outputIds": [862, 863],
    "primaryOutputId": 862,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "418699e3a25dc79e482c22b7f5d6b535958278b807f00e3a119409621a83a319",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [864],
    "primaryOutputId": 864,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "37354da9fe8b416c0433c5d90e3d593ab6f516af6e63369a120151e4a89a3b66",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [401],
    "outputIds": [865],
    "primaryOutputId": 865,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [402],
    "outputIds": [867],
    "primaryOutputId": 867,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [403],
    "outputIds": [868, 869],
    "primaryOutputId": 868,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 98,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [866],
    "primaryOutputId": 866,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 99,
    "actionKey": "c0eba6f85793aef71e646a040615c0993c642f33e0845165d6edf786c8213bdc",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [870],
    "primaryOutputId": 870,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 99,
    "actionKey": "0914b25e3f416c7cb2d94c9ff89801f7cfc2b71bbfa8c4cbbb17852d03a0e66c",
    "mnemonic": "PackageTar",
    "configurationId": 1,
    "inputDepSetIds": [404],
    "outputIds": [905],
    "primaryOutputId": 905,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "f0500ee52d53086821105e26261c9fb8c4265684824cc92b5f28e269f76cc262",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [906],
    "primaryOutputId": 906,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "eeacb0a919e778f7b9e9be19e7de6692c3d28549c7f79525a18de5bddc268182",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [907],
    "primaryOutputId": 907,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "b786f0fddb6370ad0ebbfde83993305a0fffa84adb1d5ff64b90623e94aa679a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [406],
    "outputIds": [908],
    "primaryOutputId": 908,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [407],
    "outputIds": [910],
    "primaryOutputId": 910,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 100,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [410],
    "outputIds": [911, 912],
    "primaryOutputId": 911,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 101,
    "actionKey": "efc226d9aa458f07e569416b49f19db205547fb131ad5082c184668069ece893",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [913],
    "primaryOutputId": 913,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "6472ac9ede1373ec68558212b5bc80a5e0396ce60cc780ee55ace6a1e533266e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [914],
    "primaryOutputId": 914,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "01e2285a355875bee9a6d64ee4b7c6789b582274fc0d5dac2e47161101f81652",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [411],
    "outputIds": [915],
    "primaryOutputId": 915,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [412],
    "outputIds": [917],
    "primaryOutputId": 917,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [413],
    "outputIds": [918, 919],
    "primaryOutputId": 918,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 102,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [916],
    "primaryOutputId": 916,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [920],
    "primaryOutputId": 920,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "68375346e4ffb93804aa7c742370d5e21a20c0e231698ae65862e6c394b33fb0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [921],
    "primaryOutputId": 921,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "75ed7197cf65b6335a1a6e93e72dc9a4ce8e9ea080c847cb86bf103548cc3f88",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [414],
    "outputIds": [922],
    "primaryOutputId": 922,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [415],
    "outputIds": [923],
    "primaryOutputId": 923,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 103,
    "actionKey": "d2260fc9d3fd435c7b4435a4144abd0666654573f9c5c3782dfbab57fc50060f",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [416],
    "outputIds": [924, 925],
    "primaryOutputId": 924,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [417],
    "outputIds": [927],
    "primaryOutputId": 927,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "7a789d70ad7c5c8b94437d4c337376e76f5e2be9772d5262e4ab16f8319eb3cf",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [928],
    "primaryOutputId": 928,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "97559f8e4279721d6662c04bb5c64ffb3de6895a31bff3648ebac654297d7e02",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [418],
    "outputIds": [929],
    "primaryOutputId": 929,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [419],
    "outputIds": [930],
    "primaryOutputId": 930,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 104,
    "actionKey": "ccbdea01e146e5bc3dcc7ae0cf8a91eb960411069d1344d705f9563e454c455e",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [422],
    "outputIds": [931, 932],
    "primaryOutputId": 931,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 105,
    "actionKey": "dd80870f840b0fd7a66840f51ce45b2f5e8fb950b6ed073b13913fc604728cd5",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [307],
    "outputIds": [933],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 933,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [934],
    "primaryOutputId": 934,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "2f2a3babfc982400f0c8102a52a5c90dc61c60656ab06870f066c6e8bc3c629b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [935],
    "primaryOutputId": 935,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "0576d2721befc655150454803d8cc9d9ab1238ff266605aae54dace7d1cf57cd",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [423],
    "outputIds": [936],
    "primaryOutputId": 936,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [424],
    "outputIds": [937],
    "primaryOutputId": 937,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 106,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [425],
    "outputIds": [938, 939],
    "primaryOutputId": 938,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "7ffcb91157350ae03f6ed521daf6aa3e855fdf54f9fb08b37f11c8b4fc0d6c62",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [426],
    "outputIds": [940, 941, 942],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 940,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "87c484f7a4b645ae4de163f4f594997452888994dcf24c4d9e23900f0c42e6df",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [943],
    "primaryOutputId": 943,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [944],
    "primaryOutputId": 944,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 107,
    "actionKey": "5e1417c0610ac1d719a22e6ea7e0fa0c339119a3f0b0906c3653055c7651df3b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [428],
    "outputIds": [945],
    "primaryOutputId": 945,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "7fdc019b58e763339a8162b703964066949b09672246cec012b52983a1cc1be0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [946],
    "primaryOutputId": 946,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "940f1eb790c68f8b0d89465ee1d19da52894b57285fe9a7af30f7ded60cd8830",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [429],
    "outputIds": [947],
    "primaryOutputId": 947,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [430],
    "outputIds": [948],
    "primaryOutputId": 948,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "c057b1d4ef2eef97332b7b24bae444d1f9ba25f660e80706ff7be2af9103827e",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [434],
    "outputIds": [949],
    "primaryOutputId": 949,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [950],
    "primaryOutputId": 950,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [951],
    "primaryOutputId": 951,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "df4f641e4ad60e3175bbdbd23db515bb2d3ffe75afb9e0b830457b4de43c1e7f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [952],
    "primaryOutputId": 952,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "e0bd8715b7a18bca47416a39dbeb4625d43d00e4912077d506cc0ba2ae37d55f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [436],
    "outputIds": [953],
    "primaryOutputId": 953,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [437],
    "outputIds": [954],
    "primaryOutputId": 954,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 108,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [438],
    "outputIds": [955, 956],
    "primaryOutputId": 955,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [957],
    "primaryOutputId": 957,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "8d06dbce37a359b33c5b475013c59cffcadc797b30816a878bdf385092513eb9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [958],
    "primaryOutputId": 958,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "e7472f6bb65dc55d75905ca97ef8afa7d9f06d0837c91018fee0c7808f6b9b94",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [439],
    "outputIds": [959],
    "primaryOutputId": 959,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [440],
    "outputIds": [960],
    "primaryOutputId": 960,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 109,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [441],
    "outputIds": [961, 962],
    "primaryOutputId": 961,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 110,
    "actionKey": "85ad9e48cb4022311fd81a077a64b07f3c77fbba5b831f37d29321c36f3057c3",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [458],
    "primaryOutputId": 458,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "43ce6d75fb47f7febca8b1259af38cbea63ee27c89ec8f5d1c3aa4f297a19606",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [963],
    "primaryOutputId": 963,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "472d57844fd951d1833af3ef849e77423f0c723d1e8945a880013edd0dc702bb",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [964],
    "primaryOutputId": 964,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "0c7a69a970c7818a6836fa6b0460b99508ce8b6fd745336b21e65666093b623f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [442],
    "outputIds": [965],
    "primaryOutputId": 965,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [443],
    "outputIds": [967],
    "primaryOutputId": 967,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 111,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [446],
    "outputIds": [968, 969],
    "primaryOutputId": 968,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [970],
    "primaryOutputId": 970,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "9bebb5f4b751ab43375fbe933ecb1eba8bc01a183f20742c2815c3927a7428d5",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [971],
    "primaryOutputId": 971,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "0023fd793741ee5e95f02e9a1ee5b4204a37bdfc40b48ab831dcec83fe92b37d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [447],
    "outputIds": [972],
    "primaryOutputId": 972,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [448],
    "outputIds": [973],
    "primaryOutputId": 973,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 112,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [449],
    "outputIds": [974, 975],
    "primaryOutputId": 974,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "ba36420211662c999bb7c9624d76ebb6e275b781b97a3f8cf99a9395bfb9fc78",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [976],
    "primaryOutputId": 976,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "88944e90cff4f735a3a7462924b60cee9cfdaf5c016352c757c081924e4ca82c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [450],
    "outputIds": [977],
    "primaryOutputId": 977,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [451],
    "outputIds": [979],
    "primaryOutputId": 979,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [452],
    "outputIds": [980, 981],
    "primaryOutputId": 980,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 113,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [978],
    "primaryOutputId": 978,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [982],
    "primaryOutputId": 982,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "6f8bd5887b5e7537d61d514c95776acfdc2c56c975d903b83029c933a8d1821a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [983],
    "primaryOutputId": 983,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "4cfc34a21f3c35a9eee9075d5858f60e8aec408f08fa13d777c3ea41b631960d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [453],
    "outputIds": [984],
    "primaryOutputId": 984,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [454],
    "outputIds": [985],
    "primaryOutputId": 985,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 114,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [455],
    "outputIds": [986, 987],
    "primaryOutputId": 986,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [988],
    "primaryOutputId": 988,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "99610cf5c245e8a06ae038354be76387c329fcc1c953211c88e4f3cdc85c85aa",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [989],
    "primaryOutputId": 989,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "0d532c4fc2ab45c3dbcff183f6ec9dbd18b154aff81046ed693f549eefc38376",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [456],
    "outputIds": [990],
    "primaryOutputId": 990,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [457],
    "outputIds": [991],
    "primaryOutputId": 991,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 115,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [458],
    "outputIds": [992, 993],
    "primaryOutputId": 992,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "ea554506368d295444ef2d1cbd3ab4f9359eb9a0dac681028af17112d6496877",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [994],
    "primaryOutputId": 994,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "837a58a0820f081fac8458c65ccacb7ddd6eb18144872910f9f62e61db31c052",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [995],
    "primaryOutputId": 995,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "c065f96ebe76273959131f0a992513b4b6d3b75f25b5192d1d68bd49ba3069ed",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [459],
    "outputIds": [996],
    "primaryOutputId": 996,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [460],
    "outputIds": [998],
    "primaryOutputId": 998,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 116,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [463],
    "outputIds": [999, 1000],
    "primaryOutputId": 999,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [464],
    "outputIds": [1002],
    "primaryOutputId": 1002,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "4242692fefcedb1737b6f4581b7d26a8015ac6d283af2ad59083c88795481815",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1003],
    "primaryOutputId": 1003,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "fec72e49e50943a0d9f8beaeefb183524f58809a53b423492bb99dd1af34f642",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [465],
    "outputIds": [1004],
    "primaryOutputId": 1004,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [466],
    "outputIds": [1005],
    "primaryOutputId": 1005,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 117,
    "actionKey": "ac188960879fc7fa4a90ec9e78cafc1dce3c9890b8f3a13925ff86d5e673c7da",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [470],
    "outputIds": [1006, 1007],
    "executionInfo": [{
      "key": "local"
    }],
    "primaryOutputId": 1006,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 118,
    "actionKey": "24fa14ba945b7bdf8e5b2cc127161727ca69615b52bc850e0341efb06bde5f12",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [471],
    "outputIds": [1011],
    "primaryOutputId": 1011,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 118,
    "actionKey": "ecd778f4c0d9c8523ec41dd585fc0232989555f092e7fceba490e7afdcbd779a",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [473],
    "outputIds": [485],
    "primaryOutputId": 485,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1012],
    "primaryOutputId": 1012,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "e985d43fcd8b9878592241b63cffdc8c423ec08c61fedefa99862a2ed5cec7c9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1013],
    "primaryOutputId": 1013,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "a0913a7da3f2f676049265e29881cd0e509edadaf1f91afd5784f91ea78efda4",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [475],
    "outputIds": [1014],
    "primaryOutputId": 1014,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [476],
    "outputIds": [1015],
    "primaryOutputId": 1015,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 119,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [477],
    "outputIds": [1016, 1017],
    "primaryOutputId": 1016,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "dfb73f0264ee792e74858a78b7d72cd1c7f52805ede1bf07e6e4d4da80e964fb",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [478],
    "outputIds": [926],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 926,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "d512d492a7fc35d8e1fb5dfccfd29996a19d9648136d5803035d5f69bb335434",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1019],
    "primaryOutputId": 1019,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "a151d81af7d1bd87d12d05d69ab96cc5f4875248ce2a1268d02920c245595d19",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [479],
    "outputIds": [1020],
    "primaryOutputId": 1020,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 120,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [480],
    "outputIds": [1021],
    "primaryOutputId": 1021,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 121,
    "actionKey": "0f31bea761d8c39db80d8189fbd3b2463e514108b24674b8af3c1d80386dbfbe",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [481],
    "outputIds": [871],
    "primaryOutputId": 871,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [1023],
    "primaryOutputId": 1023,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "7ea1a7c492ffa2692739e25db694edebafcd890550808aea09c1ff9d14b5ea1a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1024],
    "primaryOutputId": 1024,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "b4d615490754eab05c04a7395f8528b4f37eddd9dc9d355064795d6c6d9b16b8",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [482],
    "outputIds": [1025],
    "primaryOutputId": 1025,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [483],
    "outputIds": [1026],
    "primaryOutputId": 1026,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [484],
    "outputIds": [1027],
    "primaryOutputId": 1027,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "b2be04bc2ea782ed502380e87718113c14d9d43d138df1846b2b88d12971b973",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1028],
    "primaryOutputId": 1028,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "1f77b53807d65debd78d6eb9270f303fbfdcf806abfc6426c8813cc1427ba871",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [485],
    "outputIds": [1029],
    "primaryOutputId": 1029,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [486],
    "outputIds": [1030],
    "primaryOutputId": 1030,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "f8461e72be1229cf42d00f091926394854b1e51b31187492e2ffbff8ad71b694",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1031],
    "primaryOutputId": 1031,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "28785e2c740e8ff4ea1fd72634b85599b1a0cf6d337efcc55d300fb2db31f3fc",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1032],
    "primaryOutputId": 1032,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "fb9ef7acce8d328ea4c07dc8e4e144cbe10243784c8dae3319ef18f8e4e94d65",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [489],
    "outputIds": [1033],
    "primaryOutputId": 1033,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [490],
    "outputIds": [1034],
    "primaryOutputId": 1034,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "befbe2240d73111176f5c63f4449cb6a30bfeb6d299e98c6dbe68309e249d650",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1035],
    "primaryOutputId": 1035,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "40fa87ba72d2dda9a30272ca18ca1c2f4ffcdf244c93861cc221b5e48479a449",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1036],
    "primaryOutputId": 1036,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "919eb66b7ea2de7d7fcad348f9726151963565571a8d68b2413023341f9e6e91",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [491],
    "outputIds": [1037],
    "primaryOutputId": 1037,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [492],
    "outputIds": [1039],
    "primaryOutputId": 1039,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 125,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [495],
    "outputIds": [1040, 1041],
    "primaryOutputId": 1040,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 126,
    "actionKey": "30975a483a50b079a4fc81d5872487c591c67f4d394dab023c75458733285626",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1042],
    "primaryOutputId": 1042,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1043],
    "primaryOutputId": 1043,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "2897bb127bff3585eac21edec8e164990530b1d37c41982ab20937c41b781a66",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1044],
    "primaryOutputId": 1044,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "4be1fd14dc2c805d1e350cf049d0cb611588e67d07bf91eddb9bda5a400023f3",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [496],
    "outputIds": [1045],
    "primaryOutputId": 1045,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [497],
    "outputIds": [1046],
    "primaryOutputId": 1046,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 127,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [498],
    "outputIds": [1047, 1048],
    "primaryOutputId": 1047,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 128,
    "actionKey": "53140f18fbd52bfe91a1be9d7ca553b3b9fd518ef0065816ae02b33b7fac586a",
    "mnemonic": "RunBinary",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "OUT",
      "value": "bazel-out/k8-fastbuild/bin/tests/run_binary/run_bin.out"
    }],
    "inputDepSetIds": [499],
    "outputIds": [1052],
    "primaryOutputId": 1052,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "1b03ae8ab68369ce6853ee866aba6a3440d5d32858c30ab7fa57979e0af6bb0c",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [503],
    "outputIds": [1053, 1054, 1055],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1053,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "adf3e0a13bb43c443428bae6d96e7c697ee0e6ea19402a363bffd5b96037780e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1056],
    "primaryOutputId": 1056,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1057],
    "primaryOutputId": 1057,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 129,
    "actionKey": "130e681308fd7187718974bc401f2113c61ffec2874368f05c74056baa19d4d7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [505],
    "outputIds": [1058],
    "primaryOutputId": 1058,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "71af8db5864e0e7ffe6c260baee6386ec13689a0b4bc06439252567d3e29892e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1059],
    "primaryOutputId": 1059,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "b2dcab32cef9783f110ddffcc83677dcbd2a9137dbaa2919506a3a0623237682",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [506],
    "outputIds": [1060],
    "primaryOutputId": 1060,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [507],
    "outputIds": [1061],
    "primaryOutputId": 1061,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "f7b7cba4442188b111e5ef49166069f388787db67a921fb57799a9551efdb0a7",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [510],
    "outputIds": [1062],
    "primaryOutputId": 1062,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1063],
    "primaryOutputId": 1063,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 130,
    "actionKey": "1d017e3a685ef9aee80f6bba3a6d7290a284be3b6c5d32942e784edd07094136",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [512],
    "outputIds": [1067],
    "primaryOutputId": 1067,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 130,
    "actionKey": "276e7728839ab14d96228b627755b28991260bebf9a6d9e4539dd465681b24d1",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [514],
    "outputIds": [497],
    "primaryOutputId": 497,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 131,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "Symlink",
    "configurationId": 1,
    "inputDepSetIds": [140],
    "outputIds": [1068],
    "primaryOutputId": 1068,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "aa8ee2f722ecfc5eb675b75625d2e3eb88340a8960f56308e7de3c2318cb72c2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1069],
    "primaryOutputId": 1069,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "02c00dfae994020fa1a61b2c2ef661417160ab5ea85d761ae6ff7fe73fbecdb2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1070],
    "primaryOutputId": 1070,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "c2f656b1e7cee6f041d92a91819023f5a7357e4ab27263972d2e152cf9898c75",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [516],
    "outputIds": [1071],
    "primaryOutputId": 1071,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [517],
    "outputIds": [1072],
    "primaryOutputId": 1072,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 132,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [520],
    "outputIds": [1073, 1074],
    "primaryOutputId": 1073,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1075],
    "primaryOutputId": 1075,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "5237bfa7f33c06d277e4cfc0c82fc4e677a133cd12584b86031aace11d8506e3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1076],
    "primaryOutputId": 1076,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "98a4a373404f07add2b5cf715064f3f8d974d3c1dadccb6f3d656bad629617dd",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [521],
    "outputIds": [1077],
    "primaryOutputId": 1077,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [522],
    "outputIds": [1078],
    "primaryOutputId": 1078,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 133,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [523],
    "outputIds": [1079, 1080],
    "primaryOutputId": 1079,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "3cc8fe4fe06e58ea11cd29681e5132bdbb9af1541d9206177537b3d36681e3a4",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1081],
    "primaryOutputId": 1081,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "ca36c7789967a44f472955acbf6e372ef874b0b8657bd9b57883476b29797f21",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1082],
    "primaryOutputId": 1082,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "c738ddc8743f16aaf78dd310b2f18c527e0fc3d7fe32cfc2e827eb73566dd631",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [524],
    "outputIds": [1083],
    "primaryOutputId": 1083,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [525],
    "outputIds": [1085],
    "primaryOutputId": 1085,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 134,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [528],
    "outputIds": [1086, 1087],
    "primaryOutputId": 1086,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 135,
    "actionKey": "b624511810856bd82a4b918ef0282671aac39fb5b8c863b762c3f91f765ca71d",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [529],
    "outputIds": [1091],
    "primaryOutputId": 1091,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 135,
    "actionKey": "6f2498b8ce92e3270a24506f2bb93494637ead24939ade6073be6d9d2534114a",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [531],
    "outputIds": [491],
    "primaryOutputId": 491,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "4cc8b6307e5814471605b6c37b279a8983c5277cdd58aab899dd40cda5e1f927",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1092],
    "primaryOutputId": 1092,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "a7cfbcd97c647af911658601ce7cc909a582985b8bb1e19e6431fbe38a1540c2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1093],
    "primaryOutputId": 1093,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "1b1823dc50b1681b0e0b81b3ec021b8abd3766cdfb1f311a5add16313eb91cd6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [533],
    "outputIds": [1094],
    "primaryOutputId": 1094,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [534],
    "outputIds": [1096],
    "primaryOutputId": 1096,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 136,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [537],
    "outputIds": [1097, 1098],
    "primaryOutputId": 1097,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1099],
    "primaryOutputId": 1099,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "16a48ab6dc1a7fef4f3abc3abf343075808f8c0ed7c09293e153a8e191e6db47",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1100],
    "primaryOutputId": 1100,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "cae4d196b2e09eccd3d51ed6e047e8c01a4d6b6de7a5c8f599bab2d5c05d64ab",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [538],
    "outputIds": [1101],
    "primaryOutputId": 1101,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [539],
    "outputIds": [1102],
    "primaryOutputId": 1102,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 137,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [540],
    "outputIds": [1103, 1104],
    "primaryOutputId": 1103,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "4969edbd8c51d0df0b3d42938ca7c30c072756ae64557d08794238324dcdd34b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [541],
    "outputIds": [1105, 1106, 1107],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1105,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "eb60aaac60f4c4d7a8545c8a1b4db0c9895282d5ed18b6462c89287cd90ae174",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1108],
    "primaryOutputId": 1108,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1109],
    "primaryOutputId": 1109,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 138,
    "actionKey": "830c90dee3271d6344ba998eb4e9df378b3d6af229a1572b580316f1918430e0",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [543],
    "outputIds": [1110],
    "primaryOutputId": 1110,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "e0da091b4950fe4ecfc74f152107103ee101e147a4acbb900a5ae0589054f879",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1111],
    "primaryOutputId": 1111,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "a9ed308cecff5d4ee61741cdc06517b418d527dfee87b2899e06366e2e73a502",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [544],
    "outputIds": [1112],
    "primaryOutputId": 1112,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [545],
    "outputIds": [1113],
    "primaryOutputId": 1113,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "f075fc5ef913ef96e976b0bb35b35fa89578e3ad6f5c3fdd17517f041061872e",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [550],
    "outputIds": [1114],
    "primaryOutputId": 1114,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1115],
    "primaryOutputId": 1115,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1116],
    "primaryOutputId": 1116,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "64c59806fb86c4316049514e892e0968fd6862a6440aa0db332032f2e70a960b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1117],
    "primaryOutputId": 1117,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "bd5b75b70ebd56fe5e48d6dca92830d09740ea7696eab0151710cc7d5e49d8fe",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [552],
    "outputIds": [1118],
    "primaryOutputId": 1118,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [553],
    "outputIds": [1119],
    "primaryOutputId": 1119,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 139,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [554],
    "outputIds": [1120, 1121],
    "primaryOutputId": 1120,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 140,
    "actionKey": "fa9006a3fa82110b015d94ab38a258ff4e7a707ca1d3664ed580555f4b19b86b",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [555],
    "outputIds": [1123],
    "primaryOutputId": 1123,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: tests/expand_template/test.tpl.yaml",
    "substitutions": [{
      "key": "@name@",
      "value": "test"
    }, {
      "key": "@version@",
      "value": "1.1.1"
    }]
  }, {
    "targetId": 141,
    "actionKey": "227c734740f1225f190f1b63c697ab87f099162688c60dcf497a576ef1a0aa73",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1124],
    "primaryOutputId": 1124,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "094048e1e9990d0765c71687821d74c7dfafb3975c631784933e83338d5cd08a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1125],
    "primaryOutputId": 1125,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "b702a2df35f9d36675f2de3d0adb016b2a10f80fbbf8869ebc9d0f574ab9eaaf",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [556],
    "outputIds": [1126],
    "primaryOutputId": 1126,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [557],
    "outputIds": [1128],
    "primaryOutputId": 1128,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 141,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [560],
    "outputIds": [1129, 1130],
    "primaryOutputId": 1129,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1131],
    "primaryOutputId": 1131,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "55694cd6ec4d72865729088e7957f0b062f8bae7b57808e4ad2735043d71f18e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1132],
    "primaryOutputId": 1132,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "ea332c33d2526f7b130f9826f0a1503d533656cfbaa875b4954ec7ea47b71ca7",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [561],
    "outputIds": [1133],
    "primaryOutputId": 1133,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [562],
    "outputIds": [1134],
    "primaryOutputId": 1134,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 142,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [563],
    "outputIds": [1135, 1136],
    "primaryOutputId": 1135,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [564],
    "outputIds": [1138],
    "primaryOutputId": 1138,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "1b381efdbed275599d1a113f1f0a3ccfc460961c7ba6588a8411140e7577943d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1139],
    "primaryOutputId": 1139,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "47127f82f696a6f379cf0ea51cd77ec3fb3d280b3637c58895661358897c70ed",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [565],
    "outputIds": [1140],
    "primaryOutputId": 1140,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [566],
    "outputIds": [1141],
    "primaryOutputId": 1141,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1142],
    "primaryOutputId": 1142,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "be72ee8a33afbb4ba979faab954ff236063bfcb69da5f071dccd9c4b9b242a07",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1143],
    "primaryOutputId": 1143,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "a1eab55c0d7f2f0082314057f5d666af372fbe1d20f4603cc1c236f5fedba843",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [569],
    "outputIds": [1144],
    "primaryOutputId": 1144,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [570],
    "outputIds": [1145],
    "primaryOutputId": 1145,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 144,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [571],
    "outputIds": [1146, 1147],
    "primaryOutputId": 1146,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1148],
    "primaryOutputId": 1148,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "fe8df810ec465032b451ac32dcff0438d7540359e85c3ab4eb56b8371df8e147",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1149],
    "primaryOutputId": 1149,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "de006cac5383506afce331ef6fc314074b0287679c1001941f5908664b3d1d83",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [572],
    "outputIds": [1150],
    "primaryOutputId": 1150,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [573],
    "outputIds": [1151],
    "primaryOutputId": 1151,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 145,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [574],
    "outputIds": [1152, 1153],
    "primaryOutputId": 1152,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 146,
    "actionKey": "b04ae01625e8b7f18066c278011e2df06a1c774f78b5c4f8c5db1cf7fc95b865",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [575],
    "outputIds": [1157],
    "primaryOutputId": 1157,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 146,
    "actionKey": "2e4f2d9b3a19f9fa56220529a1649e85ecc96f5108c1676b93e5b8c97d6db88b",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [577],
    "outputIds": [495],
    "primaryOutputId": 495,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 147,
    "actionKey": "afc56388d2ba2f7d2ea5194ca57e7986610fd42a95148dc7c6252d5be1ddc468",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [579],
    "outputIds": [1161],
    "primaryOutputId": 1161,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 147,
    "actionKey": "a0c1b788846433ce6ec8451812dcb40014c264b333d02b8d3a2f91c1491d364b",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [581],
    "outputIds": [496],
    "primaryOutputId": 496,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "f29803d26b125bcf62200d40c6815e9074d7b515a857fc4031ccf370c4189bcd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1162],
    "primaryOutputId": 1162,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "8095c6f50265b40c75b307539db8446df234ae24cea7aa382c1913bf080e5275",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [583],
    "outputIds": [1163],
    "primaryOutputId": 1163,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [584],
    "outputIds": [1165],
    "primaryOutputId": 1165,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [585],
    "outputIds": [1166, 1167],
    "primaryOutputId": 1166,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 148,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1164],
    "primaryOutputId": 1164,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 149,
    "actionKey": "128225e9efa8c24a521b8154140c934a20875ee634cf3aafd456552254a033e4",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "inputDepSetIds": [586],
    "outputIds": [520],
    "primaryOutputId": 520,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "ARTIFACT: tests/expand_template/version.h.in",
    "substitutions": [{
      "key": "@VERSION@",
      "value": "2.3.4"
    }]
  }, {
    "targetId": 150,
    "actionKey": "f38786373fe236d2fda3820d786638d6f342652d615513170655240eed0a460f",
    "mnemonic": "CopyDirectory",
    "configurationId": 1,
    "inputDepSetIds": [587],
    "outputIds": [1170],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 1170,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "c9f18a4ec333494a7ea370a8c845ceab1a5596c357e51658a60e4d4d1c69469d",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [588],
    "outputIds": [1172, 1173],
    "discoversInputs": true,
    "primaryOutputId": 1172,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "81b3b11a73775341e66c55e94051bd61d007196693373a589e4d254547d9f480",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1174],
    "primaryOutputId": 1174,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "4621596422da617a74a8d03b782c183dac56085d1c275f944f2e4e855cfde81d",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [589],
    "outputIds": [1018],
    "primaryOutputId": 1018,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "c7ba39c9811c91c5aa21018ae684b5b3745018560af89f3989ba9c183f1f93f3",
    "mnemonic": "CcStrip",
    "configurationId": 1,
    "inputDepSetIds": [590],
    "outputIds": [1175],
    "primaryOutputId": 1175,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1176],
    "primaryOutputId": 1176,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "ab947cd081ffadf532c288758038a63d9372dea43e6d74316ef7b36f7e6dd200",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1177],
    "primaryOutputId": 1177,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "b1bd03ca1c3ce0ad2cbe3034b5e524fb14bc54b6ec8890d7308b5d03517c3cd2",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [591],
    "outputIds": [1178],
    "primaryOutputId": 1178,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 151,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [592],
    "outputIds": [1179],
    "primaryOutputId": 1179,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1180],
    "primaryOutputId": 1180,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "f12e1225a280ae44e6dffde5b941f62ee403095e7fbe211cf3fa6f80d1bfd771",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1181],
    "primaryOutputId": 1181,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "3fa18368d83fe0fe236f688bd464dd9dbdf6b421be6171d926a516f1a2f03a80",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [593],
    "outputIds": [1182],
    "primaryOutputId": 1182,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [594],
    "outputIds": [1183],
    "primaryOutputId": 1183,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 152,
    "actionKey": "d2260fc9d3fd435c7b4435a4144abd0666654573f9c5c3782dfbab57fc50060f",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [595],
    "outputIds": [1184, 1185],
    "primaryOutputId": 1184,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 153,
    "actionKey": "07ae47281fbbdb5ec4bdf50a68116a406a4e1c985c858f833396e565e5cf5bb2",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [596],
    "outputIds": [1189],
    "primaryOutputId": 1189,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 153,
    "actionKey": "61080dfcf60a490cd943185710de507fe114f23c8abaf2d740322fdd6574f7bf",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [598],
    "outputIds": [492],
    "primaryOutputId": 492,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "b23da0f990977c8b4698a14d510045e918204f3b73ad1fc3a5d938e2f3c34e4c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1190],
    "primaryOutputId": 1190,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "4f415261c844621004a94455f3d4d387a4bb828b47ce05bae52851bc818bffc8",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [600],
    "outputIds": [1191],
    "primaryOutputId": 1191,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [601],
    "outputIds": [1193],
    "primaryOutputId": 1193,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [602],
    "outputIds": [1194, 1195],
    "primaryOutputId": 1194,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 154,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1192],
    "primaryOutputId": 1192,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1196],
    "primaryOutputId": 1196,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "a994e4c1c1b54d26a1df32646a4890c2d1746aa444a0a8c3fe35ab6713829aa6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1197],
    "primaryOutputId": 1197,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "9cf299547d557b6763aa9d13d520d4fe9cd9fc9219aa7ce65553b7c8bbf13522",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [603],
    "outputIds": [1198],
    "primaryOutputId": 1198,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [604],
    "outputIds": [1199],
    "primaryOutputId": 1199,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 155,
    "actionKey": "d2260fc9d3fd435c7b4435a4144abd0666654573f9c5c3782dfbab57fc50060f",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [605],
    "outputIds": [1200, 1201],
    "primaryOutputId": 1200,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 156,
    "actionKey": "211d3f31d77eaa7c3aa6cbec8b4666a85173a5a24e191f54dfe1af9ce6c8b270",
    "mnemonic": "CopyFile",
    "configurationId": 1,
    "inputDepSetIds": [606],
    "outputIds": [825],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 825,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 156,
    "actionKey": "d8963095404a0a3e076d6377ad356de61e19cc2295bdf4f4662d85cab861b747",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1203],
    "primaryOutputId": 1203,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 156,
    "actionKey": "0923f552b799c0ac64f8f35d9ee7b778725bb9f10ab0dfc5f7985a38af5c59dd",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [607],
    "outputIds": [1204],
    "primaryOutputId": 1204,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 156,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [608],
    "outputIds": [1205],
    "primaryOutputId": 1205,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1206],
    "primaryOutputId": 1206,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "c8a3bd81033bb10a837fdd8c6434ddcb96d5c90d99ceaeeb7a3dbfe91ac476e4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1207],
    "primaryOutputId": 1207,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "87f8a0c538523bb069157c6efa458fc5771e1a6d36db0b577e913d3c6ca6e94a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [609],
    "outputIds": [1208],
    "primaryOutputId": 1208,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [610],
    "outputIds": [1209],
    "primaryOutputId": 1209,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 157,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [611],
    "outputIds": [1210, 1211],
    "primaryOutputId": 1210,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "6050b034c2227d6e8f530ee24e4836a101b4cee4fd07cd8809062bf45ced2846",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1212],
    "primaryOutputId": 1212,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "e42256e272aaa0a097b483e454ae7195748f81c6475c0148fd0d43201f5710f6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [612],
    "outputIds": [1213],
    "primaryOutputId": 1213,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [613],
    "outputIds": [1215],
    "primaryOutputId": 1215,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [614],
    "outputIds": [1216, 1217],
    "primaryOutputId": 1216,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 158,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1214],
    "primaryOutputId": 1214,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1218],
    "primaryOutputId": 1218,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "c5f24357f11c78890836bf219288064633eeaabd486125eefa4477f4807592b6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1219],
    "primaryOutputId": 1219,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "763105527b6c9e2a929369b89e4eba89c554d8b03fe863297756b465bb84bde6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [615],
    "outputIds": [1220],
    "primaryOutputId": 1220,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [616],
    "outputIds": [1221],
    "primaryOutputId": 1221,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 159,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [617],
    "outputIds": [1222, 1223],
    "primaryOutputId": 1222,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "e0e4ce559d46449e62d4f7e1bb142c2eca9c944c836b620bde9d100259db2954",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [618],
    "outputIds": [1224, 1225, 1226],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1224,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "ddcb4d0829782a52c6b33a411086aa17b0b35e799be5175b0b97521adcc049c7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1227],
    "primaryOutputId": 1227,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1228],
    "primaryOutputId": 1228,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 160,
    "actionKey": "e460edf63c5656bb803235d2cb3955b125baf36c63048a29d114fdf8c628f3d8",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [620],
    "outputIds": [1229],
    "primaryOutputId": 1229,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "87f8d0e950d4d34728c3b05556ff28fd6c6fb5c68b4a643aa7013c9e3c851063",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1230],
    "primaryOutputId": 1230,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "1fff25ae90c0aea8f3ae0fb03b6d9dc718f2c1584e61acf7a8c4baee1dde9f66",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [621],
    "outputIds": [1231],
    "primaryOutputId": 1231,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [622],
    "outputIds": [1232],
    "primaryOutputId": 1232,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "8f96bd696d3bbb5f973ba160be574e510a2ed39f51313fc0b49114bad5ccb267",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [626],
    "outputIds": [1233],
    "primaryOutputId": 1233,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1234],
    "primaryOutputId": 1234,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 161,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "Symlink",
    "configurationId": 1,
    "inputDepSetIds": [307],
    "outputIds": [1235],
    "primaryOutputId": 1235,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "cb51bf8f36861a7cb3cf6eee7f707cbd516d9383f8e5a54635ea42e1a6afb4bc",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1236],
    "primaryOutputId": 1236,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "487f5eef01e38e25dbe002b470c27798959c2314ea03fe7c7a97fd8423f25a97",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1237],
    "primaryOutputId": 1237,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "7be5aff9518570bdacdc21281679901fc96bd2dee0600fb4c58e91f52229a2e8",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [628],
    "outputIds": [1238],
    "primaryOutputId": 1238,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [629],
    "outputIds": [1240],
    "primaryOutputId": 1240,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 162,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [632],
    "outputIds": [1241, 1242],
    "primaryOutputId": 1241,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 163,
    "actionKey": "fd9fdef597078be7f4f828c3d98c8a35ef5c604ed417b220fca5b0431f96e001",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [633],
    "outputIds": [1246],
    "primaryOutputId": 1246,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 163,
    "actionKey": "97a0ca185f7a74eb55c16d4a24d94678e1aff59794e94f7074ad7919b34abdc0",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [635],
    "outputIds": [482],
    "primaryOutputId": 482,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [637],
    "outputIds": [1247],
    "primaryOutputId": 1247,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "d35a4d0089e36e35578a5ec0587566af7b09ab05f3d4da94f6eb664aa555c0cd",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1248],
    "primaryOutputId": 1248,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "0537820858b3ff082de3d33d7775e6a2fe351ff424d044979135b3c72b33bb11",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [638],
    "outputIds": [1249],
    "primaryOutputId": 1249,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [639],
    "outputIds": [1250],
    "primaryOutputId": 1250,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1251],
    "primaryOutputId": 1251,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "832149604692971c47a1f599544f265872fc9ae86b6876f6316f667627f89920",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1252],
    "primaryOutputId": 1252,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "f9c08021359737ede647adaaa4136d0a60f7eced89ecc9e0059b19f4a1746fb7",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [642],
    "outputIds": [1253],
    "primaryOutputId": 1253,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [643],
    "outputIds": [1254],
    "primaryOutputId": 1254,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 165,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [644],
    "outputIds": [1255, 1256],
    "primaryOutputId": 1255,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 166,
    "actionKey": "6e038fc3e407734211bfdc357a72b889170b889fdfc9e2881ff87904094917fc",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [190],
    "outputIds": [474, 1257],
    "primaryOutputId": 474,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1258],
    "primaryOutputId": 1258,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "98aeecf8210034e8f16976a97650378cebb268656241a5abdb8afed08e0a1431",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1259],
    "primaryOutputId": 1259,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "c211c0e1c243adcac8188e56d0a7ed1357a7b16293c01749199b89ef6ebf9272",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [645],
    "outputIds": [1260],
    "primaryOutputId": 1260,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [646],
    "outputIds": [1261],
    "primaryOutputId": 1261,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 167,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [647],
    "outputIds": [1262, 1263],
    "primaryOutputId": 1262,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "7b8f1c66d0b6f1939fc5243e1c3947f66524efc392bc56f5636535946bad0f65",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [648],
    "outputIds": [1264, 1265, 1266],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1264,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "07bade0de61673578184594c6a737b014511691be73275d4e3d222712caf7af2",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1267],
    "primaryOutputId": 1267,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1268],
    "primaryOutputId": 1268,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 168,
    "actionKey": "5dc6990b7a754afa52e892e6057118a6df143d102ec5ede3ff78cfa504460a9e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [650],
    "outputIds": [1269],
    "primaryOutputId": 1269,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "a81fdd97af7790fd41e3bc5bc78046d10f40c2323fb18a7587b949a3e646e201",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1270],
    "primaryOutputId": 1270,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "e8ecaf70083af770ea03ce505a13cdbca25578a19ffac93a9a342035ea68d73d",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [651],
    "outputIds": [1271],
    "primaryOutputId": 1271,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [652],
    "outputIds": [1272],
    "primaryOutputId": 1272,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "1dc7444bb8663152a93cb5481dc7217dbe87d79886b7834da1dfeb1468464bd2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [655],
    "outputIds": [1273],
    "primaryOutputId": 1273,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1274],
    "primaryOutputId": 1274,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 169,
    "actionKey": "1d7793fb21735e85a9a0d6728eb21ac955e787bcaa1691d8f8e143d2338c208f",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [657],
    "outputIds": [1278],
    "primaryOutputId": 1278,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 169,
    "actionKey": "c5b7cb749db5663bc816fb66f5f90f00c6d2bd670240ca999f210f7be492336c",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [659],
    "outputIds": [484],
    "primaryOutputId": 484,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 170,
    "actionKey": "6732505adf0d7303ff574dc0f42b6b9eba4b8f898a32c812c05481c76ca65723",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [661],
    "outputIds": [418, 419],
    "primaryOutputId": 418,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "f2b6ce8eaf328856f73c8f3f9782d9663243a2e836fd3085f318f2623e46099d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1285],
    "primaryOutputId": 1285,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "115c3304b29b9217204e0084e5e5a7c692e2acbd9585815337e49345b54541da",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [667],
    "outputIds": [1286],
    "primaryOutputId": 1286,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [668],
    "outputIds": [1288],
    "primaryOutputId": 1288,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [669],
    "outputIds": [1289, 1290],
    "primaryOutputId": 1289,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 171,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1287],
    "primaryOutputId": 1287,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1291],
    "primaryOutputId": 1291,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "6bc9c055bf21a87845b2b7e47829e47126766145c395a7ce661006e9bbb67e49",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1292],
    "primaryOutputId": 1292,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "fb79683068e1fec0fcf6c997114f630e39ad2983e0ed436442b93004d62b57f0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [670],
    "outputIds": [1293],
    "primaryOutputId": 1293,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [671],
    "outputIds": [1294],
    "primaryOutputId": 1294,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 172,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [672],
    "outputIds": [1295, 1296],
    "primaryOutputId": 1295,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "faf047ace4d036e9bfd39c030cf20c92c3a6b8fc1a82f577fe62e6eed9335f4e",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1297],
    "primaryOutputId": 1297,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "14613faccc6720889a6c0f298d91e4a63ee09413dcf3290468956815ac47575f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1298],
    "primaryOutputId": 1298,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "e64bad2591dfe466ac18a147c0c5a14ab1cd6363657874c5b58201109ef49c0b",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [673],
    "outputIds": [1299],
    "primaryOutputId": 1299,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [674],
    "outputIds": [1301],
    "primaryOutputId": 1301,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 173,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [677],
    "outputIds": [1302, 1303],
    "primaryOutputId": 1302,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "90b8381f9050cfea794d8b6401c7dfa9648d4821cf6a950eb323ef67a05d34fe",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [678],
    "outputIds": [1304, 1305, 1306],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1304,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "d7450bb2cc15c91b35afe85025c40c8f89295abb1d52704421f74eea1013c7d3",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1307],
    "primaryOutputId": 1307,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1308],
    "primaryOutputId": 1308,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 174,
    "actionKey": "1dd7e9c0771f6bffaa7846c162f53ac977cc7ddd00c7c27806c0c1f451110c80",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [680],
    "outputIds": [1309],
    "primaryOutputId": 1309,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "b3493ad3ab0ec5fb7b7d59d1743d72ef9aba1b1e98d2d0acc9f9eceb1361c9b5",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1310],
    "primaryOutputId": 1310,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "17e06779b49cb5567814fa64b899882af122747135319929aa6fb995316ddad6",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [681],
    "outputIds": [1311],
    "primaryOutputId": 1311,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [682],
    "outputIds": [1312],
    "primaryOutputId": 1312,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "11384b06755a99d1c2b6ab7bdad60eae1544975a563106f60b799fe33a8fc346",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [685],
    "outputIds": [1313],
    "primaryOutputId": 1313,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1314],
    "primaryOutputId": 1314,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1315],
    "primaryOutputId": 1315,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "8aba8eeef4bd4d20d1c6a8719715e3a5dba6dce4028faaa06209fc0dbfd68cac",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1316],
    "primaryOutputId": 1316,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "42282dcf40ed2b643a262dec78df4a95248ed2139275bae3def9ecd46f4b5fdc",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [687],
    "outputIds": [1317],
    "primaryOutputId": 1317,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [688],
    "outputIds": [1318],
    "primaryOutputId": 1318,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 175,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [689],
    "outputIds": [1319, 1320],
    "primaryOutputId": 1319,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "e62498abc8235b6b69f6e8542bc1f9af406e034cfba1f5f25027a2ec9cc7cde5",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [690],
    "outputIds": [1321, 1322, 1323],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1321,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "3957c9864c9cc9e411a38e108a17090ca89a3e26f2be5505843aa7f8e3e7e75c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1324],
    "primaryOutputId": 1324,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1325],
    "primaryOutputId": 1325,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 176,
    "actionKey": "1c1cce93e20d140da2523a6a3d9ff09bd09db1adf7cd6d3d08a040d68309f965",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [692],
    "outputIds": [1326],
    "primaryOutputId": 1326,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "6f5e3c9fc0b41cf5813aa72b25811bdc791a9f86c03880569895931fa522fc69",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1327],
    "primaryOutputId": 1327,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "1a5acda3760d811cf7ecf5afd5be1c990553642804398f90bd34bdd60504d8af",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [693],
    "outputIds": [1328],
    "primaryOutputId": 1328,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [694],
    "outputIds": [1329],
    "primaryOutputId": 1329,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "cfd2e1ad71f86bfd724ad01be0a9e703f6a21ae04d94444a3f4599097f5271f5",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [697],
    "outputIds": [1330],
    "primaryOutputId": 1330,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1331],
    "primaryOutputId": 1331,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [699],
    "outputIds": [1333],
    "primaryOutputId": 1333,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "54fea3c2898988de5719c7b0ded954acf278537a8727cab90637e4ede3dfb0a7",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [700],
    "outputIds": [1335, 1336],
    "discoversInputs": true,
    "primaryOutputId": 1335,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "988bda13aff0f7afadcfd059ad3f0085f0fc10f37b24cda8f6ef62b2f3e88f5b",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1337],
    "primaryOutputId": 1337,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "25d719a9a5608821f7f33e5f90b289d9c982ceb76e2648857dd81fce8cb3aec0",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [702],
    "outputIds": [1202],
    "primaryOutputId": 1202,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "2a8736217f7a3ce8b61e830592d4143525286afa1092225687f1ee0f93cd0965",
    "mnemonic": "CcStrip",
    "configurationId": 1,
    "inputDepSetIds": [704],
    "outputIds": [1339],
    "primaryOutputId": 1339,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1340],
    "primaryOutputId": 1340,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "f2159e24fcd2677ac460a512e3dbc2779b00298881a48027b6ad6f2af9711694",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1341],
    "primaryOutputId": 1341,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "a8af1d55c8d103a0fa40dea991a6120064772b4cfddca022cba69058b3023f15",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [705],
    "outputIds": [1342],
    "primaryOutputId": 1342,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 177,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [706],
    "outputIds": [1343],
    "primaryOutputId": 1343,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "7de719d0fd9e03b1a093be7d3571c59dbcd8e463f0f09d62e71f0f3024392a94",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1137],
    "primaryOutputId": 1137,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "d340db94b1b770b26fd45c98f85822901a12f13ef7a008df452c761dccb978f3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1344],
    "primaryOutputId": 1344,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "cff1bc1805227d0f17fa8d5cc48e97906723c16dde95729a9032bf0be70e7315",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [707],
    "outputIds": [1345],
    "primaryOutputId": 1345,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [708],
    "outputIds": [1346],
    "primaryOutputId": 1346,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "88c5cb93e9caab5fd45016bc54b0770af4ac9516a4f18b20fa218588c509f735",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1347],
    "primaryOutputId": 1347,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "104c4df1b40b62b29a6fc031e55b4663365e4a1eb09fe083e81b5cc35d841f65",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1348],
    "primaryOutputId": 1348,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "5bbb65e5aab56999147844f489ec0659b4e078d660809177a293685a11b9cf09",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [709],
    "outputIds": [1349],
    "primaryOutputId": 1349,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [710],
    "outputIds": [1350],
    "primaryOutputId": 1350,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "34dd0d87dc12098348eade94e4eda5d3459bcf72179e910f1d85723a914d8323",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1351],
    "primaryOutputId": 1351,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "d62837d409b128f4a361c9d942301a7b86c0b6ce68eeb1adaba6ccf0e2a2162b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1352],
    "primaryOutputId": 1352,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "446f9c28d0c1bf1bccc13944e6282c3b83df4ad0fa7594a60243c3330f285552",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [711],
    "outputIds": [1353],
    "primaryOutputId": 1353,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [712],
    "outputIds": [1355],
    "primaryOutputId": 1355,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 180,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [715],
    "outputIds": [1356, 1357],
    "primaryOutputId": 1356,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "4c0ad3a1283804e689aa2ffae37bbe363f08361d5cd3e1f69cb21513f52f13a7",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1358],
    "primaryOutputId": 1358,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "d0158887b159e4c814bac9f89051959d1ca1719ce5a9d44dd8ae44e433a557bf",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1359],
    "primaryOutputId": 1359,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "f5f1d0a3f1c09cbdfaf1b96a0753c81e38c7c01eedcbc58de6f24e16096865ec",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [716],
    "outputIds": [1360],
    "primaryOutputId": 1360,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [717],
    "outputIds": [1362],
    "primaryOutputId": 1362,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 181,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [720],
    "outputIds": [1363, 1364],
    "primaryOutputId": 1363,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "7b485a6013764185d59e3d989b9488cb9c7f761f19effadd27996d09258d1d27",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [721],
    "outputIds": [1365, 1366, 1367],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1365,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "066368676d2212f74aa6fa8fe04f7a296b317a8eca19fea2cb23bbfff2e318b9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1368],
    "primaryOutputId": 1368,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1369],
    "primaryOutputId": 1369,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 182,
    "actionKey": "9a94634a3514233195fe31ac04f348f82f9b2e898fe98a3dc85db1ab8b7bbc1c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [723],
    "outputIds": [1370],
    "primaryOutputId": 1370,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "0064165e69c84cbc3266a89ed012de9b8c6b09faf21cbf86861f8637e92e9a7e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1371],
    "primaryOutputId": 1371,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "df13730585e7030c342c6aaebc2254087d8c4aefeaa76bc86d8f888025be1735",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [724],
    "outputIds": [1372],
    "primaryOutputId": 1372,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [725],
    "outputIds": [1373],
    "primaryOutputId": 1373,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "2a2178c984bc5dcf6e6eb2d691a757c10c79ba0ee658c654d79c67b3b1e0ae62",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [730],
    "outputIds": [1374],
    "primaryOutputId": 1374,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1375],
    "primaryOutputId": 1375,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 183,
    "actionKey": "92503dd800ac44af38fec4e54fbc312824e8f413b6eb85c5030acb5a8bc3d53e",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [732],
    "outputIds": [1388, 1389, 1390, 1391],
    "primaryOutputId": 1388,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1392],
    "primaryOutputId": 1392,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "da90293b22d5134b7326be25b6195100f4c3ea0205efec5ffd78a26e7652139c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1393],
    "primaryOutputId": 1393,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "5525a4ea807fe24237487d395ddba79fbbcba14aabb58fe692ef05b61cfb2c0c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [742],
    "outputIds": [1394],
    "primaryOutputId": 1394,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [743],
    "outputIds": [1395],
    "primaryOutputId": 1395,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 184,
    "actionKey": "d2260fc9d3fd435c7b4435a4144abd0666654573f9c5c3782dfbab57fc50060f",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [744],
    "outputIds": [1396, 1397],
    "primaryOutputId": 1396,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "530d6d61665345e4139cf893f9e7be14df279081e2403a79ad61b328eac5d9f8",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [745],
    "outputIds": [1398, 1399, 1400],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1398,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "609ad7a8df901cd7e0a715e9f44e354266d8178acf5bb47200ae33134d0a190f",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1401],
    "primaryOutputId": 1401,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1402],
    "primaryOutputId": 1402,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 185,
    "actionKey": "411ee46a818d3f928099c0f4161f74ebd94eddeabff9960e65208721b36c499d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [747],
    "outputIds": [1403],
    "primaryOutputId": 1403,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "b61a0da4d858bec980414d8d32d6d1c8b6b54d1d42c1cacf651416013e372a99",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1404],
    "primaryOutputId": 1404,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "e8b4389cec8c84ad90305da75d09ace8bd970c73df3058eaebca9fcdabc29a26",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [748],
    "outputIds": [1405],
    "primaryOutputId": 1405,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [749],
    "outputIds": [1406],
    "primaryOutputId": 1406,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "83743c21360a3e4f08f6ee790355319ec499782feb4f62cae1e9673bbb868189",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [752],
    "outputIds": [1407],
    "primaryOutputId": 1407,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1408],
    "primaryOutputId": 1408,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "2ccb3712ebb2005781cbaa2e6ff73882b87c1c0c072a30644c67095818ede053",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1409],
    "primaryOutputId": 1409,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "f1373dc12ba4a31f523474d92d578e1bc20d02b4fa46522b9a859ebfc921f3a7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1410],
    "primaryOutputId": 1410,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "e390c5b757cf1d2e6bc2b6eb84d804c2aba704bb26d88a0d4e0fce72ddccb3c0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [754],
    "outputIds": [1411],
    "primaryOutputId": 1411,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [755],
    "outputIds": [1413],
    "primaryOutputId": 1413,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 186,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [758],
    "outputIds": [1414, 1415],
    "primaryOutputId": 1414,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 187,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [417],
    "outputIds": [1416],
    "primaryOutputId": 1416,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 187,
    "actionKey": "17122adbe73082bb2d629f129620bde0fc493197f8c4b7cfc44501a4ae8e5bd6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1417],
    "primaryOutputId": 1417,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 187,
    "actionKey": "9b3c9a63f905f9cf31cd449162145f8e1fa86bb4fd10db18537e9703b5f57224",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [759],
    "outputIds": [1418],
    "primaryOutputId": 1418,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 187,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [760],
    "outputIds": [1419],
    "primaryOutputId": 1419,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1420],
    "primaryOutputId": 1420,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "b0f3d4033a3bc2d28d2796da80a11972e7283240aab50e4c8f5f49e1671c99e3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1421],
    "primaryOutputId": 1421,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "e29748962b34d8b931d2bdee1cb7c18ac016bddc935647ff66365ef654b75328",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [763],
    "outputIds": [1422],
    "primaryOutputId": 1422,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [764],
    "outputIds": [1423],
    "primaryOutputId": 1423,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 188,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [765],
    "outputIds": [1424, 1425],
    "primaryOutputId": 1424,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1426],
    "primaryOutputId": 1426,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "0dd0d45c90ffec623b449aa6ce01d40a9570bfb317444704422ec41260fb4723",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1427],
    "primaryOutputId": 1427,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "ae89a48b560ea75ef14433114f9a23ced8096205ce0909f659fde3a6f6b0a94f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [766],
    "outputIds": [1428],
    "primaryOutputId": 1428,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [767],
    "outputIds": [1429],
    "primaryOutputId": 1429,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 189,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [768],
    "outputIds": [1430, 1431],
    "primaryOutputId": 1430,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 190,
    "actionKey": "98cb6dbe57bb2b95ab93708850d6ddebb13fc756f8be96445ed21f38e03724e2",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [582],
    "primaryOutputId": 582,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "fffd9a942703a528de7fd512993b8d50c7c2efa8e27288ab658f58dab978e135",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1432],
    "primaryOutputId": 1432,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "9ed04569cb08c5cd8997ef6b5d2e9100dec65a917864d5a1066889dc542f01f5",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [769],
    "outputIds": [1433],
    "primaryOutputId": 1433,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [770],
    "outputIds": [1435],
    "primaryOutputId": 1435,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [771],
    "outputIds": [1436, 1437],
    "primaryOutputId": 1436,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 191,
    "actionKey": "e6019db464be6b1c48934c343150427c2222afaa5fd8dd50cff339d3e170186d",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1434],
    "primaryOutputId": 1434,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [772],
    "outputIds": [1439],
    "primaryOutputId": 1439,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "0aafaef4e97685b4eefc56a67eeb2a2703b7a71bf932d9bb24dad693f4af7d4a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1440],
    "primaryOutputId": 1440,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "d96e5cb37c7ad36036fb9a2efb86a962e80c5f6dcc3e3f5cee4486eb9b8f1e7a",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [773],
    "outputIds": [1441],
    "primaryOutputId": 1441,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [774],
    "outputIds": [1442],
    "primaryOutputId": 1442,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 192,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [777],
    "outputIds": [1443, 1444],
    "primaryOutputId": 1443,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1445],
    "primaryOutputId": 1445,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "09c139369fd441608fdcf1c8c9461d5fb5cca5ff401c1d1a671000af9d44060d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1446],
    "primaryOutputId": 1446,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "6c3cc45b5e676e769ed45b9cc129728957d69a4f3a19d17797cf3556308848d7",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [778],
    "outputIds": [1447],
    "primaryOutputId": 1447,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [779],
    "outputIds": [1448],
    "primaryOutputId": 1448,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 193,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [780],
    "outputIds": [1449, 1450],
    "primaryOutputId": 1449,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "640b2f3d2aa1fa0914c9d919395de3eb32d2ab033afb2366a3d1cef371177543",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1451],
    "primaryOutputId": 1451,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "72275248728d708f901a51c19cb95c57f0bd199aa5a5a2ebb0ed25c423735d6d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [781],
    "outputIds": [1452],
    "primaryOutputId": 1452,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [782],
    "outputIds": [1454],
    "primaryOutputId": 1454,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [783],
    "outputIds": [1455, 1456],
    "primaryOutputId": 1455,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 194,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1453],
    "primaryOutputId": 1453,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [784],
    "outputIds": [1458],
    "primaryOutputId": 1458,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "fc1da8d60a30d1c8955e76b9825d0e3316e8a551d664e1408c0c050974e755d3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1459],
    "primaryOutputId": 1459,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "a2417dd78a9e6b3a3081c2a1ba964392953fb5b7f99130eb26521e1e6b982659",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [785],
    "outputIds": [1460],
    "primaryOutputId": 1460,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [786],
    "outputIds": [1461],
    "primaryOutputId": 1461,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 195,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [791],
    "outputIds": [1462, 1463],
    "primaryOutputId": 1462,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1464],
    "primaryOutputId": 1464,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "8eb8e816e4b591c07ced4864b6fae533995b1c0fd71013b7d5dd3cef3cb25651",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1465],
    "primaryOutputId": 1465,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "afae92e14999ee4e10f1c3e25e476ae3e81e9475ea95fd8df85113e0a9fe6cfb",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [792],
    "outputIds": [1466],
    "primaryOutputId": 1466,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [793],
    "outputIds": [1467],
    "primaryOutputId": 1467,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 196,
    "actionKey": "fa0fe1c620805feca48f4d77b9d6b555499d51872cd3536ec4df20c3ff0c99d8",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [794],
    "outputIds": [1468, 1469],
    "primaryOutputId": 1468,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 197,
    "actionKey": "077cd7209a4295e5652c8bac4bb541c253a23304172dd93bfe24b20bb4e31d9d",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [478],
    "primaryOutputId": 478,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 2,
    "inputDepSetIds": [795],
    "outputIds": [1471],
    "primaryOutputId": 1471,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "5bd478bd7fe31898087727e15dd903aabe3360eeb4fc6a22e26becb5d1053f2a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1472],
    "primaryOutputId": 1472,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "e281c377df6dd929036ee2f5ba8bf9b4f09e72484b253cc10dc04e1e84187bf6",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [796],
    "outputIds": [1473],
    "primaryOutputId": 1473,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [797],
    "outputIds": [1474],
    "primaryOutputId": 1474,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 198,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [800],
    "outputIds": [1475, 1476],
    "primaryOutputId": 1475,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1477],
    "primaryOutputId": 1477,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "44da26df2a59cc390d3b404294c6c941c89eceade65746e0974f0289c253326d",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1478],
    "primaryOutputId": 1478,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "60e0a577afbf66470798ecf9d3a5b67b0b47116b8fcfede97717111aa69dc2d9",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [801],
    "outputIds": [1479],
    "primaryOutputId": 1479,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [802],
    "outputIds": [1480],
    "primaryOutputId": 1480,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 199,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [803],
    "outputIds": [1481, 1482],
    "primaryOutputId": 1481,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "58cc9f9f706df47066df26fb727e50bafc540228e4e5fc35bcc329191601830b",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [804],
    "outputIds": [1483, 1484, 1485],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1483,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "0d257de99c566a29cc5616b102fbaae218164462179943844dfa55def0b0080e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1486],
    "primaryOutputId": 1486,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1487],
    "primaryOutputId": 1487,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 200,
    "actionKey": "679e6503595217e99e10342e453305659ca13a0addfc9772805e0684f4a6c3a7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [806],
    "outputIds": [1488],
    "primaryOutputId": 1488,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "241d895e30672809ee54413606b63dc19c18e37c9e84f1c93810cb325e40214b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1489],
    "primaryOutputId": 1489,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "852c03a1a429412927e0993894d140f561310f3a9a1399c60d0b2451af683d97",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [807],
    "outputIds": [1490],
    "primaryOutputId": 1490,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [808],
    "outputIds": [1491],
    "primaryOutputId": 1491,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "d6e766f23e36edd57f0861cb95095f170b1d6e5fecfe4f91c2670af061a804f7",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [813],
    "outputIds": [1492],
    "primaryOutputId": 1492,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1493],
    "primaryOutputId": 1493,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "93cc8f242bff66f03b8f446a458e40f43ebc009321de8ddb7ee87a6c0e866fa3",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1494],
    "primaryOutputId": 1494,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "78d0de074105aa49ddd05ac86c442680d3b89078a87f76b9ae7d1817279c17f4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1495],
    "primaryOutputId": 1495,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "0dfd911398bea67b26e75abc3418af91e61efabd489b8acaa310ccf1cc5d9e7c",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [815],
    "outputIds": [1496],
    "primaryOutputId": 1496,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [816],
    "outputIds": [1498],
    "primaryOutputId": 1498,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 201,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [819],
    "outputIds": [1499, 1500],
    "primaryOutputId": 1499,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [820],
    "outputIds": [1501],
    "primaryOutputId": 1501,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "cf3885afd3ebe43546d71e805606568c952904d0b86190261197de114e177348",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1502],
    "primaryOutputId": 1502,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "256a7d31037bd3d0225f5cfda2066b23789876be7617a6bfd8a1906dc1b60cfa",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [821],
    "outputIds": [1503],
    "primaryOutputId": 1503,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [822],
    "outputIds": [1504],
    "primaryOutputId": 1504,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "bf2c329c0f9fda46c405d2a69c9c366aa6e6f58951e531ce29842b7183d43d4f",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1505],
    "primaryOutputId": 1505,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "fad052dea4f57d3085ae1df177f8f68f0f6cb90efb332aea4327eb8da8df2019",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1506],
    "primaryOutputId": 1506,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "c2ac875340a8d73d8a99c9f526aa88368d497e75a66ffbd2f3db3955b2448270",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [825],
    "outputIds": [1507],
    "primaryOutputId": 1507,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [826],
    "outputIds": [1509],
    "primaryOutputId": 1509,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 203,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [829],
    "outputIds": [1510, 1511],
    "primaryOutputId": 1510,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 204,
    "actionKey": "0084a741ff7ece6a4a6ee281d31f31ff0050863469fc7959852cb4acda423383",
    "mnemonic": "RunBinary",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "ENV_LOCATION",
      "value": "a tests/run_binary/BUILD"
    }, {
      "key": "ENV_LOCATIONS",
      "value": "b\\ tests/run_binary/BUILD tests/run_binary/printargs.cc"
    }, {
      "key": "ENV_COMPLEX",
      "value": "xx/yy \\\"zz"
    }, {
      "key": "ENV_PATH_BASH",
      "value": "$PATH"
    }, {
      "key": "ENV_PATH_CMD",
      "value": "%PATH%"
    }, {
      "key": "OUT",
      "value": "bazel-out/k8-fastbuild/bin/tests/run_binary/run_script.out"
    }],
    "inputDepSetIds": [830],
    "outputIds": [966],
    "primaryOutputId": 966,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [699],
    "outputIds": [1514],
    "primaryOutputId": 1514,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "ed3ddec77b2062d27b9392155e6cb00ec27c2735b48c522b4d7a186667d1e83f",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [834],
    "outputIds": [1515, 1516],
    "discoversInputs": true,
    "primaryOutputId": 1515,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "dbf61c1e4066b7be5ab7aa8b600b786550635890f2b64bbf616dbfeb3822d916",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1517],
    "primaryOutputId": 1517,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "941f373812828a3b0f5f8a4adfe6426116490d7dce2366239cc36b3875965293",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [836],
    "outputIds": [679],
    "primaryOutputId": 679,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "a544ae84ae6dd869fc491c0c303c7ba8d3ffc5e7a343067e6feb188cfd86e6c8",
    "mnemonic": "CcStrip",
    "configurationId": 1,
    "inputDepSetIds": [838],
    "outputIds": [1518],
    "primaryOutputId": 1518,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1519],
    "primaryOutputId": 1519,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "47d16a17f5440177627457386ab0e129e2fbe279c5397380400abf6dfa6ea817",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1520],
    "primaryOutputId": 1520,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "e3ebd5ecfa04ce741946219a9c0e334aa8c749319b802d0e019b51de5434047a",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [839],
    "outputIds": [1521],
    "primaryOutputId": 1521,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 205,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [840],
    "outputIds": [1522],
    "primaryOutputId": 1522,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 206,
    "actionKey": "ed04ea3a9b689e8ff8b59f388618dd8735cb53e1fd006e08c1b02e4d1190fe4f",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [841],
    "outputIds": [1526],
    "primaryOutputId": 1526,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 206,
    "actionKey": "f5a0c4e6402c204c435b0ba0bedf396fb8a7c8418449020abc39a59091d85f76",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [843],
    "outputIds": [449],
    "primaryOutputId": 449,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "5dbd08954a659cb36cd2f2eba25dd7b7704ebbdddf74fc54d70254a0c854d064",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1527],
    "primaryOutputId": 1527,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "1fbb464c6367e4be7f786a94b3c748eddfc43d0897f9ea81c502fe81a0b003a2",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1528],
    "primaryOutputId": 1528,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "c70cddc838f46a569ccb4b0314f86c0967bb110e409a04e13b531e842ae3d9fc",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [845],
    "outputIds": [1529],
    "primaryOutputId": 1529,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [846],
    "outputIds": [1531],
    "primaryOutputId": 1531,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 207,
    "actionKey": "a3ebbdf43609e0fc8baac213041bac6bcbffaa7515536618897b50757d682c60",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [849],
    "outputIds": [1532, 1533],
    "primaryOutputId": 1532,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "e044bac58ec5ce2674bd08715a2a182c2f2d97d717e8b9b92b5d94607ef1dbff",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [850],
    "outputIds": [1534, 1535, 1536],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1534,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "e9dff864fabccad0f4f515f79c819970d4bf4f2d91999dcc35e88a157d78fa5a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1537],
    "primaryOutputId": 1537,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1538],
    "primaryOutputId": 1538,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 208,
    "actionKey": "89b3d90862fa2bf6f71565f4444083ddfbf76310447af9ec0dc851b863329f58",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [852],
    "outputIds": [1539],
    "primaryOutputId": 1539,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "c8597595f04244ae865770cabf48cc0f73ba040b30b1a9e8849cfc4f04dbe21e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1540],
    "primaryOutputId": 1540,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "93c6cd85e42c48ac1ed5bcedba5f37758f8c9ae8ef5217e09c7bd8a065529920",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [853],
    "outputIds": [1541],
    "primaryOutputId": 1541,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [854],
    "outputIds": [1542],
    "primaryOutputId": 1542,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "ec412ac5d6167dc39e68160a183ff5cba6cf1cfea504e7da25e01d9dfb9ba7c7",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [857],
    "outputIds": [1543],
    "primaryOutputId": 1543,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1544],
    "primaryOutputId": 1544,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "aa73d08cbb13e1b6d215a19f48f387ffba16bdbd772399fa28ad8f8ec1397570",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [859],
    "outputIds": [1546, 1547],
    "discoversInputs": true,
    "primaryOutputId": 1546,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "b4e0bcfad121166fce77ed3409adb99d3cbd76aed5efd5e9dd8672d79ec5162b",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1548],
    "primaryOutputId": 1548,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "ff0180353680ae9b71d2a7489f58eff041da03fd219f83340a295db11341be56",
    "mnemonic": "CppArchive",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [860],
    "outputIds": [36],
    "primaryOutputId": 36,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "0e1c6850a914c99d26c91892a874a02d511d10b20892ff75256afe6e70740414",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1549],
    "primaryOutputId": 1549,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "9433b39a96458a2da8f2fa9a3ba505d7489895e162bbc19ed2855035f4244bf2",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [861],
    "outputIds": [37],
    "primaryOutputId": 37,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 209,
    "actionKey": "267cf1d3db1a1f8ec2feaec951509a79a4a56d9e824ac667d282121aa53474de",
    "mnemonic": "SolibSymlink",
    "configurationId": 1,
    "inputDepSetIds": [862],
    "outputIds": [1550],
    "primaryOutputId": 1550,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1551],
    "primaryOutputId": 1551,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "fabe279d2f6abeae94b0f956aacfdececdda1c4ee01be5a4494d237ffc95e28a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1552],
    "primaryOutputId": 1552,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "26744b3e70bd5b08f6256adba43b69dc42ded0cee7b5580a9c35bc02f8b45d4f",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [863],
    "outputIds": [1553],
    "primaryOutputId": 1553,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [864],
    "outputIds": [1554],
    "primaryOutputId": 1554,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 210,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [865],
    "outputIds": [1555, 1556],
    "primaryOutputId": 1555,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 211,
    "actionKey": "5be386bcde7d28a9b8584aca295f24b7ffdc3ec15cd6f8d0d8ae70ef02f519a0",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [866],
    "outputIds": [1560],
    "primaryOutputId": 1560,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 211,
    "actionKey": "c5ccb1d9d64d7c689932dfa0960aa94c545b1f183550851f26712106fba0f099",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [868],
    "outputIds": [489],
    "primaryOutputId": 489,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 212,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 1,
    "inputDepSetIds": [378],
    "outputIds": [1561],
    "primaryOutputId": 1561,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 212,
    "actionKey": "099d9f4d9fec443a0a004f3967a3fe3f9107297ee77e357ff8d623f7f8797bec",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1562],
    "primaryOutputId": 1562,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 212,
    "actionKey": "29ccdf4134a7374ba731596f962127d9bc0b566eebd372fe1910ee4316d0ea1e",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [870],
    "outputIds": [1563],
    "primaryOutputId": 1563,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 212,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [871],
    "outputIds": [1564],
    "primaryOutputId": 1564,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "9eefb13b9ad43aafe6aad1d23cd47b22eb26bf81129bbf28ce604e3c7b16f21b",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1565],
    "primaryOutputId": 1565,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "b03767a8dc649652b991eb45b9ceaa7a906517bd41dc0246cb918248be3f418e",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [874],
    "outputIds": [1566],
    "primaryOutputId": 1566,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [875],
    "outputIds": [1568],
    "primaryOutputId": 1568,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [876],
    "outputIds": [1569, 1570],
    "primaryOutputId": 1569,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 213,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1567],
    "primaryOutputId": 1567,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 214,
    "actionKey": "c36bc10e4a1fb09d628e3247e757b6493b47d54a6be3e393d2da4fac079cc8d4",
    "mnemonic": "EmptyDirectory",
    "configurationId": 1,
    "outputIds": [468],
    "executionInfo": [{
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 468,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1571],
    "primaryOutputId": 1571,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "021e2950a26217d62efdcb1f80f86ba3006bf1c7c001c73d6e327cf7e5f30b72",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1572],
    "primaryOutputId": 1572,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "28848f6f1bb01cdcd1f1506eb8265231b1a703f949610a43442f115fb9b92b6d",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [877],
    "outputIds": [1573],
    "primaryOutputId": 1573,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [878],
    "outputIds": [1574],
    "primaryOutputId": 1574,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 215,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [879],
    "outputIds": [1575, 1576],
    "primaryOutputId": 1575,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 216,
    "actionKey": "90b0c7a2a0ad3de1b521d9866fdd2d153b514db9d7438622db9fe9eb8505ba8a",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [880],
    "outputIds": [1580],
    "primaryOutputId": 1580,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 216,
    "actionKey": "b93ee4e6c4a9a61dd639eac006b6d75f14a8e0667c17b7e7f40da0b33af459f2",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [882],
    "outputIds": [380],
    "primaryOutputId": 380,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 217,
    "actionKey": "3ec6c5ff90bd7724f442d1cb38e2aadc77e0fcfdd60c821a3fdc6212e2802291",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [884],
    "outputIds": [1584],
    "primaryOutputId": 1584,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 217,
    "actionKey": "e208e1bd89c837c012c5e05ce0c79ed35cd4a30ee74b53a0c3b4070863fd2eb6",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [886],
    "outputIds": [487],
    "primaryOutputId": 487,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "a7f69e421a90fd455f248cce508543933259dcdb6732a6dd9d56e71b530411f3",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [888],
    "outputIds": [1585, 1586, 1587],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1585,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "4465b51bf289d4f2df34d6c93d242811709d3244d627adfc0955cae4570f8514",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1588],
    "primaryOutputId": 1588,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1589],
    "primaryOutputId": 1589,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 218,
    "actionKey": "e5a8247521aa4a17a3299deea6f92d10c0bb4d2b27169b2e1c84a215c3a764a4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [890],
    "outputIds": [1590],
    "primaryOutputId": 1590,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "3b129ca906ccbcef6d2222a4ad97283524026c59bd634110f859671f9c6835f8",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1591],
    "primaryOutputId": 1591,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "1a39b812aeae3f65185fe9bb6fdc308f93fc364ecb802db6225ec01d44918e67",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [891],
    "outputIds": [1592],
    "primaryOutputId": 1592,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [892],
    "outputIds": [1593],
    "primaryOutputId": 1593,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "f0a55fd0112b131b0751338348ba2e92fe94dce2bb645a3597001babb4abf941",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [895],
    "outputIds": [1594],
    "primaryOutputId": 1594,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1595],
    "primaryOutputId": 1595,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "5b84179b68cc5219b4e55b326dedbac5b10f25cd84ee03c7022b10bb71b16168",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1596],
    "primaryOutputId": 1596,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "b2ede1ee4c00fd113f90b0985ebc2df11315b347987bec4855aec7a2be704ceb",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [897],
    "outputIds": [1597],
    "primaryOutputId": 1597,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [898],
    "outputIds": [1599],
    "primaryOutputId": 1599,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [899],
    "outputIds": [1600, 1601],
    "primaryOutputId": 1600,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 219,
    "actionKey": "5f8675aee40373bb9b66c60e2dbf9588401399bffa3bf81051643d7d4dc192a2",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1598],
    "primaryOutputId": 1598,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 220,
    "actionKey": "9997f7f3acdc2a21e68933f63b6d9d8eba3549f87a255c910cc8e54d4e9816c1",
    "mnemonic": "Stardoc",
    "configurationId": 1,
    "inputDepSetIds": [900],
    "outputIds": [1605],
    "primaryOutputId": 1605,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 220,
    "actionKey": "5b5576e877bf57c0bc30a4cc95e2f83dbf9b03e31759bc626860f60e5a790ad3",
    "mnemonic": "Renderer",
    "configurationId": 1,
    "inputDepSetIds": [902],
    "outputIds": [493],
    "primaryOutputId": 493,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "1da2977ac2ffcfae6f87498bce453e181f14588c5770e4f54e3e936ab7f1b938",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1606],
    "primaryOutputId": 1606,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "47d5838ea5f61362f766d76060b2726cd07fa5a604bfee78d4bbe37b6ae2f0cc",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1607],
    "primaryOutputId": 1607,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "495543cbb086de052fcababa93b23f51d846a74946a1a3539b43897bc7a4cf29",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [904],
    "outputIds": [1608],
    "primaryOutputId": 1608,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [905],
    "outputIds": [1609],
    "primaryOutputId": 1609,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 221,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [908],
    "outputIds": [1610, 1611],
    "primaryOutputId": 1610,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "01c8341e4c7914b69a137aae5ee6381d33e7cf84d359ceb15afe3c17ff21c0d8",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [909],
    "outputIds": [1612, 1613, 1614],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1612,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "0492c3cc624d5be8654517f6fa558111c207931bde5173cccec80eeeb995853e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1615],
    "primaryOutputId": 1615,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1616],
    "primaryOutputId": 1616,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 222,
    "actionKey": "78ad715aeab127c090c361facf6b3e5bbc48569e9e30729c5f9a444b98d879b7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [911],
    "outputIds": [1617],
    "primaryOutputId": 1617,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "f10418cd3a810a0db46c7485307e135ca452f7b7f0bb81f5631f888331a04063",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1618],
    "primaryOutputId": 1618,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "ffc28ec99fb6a4a6257e6bac60f7304cb2c5ce41fd91eac6cdd0be51df1f8536",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [912],
    "outputIds": [1619],
    "primaryOutputId": 1619,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [913],
    "outputIds": [1620],
    "primaryOutputId": 1620,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "eafcbef18021ed030527d8b34e217b8bec88c414a67870fbbc4128b16179a0b2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [916],
    "outputIds": [1621],
    "primaryOutputId": 1621,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1622],
    "primaryOutputId": 1622,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 223,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1623],
    "primaryOutputId": 1623,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 223,
    "actionKey": "23d22c1a3885ccf963e6f4926d4c3afef215c5fa94c2b7ad50628acd2bc66f19",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1624],
    "primaryOutputId": 1624,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 223,
    "actionKey": "73276add52d32ba3cdf3fa176fa4d8cc2c880fd39b336c90e1ab4da8184b5c07",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [918],
    "outputIds": [1625],
    "primaryOutputId": 1625,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 223,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [919],
    "outputIds": [1626],
    "primaryOutputId": 1626,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 223,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [920],
    "outputIds": [1627, 1628],
    "primaryOutputId": 1627,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 224,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1629],
    "primaryOutputId": 1629,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 224,
    "actionKey": "5d18ac7c024f0f5e2d54128697d86cb1978c018730a44e161ec42354a6181d31",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1630],
    "primaryOutputId": 1630,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 224,
    "actionKey": "0bb69c90ef483bdd8bd9a37938b181ff8ff99aab6bb09e043de78a6c97f521e0",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [921],
    "outputIds": [1631],
    "primaryOutputId": 1631,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 224,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [922],
    "outputIds": [1632],
    "primaryOutputId": 1632,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 224,
    "actionKey": "951cb1aa367ab946f1fa94f1f7954e6d83d05d035f7736979aa90b304ef57852",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [923],
    "outputIds": [1633, 1634],
    "primaryOutputId": 1633,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 225,
    "actionKey": "7b545a954d06a45b3b452fa3473845b5775429fde450d46b1b359b2fc0044a78",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [190],
    "outputIds": [1545],
    "primaryOutputId": 1545,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 226,
    "actionKey": "894c68dc924de9e33ece19d6fb7453f19dd96bff80fbc294c1fa34762dc4b303",
    "mnemonic": "FileWrite",
    "configurationId": 2,
    "outputIds": [1635],
    "primaryOutputId": 1635,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 226,
    "actionKey": "289a1b062cccf2027d3935941512823d9a046b87edf40475b2f49c6ae1b91729",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 2,
    "outputIds": [1636],
    "primaryOutputId": 1636,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 226,
    "actionKey": "612c024d6739f75fd52505c450ade1ab8b61a2bbbedb0db167b0ac5a9b7d15ac",
    "mnemonic": "SymlinkTree",
    "configurationId": 2,
    "inputDepSetIds": [924],
    "outputIds": [1637],
    "primaryOutputId": 1637,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 226,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 2,
    "inputDepSetIds": [925],
    "outputIds": [1638],
    "primaryOutputId": 1638,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 226,
    "actionKey": "9749500cfbb9195856d026859fa88e341dc04681ede6d228d6830e7ef8d12088",
    "mnemonic": "TestRunner",
    "configurationId": 2,
    "inputDepSetIds": [926],
    "outputIds": [1639, 1640],
    "primaryOutputId": 1639,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "7e54560f408cbb34bc98ee7520f509844d95b4f7e360e027b07c45ecd3484645",
    "mnemonic": "Javac",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [927],
    "outputIds": [1641, 1642, 1643],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1641,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "09979c943a4ba13f987f5d0a7a11d1fec1e0d013bca889c209586043d3828aba",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [53],
    "outputIds": [1644],
    "primaryOutputId": 1644,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "58c74f9ef5c7b1450eddafd02e87e964f4b1d6ce14083391af63d217e12af747",
    "mnemonic": "TemplateExpand",
    "configurationId": 1,
    "outputIds": [1645],
    "primaryOutputId": 1645,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/local_jdk/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%"
    }]
  }, {
    "targetId": 227,
    "actionKey": "f75298203709b16e34c830b6cd4e72f3c95c17e1bed2be24626956a28860dcc1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 1,
    "inputDepSetIds": [929],
    "outputIds": [1646],
    "primaryOutputId": 1646,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "0354b1e7a720cb1170167341146eef771e0f65644de0df21bdbb98e38b401a51",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 1,
    "outputIds": [1647],
    "primaryOutputId": 1647,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "d616d24d20adf75bce71501779930b97bc531238d8d0d18d7840e3b5d7c878c3",
    "mnemonic": "SymlinkTree",
    "configurationId": 1,
    "inputDepSetIds": [930],
    "outputIds": [1648],
    "primaryOutputId": 1648,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [931],
    "outputIds": [1649],
    "primaryOutputId": 1649,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "07ef2194ade1bc1b745cd776d172ebd2ed344b74a4c65b23c00cc87a700afe79",
    "mnemonic": "JavaDeployJar",
    "configurationId": 1,
    "inputDepSetIds": [934],
    "outputIds": [1650],
    "primaryOutputId": 1650,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1651],
    "primaryOutputId": 1651,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "7c7cfc2205332ce3da230b878bcb896f81d9ee3a5d60fced135bbbb173f83ec2",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [936],
    "outputIds": [575, 1653, 1654],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 575,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "bd1569ab8fc24ae1db2fc1ecb13671d46d4d2cd44e6c2638935d6b79c6418be7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1655],
    "primaryOutputId": 1655,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [576],
    "primaryOutputId": 576,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 129,
    "actionKey": "abcf140f795407e9f0fee210ce6a4889ab8fc0aeddd1202b8d91b8e4643f44d6",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [938],
    "outputIds": [1656],
    "primaryOutputId": 1656,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "b7eb78ae68ddc0a3695d2c5afd8a97ee7cc8f4eb1c97e781d50f3010a3af95b4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1657],
    "primaryOutputId": 1657,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "4ffb24eb8f0d48bffd62983229075a2cb342005df32bc4851f6796ac10b9017e",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [939],
    "outputIds": [1658],
    "primaryOutputId": 1658,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [940],
    "outputIds": [577],
    "primaryOutputId": 577,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "db1bc7423ca76445610ad1b51f817473cea51d8f830a00bf613c25fd4213b0a4",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [942],
    "outputIds": [1660],
    "primaryOutputId": 1660,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 129,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1661],
    "primaryOutputId": 1661,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "f7eb0c5344408c32461919c51a0f78942ddfa2fae7035e1c247135f02311f817",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [944],
    "outputIds": [663, 1662, 1663],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 663,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "4018f1b009c767faf71edaca74187347da43652a52bb29f4a093bddbdc20392d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1664],
    "primaryOutputId": 1664,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [664],
    "primaryOutputId": 664,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 160,
    "actionKey": "630d7b11e7ab1b84274074584adf6b984a4c71424df14c3d7b815cd429b93f9c",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [946],
    "outputIds": [1665],
    "primaryOutputId": 1665,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "b9b9dfa025af03b0e74410bfe110afdccd828a3f3a16a8d42a0b5a2d01cf70fb",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1666],
    "primaryOutputId": 1666,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "7fc4d4ab824de5838bc80eeed85332e6e8762eb3851a13a13b935fc8c94762bf",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [947],
    "outputIds": [1667],
    "primaryOutputId": 1667,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [948],
    "outputIds": [665],
    "primaryOutputId": 665,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "329094b08fd724dfb3f4c4db077fc8d31ab8f3413241d6531839d9d9f82d9bd5",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [952],
    "outputIds": [1668],
    "primaryOutputId": 1668,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 160,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1669],
    "primaryOutputId": 1669,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "5d1651f680354a351ba30e47b6ea82cc43cc64edf89ed07fa96c0dfb105a863c",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [954],
    "outputIds": [32, 1670, 1671],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 32,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "c71cd15ceca6a8c31cdbc5e06bcd3e4c4a40cf95be9e5b31254397b8c937f2fb",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1672],
    "primaryOutputId": 1672,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "378f21adc714bd8b886267a41e5a55d0f3d79886c76ed3b15e5aa33c13ad2a89",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [33],
    "primaryOutputId": 33,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/renderer_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.renderer.RendererMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 228,
    "actionKey": "7007b80773da21f3f38b44e18a2922468aefd64b9acdd654001c93b98d018194",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [956],
    "outputIds": [1673],
    "primaryOutputId": 1673,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "7116be4ad7fe8d516f801b6b1b7eb833de6a05f86aa6b075c18f6e75efa6fe46",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1674],
    "primaryOutputId": 1674,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "e8c6ab06ea5dc913bdedd2fc3e481d48128eccec0b57f156a828d19d77b2c6c9",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [957],
    "outputIds": [1675],
    "primaryOutputId": 1675,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [958],
    "outputIds": [34],
    "primaryOutputId": 34,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "ca037c885f4e7e0862c1016c998d3d773dfb952075509d378d9b2a14aee5af25",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [960],
    "outputIds": [1677],
    "primaryOutputId": 1677,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 228,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1678],
    "primaryOutputId": 1678,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "0a65dd9fe6674b82c3474d7d7fe95463cd449bc7e7571d5a0e73ba309ec82022",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [962],
    "outputIds": [1581, 1679, 1680],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1581,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "b0ce0646bfc90c90e2ea5a16c85d762a57d2be7d9a7b3421f3136135c95f5a0b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1681],
    "primaryOutputId": 1681,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1582],
    "primaryOutputId": 1582,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 227,
    "actionKey": "2486c942a815fcb3544a1ad6bb24aa3f66fe50cb7191302deb31643bd1c02bea",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [964],
    "outputIds": [1682],
    "primaryOutputId": 1682,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "60560939b978a332d5b4ebdfae593e24f5bf5c4080529c3f423defb1167162b4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1683],
    "primaryOutputId": 1683,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "9527ffcbbc9f1430ad1b85b86ebae99989d356a6533202930c994d9ca1341737",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [965],
    "outputIds": [1684],
    "primaryOutputId": 1684,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [966],
    "outputIds": [1583],
    "primaryOutputId": 1583,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "33f7c78fa0aaa2d66802b6c9e6921b3c071614ad8ff285102c469c3a76c7cd5e",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [968],
    "outputIds": [1685],
    "primaryOutputId": 1685,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 227,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1686],
    "primaryOutputId": 1686,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "5fe9b91361874cdfee5e353cbf9ae554aa6375a98116856a95b7956c5389812f",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [970],
    "outputIds": [1008, 1687, 1688],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1008,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "a42af8a901220b08ccac999f55e84939596bac29835f0bb0a1f0b0a2a5f9494b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1689],
    "primaryOutputId": 1689,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1009],
    "primaryOutputId": 1009,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 138,
    "actionKey": "1db3271fd21f3e6228373a7d8b45dfa56da09d0bf3a3bc6c7d56d80df458e909",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [972],
    "outputIds": [1690],
    "primaryOutputId": 1690,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "b055418149613fa83c8a2d1da1eb3a258afa122433951d08beba4d38bb403b7e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1691],
    "primaryOutputId": 1691,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "fb4ca0ba9515c13eb01cfdb50afdfc9e63c39204e48dbf0d6cea5b25932a2189",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [973],
    "outputIds": [1692],
    "primaryOutputId": 1692,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [974],
    "outputIds": [1010],
    "primaryOutputId": 1010,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "536ac77ad4a18c8f32788aa7a47e52a55c90904732df407a983529e024f5d3fa",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [978],
    "outputIds": [1693],
    "primaryOutputId": 1693,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 138,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1694],
    "primaryOutputId": 1694,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 229,
    "actionKey": "6597350ac992be52d2276173eab4a4588fd2a3c987793221f700022dc60ad3f3",
    "mnemonic": "JavaIjar",
    "configurationId": 1,
    "inputDepSetIds": [980],
    "outputIds": [1696],
    "primaryOutputId": 1696,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [981],
    "outputIds": [1283],
    "primaryOutputId": 1283,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "8fcb9420ebda9cead20f2ad425d13dc5eef56950ab149fb92ae1eeaf7a5efce7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1697],
    "primaryOutputId": 1697,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "66c786e9d50661e267c2192566e472175b9c95a471bae5743d22c6a30f064b1d",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [982],
    "outputIds": [1698],
    "primaryOutputId": 1698,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 143,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [983],
    "outputIds": [1284],
    "primaryOutputId": 1284,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "bec8edd169d6a021906bc789046d7299d9143d12c8f7405ae466967a3bb81c52",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [985],
    "outputIds": [1577, 1699, 1700],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1577,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "d2ce48ba972d18ade2bbaae6e0de0f15edde28aae8c9d5cc69be15b2a3b5caff",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1701],
    "primaryOutputId": 1701,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1578],
    "primaryOutputId": 1578,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 182,
    "actionKey": "4b2ba6855d2646bfcf586679a44077b0b5e64739dfa7b38d5e0b53a7101583df",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [987],
    "outputIds": [1702],
    "primaryOutputId": 1702,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "b90e8bf146d68551c9d9b6f8639772c9710b59cf93bebc8d621091e9af2328fa",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1703],
    "primaryOutputId": 1703,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "6b65d4cda83f77cea6b9c3b30ddf54d9f89bc588b9910cd181454f306c594ac4",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [988],
    "outputIds": [1704],
    "primaryOutputId": 1704,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [989],
    "outputIds": [1579],
    "primaryOutputId": 1579,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "67f6194f8718a1527456adc95f46f39fcac88061ac5bc8dd4d1d1b1d5b8ea053",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [993],
    "outputIds": [1705],
    "primaryOutputId": 1705,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 182,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1706],
    "primaryOutputId": 1706,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "2ce2f56f93633ee172204b5e46018b96e8ae73561f3dbb1218ee97694cae6d1e",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [995],
    "outputIds": [1243, 1707, 1708],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1243,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "4848bd9bc6ab70c3b74968afe90b9cf4a7fd5f0373392b707f99883a9c763815",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1709],
    "primaryOutputId": 1709,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1244],
    "primaryOutputId": 1244,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 185,
    "actionKey": "54839705fc3802bed9328d9b0f3c96dfd2293550e8238cd158fd84872f2cafcd",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [997],
    "outputIds": [1710],
    "primaryOutputId": 1710,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "d08ea5b7e1ed873f5700c83207806c7d19fad0d389926bc9ecb6cd1b3f5247d1",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1711],
    "primaryOutputId": 1711,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "e14d253b9e37be81a97f593e012fe86a31d2590f03b755a85f523050727bffcb",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [998],
    "outputIds": [1712],
    "primaryOutputId": 1712,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [999],
    "outputIds": [1245],
    "primaryOutputId": 1245,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "9d2e31fc18994707df7577c4b859fab4f263d09de6daf814224b533d94f8e8e4",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1001],
    "outputIds": [1713],
    "primaryOutputId": 1713,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 185,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1714],
    "primaryOutputId": 1714,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "011e7c2b164011d33fd91d9f29640c8a8109dffc4e399ff364ddcd99899fc121",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1003],
    "outputIds": [1275, 1715, 1716],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1275,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "86ab786323f8a544e50f6801f4be1f5326cba211760bc2a62d5e51b1ce51a545",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1717],
    "primaryOutputId": 1717,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1276],
    "primaryOutputId": 1276,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 222,
    "actionKey": "f283ac95af4cb9ed4e7b8306aef3b2c08fcd268b040ce97c15b7079478d4b165",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1005],
    "outputIds": [1718],
    "primaryOutputId": 1718,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "bcaf071ad8c6e1c4ac0c5bcc80494ae24a19daa49fba90a7610523c6037f5d76",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1719],
    "primaryOutputId": 1719,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "693c48de717c9a326bdf7005ff641c5918d878be41ceb8e2f5c60db9d9adb208",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1006],
    "outputIds": [1720],
    "primaryOutputId": 1720,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1007],
    "outputIds": [1277],
    "primaryOutputId": 1277,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "46c39150040a7d1a6635d8621b9f41531567566f0eb6f0aa38e62b8ae33cd4f4",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1009],
    "outputIds": [1721],
    "primaryOutputId": 1721,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 222,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1722],
    "primaryOutputId": 1722,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1011],
    "outputIds": [1280],
    "primaryOutputId": 1280,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "0e703d5f5bf93e4fbca9c6334157f6644efd0f1433993033dd7f62391e07580e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1723],
    "primaryOutputId": 1723,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "f4ed5033435afca0d8ad4c83b19fddadfd00a618d21bd0399de832a1a84f38b5",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1012],
    "outputIds": [1724],
    "primaryOutputId": 1724,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 164,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1013],
    "outputIds": [1281],
    "primaryOutputId": 1281,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "37a0c4ba79149dbfedf2391e7411906da8443afa320902d9962ea5002d8988a2",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1015],
    "outputIds": [1557, 1725, 1726],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1557,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "d6c483b5c6258a42e21ddb00b6a1a7fa89657fe1ec24888c4f92cde145037a87",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1727],
    "primaryOutputId": 1727,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1558],
    "primaryOutputId": 1558,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 174,
    "actionKey": "9e4740e6042ed4eff24638259566dfbae83c17aca6b8cee2209ec54c351666c9",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1017],
    "outputIds": [1728],
    "primaryOutputId": 1728,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "361a078a4df7e048839a0400d86d109df5eda6df28763e30a81ee5a46d4c9c25",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1729],
    "primaryOutputId": 1729,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "b7110335a01bcde3726ba9242793210983a3a264157894608aa9cdbd40c8e26b",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1018],
    "outputIds": [1730],
    "primaryOutputId": 1730,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1019],
    "outputIds": [1559],
    "primaryOutputId": 1559,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "128d290c8d029c582ac7899c6c1bcc6d824bf819415c53d677efba2591b8c019",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1021],
    "outputIds": [1731],
    "primaryOutputId": 1731,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 174,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1732],
    "primaryOutputId": 1732,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "501afe3b7533c407ab8c7ba4e990ae86e99acb5b5dc11ba14e09b4ed0ef2a3f9",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1023],
    "outputIds": [1088, 1733, 1734],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1088,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "24da242d095b6c696f6e89e0860fc39515fa6cdc9faf22f5ebf46777dca42f18",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1735],
    "primaryOutputId": 1735,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1089],
    "primaryOutputId": 1089,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 176,
    "actionKey": "2804ee31e30b216019af4b7a7ff08d036f8826b4194382046ca75903e7567eb4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1025],
    "outputIds": [1736],
    "primaryOutputId": 1736,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "d63cd447fcc09f642cd8835000e34769a104a37c72e41e6dabddc9979ca56e8a",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1737],
    "primaryOutputId": 1737,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "b6ad66c351e0d16c2e4869ccbdec31d79c219d6606a0293d3188ca0c6a4bd6d4",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1026],
    "outputIds": [1738],
    "primaryOutputId": 1738,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1027],
    "outputIds": [1090],
    "primaryOutputId": 1090,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "9d7309f6702cc619f5ff8ea3acae1fa7cf2141b7971e2516ae279f159096c3fe",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1029],
    "outputIds": [1739],
    "primaryOutputId": 1739,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 176,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1740],
    "primaryOutputId": 1740,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 1,
    "inputDepSetIds": [1031],
    "outputIds": [1332],
    "primaryOutputId": 1332,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "08aa86c32fc5541b0fba8fa3f64a7b84fc15de54e2af9d7ed2c4bb9b522e2fe5",
    "mnemonic": "CppCompile",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1032],
    "outputIds": [1338, 1743],
    "discoversInputs": true,
    "primaryOutputId": 1338,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "30d76573505aa0aaaed417781fcbe0ce2656ec996608ee42f4ca523dbb874c2d",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1744],
    "primaryOutputId": 1744,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "8191e7f30bd864f9bf42ba56afce77498a4bd648a383da11e428a89e3cda03b2",
    "mnemonic": "CppArchive",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1034],
    "outputIds": [1745],
    "primaryOutputId": 1745,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "0e868d56d290a8c5fd6ad7f7a234dadd72fdac1bef36947ca7a9e1519b6e8ce8",
    "mnemonic": "FileWrite",
    "configurationId": 1,
    "outputIds": [1746],
    "primaryOutputId": 1746,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "6e58ece7252b17fa4d1fe2f667c6a5c8e7aff5e48ae1798fa109f67d0b7d8284",
    "mnemonic": "CppLink",
    "configurationId": 1,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1035],
    "outputIds": [1747],
    "primaryOutputId": 1747,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 230,
    "actionKey": "fa84d8976f798006cc5e0473279f0c6af6e359e4e5445654f5fc1a23a0948753",
    "mnemonic": "SolibSymlink",
    "configurationId": 1,
    "inputDepSetIds": [1036],
    "outputIds": [1748],
    "primaryOutputId": 1748,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "d06cfbc58e52ff6f303327ca310fd519b7dc4389041c446c1996e4cd073b574d",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1037],
    "outputIds": [564, 1749, 1750],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 564,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "e223db20a63dfda1e8652c49716a93d090c0c8735accd4241d759177131f418a",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1751],
    "primaryOutputId": 1751,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [565],
    "primaryOutputId": 565,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 168,
    "actionKey": "b17299bf39ca3c9877227d1412f2d104749c67e7ec1a74941ab400792db6f4d5",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1039],
    "outputIds": [1752],
    "primaryOutputId": 1752,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "2153ff557b7094a567732f91ddc7438338548fa75b97978eb36833c96a784ba8",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1753],
    "primaryOutputId": 1753,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "21f48664abbcc510219c672beab0d95f27ab47fe38ef04dae6d6d7ca28f32781",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1040],
    "outputIds": [1754],
    "primaryOutputId": 1754,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1041],
    "outputIds": [566],
    "primaryOutputId": 566,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "5410bea203f2a8296a4c23c3db62db76c61cda35115c559a38a97fa14f21f98f",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1043],
    "outputIds": [1755],
    "primaryOutputId": 1755,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 168,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1756],
    "primaryOutputId": 1756,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "88c5cb93e9caab5fd45016bc54b0770af4ac9516a4f18b20fa218588c509f735",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1512],
    "primaryOutputId": 1512,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "08bc43226a3fa27e1354fc6d885445410d714731b7a51d3cece5ae656e801f6e",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1757],
    "primaryOutputId": 1757,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "b4216a04dba7af8f8d136a2fcef1e49ed03d67e7f1822792f73d6ba1fbecf6d1",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1045],
    "outputIds": [1758],
    "primaryOutputId": 1758,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 179,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1046],
    "outputIds": [1513],
    "primaryOutputId": 1513,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1047],
    "outputIds": [1380],
    "primaryOutputId": 1380,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "4ba97810b08b0b49cd1265d5f692b98eef674fe9afdfcb0f459224641b3f2e03",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1759],
    "primaryOutputId": 1759,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "1f17456f7516963d06449274e933e5e685425bcc48dc2a32e027129a04f1260b",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1048],
    "outputIds": [1760],
    "primaryOutputId": 1760,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 202,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1049],
    "outputIds": [1381],
    "primaryOutputId": 1381,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "c0ab2b0af36b32be4318a156d7bbe07672f3d86f682cebd2f828b97f7f4b6ad9",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1051],
    "outputIds": [1523, 1761, 1762],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1523,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "e03bffb8864c01efa38efdaa1c6af1537c7ecd7a2ecbe6ffa5a4b3b70d3bd181",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1763],
    "primaryOutputId": 1763,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1524],
    "primaryOutputId": 1524,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 208,
    "actionKey": "9d8cf2f91f7cc5481ebf321ae791a97764305e4444afb53574b85d9efd26f2e1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1053],
    "outputIds": [1764],
    "primaryOutputId": 1764,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "8632da81526e0ee524956e57683fb143ae8bdb0e22a20f690b5a794c78e7d6c0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1765],
    "primaryOutputId": 1765,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "8a41b7ecaf34eca391d9798407bb1b9a76fe67f2e7c6d585bb0c5ff442a6e491",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1054],
    "outputIds": [1766],
    "primaryOutputId": 1766,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1055],
    "outputIds": [1525],
    "primaryOutputId": 1525,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "671e56bbdfb0de758eda3971266160f2d51291692a58bb286c3dd2d9b1d66c9c",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1057],
    "outputIds": [1767],
    "primaryOutputId": 1767,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 208,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1768],
    "primaryOutputId": 1768,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1059],
    "outputIds": [1386],
    "primaryOutputId": 1386,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "b9f3ec5d68a3b819dbc994f48dab0f80c51672e142e5fad8859edac9284559dc",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1769],
    "primaryOutputId": 1769,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "da8c26041e174fdc95cc6796de21d83bc884f9ae69aa702ed7154b709904077e",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1060],
    "outputIds": [1770],
    "primaryOutputId": 1770,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 11,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1061],
    "outputIds": [1387],
    "primaryOutputId": 1387,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1063],
    "outputIds": [1383],
    "primaryOutputId": 1383,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "b86ae63ac011ea4bb94c4f199af0f1ffffd40d14d63f50caf8bca443142e4566",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1771],
    "primaryOutputId": 1771,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "cfadf84f691de821a48194ad25a1573906c63fbe7b1786d25ff6fb35a7c06f53",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1064],
    "outputIds": [1772],
    "primaryOutputId": 1772,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 123,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1065],
    "outputIds": [1384],
    "primaryOutputId": 1384,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "5d47a3504a2ae45fb86a380f33f34b7d418d38e377eba5b16973e2a4246a6f6b",
    "mnemonic": "CppCompile",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1067],
    "outputIds": [1773, 1774],
    "discoversInputs": true,
    "primaryOutputId": 1773,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "250c2170fc74a28b267968eadfcd5cb9991d30e788bafc5be97e200a2a02f199",
    "mnemonic": "CppCompile",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1068],
    "outputIds": [1775, 1776],
    "discoversInputs": true,
    "primaryOutputId": 1775,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "f22f6d35fb56bae35e62074ea2cd8abccf2fdf1fa263509d40d313847a1f3939",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1777],
    "primaryOutputId": 1777,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "8c294d493ace5a7f2d6aab3d08d7140aab5277e2364fefb4bc4b4c8f105ecd72",
    "mnemonic": "CppLink",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "PWD",
      "value": "/proc/self/cwd"
    }],
    "inputDepSetIds": [1069],
    "outputIds": [1050],
    "primaryOutputId": 1050,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "27ddfa31e392a565a4dca7752e20e44f9fb910ebd14b26554fa874fd484c2874",
    "mnemonic": "CcStrip",
    "configurationId": 3,
    "inputDepSetIds": [1071],
    "outputIds": [1778],
    "primaryOutputId": 1778,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1779],
    "primaryOutputId": 1779,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "c58f139c56d4cb438b88c737df3f3167032452ee66f40833943f53fc61a9eb35",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1780],
    "primaryOutputId": 1780,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "b942c8303a7d43f076b0d55768842a116e495552228a0ccba3612bb4e731ba8e",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1072],
    "outputIds": [1781],
    "primaryOutputId": 1781,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 90,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1073],
    "outputIds": [1051],
    "primaryOutputId": 1051,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "90e2890687c315db7d758856bb357feaf63d570403a9218516ebc89ccc47a509",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1074],
    "outputIds": [646, 1782, 1783],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 646,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "0d29e276a2c86cb491cc370e84b07779878c6acf7d28f3da699a5a146958111b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1784],
    "primaryOutputId": 1784,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [647],
    "primaryOutputId": 647,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 200,
    "actionKey": "de20058622da1a870ef7391c5d63ed788c87c4bb024c2718c07314b0fd894307",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1076],
    "outputIds": [1785],
    "primaryOutputId": 1785,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "c4c5d760c66ae14aff7df343637117353caf3d75bc3a11b5c212ee45a70b50c3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1786],
    "primaryOutputId": 1786,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "72c59c1549e336ccbeb469361e475a14961eb646f9ba0383ffebc13dffd93b0d",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1077],
    "outputIds": [1787],
    "primaryOutputId": 1787,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1078],
    "outputIds": [648],
    "primaryOutputId": 648,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "9b1135c801ebe0b814ef59a14d47fb8a929a39e2dedf8d87a4e66d52c48555aa",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1082],
    "outputIds": [1788],
    "primaryOutputId": 1788,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 200,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1789],
    "primaryOutputId": 1789,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1084],
    "outputIds": [1377],
    "primaryOutputId": 1377,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "07ae6c2aa2885bed63cf171fe5482920ea56881c78af234f23925836aa2a65bc",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1790],
    "primaryOutputId": 1790,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "9b9ac52fdb8e741bdfb99027e7ff9b12631037e263f1b3b7d8a5ac3969a31a46",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1085],
    "outputIds": [1791],
    "primaryOutputId": 1791,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 3,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1086],
    "outputIds": [1378],
    "primaryOutputId": 1378,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "8d9491a89b3932c967775802a234aff1686ff95f2e5ea7c81595820353d4e9d6",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1088],
    "outputIds": [336, 1792, 1793],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 336,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "9ef4d35a58528d162bcf0da0807e04a3b972b66d5ec0b2919b1e9162951d34e1",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1794],
    "primaryOutputId": 1794,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [337],
    "primaryOutputId": 337,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 218,
    "actionKey": "6e7a0eef259445ee805c99ce8b73737476575f55c9ddf9779485dd407cc6f946",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1090],
    "outputIds": [1795],
    "primaryOutputId": 1795,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "103212a86a3e5d6729ba3686d48e33c39faa26f701e8aa3cec5a86a9f266bd27",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1796],
    "primaryOutputId": 1796,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "5ed2354d055104d79b814bba5f16dc1f42c0dec72d0dd5cab2b7bb036fb83625",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1091],
    "outputIds": [1797],
    "primaryOutputId": 1797,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1092],
    "outputIds": [338],
    "primaryOutputId": 338,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "20eda893e381d992253432bd98c2db06458ad63791f6886294046b6445d3ac64",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1095],
    "outputIds": [1798],
    "primaryOutputId": 1798,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 218,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1799],
    "primaryOutputId": 1799,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "a6e28703ea23c726833676f5976b2144e06ff267f00e53c5796779a8955be677",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1097],
    "outputIds": [395, 1800, 1801],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 395,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "02f6b229decd0e5909380fed553db4fb7300a6f6e9ca97d6a285b76411af3968",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1802],
    "primaryOutputId": 1802,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [396],
    "primaryOutputId": 396,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 231,
    "actionKey": "07acd17fe741ea5a139c7e53b3a48b56e9a3a4cba4fe5c7dbc22f7091e46f23d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1099],
    "outputIds": [1803],
    "primaryOutputId": 1803,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "461f93015730540428b320622897e3d36e354caeee6a4a22c9a265e3391cead7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1804],
    "primaryOutputId": 1804,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "bcb5e50424c38ea1ffb62dffdd5eaeaafca7cbaaece8524919afcd42a6fb9a4b",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1100],
    "outputIds": [1805],
    "primaryOutputId": 1805,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1101],
    "outputIds": [397],
    "primaryOutputId": 397,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "5a5b7139fde6e03198a187c1feeed2897de8d2d5af2200b822a5db45f086a07f",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1103],
    "outputIds": [1806],
    "primaryOutputId": 1806,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 231,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1807],
    "primaryOutputId": 1807,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "3aef8bff7f47ae96b222163dabf1bff7515f5380e171f9bd45ae18dcdf02a34f",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1105],
    "outputIds": [1186, 1808, 1809],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1186,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "99ed8b792908ce53687ddacf7c8400955baaa06b79fe2abfe9ece193d76325af",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1810],
    "primaryOutputId": 1810,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1187],
    "primaryOutputId": 1187,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 71,
    "actionKey": "838deb91a0a280934f4d57f56a3f27094207638e1afae3d86b302467d82b97d7",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1107],
    "outputIds": [1811],
    "primaryOutputId": 1811,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "9796f7198d4972bd3e172a36da77e3f7c109957d91c965382b2eddf2aa3323d6",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1812],
    "primaryOutputId": 1812,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "8bb1a8fcd41dfe5fffb31ead0acd2f1ae62f148437da3011955cad236e6c5ff4",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1108],
    "outputIds": [1813],
    "primaryOutputId": 1813,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1109],
    "outputIds": [1188],
    "primaryOutputId": 1188,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "01313741750e7fc3dd159914338895ddbf4a983e9c4fedea7f04d97231750fb7",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1112],
    "outputIds": [1814],
    "primaryOutputId": 1814,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 71,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1815],
    "primaryOutputId": 1815,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "162c870d0bac7de458a3c8635edc1244b3729f6d597e6a58273476105ff3c354",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1114],
    "outputIds": [1158, 1816, 1817],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1158,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "e0bffa0d0b6c1031f001c45f444ff32be029f19fc1e87873098e777ed1d2c57d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1818],
    "primaryOutputId": 1818,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1159],
    "primaryOutputId": 1159,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 15,
    "actionKey": "6409da78944bf8d3c12b0290b5499f003f799273e30f8961a6e3c5499466e9c0",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1116],
    "outputIds": [1819],
    "primaryOutputId": 1819,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "9e6ede9763a1df33ee6937514b19a6f1cf1834897122564ff31db888de2dd7c5",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1820],
    "primaryOutputId": 1820,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "ffc73368d7c5fa2974ee9b4da52c65bcb088c899b22f9d24860dd09a8e2a6627",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1117],
    "outputIds": [1821],
    "primaryOutputId": 1821,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1118],
    "outputIds": [1160],
    "primaryOutputId": 1160,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "95e8658d659f13d1a87869e8fe5b77c6d2d44212a7ca83bd395f0744f9582dbe",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1120],
    "outputIds": [1822],
    "primaryOutputId": 1822,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 15,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1823],
    "primaryOutputId": 1823,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "d870869df47230393c0fa481176db6e855e5ee4c17d07ade67e889e13f62c164",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1122],
    "outputIds": [770, 1824, 1825],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 770,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "8eefad3e6df01bd7ac48f4bace0db4b842e277c38de30d9f49389bfe34cce827",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1826],
    "primaryOutputId": 1826,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [771],
    "primaryOutputId": 771,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 22,
    "actionKey": "009b9c0d17e8fb74aa14c9b2ff2aa2f0d0878d3540a91aaf99e7f0abe3efc348",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1124],
    "outputIds": [1827],
    "primaryOutputId": 1827,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "c662a2d3fb7b1e49b393edff904085700e4d810f7d0019d0b3aff285635937e3",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1828],
    "primaryOutputId": 1828,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "509b3830e6a425ff20bfc696f69328330dd961637be667f5e47180d98c13ecdb",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1125],
    "outputIds": [1829],
    "primaryOutputId": 1829,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1126],
    "outputIds": [772],
    "primaryOutputId": 772,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "61ba80c2e5f6e581046513fc68fdfd2a9be67356db82d5ca0eb7793f5bb9ebdc",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1128],
    "outputIds": [1830],
    "primaryOutputId": 1830,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 22,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1831],
    "primaryOutputId": 1831,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "667d1899e5e7bac3a0f6a180b713d3e79eb27280a91fe77c36774affc49f699e",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1130],
    "outputIds": [23, 1832, 1833],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 23,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "061cb21469498f9ebe5010d5feef5ef8a882c3e47c794408c54f367fdb910a40",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1834],
    "primaryOutputId": 1834,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [24],
    "primaryOutputId": 24,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 58,
    "actionKey": "b8a81c3cd1894939fb4030b8b5d4b368c88ec3d8fa8979ce67cf6a5c8eed574e",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1132],
    "outputIds": [1835],
    "primaryOutputId": 1835,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "ce18d53f8fa25f24142ed5f521c07b38f10853c3e7a0b06501632e5092e8a16f",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1836],
    "primaryOutputId": 1836,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "f87513096233664cf2bbd5236545e7c53c89ee31a818cfb1cb3a29ea8f5888ea",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1133],
    "outputIds": [1837],
    "primaryOutputId": 1837,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1134],
    "outputIds": [25],
    "primaryOutputId": 25,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "af9d881d440a3cb2d3c2ba2ef228b2a35d46baa4bc48356711d1fb474c8972b2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1136],
    "outputIds": [1838],
    "primaryOutputId": 1838,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 58,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1839],
    "primaryOutputId": 1839,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "ff50e551683428bb114efde7ce53502f5c819272f1e31dbae2c5e0748a4ea278",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1138],
    "outputIds": [384, 1840, 1841],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 384,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "faa5aeb407f9fb7aee4c7c3e6babe83292aeed1e871231bfd2e846d516078b88",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1842],
    "primaryOutputId": 1842,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [385],
    "primaryOutputId": 385,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 69,
    "actionKey": "90da0526436f83ee4ba9462546db48fe8733fee31394e59eed4d112d3296a06d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1140],
    "outputIds": [1843],
    "primaryOutputId": 1843,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "5e81d36809e78e3d56bdb531bafcab0907116249afae9ede83878314fcd27e78",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1844],
    "primaryOutputId": 1844,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "97e7cf8c5bfc8973e3e3db10e1b8104c319c46c3d7040f6e94e07cd45c09e365",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1141],
    "outputIds": [1845],
    "primaryOutputId": 1845,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1142],
    "outputIds": [386],
    "primaryOutputId": 386,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "8a477fc9912dd49e815bc1f03ec3da247e203bd2d83c2eb4bfe0616590d1087d",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1144],
    "outputIds": [1846],
    "primaryOutputId": 1846,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 69,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1847],
    "primaryOutputId": 1847,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "7150ed1a59e51f390a673e7cc65d7adad7ada9c8a71a2f322994bb7f9451ed91",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1146],
    "outputIds": [774, 1848, 1849],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 774,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "c0db64077f761e533c2d5e4f93ca9e6f98694c1c8ac202dd23c6fb73367aefd4",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1850],
    "primaryOutputId": 1850,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [775],
    "primaryOutputId": 775,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 59,
    "actionKey": "c95463d903a71e2fd27e289b98f07d01ba789fcbfab42fd1571ede6342c768d6",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1148],
    "outputIds": [1851],
    "primaryOutputId": 1851,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "336e60df50fbab15bd3081e1a12ac5a380a4e34baa68a59136314497fb9ba19c",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1852],
    "primaryOutputId": 1852,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "9bb6e7ad6458017ff2ee9419049b5bdb3a758972af9d16b8c737c71d13f83022",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1149],
    "outputIds": [1853],
    "primaryOutputId": 1853,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1150],
    "outputIds": [776],
    "primaryOutputId": 776,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "2fc64c1a07ffa90d31dfcf9f7e18bee443a0c74ed63d17534ba2007330a2f6d2",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1152],
    "outputIds": [1854],
    "primaryOutputId": 1854,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 59,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1855],
    "primaryOutputId": 1855,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "c50efe1e416d66075f397ebd4e434cb2e7ce278115ca22cc8f6f6ab60b19ecb1",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1154],
    "outputIds": [1154, 1856, 1857],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1154,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "57ead00f503e228e11727c46f8078cecca5aaf7bbea9fbae7ca69141d84e3def",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1858],
    "primaryOutputId": 1858,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1155],
    "primaryOutputId": 1155,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 78,
    "actionKey": "fda68c979d7eac0b9992e58d37f280b605f3216b1cdf98964b0b34c7c834578d",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1156],
    "outputIds": [1859],
    "primaryOutputId": 1859,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "bd0a66487e8dc014a6ca0982d4a2eaa41b37c4afaeae1c086f3bf6acb2c35d28",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1860],
    "primaryOutputId": 1860,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "708ff0555c51827e5399253fc5e1e4973d69bdb5375e02cea523e7be292f75f8",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1157],
    "outputIds": [1861],
    "primaryOutputId": 1861,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1158],
    "outputIds": [1156],
    "primaryOutputId": 1156,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "8a86302db5f23047e250afc6244abca2e9e638e5901fba755a4c1f42705b87ec",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1160],
    "outputIds": [1862],
    "primaryOutputId": 1862,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 78,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1863],
    "primaryOutputId": 1863,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "3b7596cad6702a94631ca84fc27e99e058ab003ce9ebe8e54e9ceaeb0d4fa116",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1162],
    "outputIds": [1602, 1864, 1865],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1602,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "c3221a89b34ec6d6c1c05d003197d6d64dd246236b0593f38f3ef312999fa0aa",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1866],
    "primaryOutputId": 1866,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1603],
    "primaryOutputId": 1603,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 76,
    "actionKey": "f71eaacfd390be1ab241ad083271f7229402bea913f290ee314bfbb9e1f1dc1b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1164],
    "outputIds": [1867],
    "primaryOutputId": 1867,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "9613928da314b9a6dc1dee3fd577822b1c399e47490c7a5ae81f926c03f25901",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1868],
    "primaryOutputId": 1868,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "12840ea1ace24b36081a54d4ad08c91e027ffb76f786f01648f182820781f8d2",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1165],
    "outputIds": [1869],
    "primaryOutputId": 1869,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1166],
    "outputIds": [1604],
    "primaryOutputId": 1604,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "295bdda0a1b6c33aee3520dd755acf9fcb7f678c051ccc39084d4bfaf2638fd6",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1168],
    "outputIds": [1870],
    "primaryOutputId": 1870,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 76,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1871],
    "primaryOutputId": 1871,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "d450b8f2a419aed66837c4b78a2c6f7567e83f97f563e579ead49ec6677a1e0a",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1170],
    "outputIds": [359, 1872, 1873],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 359,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "20ad802ee894a4f5df7c608384001b8ec3e4cbb598915710dbfb2e31d5bb9cdf",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1874],
    "primaryOutputId": 1874,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [360],
    "primaryOutputId": 360,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 72,
    "actionKey": "6ef4cda58c659b91f041efced9b33decd58f178296557a6e3152dbc235f9506b",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1172],
    "outputIds": [1875],
    "primaryOutputId": 1875,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "71a0fe56b344d0003b24a8224d135d62c5340f6079344ef5358b5302881fc2e7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1876],
    "primaryOutputId": 1876,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "269865541b0e40deb2df48dc6bf5441bc5d4e65d9c66096f2d52d5793e840d19",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1173],
    "outputIds": [1877],
    "primaryOutputId": 1877,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1174],
    "outputIds": [361],
    "primaryOutputId": 361,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "cc89ea5ea96ce4a91dd8c5d481fdd63dfd893cf0057e19dd00acb725262e796b",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1176],
    "outputIds": [1878],
    "primaryOutputId": 1878,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 72,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1879],
    "primaryOutputId": 1879,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "1fbb718f1a24f1972e7202ab8caddb19ceddec0e6c69fa81a392ea82afceec78",
    "mnemonic": "Javac",
    "configurationId": 3,
    "environmentVariables": [{
      "key": "LC_CTYPE",
      "value": "en_US.UTF-8"
    }],
    "inputDepSetIds": [1178],
    "outputIds": [1064, 1880, 1881],
    "executionInfo": [{
      "key": "supports-workers",
      "value": "1"
    }, {
      "key": "supports-multiplex-workers",
      "value": "1"
    }, {
      "key": "supports-worker-cancellation",
      "value": "1"
    }],
    "primaryOutputId": 1064,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "93b3a7efdcee7d3261646684bc8293ccf94856dea1b62ae2858b61278829ee42",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [53],
    "outputIds": [1882],
    "primaryOutputId": 1882,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "b43734a2a722e627c7dfdfda1148914cf384db1739a488373e87584b69c4dd9c",
    "mnemonic": "TemplateExpand",
    "configurationId": 3,
    "outputIds": [1065],
    "primaryOutputId": 1065,
    "executionPlatform": "@local_config_platform//:host",
    "templateContent": "#!/usr/bin/env bash\n# Copyright 2014 The Bazel Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This script was generated from java_stub_template.txt.  Please\n# don\u0027t edit it directly.\n#\n# If present, these flags should either be at the beginning of the command\n# line, or they should be wrapped in a --wrapper_script_flag\u003dFLAG argument.\n#\n# --debug               Launch the JVM in remote debugging mode listening\n# --debug\u003d\u003cport\u003e        to the specified port or the port set in the\n#                       DEFAULT_JVM_DEBUG_PORT environment variable (e.g.\n#                       \u0027export DEFAULT_JVM_DEBUG_PORT\u003d8000\u0027) or else the\n#                       default port of 5005.  The JVM starts suspended\n#                       unless the DEFAULT_JVM_DEBUG_SUSPEND environment\n#                       variable is set to \u0027n\u0027.\n# --main_advice\u003d\u003cclass\u003e Run an alternate main class with the usual main\n#                       program and arguments appended as arguments.\n# --main_advice_classpath\u003d\u003cclasspath\u003e\n#                       Prepend additional class path entries.\n# --jvm_flag\u003d\u003cflag\u003e     Pass \u003cflag\u003e to the \"java\" command itself.\n#                       \u003cflag\u003e may contain spaces. Can be used multiple times.\n# --jvm_flags\u003d\u003cflags\u003e   Pass space-separated flags to the \"java\" command\n#                       itself. Can be used multiple times.\n# --singlejar           Start the program from the packed-up deployment\n#                       jar rather than from the classpath.\n# --print_javabin       Print the location of java executable binary and exit.\n# --classpath_limit\u003d\u003clength\u003e\n#                       Specify the maximum classpath length. If the classpath\n#                       is shorter, this script passes it to Java as a command\n#                       line flag, otherwise it creates a classpath jar.\n#\n# The remainder of the command line is passed to the program.\n\nset -o posix\n\n# Make it easy to insert \u0027set -x\u0027 or similar commands when debugging problems with this script.\neval \"$JAVA_STUB_DEBUG\"\n\n# Prevent problems where the caller has exported CLASSPATH, causing our\n# computed value to be copied into the environment and double-counted\n# against the argv limit.\nunset CLASSPATH\n\nJVM_FLAGS_CMDLINE\u003d()\n\n# Processes an argument for the wrapper. Returns 0 if the given argument\n# was recognized as an argument for this wrapper, and 1 if it was not.\nfunction process_wrapper_argument() {\n  case \"$1\" in\n    --debug) JVM_DEBUG_PORT\u003d\"${DEFAULT_JVM_DEBUG_PORT:-5005}\" ;;\n    --debug\u003d*) JVM_DEBUG_PORT\u003d\"${1#--debug\u003d}\" ;;\n    --main_advice\u003d*) MAIN_ADVICE\u003d\"${1#--main_advice\u003d}\" ;;\n    --main_advice_classpath\u003d*) MAIN_ADVICE_CLASSPATH\u003d\"${1#--main_advice_classpath\u003d}\" ;;\n    --jvm_flag\u003d*) JVM_FLAGS_CMDLINE+\u003d( \"${1#--jvm_flag\u003d}\" ) ;;\n    --jvm_flags\u003d*) JVM_FLAGS_CMDLINE+\u003d( ${1#--jvm_flags\u003d} ) ;;\n    --singlejar) SINGLEJAR\u003d1 ;;\n    --print_javabin) PRINT_JAVABIN\u003d1 ;;\n    --classpath_limit\u003d*)\n        CLASSPATH_LIMIT\u003d\"${1#--classpath_limit\u003d}\"\n        echo \"$CLASSPATH_LIMIT\" | grep -q \u0027^[0-9]\\+$\u0027 || \\\n          die \"ERROR: $self failed, --classpath_limit is not a number\"\n        ;;\n    *)\n      return 1 ;;\n  esac\n  return 0\n}\n\ndie() {\n  printf \"%s: $1\\n\" \"$0\" \"${@:2}\" \u003e\u00262\n  exit 1\n}\n\n# Windows\nfunction is_windows() {\n  [[ \"${OSTYPE}\" \u003d~ msys* ]] || [[ \"${OSTYPE}\" \u003d~ cygwin* ]]\n}\n\n# macOS\nfunction is_macos() {\n  [[ \"${OSTYPE}\" \u003d~ darwin* ]]\n}\n\nfunction available_utf8_locale() {\n  # Both C.UTF-8 and en_US.UTF-8 do not cause any language-specific effects\n  # when set as LC_CTYPE, but neither is certain to exist on all systems.\n  #\n  # https://github.com/bazelbuild/bazel/pull/17670: Note that the use of \"env\"\n  # is important in these calls. Without \"env\", bash itself seems to pick up\n  # the LC_CTYPE change as soon as the variable is defined and may emit a\n  # warning when the locale files are not present. By using \"env\", bash never\n  # sees the change and the 2\u003e/dev/null redirection does the right thing.\n  if [[ \"$(env LC_CTYPE\u003dC.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"C.UTF-8\"\n  elif [[ \"$(env LC_CTYPE\u003den_US.UTF-8 locale charmap 2\u003e/dev/null)\" \u003d\u003d \"UTF-8\" ]]; then\n    echo \"en_US.UTF-8\"\n  fi\n}\n\n# Parse arguments sequentially until the first unrecognized arg is encountered.\n# Scan the remaining args for --wrapper_script_flag\u003dX options and process them.\nARGS\u003d()\nfor ARG in \"$@\"; do\n  if [[ \"$ARG\" \u003d\u003d --wrapper_script_flag\u003d* ]]; then\n    process_wrapper_argument \"${ARG#--wrapper_script_flag\u003d}\" \\\n      || die \"invalid wrapper argument \u0027%s\u0027\" \"$ARG\"\n  elif [[ \"${#ARGS}\" -gt 0 ]] || ! process_wrapper_argument \"$ARG\"; then\n    ARGS+\u003d( \"$ARG\" )\n  fi\ndone\n\n# Find our runfiles tree.  We need this to construct the classpath\n# (unless --singlejar was passed).\n#\n# Call this program X.  X was generated by a java_binary or java_test rule.\n# X may be invoked in many ways:\n#   1a) directly by a user, with $0 in the output tree\n#   1b) via \u0027bazel run\u0027 (similar to case 1a)\n#   2) directly by a user, with $0 in X\u0027s runfiles tree\n#   3) by another program Y which has a data dependency on X, with $0 in Y\u0027s runfiles tree\n#   4) via \u0027bazel test\u0027\n#   5) by a genrule cmd, with $0 in the output tree\n#   6) case 3 in the context of a genrule\n#\n# For case 1, $0 will be a regular file, and the runfiles tree will be\n# at $0.runfiles.\n# For case 2, $0 will be a symlink to the file seen in case 1.\n# For case 3, we use Y\u0027s runfiles tree, which will be a superset of X\u0027s.\n# For case 4, $JAVA_RUNFILES and $TEST_SRCDIR should already be set.\n# Case 5 is handled like case 1.\n# Case 6 is handled like case 3.\n\n# If we are running on Windows, convert the windows style path\n# to unix style for detecting runfiles path.\nif is_windows; then\n  self\u003d$(cygpath --unix \"$0\")\nelse\n  self\u003d\"$0\"\nfi\n\nif [[ \"$self\" !\u003d /* ]]; then\n  self\u003d\"$PWD/$self\"\nfi\n\nif [[ \"$SINGLEJAR\" !\u003d 1 || \"%needs_runfiles%\" \u003d\u003d 1 ]]; then\n  if [[ -z \"$JAVA_RUNFILES\" ]]; then\n    while true; do\n      if [[ -e \"$self.runfiles\" ]]; then\n        JAVA_RUNFILES\u003d\"$self.runfiles\"\n        break\n      fi\n      if [[ $self \u003d\u003d *.runfiles/* ]]; then\n        JAVA_RUNFILES\u003d\"${self%.runfiles/*}.runfiles\"\n        break\n      fi\n      if [[ ! -L \"$self\" ]]; then\n        break\n      fi\n      readlink\u003d\"$(readlink \"$self\")\"\n      if [[ \"$readlink\" \u003d /* ]]; then\n        self\u003d\"$readlink\"\n      else\n        # resolve relative symlink\n        self\u003d\"${self%/*}/$readlink\"\n      fi\n    done\n    if [[ -n \"$JAVA_RUNFILES\" ]]; then\n      export TEST_SRCDIR\u003d${TEST_SRCDIR:-$JAVA_RUNFILES}\n    elif [[ -f \"${self}_deploy.jar\" \u0026\u0026 \"%needs_runfiles%\" \u003d\u003d 0 ]]; then\n      SINGLEJAR\u003d1;\n    else\n      die \u0027Cannot locate runfiles directory. (Set $JAVA_RUNFILES to inhibit searching.)\u0027\n    fi\n  fi\nfi\n\n# If we are running on Windows, we need a windows style runfiles path for constructing CLASSPATH\nif is_windows; then\n  JAVA_RUNFILES\u003d$(cygpath --windows \"$JAVA_RUNFILES\")\nfi\n\nexport JAVA_RUNFILES\nexport RUNFILES_MANIFEST_FILE\u003d\"${JAVA_RUNFILES}/MANIFEST\"\nexport RUNFILES_MANIFEST_ONLY\u003d%runfiles_manifest_only%\n\nif [ -z \"$RUNFILES_MANIFEST_ONLY\" ]; then\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      echo \"$(dirname $RUNFILES_MANIFEST_FILE)/$1\"\n    fi\n  }\nelse\n  if ! is_macos; then\n    # Read file into my_array\n    oifs\u003d$IFS\n    IFS\u003d$\u0027\\n\u0027\n    my_array\u003d( $(sed -e \u0027s/\\r//g\u0027 \"$RUNFILES_MANIFEST_FILE\") )\n    IFS\u003d$oifs\n\n    # Process each runfile line into a [key,value] entry in runfiles_array\n    # declare -A is not supported on macOS because an old version of bash is used.\n    declare -A runfiles_array\n    for line in \"${my_array[@]}\"\n    do\n      line_split\u003d($line)\n      runfiles_array[${line_split[0]}]\u003d${line_split[@]:1}\n    done\n  fi\n\n  function rlocation() {\n    if [[ \"$1\" \u003d /* ]]; then\n      echo $1\n    else\n      if is_macos; then\n        # Print the rest of line after the first space\n        # First, set the first column to empty and print rest of the line\n        # Second, use a trick of awk to remove leading and trailing spaces.\n        echo $(grep \"^$1 \" $RUNFILES_MANIFEST_FILE | awk \u0027{ $1\u003d\"\"; print }\u0027 | awk \u0027{ $1\u003d$1; print }\u0027)\n      else\n        echo ${runfiles_array[$1]}\n      fi\n    fi\n  }\nfi\n\n# Set JAVABIN to the path to the JVM launcher.\n%javabin%\n\nif [[ \"$PRINT_JAVABIN\" \u003d\u003d 1 || \"%java_start_class%\" \u003d\u003d \"--print_javabin\" ]]; then\n  echo -n \"$JAVABIN\"\n  exit 0\nfi\n\nif [[ \"$SINGLEJAR\" \u003d\u003d 1 ]]; then\n  CLASSPATH\u003d\"${self}_deploy.jar\"\n  # Check for the deploy jar now.  If it doesn\u0027t exist, we can print a\n  # more helpful error message than the JVM.\n  [[ -r \"$CLASSPATH\" ]] \\\n    || die \"Option --singlejar was passed, but %s does not exist.\\n  (You may need to build it explicitly.)\" \"$CLASSPATH\"\nelse\n  # Create the shortest classpath we can, by making it relative if possible.\n  RUNPATH\u003d\"${JAVA_RUNFILES}/%workspace_prefix%\"\n  RUNPATH\u003d\"${RUNPATH#$PWD/}\"\n  CLASSPATH\u003d%classpath%\nfi\n\n# Export the locations which will be used to find the location of the classes from the classpath file.\nexport SELF_LOCATION\u003d\"$self\"\nexport CLASSLOADER_PREFIX_PATH\u003d\"${RUNPATH}\"\n\n# If using Jacoco in offline instrumentation mode, the CLASSPATH contains instrumented files.\n# We need to make the metadata jar with uninstrumented classes available for generating\n# the lcov-compatible coverage report, and we don\u0027t want it on the classpath.\n%set_jacoco_metadata%\n%set_jacoco_main_class%\n%set_jacoco_java_runfiles_root%\nexport JACOCO_IS_JAR_WRAPPED\u003d0\n\nif [[ -n \"$JVM_DEBUG_PORT\" ]]; then\n  JVM_DEBUG_SUSPEND\u003d${DEFAULT_JVM_DEBUG_SUSPEND:-\"y\"}\n  JVM_DEBUG_FLAGS\u003d\"-agentlib:jdwp\u003dtransport\u003ddt_socket,server\u003dy,suspend\u003d${JVM_DEBUG_SUSPEND},address\u003d${JVM_DEBUG_PORT}\"\nfi\n\nif [[ -n \"$MAIN_ADVICE_CLASSPATH\" ]]; then\n  CLASSPATH\u003d\"${MAIN_ADVICE_CLASSPATH}:${CLASSPATH}\"\nfi\n\n# Check if TEST_TMPDIR is available to use for scratch.\nif [[ -n \"$TEST_TMPDIR\" \u0026\u0026 -d \"$TEST_TMPDIR\" ]]; then\n  JVM_FLAGS+\u003d\" -Djava.io.tmpdir\u003d$TEST_TMPDIR\"\nfi\n\nARGS\u003d(\n  ${JVM_DEBUG_FLAGS}\n  ${JVM_FLAGS}\n  %jvm_flags%\n  \"${JVM_FLAGS_CMDLINE[@]}\"\n  ${MAIN_ADVICE}\n  %java_start_class%\n  \"${ARGS[@]}\")\n\n\nfunction create_and_run_classpath_jar() {\n  # Build class path.\n  MANIFEST_CLASSPATH\u003d()\n  if is_windows; then\n    CLASSPATH_SEPARATOR\u003d\";\"\n  else\n    CLASSPATH_SEPARATOR\u003d\":\"\n  fi\n\n  OLDIFS\u003d\"$IFS\"\n  IFS\u003d\"${CLASSPATH_SEPARATOR}\" # Use a custom separator for the loop.\n  current_dir\u003d$(pwd)\n  for path in ${CLASSPATH}; do\n    # Loop through the characters of the path and convert characters that are\n    # not alphanumeric nor -_.~/ to their 2-digit hexadecimal representation\n    if [[ ! $path \u003d~ ^[-_.~/a-zA-Z0-9]*$ ]]; then\n      local i c buff\n      local converted_path\u003d\"\"\n\n      for ((i\u003d0; i\u003c${#path}; i++)); do\n        c\u003d${path:$i:1}\n        case ${c} in\n              [-_.~/a-zA-Z0-9] ) buff\u003d${c} ;;\n              * )               printf -v buff \u0027%%%02x\u0027 \"\u0027$c\u0027\"\n        esac\n        converted_path+\u003d\"${buff}\"\n      done\n      path\u003d${converted_path}\n    fi\n\n    if is_windows; then\n      path\u003d\"file:/${path}\" # e.g. \"file:/C:/temp/foo.jar\"\n    else\n      # If not absolute, qualify the path\n      case \"${path}\" in\n        /*) ;; # Already an absolute path\n        *) path\u003d\"${current_dir}/${path}\";; # Now qualified\n      esac\n      path\u003d\"file:${path}\" # e.g. \"file:/usr/local/foo.jar\"\n    fi\n\n    MANIFEST_CLASSPATH+\u003d(\"${path}\")\n  done\n  IFS\u003d\"$OLDIFS\"\n\n  # Create manifest file\n  MANIFEST_FILE\u003d\"$(mktemp -t XXXXXXXX.jar_manifest)\"\n  (\n    echo \"Manifest-Version: 1.0\"\n\n    CLASSPATH_LINE\u003d\"Class-Path: ${MANIFEST_CLASSPATH[*]}\"\n    CLASSPATH_MANIFEST_LINES\u003d$(sed -E $\u0027s/(.{71})/\\\\1\\\\\\n /g\u0027 \u003c\u003c\u003c \"${CLASSPATH_LINE}\")\n\n    echo \"$CLASSPATH_MANIFEST_LINES\"\n    echo \"Created-By: Bazel\"\n  ) \u003e$MANIFEST_FILE\n\n  # Create classpath JAR file\n  MANIFEST_JAR_FILE\u003d\"$(mktemp -t XXXXXXXX-classpath.jar)\"\n  if is_windows; then\n    MANIFEST_JAR_FILE\u003d\"$(cygpath --windows \"$MANIFEST_JAR_FILE\")\"\n    MANIFEST_FILE\u003d\"$(cygpath --windows \"$MANIFEST_FILE\")\"\n  fi\n  if is_windows; then\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java.exe}/jar.exe}\"\n  else\n    JARBIN\u003d\"${JARBIN:\u003d${JAVABIN%/java}/jar}\"\n  fi\n  $JARBIN cvfm \"$MANIFEST_JAR_FILE\" \"$MANIFEST_FILE\" \u003e/dev/null || \\\n    die \"ERROR: $self failed because $JARBIN failed\"\n\n  # Execute JAVA command\n  $JAVABIN -classpath \"$MANIFEST_JAR_FILE\" \"${ARGS[@]}\"\n  exit_code\u003d$?\n  rm -f \"$MANIFEST_FILE\"\n  rm -f \"$MANIFEST_JAR_FILE\"\n  exit $exit_code\n}\n\n# If the user didn\u0027t specify a --classpath_limit, use the default value.\nif [ -z \"$CLASSPATH_LIMIT\" ]; then\n  # Windows per-arg limit MAX_ARG_STRLEN \u003d\u003d 8k\n  # Linux per-arg limit MAX_ARG_STRLEN \u003d\u003d 128k\n  is_windows \u0026\u0026 CLASSPATH_LIMIT\u003d7000 || CLASSPATH_LIMIT\u003d120000\nfi\n\n# On non-macOS Unix, without any locale variable set, the JVM would use\n# using ASCII rather than UTF-8 as the encoding for file system paths.\nif ! is_macos; then\n  if [ -z ${LC_CTYPE+x} ] \u0026\u0026 [ -z ${LC_ALL+x} ] \u0026\u0026 [ -z ${LANG+x} ]; then\n    UTF8_LOCALE\u003d$(available_utf8_locale)\n    if [[ -n \"$UTF8_LOCALE\" ]]; then\n      export LC_CTYPE\u003d\"$UTF8_LOCALE\"\n    fi\n  fi\nfi\n\nif ((\"${#CLASSPATH}\" \u003e ${CLASSPATH_LIMIT})); then\n  export JACOCO_IS_JAR_WRAPPED\u003d1\n  create_and_run_classpath_jar\nelse\n  exec $JAVABIN -classpath $CLASSPATH \"${ARGS[@]}\"\nfi\n",
    "substitutions": [{
      "key": "%runfiles_manifest_only%"
    }, {
      "key": "%workspace_prefix%",
      "value": "bazel_skylib/"
    }, {
      "key": "%javabin%",
      "value": "JAVABIN\u003d${JAVABIN:-${JAVA_RUNFILES}/remotejdk11_linux/bin/java}"
    }, {
      "key": "%needs_runfiles%",
      "value": "1"
    }, {
      "key": "%classpath%",
      "value": "\"${RUNPATH}../io_bazel_stardoc/stardoc/stardoc_binary.jar\""
    }, {
      "key": "%set_jacoco_metadata%"
    }, {
      "key": "%set_jacoco_main_class%"
    }, {
      "key": "%set_jacoco_java_runfiles_root%"
    }, {
      "key": "%java_start_class%",
      "value": "com.google.devtools.build.skydoc.SkydocMain"
    }, {
      "key": "%jvm_flags%",
      "value": "-XX:ErrorFile\u003d/dev/stderr"
    }]
  }, {
    "targetId": 107,
    "actionKey": "7752b58099d2dad79b50c4e238418da1aff25a0a210f52037d31d9a410e18582",
    "mnemonic": "JavaSourceJar",
    "configurationId": 3,
    "inputDepSetIds": [1180],
    "outputIds": [1883],
    "primaryOutputId": 1883,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "a6a92cb710b806b31fa7d5f35cff7c42483a9c9c2fa59cf80d202cb6f60927a4",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1884],
    "primaryOutputId": 1884,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "7ed70a4bb8ad8061bd67461fbcb3f578e65cfef4cb81a69c2040c2fb67fc7e3d",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1181],
    "outputIds": [1885],
    "primaryOutputId": 1885,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1182],
    "outputIds": [1066],
    "primaryOutputId": 1066,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "4d7c534e32e589d1de967a15ec6d12c2e6462fd1c37ee2027ab27f11bdbdb426",
    "mnemonic": "JavaDeployJar",
    "configurationId": 3,
    "inputDepSetIds": [1185],
    "outputIds": [1886],
    "primaryOutputId": 1886,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 107,
    "actionKey": "5799419ea054d91b42a92218065a74b0646fb9eb9f69f873cd42d0f7b552c628",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1887],
    "primaryOutputId": 1887,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 232,
    "actionKey": "9d777fd57500b016f24289f7bba704fe94c448c9246a81431acdced7ce6fd30c",
    "mnemonic": "Genrule",
    "configurationId": 1,
    "inputDepSetIds": [190],
    "outputIds": [48],
    "primaryOutputId": 48,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 229,
    "actionKey": "2e62aafbefc8325dd4a87ca196bf27c830d4827fe777887f06cf628eeeae325b",
    "mnemonic": "JavaIjar",
    "configurationId": 3,
    "inputDepSetIds": [1187],
    "outputIds": [1888],
    "primaryOutputId": 1888,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 233,
    "actionKey": "a098844915a8e9c4cc2bc600726d301142fb07147e82e270e56ddab6104048d7",
    "mnemonic": "JavaIjar",
    "configurationId": 3,
    "inputDepSetIds": [1188],
    "outputIds": [1889],
    "primaryOutputId": 1889,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [339],
    "outputIds": [1385],
    "primaryOutputId": 1385,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "1b55cc25ab4c90839be75122c2063ecc15678c94614c6878cc5ddceca9d514d7",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1890],
    "primaryOutputId": 1890,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "5d6c43ce9e21f6cf780fdd37dd2f992340c34dcec88b0a1de99b71de7f7e1c51",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1189],
    "outputIds": [1891],
    "primaryOutputId": 1891,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 79,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1190],
    "outputIds": [1892],
    "primaryOutputId": 1892,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "7de719d0fd9e03b1a093be7d3571c59dbcd8e463f0f09d62e71f0f3024392a94",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1282],
    "primaryOutputId": 1282,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "aa3bc5432dd02c5340b6c2b7e590299b748deebd167d46bf983e126f60c0f186",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1893],
    "primaryOutputId": 1893,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "9ab763efd03adbceae8fc3d379a7a36fd390fc5005dc2d2fc9d8cde955feea59",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1191],
    "outputIds": [1894],
    "primaryOutputId": 1894,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 178,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1192],
    "outputIds": [1895],
    "primaryOutputId": 1895,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "c4931b198d8b93c663a9af15cae81d96bfce8ee3e1109548c7cc48f528801e53",
    "mnemonic": "CopyFile",
    "configurationId": 3,
    "inputDepSetIds": [1193],
    "outputIds": [1376],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 1376,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "db99d5407827202611f08b8ddc21c6295d2d6ebc56a387e0eb7a27670db99ca8",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1897],
    "primaryOutputId": 1897,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "bef038b491672da8bda5c2355d1b018ba7be6a3ab899c523c33f90023e47d4a7",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1194],
    "outputIds": [1898],
    "primaryOutputId": 1898,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 56,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1195],
    "outputIds": [1899],
    "primaryOutputId": 1899,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "d7773cd91ffd7932031eb8962471d065e41bfad384f2ed5d8d1925666f92ac3f",
    "mnemonic": "ExecutableSymlink",
    "configurationId": 3,
    "inputDepSetIds": [1193],
    "outputIds": [1379],
    "primaryOutputId": 1379,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "a4809f1e92006513cf049783b2fa15ee42c7ced3af9b2b157d6d871acdbee5e0",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1900],
    "primaryOutputId": 1900,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "75ea69223b8e566b74d854a32e2cd4c8ea0ac7585f16c8ff95f3166c1ae03bee",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1196],
    "outputIds": [1901],
    "primaryOutputId": 1901,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 122,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1197],
    "outputIds": [1902],
    "primaryOutputId": 1902,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "f8461e72be1229cf42d00f091926394854b1e51b31187492e2ffbff8ad71b694",
    "mnemonic": "FileWrite",
    "configurationId": 3,
    "outputIds": [1279],
    "primaryOutputId": 1279,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "c6db81c695f34da5974942f32a3dcbd7933a4aeb06102fcf592dd13200d951b9",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1903],
    "primaryOutputId": 1903,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "b3ca949ac91aaf96fde037d7e444ef9ba84ad9ec6a7d21344fa591b73a0b4646",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1198],
    "outputIds": [1904],
    "primaryOutputId": 1904,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 124,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1199],
    "outputIds": [1905],
    "primaryOutputId": 1905,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "b1fce4f3e5f9d0345384e7126ac9fad86d64a9df2b005e01726eceacdaafae08",
    "mnemonic": "CopyFile",
    "configurationId": 3,
    "inputDepSetIds": [307],
    "outputIds": [1382],
    "executionInfo": [{
      "key": "no-cache",
      "value": "1"
    }, {
      "key": "no-remote",
      "value": "1"
    }],
    "primaryOutputId": 1382,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "ff4aaf5f30874b283189ec74333e9dbac8d65406fa48cf3bd5155d8888c70ade",
    "mnemonic": "SourceSymlinkManifest",
    "configurationId": 3,
    "outputIds": [1906],
    "primaryOutputId": 1906,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "34cb47905bc389f230b594018af63bccc25816a87d4898ad6d821ab489c1bfe9",
    "mnemonic": "SymlinkTree",
    "configurationId": 3,
    "inputDepSetIds": [1200],
    "outputIds": [1907],
    "primaryOutputId": 1907,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 73,
    "actionKey": "709e80c88487a2411e1ee4dfb9f22a861492d20c4765150c0c794abd70f8147c",
    "mnemonic": "Middleman",
    "configurationId": 3,
    "inputDepSetIds": [1201],
    "outputIds": [1908],
    "primaryOutputId": 1908,
    "executionPlatform": "@local_config_platform//:host"
  }, {
    "targetId": 48,
    "actionKey": "4c8f8e5d93fcc1e898453e73be63723c2d6a56914df60d360c6a7493d5602213",
    "mnemonic": "Genrule",
    "configurationId": 3,
    "inputDepSetIds": [190],
    "outputIds": [1896],
    "primaryOutputId": 1896,
    "executionPlatform": "@local_config_platform//:host"
  }],
  "targets": [{
    "id": 1,
    "label": "//distribution:distro_workspace",
    "ruleClassId": 1
  }, {
    "id": 2,
    "label": "//tests:always_true_match_all_test",
    "ruleClassId": 2
  }, {
    "id": 3,
    "label": "//tests/copy_file:bin_gen",
    "ruleClassId": 3
  }, {
    "id": 4,
    "label": "//tests:new_sets_tests_test_0",
    "ruleClassId": 4
  }, {
    "id": 5,
    "label": "//docs:versions",
    "ruleClassId": 5
  }, {
    "id": 6,
    "label": "//tests:build_test__test_0__deps",
    "ruleClassId": 1
  }, {
    "id": 7,
    "label": "//distribution:bazel-skylib-gazelle-plugin",
    "ruleClassId": 6
  }, {
    "id": 8,
    "label": "//tests:paths_tests_test_7",
    "ruleClassId": 7
  }, {
    "id": 9,
    "label": "//tests/write_file:write_empty_text",
    "ruleClassId": 8
  }, {
    "id": 10,
    "label": "//tests:inspect_actions_test",
    "ruleClassId": 9
  }, {
    "id": 11,
    "label": "//tests/copy_file:bin_src_symlink",
    "ruleClassId": 3
  }, {
    "id": 12,
    "label": "//tests:types_tests_test_2",
    "ruleClassId": 10
  }, {
    "id": 13,
    "label": "//tests:build_test__test",
    "ruleClassId": 11
  }, {
    "id": 14,
    "label": "//tests:change_setting_test",
    "ruleClassId": 12
  }, {
    "id": 15,
    "label": "//docs:types_stardoc",
    "ruleClassId": 13
  }, {
    "id": 16,
    "label": "//tests:or_config_setting_group_multiple_conds_match_test",
    "ruleClassId": 14
  }, {
    "id": 17,
    "label": "//docs:diff_test",
    "ruleClassId": 5
  }, {
    "id": 18,
    "label": "//tests:or_config_setting_group_single_setting_fails_test",
    "ruleClassId": 15
  }, {
    "id": 19,
    "label": "//tests:unittest_tests_test_0",
    "ruleClassId": 16
  }, {
    "id": 20,
    "label": "//tests:new_sets_tests_test_9",
    "ruleClassId": 17
  }, {
    "id": 21,
    "label": "//docs:new_sets",
    "ruleClassId": 5
  }, {
    "id": 22,
    "label": "//docs:partial_stardoc",
    "ruleClassId": 13
  }, {
    "id": 23,
    "label": "//docs:docs_unittest_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 24,
    "label": "//docs:subpackages",
    "ruleClassId": 5
  }, {
    "id": 25,
    "label": "//tests:new_sets_tests_test_1",
    "ruleClassId": 19
  }, {
    "id": 26,
    "label": "//docs:bzl_library",
    "ruleClassId": 5
  }, {
    "id": 27,
    "label": "//tests:paths_tests_test_6",
    "ruleClassId": 20
  }, {
    "id": 28,
    "label": "//docs:docs_common_settings_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 29,
    "label": "//tests/write_file:write_file_tests",
    "ruleClassId": 21
  }, {
    "id": 30,
    "label": "//tests:or_config_setting_group_all_conds_match_test",
    "ruleClassId": 22
  }, {
    "id": 31,
    "label": "//tests:selects_tests_test_0",
    "ruleClassId": 23
  }, {
    "id": 32,
    "label": "//tests/write_file:newline_unix_actual",
    "ruleClassId": 8
  }, {
    "id": 33,
    "label": "//tests:and_config_setting_group_single_setting_fails_test",
    "ruleClassId": 24
  }, {
    "id": 34,
    "label": "//docs:docs_shell_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 35,
    "label": "//tests/copy_file:copy_gen_symlink",
    "ruleClassId": 25
  }, {
    "id": 36,
    "label": "//tests/write_file:unix_line_ending_test",
    "ruleClassId": 18
  }, {
    "id": 37,
    "label": "//tests:types_tests_test_3",
    "ruleClassId": 26
  }, {
    "id": 38,
    "label": "//tests/copy_directory:copy_of_empty_dir",
    "ruleClassId": 27
  }, {
    "id": 39,
    "label": "//tests/diff_test:same_src_gen",
    "ruleClassId": 18
  }, {
    "id": 40,
    "label": "//docs:update",
    "ruleClassId": 3
  }, {
    "id": 41,
    "label": "//tests/write_file:newline_win_actual",
    "ruleClassId": 8
  }, {
    "id": 42,
    "label": "//tests:always_true_match_any_test",
    "ruleClassId": 28
  }, {
    "id": 43,
    "label": "//docs:docs_expand_template_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 44,
    "label": "//docs:docs_run_binary_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 45,
    "label": "//tests/expand_template:test",
    "ruleClassId": 29
  }, {
    "id": 46,
    "label": "//tests:and_config_setting_group_all_matches_fail_test",
    "ruleClassId": 30
  }, {
    "id": 47,
    "label": "//docs:docs_copy_file_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 48,
    "label": "//tests/copy_file:gen",
    "ruleClassId": 1
  }, {
    "id": 49,
    "label": "//docs:docs_structs_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 50,
    "label": "//docs:docs_new_sets_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 51,
    "label": "//docs:expand_template",
    "ruleClassId": 5
  }, {
    "id": 52,
    "label": "//docs:docs_native_binary_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 53,
    "label": "//docs:select_file",
    "ruleClassId": 5
  }, {
    "id": 54,
    "label": "//tests/write_file:win_line_ending_test",
    "ruleClassId": 18
  }, {
    "id": 55,
    "label": "//tests:selftest_self_glob",
    "ruleClassId": 31
  }, {
    "id": 56,
    "label": "//tests/copy_file:copy_xgen",
    "ruleClassId": 32
  }, {
    "id": 57,
    "label": "//tests:new_sets_tests_test_6",
    "ruleClassId": 33
  }, {
    "id": 58,
    "label": "//docs:versions_stardoc",
    "ruleClassId": 13
  }, {
    "id": 59,
    "label": "//docs:common_settings_stardoc",
    "ruleClassId": 13
  }, {
    "id": 60,
    "label": "//tests:inspect_actions_fake_target",
    "ruleClassId": 34
  }, {
    "id": 61,
    "label": "//tests:selftest_test_exists",
    "ruleClassId": 31
  }, {
    "id": 62,
    "label": "//tests:shell_tests_test_0",
    "ruleClassId": 35
  }, {
    "id": 63,
    "label": "//tests/copy_directory:copy_of_dir_with_subdir",
    "ruleClassId": 27
  }, {
    "id": 64,
    "label": "//tests:subpackages_all",
    "ruleClassId": 31
  }, {
    "id": 65,
    "label": "//docs:copy_file",
    "ruleClassId": 5
  }, {
    "id": 66,
    "label": "//docs:docs_analysis_test_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 67,
    "label": "//tests:types_tests_test_4",
    "ruleClassId": 36
  }, {
    "id": 68,
    "label": "//docs:build_test",
    "ruleClassId": 5
  }, {
    "id": 69,
    "label": "//docs:subpackages_stardoc",
    "ruleClassId": 13
  }, {
    "id": 70,
    "label": "//tests/native_binary:data_from_binary_test",
    "ruleClassId": 37
  }, {
    "id": 71,
    "label": "//docs:run_binary_stardoc",
    "ruleClassId": 13
  }, {
    "id": 72,
    "label": "//docs:new_sets_stardoc",
    "ruleClassId": 13
  }, {
    "id": 73,
    "label": "//tests/copy_file:copy_xsrc",
    "ruleClassId": 32
  }, {
    "id": 74,
    "label": "//tests:or_config_setting_group_no_matches_test",
    "ruleClassId": 38
  }, {
    "id": 75,
    "label": "//tests/select_file:selected_inner",
    "ruleClassId": 18
  }, {
    "id": 76,
    "label": "//docs:selects_stardoc",
    "ruleClassId": 13
  }, {
    "id": 77,
    "label": "//tests:paths_tests_test_1",
    "ruleClassId": 39
  }, {
    "id": 78,
    "label": "//docs:structs_stardoc",
    "ruleClassId": 13
  }, {
    "id": 79,
    "label": "//tests/copy_file:copy_xsrc_symlink",
    "ruleClassId": 32
  }, {
    "id": 80,
    "label": "//tests:new_sets_tests_test_7",
    "ruleClassId": 40
  }, {
    "id": 81,
    "label": "//docs:partial",
    "ruleClassId": 5
  }, {
    "id": 82,
    "label": "//docs:common_settings",
    "ruleClassId": 5
  }, {
    "id": 83,
    "label": "//tests:and_config_setting_group_multiple_matches_fail_test",
    "ruleClassId": 41
  }, {
    "id": 84,
    "label": "//tests:versions_tests_test_0",
    "ruleClassId": 42
  }, {
    "id": 85,
    "label": "//tests:shell_tests_test_1",
    "ruleClassId": 43
  }, {
    "id": 86,
    "label": "//tests/write_file:write_nonempty_text",
    "ruleClassId": 8
  }, {
    "id": 87,
    "label": "//tests:types_tests_test_5",
    "ruleClassId": 44
  }, {
    "id": 88,
    "label": "//docs:docs_partial_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 89,
    "label": "//tests:new_sets_tests_test_10",
    "ruleClassId": 45
  }, {
    "id": 90,
    "label": "//tests/run_binary:printargs",
    "ruleClassId": 46
  }, {
    "id": 91,
    "label": "//tests/native_binary:data_test",
    "ruleClassId": 37
  }, {
    "id": 92,
    "label": "//tests:or_config_setting_group_last_cond_matches_test",
    "ruleClassId": 47
  }, {
    "id": 93,
    "label": "//tests:inspect_aspect_fake_target",
    "ruleClassId": 48
  }, {
    "id": 94,
    "label": "//tests:and_config_setting_group_last_match_fails_test",
    "ruleClassId": 49
  }, {
    "id": 95,
    "label": "//tests:structs_tests_test_0",
    "ruleClassId": 50
  }, {
    "id": 96,
    "label": "//docs:docs_copy_directory_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 97,
    "label": "//tests:paths_tests_test_0",
    "ruleClassId": 51
  }, {
    "id": 98,
    "label": "//tests:or_config_setting_group_middle_cond_matches_test",
    "ruleClassId": 52
  }, {
    "id": 99,
    "label": "//distribution:bazel-skylib",
    "ruleClassId": 6
  }, {
    "id": 100,
    "label": "//docs:docs_bzl_library-difftest",
    "ruleClassId": 18
  }, {
    "id": 101,
    "label": "//tests/run_binary:run_script_expected",
    "ruleClassId": 8
  }, {
    "id": 102,
    "label": "//tests:and_config_setting_group_single_setting_matches_test",
    "ruleClassId": 53
  }, {
    "id": 103,
    "label": "//tests:subpackages_exists_no",
    "ruleClassId": 31
  }, {
    "id": 104,
    "label": "//tests/native_binary:args_test",
    "ruleClassId": 37
  }, {
    "id": 105,
    "label": "//tests/copy_file:copy_src",
    "ruleClassId": 25
  }, {
    "id": 106,
    "label": "//tests:new_sets_tests_test_8",
    "ruleClassId": 54
  }, {
    "id": 107,
    "label": "//docs:write_file_stardoc",
    "ruleClassId": 13
  }, {
    "id": 108,
    "label": "//tests:new_sets_tests_test_4",
    "ruleClassId": 55
  }, {
    "id": 109,
    "label": "//tests:dicts_tests_test_1",
    "ruleClassId": 56
  }, {
    "id": 110,
    "label": "//tests/write_file:newline_unix_exp",
    "ruleClassId": 8
  }, {
    "id": 111,
    "label": "//tests/run_binary:run_script_test",
    "ruleClassId": 18
  }, {
    "id": 112,
    "label": "//tests:partial_tests_test_1",
    "ruleClassId": 57
  }, {
    "id": 113,
    "label": "//tests:inspect_aspect_test",
    "ruleClassId": 58
  }, {
    "id": 114,
    "label": "//tests:versions_tests_test_1",
    "ruleClassId": 59
  }, {
    "id": 115,
    "label": "//tests:types_tests_test_6",
    "ruleClassId": 60
  }, {
    "id": 116,
    "label": "//tests/diff_test:same_src_src",
    "ruleClassId": 18
  }, {
    "id": 117,
    "label": "//tests/diff_test:diff_test_tests",
    "ruleClassId": 21
  }, {
    "id": 118,
    "label": "//docs:copy_directory",
    "ruleClassId": 5
  }, {
    "id": 119,
    "label": "//tests:new_sets_tests_test_11",
    "ruleClassId": 61
  }, {
    "id": 120,
    "label": "//tests/native_binary:copy_assertarg_exe",
    "ruleClassId": 32
  }, {
    "id": 121,
    "label": "//distribution:distro_module_bazel",
    "ruleClassId": 1
  }, {
    "id": 122,
    "label": "//tests/copy_file:copy_xgen_symlink",
    "ruleClassId": 32
  }, {
    "id": 123,
    "label": "//tests/copy_file:bin_src",
    "ruleClassId": 3
  }, {
    "id": 124,
    "label": "//tests/write_file:write_empty_bin",
    "ruleClassId": 62
  }, {
    "id": 125,
    "label": "//docs:docs_diff_test_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 126,
    "label": "//tests/run_binary:run_bin_expected",
    "ruleClassId": 8
  }, {
    "id": 127,
    "label": "//tests:paths_tests_test_3",
    "ruleClassId": 63
  }, {
    "id": 128,
    "label": "//tests/run_binary:run_bin",
    "ruleClassId": 64
  }, {
    "id": 129,
    "label": "//docs:select_file_stardoc",
    "ruleClassId": 13
  }, {
    "id": 130,
    "label": "//docs:write_file",
    "ruleClassId": 5
  }, {
    "id": 131,
    "label": "//tests/copy_file:copy_gen",
    "ruleClassId": 25
  }, {
    "id": 132,
    "label": "//tests/run_binary:run_bin_test",
    "ruleClassId": 18
  }, {
    "id": 133,
    "label": "//tests:new_sets_tests_test_5",
    "ruleClassId": 65
  }, {
    "id": 134,
    "label": "//docs:docs_selects_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 135,
    "label": "//docs:paths",
    "ruleClassId": 5
  }, {
    "id": 136,
    "label": "//docs:docs_select_file_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 137,
    "label": "//tests:partial_tests_test_0",
    "ruleClassId": 66
  }, {
    "id": 138,
    "label": "//docs:copy_directory_stardoc",
    "ruleClassId": 13
  }, {
    "id": 139,
    "label": "//tests:dicts_tests_test_0",
    "ruleClassId": 50
  }, {
    "id": 140,
    "label": "//tests/expand_template:filled_template",
    "ruleClassId": 67
  }, {
    "id": 141,
    "label": "//docs:docs_collections_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 142,
    "label": "//tests:versions_tests_test_2",
    "ruleClassId": 68
  }, {
    "id": 143,
    "label": "//tests/write_file:bin_nonempty",
    "ruleClassId": 3
  }, {
    "id": 144,
    "label": "//tests:types_tests_test_7",
    "ruleClassId": 69
  }, {
    "id": 145,
    "label": "//tests:new_sets_tests_test_12",
    "ruleClassId": 70
  }, {
    "id": 146,
    "label": "//docs:structs",
    "ruleClassId": 5
  }, {
    "id": 147,
    "label": "//docs:types",
    "ruleClassId": 5
  }, {
    "id": 148,
    "label": "//tests:or_config_setting_group_first_cond_matches_test",
    "ruleClassId": 71
  }, {
    "id": 149,
    "label": "//tests/expand_template:version",
    "ruleClassId": 67
  }, {
    "id": 150,
    "label": "//tests/copy_directory:copy_of_dir_with_symlink",
    "ruleClassId": 27
  }, {
    "id": 151,
    "label": "//tests/native_binary:assertarg",
    "ruleClassId": 46
  }, {
    "id": 152,
    "label": "//tests:subpackages_all_not_fully_qualified",
    "ruleClassId": 31
  }, {
    "id": 153,
    "label": "//docs:run_binary",
    "ruleClassId": 5
  }, {
    "id": 154,
    "label": "//tests:and_config_setting_group_matches_test",
    "ruleClassId": 72
  }, {
    "id": 155,
    "label": "//tests:subpackages_exists_yes",
    "ruleClassId": 31
  }, {
    "id": 156,
    "label": "//tests/native_binary:copy_assertdata_exe",
    "ruleClassId": 32
  }, {
    "id": 157,
    "label": "//tests:collections_tests_test_2",
    "ruleClassId": 73
  }, {
    "id": 158,
    "label": "//tests:inspect_output_dirs_test",
    "ruleClassId": 74
  }, {
    "id": 159,
    "label": "//tests:paths_tests_test_2",
    "ruleClassId": 75
  }, {
    "id": 160,
    "label": "//docs:build_test_stardoc",
    "ruleClassId": 13
  }, {
    "id": 161,
    "label": "//tests/copy_file:copy_src_symlink",
    "ruleClassId": 25
  }, {
    "id": 162,
    "label": "//docs:docs_paths_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 163,
    "label": "//docs:analysis_test",
    "ruleClassId": 5
  }, {
    "id": 164,
    "label": "//tests/write_file:bin_empty",
    "ruleClassId": 3
  }, {
    "id": 165,
    "label": "//tests:new_sets_tests_test_2",
    "ruleClassId": 76
  }, {
    "id": 166,
    "label": "//tests/diff_test:gen",
    "ruleClassId": 1
  }, {
    "id": 167,
    "label": "//tests:types_tests_test_0",
    "ruleClassId": 77
  }, {
    "id": 168,
    "label": "//docs:expand_template_stardoc",
    "ruleClassId": 13
  }, {
    "id": 169,
    "label": "//docs:collections",
    "ruleClassId": 5
  }, {
    "id": 170,
    "label": "//tests/write_file:run_executables",
    "ruleClassId": 1
  }, {
    "id": 171,
    "label": "//tests:change_setting_with_failure_test",
    "ruleClassId": 78
  }, {
    "id": 172,
    "label": "//tests:types_tests_test_8",
    "ruleClassId": 79
  }, {
    "id": 173,
    "label": "//docs:docs_dicts_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 174,
    "label": "//docs:native_binary_stardoc",
    "ruleClassId": 13
  }, {
    "id": 175,
    "label": "//tests:new_sets_tests_test_13",
    "ruleClassId": 80
  }, {
    "id": 176,
    "label": "//docs:paths_stardoc",
    "ruleClassId": 13
  }, {
    "id": 177,
    "label": "//tests/native_binary:assertdata",
    "ruleClassId": 46
  }, {
    "id": 178,
    "label": "//tests/write_file:write_nonempty_bin",
    "ruleClassId": 62
  }, {
    "id": 179,
    "label": "//tests/run_binary:script",
    "ruleClassId": 62
  }, {
    "id": 180,
    "label": "//docs:docs_build_test_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 181,
    "label": "//docs:docs_subpackages_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 182,
    "label": "//docs:unittest_stardoc",
    "ruleClassId": 13
  }, {
    "id": 183,
    "label": "//tests/copy_file:run_executables",
    "ruleClassId": 1
  }, {
    "id": 184,
    "label": "//tests:subpackages_all_w_exclude",
    "ruleClassId": 31
  }, {
    "id": 185,
    "label": "//docs:analysis_test_stardoc",
    "ruleClassId": 13
  }, {
    "id": 186,
    "label": "//docs:docs_versions_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 187,
    "label": "//tests/native_binary:args_bin",
    "ruleClassId": 81
  }, {
    "id": 188,
    "label": "//tests:collections_tests_test_1",
    "ruleClassId": 82
  }, {
    "id": 189,
    "label": "//tests:paths_tests_test_5",
    "ruleClassId": 83
  }, {
    "id": 190,
    "label": "//tests/write_file:newline_win_exp",
    "ruleClassId": 8
  }, {
    "id": 191,
    "label": "//tests:failure_testing_test",
    "ruleClassId": 84
  }, {
    "id": 192,
    "label": "//tests/copy_directory:copy_directory_tests",
    "ruleClassId": 21
  }, {
    "id": 193,
    "label": "//tests:dicts_tests_test_2",
    "ruleClassId": 85
  }, {
    "id": 194,
    "label": "//tests:and_config_setting_group_first_match_fails_test",
    "ruleClassId": 86
  }, {
    "id": 195,
    "label": "//tests/copy_file:copy_file_tests",
    "ruleClassId": 21
  }, {
    "id": 196,
    "label": "//tests:selftest_suite_exists",
    "ruleClassId": 31
  }, {
    "id": 197,
    "label": "//docs:gen_update",
    "ruleClassId": 8
  }, {
    "id": 198,
    "label": "//tests/expand_template:template_test",
    "ruleClassId": 21
  }, {
    "id": 199,
    "label": "//tests:new_sets_tests_test_3",
    "ruleClassId": 87
  }, {
    "id": 200,
    "label": "//docs:copy_file_stardoc",
    "ruleClassId": 13
  }, {
    "id": 201,
    "label": "//tests/select_file:selected_me",
    "ruleClassId": 18
  }, {
    "id": 202,
    "label": "//tests/copy_file:bin_gen_symlink",
    "ruleClassId": 3
  }, {
    "id": 203,
    "label": "//docs:docs_types_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 204,
    "label": "//tests/run_binary:run_script",
    "ruleClassId": 64
  }, {
    "id": 205,
    "label": "//tests/native_binary:assertdata_with_runfiles",
    "ruleClassId": 46
  }, {
    "id": 206,
    "label": "//docs:shell",
    "ruleClassId": 5
  }, {
    "id": 207,
    "label": "//docs:docs_write_file_doc-difftest",
    "ruleClassId": 18
  }, {
    "id": 208,
    "label": "//docs:shell_stardoc",
    "ruleClassId": 13
  }, {
    "id": 209,
    "label": "//tests:build_test__build_target",
    "ruleClassId": 88
  }, {
    "id": 210,
    "label": "//tests:types_tests_test_1",
    "ruleClassId": 89
  }, {
    "id": 211,
    "label": "//docs:native_binary",
    "ruleClassId": 5
  }, {
    "id": 212,
    "label": "//tests/native_binary:data_bin",
    "ruleClassId": 81
  }, {
    "id": 213,
    "label": "//tests:and_config_setting_group_middle_match_fails_test",
    "ruleClassId": 90
  }, {
    "id": 214,
    "label": "//tests/copy_directory:empty_dir",
    "ruleClassId": 91
  }, {
    "id": 215,
    "label": "//tests:types_tests_test_9",
    "ruleClassId": 92
  }, {
    "id": 216,
    "label": "//docs:unittest",
    "ruleClassId": 5
  }, {
    "id": 217,
    "label": "//docs:dicts",
    "ruleClassId": 5
  }, {
    "id": 218,
    "label": "//docs:diff_test_stardoc",
    "ruleClassId": 13
  }, {
    "id": 219,
    "label": "//tests:or_config_setting_group_single_setting_matches_test",
    "ruleClassId": 93
  }, {
    "id": 220,
    "label": "//docs:selects",
    "ruleClassId": 5
  }, {
    "id": 221,
    "label": "//tests/diff_test:same_gen_gen",
    "ruleClassId": 18
  }, {
    "id": 222,
    "label": "//docs:collections_stardoc",
    "ruleClassId": 13
  }, {
    "id": 223,
    "label": "//tests:collections_tests_test_0",
    "ruleClassId": 94
  }, {
    "id": 224,
    "label": "//tests:unittest_tests_test_1",
    "ruleClassId": 95
  }, {
    "id": 225,
    "label": "//tests:build_test__make_src",
    "ruleClassId": 1
  }, {
    "id": 226,
    "label": "//tests:paths_tests_test_4",
    "ruleClassId": 96
  }, {
    "id": 227,
    "label": "//docs:dicts_stardoc",
    "ruleClassId": 13
  }, {
    "id": 228,
    "label": "@io_bazel_stardoc//stardoc:renderer",
    "ruleClassId": 13
  }, {
    "id": 229,
    "label": "@io_bazel_stardoc//stardoc:prebuilt_stardoc_binary",
    "ruleClassId": 97
  }, {
    "id": 230,
    "label": "@bazel_tools//tools/cpp/runfiles:runfiles",
    "ruleClassId": 88
  }, {
    "id": 231,
    "label": "//docs:bzl_library_stardoc",
    "ruleClassId": 13
  }, {
    "id": 232,
    "label": "@bazel_skylib_gazelle_plugin//bzl:fake-testdata",
    "ruleClassId": 1
  }, {
    "id": 233,
    "label": "@io_bazel_stardoc//stardoc:prebuilt_renderer_binary",
    "ruleClassId": 97
  }],
  "depSetOfFiles": [{
    "id": 1,
    "directArtifactIds": [1, 2]
  }, {
    "id": 2,
    "directArtifactIds": [4]
  }, {
    "id": 3,
    "directArtifactIds": [6, 5]
  }, {
    "id": 4,
    "directArtifactIds": [7, 8, 9]
  }, {
    "id": 5,
    "directArtifactIds": [12]
  }, {
    "id": 6,
    "directArtifactIds": [14]
  }, {
    "id": 9,
    "directArtifactIds": [12, 13]
  }, {
    "id": 8,
    "transitiveDepSetIds": [9],
    "directArtifactIds": [12]
  }, {
    "id": 7,
    "transitiveDepSetIds": [8],
    "directArtifactIds": [15]
  }, {
    "id": 10,
    "directArtifactIds": [18]
  }, {
    "id": 11,
    "directArtifactIds": [17, 19]
  }, {
    "id": 12,
    "directArtifactIds": [20, 8, 9]
  }, {
    "id": 14,
    "directArtifactIds": [23, 24]
  }, {
    "id": 13,
    "transitiveDepSetIds": [14],
    "directArtifactIds": [25]
  }, {
    "id": 16,
    "directArtifactIds": [26, 27, 28, 29, 30, 31]
  }, {
    "id": 18,
    "directArtifactIds": [32, 33]
  }, {
    "id": 17,
    "transitiveDepSetIds": [18],
    "directArtifactIds": [34]
  }, {
    "id": 15,
    "transitiveDepSetIds": [16, 17]
  }, {
    "id": 20,
    "directArtifactIds": [36, 37]
  }, {
    "id": 19,
    "transitiveDepSetIds": [20],
    "directArtifactIds": [2]
  }, {
    "id": 22,
    "directArtifactIds": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 39]
  }, {
    "id": 24,
    "directArtifactIds": [50, 51]
  }, {
    "id": 23,
    "transitiveDepSetIds": [24],
    "directArtifactIds": [52]
  }, {
    "id": 21,
    "transitiveDepSetIds": [22, 23]
  }, {
    "id": 25,
    "directArtifactIds": [55]
  }, {
    "id": 26,
    "directArtifactIds": [54, 56]
  }, {
    "id": 27,
    "directArtifactIds": [57, 8, 9]
  }, {
    "id": 28,
    "directArtifactIds": [61]
  }, {
    "id": 29,
    "directArtifactIds": [63, 62]
  }, {
    "id": 30,
    "directArtifactIds": [64, 8, 9]
  }, {
    "id": 31,
    "directArtifactIds": [67]
  }, {
    "id": 32,
    "directArtifactIds": [69]
  }, {
    "id": 35,
    "directArtifactIds": [67, 68]
  }, {
    "id": 34,
    "transitiveDepSetIds": [35],
    "directArtifactIds": [67]
  }, {
    "id": 33,
    "transitiveDepSetIds": [34],
    "directArtifactIds": [70]
  }, {
    "id": 36,
    "directArtifactIds": [73]
  }, {
    "id": 37,
    "directArtifactIds": [72, 74]
  }, {
    "id": 38,
    "directArtifactIds": [75, 8, 9]
  }, {
    "id": 39,
    "directArtifactIds": [79]
  }, {
    "id": 41,
    "directArtifactIds": [38, 78]
  }, {
    "id": 40,
    "transitiveDepSetIds": [41],
    "directArtifactIds": [80]
  }, {
    "id": 42,
    "directArtifactIds": [81, 8, 9]
  }, {
    "id": 43,
    "directArtifactIds": [84]
  }, {
    "id": 44,
    "directArtifactIds": [86, 85]
  }, {
    "id": 45,
    "directArtifactIds": [87, 8, 9]
  }, {
    "id": 48,
    "directArtifactIds": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]
  }, {
    "id": 49,
    "directArtifactIds": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136]
  }, {
    "id": 50,
    "directArtifactIds": [137, 138, 139, 140, 141, 142, 143, 144]
  }, {
    "id": 51,
    "directArtifactIds": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201]
  }, {
    "id": 47,
    "transitiveDepSetIds": [48, 49, 50, 51]
  }, {
    "id": 52,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 46,
    "transitiveDepSetIds": [47, 52],
    "directArtifactIds": [203]
  }, {
    "id": 53,
    "directArtifactIds": [207]
  }, {
    "id": 54,
    "directArtifactIds": [208, 207]
  }, {
    "id": 55,
    "directArtifactIds": [211]
  }, {
    "id": 58,
    "directArtifactIds": [204, 209]
  }, {
    "id": 60,
    "directArtifactIds": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240]
  }, {
    "id": 61,
    "directArtifactIds": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256]
  }, {
    "id": 62,
    "directArtifactIds": [257, 258, 259, 260, 261, 262, 263, 264]
  }, {
    "id": 63,
    "directArtifactIds": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323]
  }, {
    "id": 59,
    "transitiveDepSetIds": [60, 61, 62, 63]
  }, {
    "id": 57,
    "transitiveDepSetIds": [58, 59],
    "directArtifactIds": [324, 325]
  }, {
    "id": 56,
    "transitiveDepSetIds": [57],
    "directArtifactIds": [212]
  }, {
    "id": 65,
    "directArtifactIds": [325, 326, 327]
  }, {
    "id": 64,
    "transitiveDepSetIds": [65],
    "directArtifactIds": [207]
  }, {
    "id": 66,
    "directArtifactIds": [330]
  }, {
    "id": 67,
    "directArtifactIds": [332, 331]
  }, {
    "id": 68,
    "directArtifactIds": [333, 8, 9]
  }, {
    "id": 70,
    "directArtifactIds": [336, 337]
  }, {
    "id": 69,
    "transitiveDepSetIds": [70],
    "directArtifactIds": [338]
  }, {
    "id": 72,
    "directArtifactIds": [339, 27, 28, 29, 30, 31]
  }, {
    "id": 71,
    "transitiveDepSetIds": [72, 17]
  }, {
    "id": 73,
    "directArtifactIds": [341]
  }, {
    "id": 74,
    "directArtifactIds": [343, 342]
  }, {
    "id": 75,
    "directArtifactIds": [344, 8, 9]
  }, {
    "id": 76,
    "directArtifactIds": [348]
  }, {
    "id": 77,
    "directArtifactIds": [347, 349]
  }, {
    "id": 78,
    "directArtifactIds": [350, 8, 9]
  }, {
    "id": 79,
    "directArtifactIds": [354]
  }, {
    "id": 80,
    "directArtifactIds": [353, 355]
  }, {
    "id": 81,
    "directArtifactIds": [356, 8, 9]
  }, {
    "id": 83,
    "directArtifactIds": [359, 360]
  }, {
    "id": 82,
    "transitiveDepSetIds": [83],
    "directArtifactIds": [361]
  }, {
    "id": 85,
    "directArtifactIds": [362, 27, 28, 29, 30, 31]
  }, {
    "id": 84,
    "transitiveDepSetIds": [85, 17]
  }, {
    "id": 87,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 86,
    "transitiveDepSetIds": [47, 87],
    "directArtifactIds": [203]
  }, {
    "id": 88,
    "directArtifactIds": [367, 207]
  }, {
    "id": 89,
    "directArtifactIds": [370]
  }, {
    "id": 92,
    "directArtifactIds": [364, 368]
  }, {
    "id": 91,
    "transitiveDepSetIds": [92, 59],
    "directArtifactIds": [372, 325]
  }, {
    "id": 90,
    "transitiveDepSetIds": [91],
    "directArtifactIds": [371]
  }, {
    "id": 94,
    "directArtifactIds": [325, 373, 327]
  }, {
    "id": 93,
    "transitiveDepSetIds": [94],
    "directArtifactIds": [207]
  }, {
    "id": 95,
    "directArtifactIds": [377]
  }, {
    "id": 98,
    "directArtifactIds": [376, 379, 380]
  }, {
    "id": 97,
    "transitiveDepSetIds": [98],
    "directArtifactIds": [376]
  }, {
    "id": 96,
    "transitiveDepSetIds": [97],
    "directArtifactIds": [378]
  }, {
    "id": 99,
    "directArtifactIds": [381, 8, 9]
  }, {
    "id": 101,
    "directArtifactIds": [384, 385]
  }, {
    "id": 100,
    "transitiveDepSetIds": [101],
    "directArtifactIds": [386]
  }, {
    "id": 103,
    "directArtifactIds": [387, 27, 28, 29, 30, 31]
  }, {
    "id": 102,
    "transitiveDepSetIds": [103, 17]
  }, {
    "id": 104,
    "directArtifactIds": [390]
  }, {
    "id": 105,
    "directArtifactIds": [389, 391]
  }, {
    "id": 106,
    "directArtifactIds": [392, 8, 9]
  }, {
    "id": 108,
    "directArtifactIds": [395, 396]
  }, {
    "id": 107,
    "transitiveDepSetIds": [108],
    "directArtifactIds": [397]
  }, {
    "id": 110,
    "directArtifactIds": [398, 27, 28, 29, 30, 31]
  }, {
    "id": 109,
    "transitiveDepSetIds": [110, 17]
  }, {
    "id": 111,
    "directArtifactIds": [401]
  }, {
    "id": 112,
    "directArtifactIds": [400, 402]
  }, {
    "id": 113,
    "directArtifactIds": [403, 8, 9]
  }, {
    "id": 114,
    "directArtifactIds": [407]
  }, {
    "id": 117,
    "directArtifactIds": [406, 409, 410]
  }, {
    "id": 116,
    "transitiveDepSetIds": [117],
    "directArtifactIds": [406]
  }, {
    "id": 115,
    "transitiveDepSetIds": [116],
    "directArtifactIds": [408]
  }, {
    "id": 118,
    "directArtifactIds": [411, 8, 9]
  }, {
    "id": 119,
    "directArtifactIds": [414]
  }, {
    "id": 120,
    "directArtifactIds": [416]
  }, {
    "id": 123,
    "directArtifactIds": [414, 415]
  }, {
    "id": 124,
    "directArtifactIds": [418, 419]
  }, {
    "id": 122,
    "transitiveDepSetIds": [123, 124],
    "directArtifactIds": [60, 420, 421, 422]
  }, {
    "id": 121,
    "transitiveDepSetIds": [122],
    "directArtifactIds": [417]
  }, {
    "id": 125,
    "directArtifactIds": [423, 8, 9]
  }, {
    "id": 126,
    "directArtifactIds": [426]
  }, {
    "id": 127,
    "directArtifactIds": [428, 427]
  }, {
    "id": 128,
    "directArtifactIds": [429, 8, 9]
  }, {
    "id": 129,
    "directArtifactIds": [433]
  }, {
    "id": 130,
    "directArtifactIds": [432, 434]
  }, {
    "id": 131,
    "directArtifactIds": [435, 8, 9]
  }, {
    "id": 132,
    "directArtifactIds": [439]
  }, {
    "id": 133,
    "directArtifactIds": [441, 440]
  }, {
    "id": 134,
    "directArtifactIds": [442, 8, 9]
  }, {
    "id": 135,
    "directArtifactIds": [446]
  }, {
    "id": 138,
    "directArtifactIds": [445, 448, 449]
  }, {
    "id": 137,
    "transitiveDepSetIds": [138],
    "directArtifactIds": [445]
  }, {
    "id": 136,
    "transitiveDepSetIds": [137],
    "directArtifactIds": [447]
  }, {
    "id": 139,
    "directArtifactIds": [450, 8, 9]
  }, {
    "id": 140,
    "directArtifactIds": [453]
  }, {
    "id": 141,
    "directArtifactIds": [456]
  }, {
    "id": 144,
    "directArtifactIds": [455, 438, 458]
  }, {
    "id": 143,
    "transitiveDepSetIds": [144],
    "directArtifactIds": [455]
  }, {
    "id": 142,
    "transitiveDepSetIds": [143],
    "directArtifactIds": [457]
  }, {
    "id": 145,
    "directArtifactIds": [459, 8, 9]
  }, {
    "id": 146,
    "directArtifactIds": [463]
  }, {
    "id": 147,
    "directArtifactIds": [462, 464]
  }, {
    "id": 148,
    "directArtifactIds": [465, 8, 9]
  }, {
    "id": 149,
    "directArtifactIds": [468]
  }, {
    "id": 150,
    "directArtifactIds": [471]
  }, {
    "id": 153,
    "directArtifactIds": [470, 473, 474]
  }, {
    "id": 152,
    "transitiveDepSetIds": [153],
    "directArtifactIds": [470]
  }, {
    "id": 151,
    "transitiveDepSetIds": [152],
    "directArtifactIds": [472]
  }, {
    "id": 154,
    "directArtifactIds": [475, 8, 9]
  }, {
    "id": 155,
    "directArtifactIds": [478]
  }, {
    "id": 156,
    "directArtifactIds": [480]
  }, {
    "id": 159,
    "directArtifactIds": [478, 479]
  }, {
    "id": 158,
    "transitiveDepSetIds": [159],
    "directArtifactIds": [482, 483, 399, 484, 410, 485, 486, 487, 340, 488, 489, 363, 490, 491, 492, 493, 494, 449, 495, 388, 496, 380, 35, 497]
  }, {
    "id": 157,
    "transitiveDepSetIds": [158],
    "directArtifactIds": [481]
  }, {
    "id": 160,
    "directArtifactIds": [500]
  }, {
    "id": 161,
    "directArtifactIds": [502, 501]
  }, {
    "id": 162,
    "directArtifactIds": [503, 8, 9]
  }, {
    "id": 163,
    "directArtifactIds": [507]
  }, {
    "id": 166,
    "directArtifactIds": [506, 509, 488]
  }, {
    "id": 165,
    "transitiveDepSetIds": [166],
    "directArtifactIds": [506]
  }, {
    "id": 164,
    "transitiveDepSetIds": [165],
    "directArtifactIds": [508]
  }, {
    "id": 167,
    "directArtifactIds": [510, 8, 9]
  }, {
    "id": 168,
    "directArtifactIds": [514]
  }, {
    "id": 171,
    "directArtifactIds": [513, 516, 492]
  }, {
    "id": 170,
    "transitiveDepSetIds": [171],
    "directArtifactIds": [513]
  }, {
    "id": 169,
    "transitiveDepSetIds": [170],
    "directArtifactIds": [515]
  }, {
    "id": 172,
    "directArtifactIds": [517, 8, 9]
  }, {
    "id": 173,
    "directArtifactIds": [520]
  }, {
    "id": 175,
    "directArtifactIds": [522, 523]
  }, {
    "id": 174,
    "transitiveDepSetIds": [175],
    "directArtifactIds": [521]
  }, {
    "id": 177,
    "directArtifactIds": [522, 527, 528]
  }, {
    "id": 176,
    "transitiveDepSetIds": [177],
    "directArtifactIds": [524, 521, 526]
  }, {
    "id": 178,
    "directArtifactIds": [522, 529]
  }, {
    "id": 179,
    "directArtifactIds": [532]
  }, {
    "id": 180,
    "directArtifactIds": [529, 533]
  }, {
    "id": 181,
    "directArtifactIds": [534, 8, 9]
  }, {
    "id": 182,
    "directArtifactIds": [537]
  }, {
    "id": 183,
    "directArtifactIds": [539, 538]
  }, {
    "id": 184,
    "directArtifactIds": [540, 8, 9]
  }, {
    "id": 185,
    "directArtifactIds": [544]
  }, {
    "id": 188,
    "directArtifactIds": [543, 546, 486]
  }, {
    "id": 187,
    "transitiveDepSetIds": [188],
    "directArtifactIds": [543]
  }, {
    "id": 186,
    "transitiveDepSetIds": [187],
    "directArtifactIds": [545]
  }, {
    "id": 189,
    "directArtifactIds": [547, 8, 9]
  }, {
    "id": 190,
    "directArtifactIds": [2]
  }, {
    "id": 191,
    "directArtifactIds": [551]
  }, {
    "id": 194,
    "directArtifactIds": [550, 553, 495]
  }, {
    "id": 193,
    "transitiveDepSetIds": [194],
    "directArtifactIds": [550]
  }, {
    "id": 192,
    "transitiveDepSetIds": [193],
    "directArtifactIds": [552]
  }, {
    "id": 195,
    "directArtifactIds": [554, 8, 9]
  }, {
    "id": 196,
    "directArtifactIds": [558]
  }, {
    "id": 199,
    "directArtifactIds": [557, 560, 363]
  }, {
    "id": 198,
    "transitiveDepSetIds": [199],
    "directArtifactIds": [557]
  }, {
    "id": 197,
    "transitiveDepSetIds": [198],
    "directArtifactIds": [559]
  }, {
    "id": 200,
    "directArtifactIds": [561, 8, 9]
  }, {
    "id": 202,
    "directArtifactIds": [564, 565]
  }, {
    "id": 201,
    "transitiveDepSetIds": [202],
    "directArtifactIds": [566]
  }, {
    "id": 204,
    "directArtifactIds": [567, 27, 28, 29, 30, 31]
  }, {
    "id": 203,
    "transitiveDepSetIds": [204, 17]
  }, {
    "id": 205,
    "directArtifactIds": [569]
  }, {
    "id": 208,
    "directArtifactIds": [568, 571, 489]
  }, {
    "id": 207,
    "transitiveDepSetIds": [208],
    "directArtifactIds": [568]
  }, {
    "id": 206,
    "transitiveDepSetIds": [207],
    "directArtifactIds": [570]
  }, {
    "id": 209,
    "directArtifactIds": [572, 8, 9]
  }, {
    "id": 211,
    "directArtifactIds": [575, 576]
  }, {
    "id": 210,
    "transitiveDepSetIds": [211],
    "directArtifactIds": [577]
  }, {
    "id": 213,
    "directArtifactIds": [578, 27, 28, 29, 30, 31]
  }, {
    "id": 212,
    "transitiveDepSetIds": [213, 17]
  }, {
    "id": 214,
    "directArtifactIds": [580]
  }, {
    "id": 217,
    "directArtifactIds": [579, 499, 582]
  }, {
    "id": 216,
    "transitiveDepSetIds": [217],
    "directArtifactIds": [579]
  }, {
    "id": 215,
    "transitiveDepSetIds": [216],
    "directArtifactIds": [581]
  }, {
    "id": 218,
    "directArtifactIds": [583, 8, 9]
  }, {
    "id": 219,
    "directArtifactIds": [587]
  }, {
    "id": 220,
    "directArtifactIds": [586, 588]
  }, {
    "id": 221,
    "directArtifactIds": [589, 8, 9]
  }, {
    "id": 222,
    "directArtifactIds": [592]
  }, {
    "id": 223,
    "directArtifactIds": [12, 593]
  }, {
    "id": 224,
    "directArtifactIds": [596]
  }, {
    "id": 225,
    "directArtifactIds": [595, 597]
  }, {
    "id": 226,
    "directArtifactIds": [598, 8, 9]
  }, {
    "id": 228,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 227,
    "transitiveDepSetIds": [47, 228],
    "directArtifactIds": [203]
  }, {
    "id": 229,
    "directArtifactIds": [604, 207]
  }, {
    "id": 230,
    "directArtifactIds": [607]
  }, {
    "id": 233,
    "directArtifactIds": [601, 605]
  }, {
    "id": 232,
    "transitiveDepSetIds": [233, 59],
    "directArtifactIds": [609, 325]
  }, {
    "id": 231,
    "transitiveDepSetIds": [232],
    "directArtifactIds": [608]
  }, {
    "id": 235,
    "directArtifactIds": [325, 610, 327]
  }, {
    "id": 234,
    "transitiveDepSetIds": [235],
    "directArtifactIds": [207]
  }, {
    "id": 237,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 236,
    "transitiveDepSetIds": [47, 237],
    "directArtifactIds": [203]
  }, {
    "id": 238,
    "directArtifactIds": [616, 207]
  }, {
    "id": 239,
    "directArtifactIds": [619]
  }, {
    "id": 242,
    "directArtifactIds": [613, 617]
  }, {
    "id": 241,
    "transitiveDepSetIds": [242, 59],
    "directArtifactIds": [621, 325]
  }, {
    "id": 240,
    "transitiveDepSetIds": [241],
    "directArtifactIds": [620]
  }, {
    "id": 244,
    "directArtifactIds": [325, 622, 327]
  }, {
    "id": 243,
    "transitiveDepSetIds": [244],
    "directArtifactIds": [207]
  }, {
    "id": 245,
    "directArtifactIds": [627]
  }, {
    "id": 246,
    "directArtifactIds": [626, 628]
  }, {
    "id": 247,
    "directArtifactIds": [629, 8, 9]
  }, {
    "id": 248,
    "directArtifactIds": [633]
  }, {
    "id": 249,
    "directArtifactIds": [632, 634]
  }, {
    "id": 250,
    "directArtifactIds": [635, 8, 9]
  }, {
    "id": 251,
    "directArtifactIds": [638]
  }, {
    "id": 252,
    "directArtifactIds": [641]
  }, {
    "id": 253,
    "directArtifactIds": [640, 642]
  }, {
    "id": 254,
    "directArtifactIds": [643, 8, 9]
  }, {
    "id": 256,
    "directArtifactIds": [646, 647]
  }, {
    "id": 255,
    "transitiveDepSetIds": [256],
    "directArtifactIds": [648]
  }, {
    "id": 258,
    "directArtifactIds": [649, 27, 28, 29, 30, 31]
  }, {
    "id": 257,
    "transitiveDepSetIds": [258, 17]
  }, {
    "id": 259,
    "directArtifactIds": [651]
  }, {
    "id": 262,
    "directArtifactIds": [650, 653, 482]
  }, {
    "id": 261,
    "transitiveDepSetIds": [262],
    "directArtifactIds": [650]
  }, {
    "id": 260,
    "transitiveDepSetIds": [261],
    "directArtifactIds": [652]
  }, {
    "id": 263,
    "directArtifactIds": [654, 8, 9]
  }, {
    "id": 264,
    "directArtifactIds": [658]
  }, {
    "id": 265,
    "directArtifactIds": [657, 659]
  }, {
    "id": 266,
    "directArtifactIds": [660, 8, 9]
  }, {
    "id": 268,
    "directArtifactIds": [663, 664]
  }, {
    "id": 267,
    "transitiveDepSetIds": [268],
    "directArtifactIds": [665]
  }, {
    "id": 270,
    "directArtifactIds": [666, 27, 28, 29, 30, 31]
  }, {
    "id": 269,
    "transitiveDepSetIds": [270, 17]
  }, {
    "id": 272,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 271,
    "transitiveDepSetIds": [47, 272],
    "directArtifactIds": [203]
  }, {
    "id": 273,
    "directArtifactIds": [670, 207]
  }, {
    "id": 274,
    "directArtifactIds": [673]
  }, {
    "id": 277,
    "directArtifactIds": [667, 671]
  }, {
    "id": 276,
    "transitiveDepSetIds": [277, 59],
    "directArtifactIds": [675, 325]
  }, {
    "id": 275,
    "transitiveDepSetIds": [276],
    "directArtifactIds": [674]
  }, {
    "id": 279,
    "directArtifactIds": [325, 676, 327]
  }, {
    "id": 278,
    "transitiveDepSetIds": [279],
    "directArtifactIds": [207]
  }, {
    "id": 280,
    "directArtifactIds": [679]
  }, {
    "id": 281,
    "directArtifactIds": [681]
  }, {
    "id": 285,
    "directArtifactIds": [683, 679]
  }, {
    "id": 284,
    "transitiveDepSetIds": [285],
    "directArtifactIds": [679]
  }, {
    "id": 283,
    "transitiveDepSetIds": [284],
    "directArtifactIds": [680]
  }, {
    "id": 282,
    "transitiveDepSetIds": [283],
    "directArtifactIds": [682]
  }, {
    "id": 286,
    "directArtifactIds": [684, 8, 9]
  }, {
    "id": 288,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 287,
    "transitiveDepSetIds": [47, 288],
    "directArtifactIds": [203]
  }, {
    "id": 289,
    "directArtifactIds": [690, 207]
  }, {
    "id": 290,
    "directArtifactIds": [693]
  }, {
    "id": 293,
    "directArtifactIds": [687, 691]
  }, {
    "id": 294,
    "directArtifactIds": [695, 696]
  }, {
    "id": 292,
    "transitiveDepSetIds": [293, 294, 59],
    "directArtifactIds": [696, 325]
  }, {
    "id": 291,
    "transitiveDepSetIds": [292],
    "directArtifactIds": [694]
  }, {
    "id": 296,
    "directArtifactIds": [325, 697, 327]
  }, {
    "id": 295,
    "transitiveDepSetIds": [296],
    "directArtifactIds": [207]
  }, {
    "id": 298,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 297,
    "transitiveDepSetIds": [47, 298],
    "directArtifactIds": [203]
  }, {
    "id": 299,
    "directArtifactIds": [703, 207]
  }, {
    "id": 300,
    "directArtifactIds": [706]
  }, {
    "id": 303,
    "directArtifactIds": [700, 704]
  }, {
    "id": 304,
    "directArtifactIds": [695, 708]
  }, {
    "id": 302,
    "transitiveDepSetIds": [303, 304, 59],
    "directArtifactIds": [708, 325]
  }, {
    "id": 301,
    "transitiveDepSetIds": [302],
    "directArtifactIds": [707]
  }, {
    "id": 306,
    "directArtifactIds": [325, 709, 327]
  }, {
    "id": 305,
    "transitiveDepSetIds": [306],
    "directArtifactIds": [207]
  }, {
    "id": 307,
    "directArtifactIds": [712]
  }, {
    "id": 308,
    "directArtifactIds": [714]
  }, {
    "id": 309,
    "directArtifactIds": [713, 715]
  }, {
    "id": 310,
    "directArtifactIds": [717]
  }, {
    "id": 311,
    "directArtifactIds": [719, 718]
  }, {
    "id": 312,
    "directArtifactIds": [720, 8, 9]
  }, {
    "id": 313,
    "directArtifactIds": [724]
  }, {
    "id": 316,
    "directArtifactIds": [723, 726]
  }, {
    "id": 315,
    "transitiveDepSetIds": [316],
    "directArtifactIds": [723]
  }, {
    "id": 314,
    "transitiveDepSetIds": [315],
    "directArtifactIds": [725]
  }, {
    "id": 317,
    "directArtifactIds": [727, 8, 9]
  }, {
    "id": 319,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 318,
    "transitiveDepSetIds": [47, 319],
    "directArtifactIds": [203]
  }, {
    "id": 320,
    "directArtifactIds": [733, 207]
  }, {
    "id": 321,
    "directArtifactIds": [736]
  }, {
    "id": 324,
    "directArtifactIds": [730, 734]
  }, {
    "id": 323,
    "transitiveDepSetIds": [324, 59],
    "directArtifactIds": [738, 325]
  }, {
    "id": 322,
    "transitiveDepSetIds": [323],
    "directArtifactIds": [737]
  }, {
    "id": 326,
    "directArtifactIds": [325, 739, 327]
  }, {
    "id": 325,
    "transitiveDepSetIds": [326],
    "directArtifactIds": [207]
  }, {
    "id": 327,
    "directArtifactIds": [743]
  }, {
    "id": 328,
    "directArtifactIds": [742, 744]
  }, {
    "id": 329,
    "directArtifactIds": [745, 8, 9]
  }, {
    "id": 331,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 330,
    "transitiveDepSetIds": [47, 331],
    "directArtifactIds": [203]
  }, {
    "id": 332,
    "directArtifactIds": [751, 207]
  }, {
    "id": 333,
    "directArtifactIds": [754]
  }, {
    "id": 336,
    "directArtifactIds": [748, 752]
  }, {
    "id": 335,
    "transitiveDepSetIds": [336, 59],
    "directArtifactIds": [756, 325]
  }, {
    "id": 334,
    "transitiveDepSetIds": [335],
    "directArtifactIds": [755]
  }, {
    "id": 338,
    "directArtifactIds": [325, 757, 327]
  }, {
    "id": 337,
    "transitiveDepSetIds": [338],
    "directArtifactIds": [207]
  }, {
    "id": 339,
    "directArtifactIds": [760]
  }, {
    "id": 340,
    "directArtifactIds": [761]
  }, {
    "id": 341,
    "directArtifactIds": [67, 762]
  }, {
    "id": 342,
    "directArtifactIds": [765]
  }, {
    "id": 343,
    "directArtifactIds": [764, 766]
  }, {
    "id": 344,
    "directArtifactIds": [767, 8, 9]
  }, {
    "id": 346,
    "directArtifactIds": [770, 771]
  }, {
    "id": 345,
    "transitiveDepSetIds": [346],
    "directArtifactIds": [772]
  }, {
    "id": 348,
    "directArtifactIds": [773, 27, 28, 29, 30, 31]
  }, {
    "id": 347,
    "transitiveDepSetIds": [348, 17]
  }, {
    "id": 350,
    "directArtifactIds": [774, 775]
  }, {
    "id": 349,
    "transitiveDepSetIds": [350],
    "directArtifactIds": [776]
  }, {
    "id": 352,
    "directArtifactIds": [777, 27, 28, 29, 30, 31]
  }, {
    "id": 351,
    "transitiveDepSetIds": [352, 17]
  }, {
    "id": 353,
    "directArtifactIds": [778]
  }, {
    "id": 354,
    "directArtifactIds": [780, 779]
  }, {
    "id": 355,
    "directArtifactIds": [781, 8, 9]
  }, {
    "id": 356,
    "directArtifactIds": [785]
  }, {
    "id": 357,
    "directArtifactIds": [784, 786]
  }, {
    "id": 358,
    "directArtifactIds": [787, 8, 9]
  }, {
    "id": 359,
    "directArtifactIds": [791]
  }, {
    "id": 360,
    "directArtifactIds": [790, 792]
  }, {
    "id": 361,
    "directArtifactIds": [793, 8, 9]
  }, {
    "id": 362,
    "directArtifactIds": [797]
  }, {
    "id": 363,
    "directArtifactIds": [796, 798]
  }, {
    "id": 364,
    "directArtifactIds": [799, 8, 9]
  }, {
    "id": 365,
    "directArtifactIds": [803]
  }, {
    "id": 368,
    "directArtifactIds": [802, 805, 490]
  }, {
    "id": 367,
    "transitiveDepSetIds": [368],
    "directArtifactIds": [802]
  }, {
    "id": 366,
    "transitiveDepSetIds": [367],
    "directArtifactIds": [804]
  }, {
    "id": 369,
    "directArtifactIds": [806, 8, 9]
  }, {
    "id": 370,
    "directArtifactIds": [810]
  }, {
    "id": 371,
    "directArtifactIds": [809, 811]
  }, {
    "id": 372,
    "directArtifactIds": [812, 8, 9]
  }, {
    "id": 373,
    "directArtifactIds": [522, 815]
  }, {
    "id": 374,
    "transitiveDepSetIds": [177],
    "directArtifactIds": [816, 818]
  }, {
    "id": 375,
    "directArtifactIds": [522, 819]
  }, {
    "id": 376,
    "directArtifactIds": [822]
  }, {
    "id": 377,
    "directArtifactIds": [819, 823]
  }, {
    "id": 378,
    "directArtifactIds": [825]
  }, {
    "id": 379,
    "directArtifactIds": [827]
  }, {
    "id": 382,
    "directArtifactIds": [683, 825]
  }, {
    "id": 381,
    "transitiveDepSetIds": [382],
    "directArtifactIds": [826]
  }, {
    "id": 380,
    "transitiveDepSetIds": [381],
    "directArtifactIds": [828]
  }, {
    "id": 383,
    "directArtifactIds": [829, 8, 9]
  }, {
    "id": 384,
    "directArtifactIds": [832]
  }, {
    "id": 385,
    "directArtifactIds": [834, 833]
  }, {
    "id": 386,
    "directArtifactIds": [835, 8, 9]
  }, {
    "id": 387,
    "directArtifactIds": [839]
  }, {
    "id": 388,
    "directArtifactIds": [841, 840]
  }, {
    "id": 389,
    "directArtifactIds": [842, 8, 9]
  }, {
    "id": 390,
    "directArtifactIds": [846]
  }, {
    "id": 391,
    "directArtifactIds": [845, 847]
  }, {
    "id": 392,
    "directArtifactIds": [848, 8, 9]
  }, {
    "id": 393,
    "directArtifactIds": [852]
  }, {
    "id": 396,
    "directArtifactIds": [851, 854, 485]
  }, {
    "id": 395,
    "transitiveDepSetIds": [396],
    "directArtifactIds": [851]
  }, {
    "id": 394,
    "transitiveDepSetIds": [395],
    "directArtifactIds": [853]
  }, {
    "id": 397,
    "directArtifactIds": [855, 8, 9]
  }, {
    "id": 398,
    "directArtifactIds": [859]
  }, {
    "id": 399,
    "directArtifactIds": [858, 860]
  }, {
    "id": 400,
    "directArtifactIds": [861, 8, 9]
  }, {
    "id": 401,
    "directArtifactIds": [864]
  }, {
    "id": 402,
    "directArtifactIds": [866, 865]
  }, {
    "id": 403,
    "directArtifactIds": [867, 8, 9]
  }, {
    "id": 405,
    "directArtifactIds": [871, 3, 872, 873, 874, 49, 875, 876, 877, 695, 708, 878, 372, 879, 738, 880, 881, 756, 675, 324, 882, 609, 883, 884, 885, 621, 886, 887, 888, 889, 890, 696, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 870]
  }, {
    "id": 404,
    "transitiveDepSetIds": [405, 23]
  }, {
    "id": 406,
    "directArtifactIds": [907]
  }, {
    "id": 409,
    "directArtifactIds": [906, 909, 399]
  }, {
    "id": 408,
    "transitiveDepSetIds": [409],
    "directArtifactIds": [906]
  }, {
    "id": 407,
    "transitiveDepSetIds": [408],
    "directArtifactIds": [908]
  }, {
    "id": 410,
    "directArtifactIds": [910, 8, 9]
  }, {
    "id": 411,
    "directArtifactIds": [914]
  }, {
    "id": 412,
    "directArtifactIds": [916, 915]
  }, {
    "id": 413,
    "directArtifactIds": [917, 8, 9]
  }, {
    "id": 414,
    "directArtifactIds": [921]
  }, {
    "id": 415,
    "directArtifactIds": [920, 922]
  }, {
    "id": 416,
    "directArtifactIds": [923, 8, 9]
  }, {
    "id": 417,
    "directArtifactIds": [926]
  }, {
    "id": 418,
    "directArtifactIds": [928]
  }, {
    "id": 421,
    "directArtifactIds": [683, 926]
  }, {
    "id": 420,
    "transitiveDepSetIds": [421],
    "directArtifactIds": [927]
  }, {
    "id": 419,
    "transitiveDepSetIds": [420],
    "directArtifactIds": [929]
  }, {
    "id": 422,
    "directArtifactIds": [930, 8, 9]
  }, {
    "id": 423,
    "directArtifactIds": [935]
  }, {
    "id": 424,
    "directArtifactIds": [934, 936]
  }, {
    "id": 425,
    "directArtifactIds": [937, 8, 9]
  }, {
    "id": 427,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 426,
    "transitiveDepSetIds": [47, 427],
    "directArtifactIds": [203]
  }, {
    "id": 428,
    "directArtifactIds": [943, 207]
  }, {
    "id": 429,
    "directArtifactIds": [946]
  }, {
    "id": 432,
    "directArtifactIds": [940, 944]
  }, {
    "id": 433,
    "directArtifactIds": [898, 892]
  }, {
    "id": 431,
    "transitiveDepSetIds": [432, 433, 59],
    "directArtifactIds": [892, 325]
  }, {
    "id": 430,
    "transitiveDepSetIds": [431],
    "directArtifactIds": [947]
  }, {
    "id": 435,
    "directArtifactIds": [325, 948, 327]
  }, {
    "id": 434,
    "transitiveDepSetIds": [435],
    "directArtifactIds": [207]
  }, {
    "id": 436,
    "directArtifactIds": [952]
  }, {
    "id": 437,
    "directArtifactIds": [951, 953]
  }, {
    "id": 438,
    "directArtifactIds": [954, 8, 9]
  }, {
    "id": 439,
    "directArtifactIds": [958]
  }, {
    "id": 440,
    "directArtifactIds": [957, 959]
  }, {
    "id": 441,
    "directArtifactIds": [960, 8, 9]
  }, {
    "id": 442,
    "directArtifactIds": [964]
  }, {
    "id": 445,
    "directArtifactIds": [963, 966, 913]
  }, {
    "id": 444,
    "transitiveDepSetIds": [445],
    "directArtifactIds": [963]
  }, {
    "id": 443,
    "transitiveDepSetIds": [444],
    "directArtifactIds": [965]
  }, {
    "id": 446,
    "directArtifactIds": [967, 8, 9]
  }, {
    "id": 447,
    "directArtifactIds": [971]
  }, {
    "id": 448,
    "directArtifactIds": [970, 972]
  }, {
    "id": 449,
    "directArtifactIds": [973, 8, 9]
  }, {
    "id": 450,
    "directArtifactIds": [976]
  }, {
    "id": 451,
    "directArtifactIds": [978, 977]
  }, {
    "id": 452,
    "directArtifactIds": [979, 8, 9]
  }, {
    "id": 453,
    "directArtifactIds": [983]
  }, {
    "id": 454,
    "directArtifactIds": [982, 984]
  }, {
    "id": 455,
    "directArtifactIds": [985, 8, 9]
  }, {
    "id": 456,
    "directArtifactIds": [989]
  }, {
    "id": 457,
    "directArtifactIds": [988, 990]
  }, {
    "id": 458,
    "directArtifactIds": [991, 8, 9]
  }, {
    "id": 459,
    "directArtifactIds": [995]
  }, {
    "id": 462,
    "directArtifactIds": [994, 473, 997]
  }, {
    "id": 461,
    "transitiveDepSetIds": [462],
    "directArtifactIds": [994]
  }, {
    "id": 460,
    "transitiveDepSetIds": [461],
    "directArtifactIds": [996]
  }, {
    "id": 463,
    "directArtifactIds": [998, 8, 9]
  }, {
    "id": 464,
    "directArtifactIds": [1001]
  }, {
    "id": 465,
    "directArtifactIds": [1003]
  }, {
    "id": 468,
    "directArtifactIds": [1001, 1002]
  }, {
    "id": 469,
    "directArtifactIds": [881, 888]
  }, {
    "id": 467,
    "transitiveDepSetIds": [468, 469],
    "directArtifactIds": [421, 422]
  }, {
    "id": 466,
    "transitiveDepSetIds": [467],
    "directArtifactIds": [1004]
  }, {
    "id": 470,
    "directArtifactIds": [1005, 8, 9]
  }, {
    "id": 472,
    "directArtifactIds": [1008, 1009]
  }, {
    "id": 471,
    "transitiveDepSetIds": [472],
    "directArtifactIds": [1010]
  }, {
    "id": 474,
    "directArtifactIds": [1011, 27, 28, 29, 30, 31]
  }, {
    "id": 473,
    "transitiveDepSetIds": [474, 17]
  }, {
    "id": 475,
    "directArtifactIds": [1013]
  }, {
    "id": 476,
    "directArtifactIds": [1012, 1014]
  }, {
    "id": 477,
    "directArtifactIds": [1015, 8, 9]
  }, {
    "id": 478,
    "directArtifactIds": [1018]
  }, {
    "id": 479,
    "directArtifactIds": [1019]
  }, {
    "id": 480,
    "directArtifactIds": [926, 1020]
  }, {
    "id": 481,
    "directArtifactIds": [1022, 2]
  }, {
    "id": 482,
    "directArtifactIds": [1024]
  }, {
    "id": 483,
    "directArtifactIds": [1023, 1025]
  }, {
    "id": 484,
    "directArtifactIds": [713]
  }, {
    "id": 485,
    "directArtifactIds": [1028]
  }, {
    "id": 488,
    "directArtifactIds": [713, 1027]
  }, {
    "id": 487,
    "transitiveDepSetIds": [488],
    "directArtifactIds": [713]
  }, {
    "id": 486,
    "transitiveDepSetIds": [487],
    "directArtifactIds": [1029]
  }, {
    "id": 489,
    "directArtifactIds": [1032]
  }, {
    "id": 490,
    "directArtifactIds": [1031, 1033]
  }, {
    "id": 491,
    "directArtifactIds": [1036]
  }, {
    "id": 494,
    "directArtifactIds": [1035, 1038, 340]
  }, {
    "id": 493,
    "transitiveDepSetIds": [494],
    "directArtifactIds": [1035]
  }, {
    "id": 492,
    "transitiveDepSetIds": [493],
    "directArtifactIds": [1037]
  }, {
    "id": 495,
    "directArtifactIds": [1039, 8, 9]
  }, {
    "id": 496,
    "directArtifactIds": [1044]
  }, {
    "id": 497,
    "directArtifactIds": [1043, 1045]
  }, {
    "id": 498,
    "directArtifactIds": [1046, 8, 9]
  }, {
    "id": 500,
    "directArtifactIds": [1049, 815]
  }, {
    "id": 502,
    "directArtifactIds": [1050, 1051]
  }, {
    "id": 501,
    "transitiveDepSetIds": [502],
    "directArtifactIds": [1050, 1051]
  }, {
    "id": 499,
    "transitiveDepSetIds": [500, 501]
  }, {
    "id": 504,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 503,
    "transitiveDepSetIds": [47, 504],
    "directArtifactIds": [203]
  }, {
    "id": 505,
    "directArtifactIds": [1056, 207]
  }, {
    "id": 506,
    "directArtifactIds": [1059]
  }, {
    "id": 509,
    "directArtifactIds": [1053, 1057]
  }, {
    "id": 508,
    "transitiveDepSetIds": [509, 59],
    "directArtifactIds": [891, 325]
  }, {
    "id": 507,
    "transitiveDepSetIds": [508],
    "directArtifactIds": [1060]
  }, {
    "id": 511,
    "directArtifactIds": [325, 1061, 327]
  }, {
    "id": 510,
    "transitiveDepSetIds": [511],
    "directArtifactIds": [207]
  }, {
    "id": 513,
    "directArtifactIds": [1064, 1065]
  }, {
    "id": 512,
    "transitiveDepSetIds": [513],
    "directArtifactIds": [1066]
  }, {
    "id": 515,
    "directArtifactIds": [1067, 27, 28, 29, 30, 31]
  }, {
    "id": 514,
    "transitiveDepSetIds": [515, 17]
  }, {
    "id": 516,
    "directArtifactIds": [1070]
  }, {
    "id": 519,
    "directArtifactIds": [1069, 1052, 1042]
  }, {
    "id": 518,
    "transitiveDepSetIds": [519],
    "directArtifactIds": [1069]
  }, {
    "id": 517,
    "transitiveDepSetIds": [518],
    "directArtifactIds": [1071]
  }, {
    "id": 520,
    "directArtifactIds": [1072, 8, 9]
  }, {
    "id": 521,
    "directArtifactIds": [1076]
  }, {
    "id": 522,
    "directArtifactIds": [1075, 1077]
  }, {
    "id": 523,
    "directArtifactIds": [1078, 8, 9]
  }, {
    "id": 524,
    "directArtifactIds": [1082]
  }, {
    "id": 527,
    "directArtifactIds": [1081, 1084, 493]
  }, {
    "id": 526,
    "transitiveDepSetIds": [527],
    "directArtifactIds": [1081]
  }, {
    "id": 525,
    "transitiveDepSetIds": [526],
    "directArtifactIds": [1083]
  }, {
    "id": 528,
    "directArtifactIds": [1085, 8, 9]
  }, {
    "id": 530,
    "directArtifactIds": [1088, 1089]
  }, {
    "id": 529,
    "transitiveDepSetIds": [530],
    "directArtifactIds": [1090]
  }, {
    "id": 532,
    "directArtifactIds": [1091, 27, 28, 29, 30, 31]
  }, {
    "id": 531,
    "transitiveDepSetIds": [532, 17]
  }, {
    "id": 533,
    "directArtifactIds": [1093]
  }, {
    "id": 536,
    "directArtifactIds": [1092, 1095, 494]
  }, {
    "id": 535,
    "transitiveDepSetIds": [536],
    "directArtifactIds": [1092]
  }, {
    "id": 534,
    "transitiveDepSetIds": [535],
    "directArtifactIds": [1094]
  }, {
    "id": 537,
    "directArtifactIds": [1096, 8, 9]
  }, {
    "id": 538,
    "directArtifactIds": [1100]
  }, {
    "id": 539,
    "directArtifactIds": [1099, 1101]
  }, {
    "id": 540,
    "directArtifactIds": [1102, 8, 9]
  }, {
    "id": 542,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 541,
    "transitiveDepSetIds": [47, 542],
    "directArtifactIds": [203]
  }, {
    "id": 543,
    "directArtifactIds": [1108, 207]
  }, {
    "id": 544,
    "directArtifactIds": [1111]
  }, {
    "id": 547,
    "directArtifactIds": [1105, 1109]
  }, {
    "id": 549,
    "directArtifactIds": [894, 895]
  }, {
    "id": 548,
    "transitiveDepSetIds": [549],
    "directArtifactIds": [886]
  }, {
    "id": 546,
    "transitiveDepSetIds": [547, 548, 59],
    "directArtifactIds": [886, 325]
  }, {
    "id": 545,
    "transitiveDepSetIds": [546],
    "directArtifactIds": [1112]
  }, {
    "id": 551,
    "directArtifactIds": [325, 1113, 327]
  }, {
    "id": 550,
    "transitiveDepSetIds": [551],
    "directArtifactIds": [207]
  }, {
    "id": 552,
    "directArtifactIds": [1117]
  }, {
    "id": 553,
    "directArtifactIds": [1116, 1118]
  }, {
    "id": 554,
    "directArtifactIds": [1119, 8, 9]
  }, {
    "id": 555,
    "directArtifactIds": [1122]
  }, {
    "id": 556,
    "directArtifactIds": [1125]
  }, {
    "id": 559,
    "directArtifactIds": [1124, 1127, 484]
  }, {
    "id": 558,
    "transitiveDepSetIds": [559],
    "directArtifactIds": [1124]
  }, {
    "id": 557,
    "transitiveDepSetIds": [558],
    "directArtifactIds": [1126]
  }, {
    "id": 560,
    "directArtifactIds": [1128, 8, 9]
  }, {
    "id": 561,
    "directArtifactIds": [1132]
  }, {
    "id": 562,
    "directArtifactIds": [1131, 1133]
  }, {
    "id": 563,
    "directArtifactIds": [1134, 8, 9]
  }, {
    "id": 564,
    "directArtifactIds": [1137]
  }, {
    "id": 565,
    "directArtifactIds": [1139]
  }, {
    "id": 568,
    "directArtifactIds": [1137, 1138]
  }, {
    "id": 567,
    "transitiveDepSetIds": [568],
    "directArtifactIds": [1137]
  }, {
    "id": 566,
    "transitiveDepSetIds": [567],
    "directArtifactIds": [1140]
  }, {
    "id": 569,
    "directArtifactIds": [1143]
  }, {
    "id": 570,
    "directArtifactIds": [1142, 1144]
  }, {
    "id": 571,
    "directArtifactIds": [1145, 8, 9]
  }, {
    "id": 572,
    "directArtifactIds": [1149]
  }, {
    "id": 573,
    "directArtifactIds": [1148, 1150]
  }, {
    "id": 574,
    "directArtifactIds": [1151, 8, 9]
  }, {
    "id": 576,
    "directArtifactIds": [1154, 1155]
  }, {
    "id": 575,
    "transitiveDepSetIds": [576],
    "directArtifactIds": [1156]
  }, {
    "id": 578,
    "directArtifactIds": [1157, 27, 28, 29, 30, 31]
  }, {
    "id": 577,
    "transitiveDepSetIds": [578, 17]
  }, {
    "id": 580,
    "directArtifactIds": [1158, 1159]
  }, {
    "id": 579,
    "transitiveDepSetIds": [580],
    "directArtifactIds": [1160]
  }, {
    "id": 582,
    "directArtifactIds": [1161, 27, 28, 29, 30, 31]
  }, {
    "id": 581,
    "transitiveDepSetIds": [582, 17]
  }, {
    "id": 583,
    "directArtifactIds": [1162]
  }, {
    "id": 584,
    "directArtifactIds": [1164, 1163]
  }, {
    "id": 585,
    "directArtifactIds": [1165, 8, 9]
  }, {
    "id": 586,
    "directArtifactIds": [1168]
  }, {
    "id": 587,
    "directArtifactIds": [1169]
  }, {
    "id": 588,
    "directArtifactIds": [522, 1171]
  }, {
    "id": 589,
    "transitiveDepSetIds": [177],
    "directArtifactIds": [1172, 1174]
  }, {
    "id": 590,
    "directArtifactIds": [522, 1018]
  }, {
    "id": 591,
    "directArtifactIds": [1177]
  }, {
    "id": 592,
    "directArtifactIds": [1018, 1178]
  }, {
    "id": 593,
    "directArtifactIds": [1181]
  }, {
    "id": 594,
    "directArtifactIds": [1180, 1182]
  }, {
    "id": 595,
    "directArtifactIds": [1183, 8, 9]
  }, {
    "id": 597,
    "directArtifactIds": [1186, 1187]
  }, {
    "id": 596,
    "transitiveDepSetIds": [597],
    "directArtifactIds": [1188]
  }, {
    "id": 599,
    "directArtifactIds": [1189, 27, 28, 29, 30, 31]
  }, {
    "id": 598,
    "transitiveDepSetIds": [599, 17]
  }, {
    "id": 600,
    "directArtifactIds": [1190]
  }, {
    "id": 601,
    "directArtifactIds": [1192, 1191]
  }, {
    "id": 602,
    "directArtifactIds": [1193, 8, 9]
  }, {
    "id": 603,
    "directArtifactIds": [1197]
  }, {
    "id": 604,
    "directArtifactIds": [1196, 1198]
  }, {
    "id": 605,
    "directArtifactIds": [1199, 8, 9]
  }, {
    "id": 606,
    "directArtifactIds": [1202]
  }, {
    "id": 607,
    "directArtifactIds": [1203]
  }, {
    "id": 608,
    "directArtifactIds": [825, 1204]
  }, {
    "id": 609,
    "directArtifactIds": [1207]
  }, {
    "id": 610,
    "directArtifactIds": [1206, 1208]
  }, {
    "id": 611,
    "directArtifactIds": [1209, 8, 9]
  }, {
    "id": 612,
    "directArtifactIds": [1212]
  }, {
    "id": 613,
    "directArtifactIds": [1214, 1213]
  }, {
    "id": 614,
    "directArtifactIds": [1215, 8, 9]
  }, {
    "id": 615,
    "directArtifactIds": [1219]
  }, {
    "id": 616,
    "directArtifactIds": [1218, 1220]
  }, {
    "id": 617,
    "directArtifactIds": [1221, 8, 9]
  }, {
    "id": 619,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 618,
    "transitiveDepSetIds": [47, 619],
    "directArtifactIds": [203]
  }, {
    "id": 620,
    "directArtifactIds": [1227, 207]
  }, {
    "id": 621,
    "directArtifactIds": [1230]
  }, {
    "id": 624,
    "directArtifactIds": [1224, 1228]
  }, {
    "id": 625,
    "transitiveDepSetIds": [304],
    "directArtifactIds": [885]
  }, {
    "id": 623,
    "transitiveDepSetIds": [624, 625, 59],
    "directArtifactIds": [885, 325]
  }, {
    "id": 622,
    "transitiveDepSetIds": [623],
    "directArtifactIds": [1231]
  }, {
    "id": 627,
    "directArtifactIds": [325, 1232, 327]
  }, {
    "id": 626,
    "transitiveDepSetIds": [627],
    "directArtifactIds": [207]
  }, {
    "id": 628,
    "directArtifactIds": [1237]
  }, {
    "id": 631,
    "directArtifactIds": [1236, 1239, 491]
  }, {
    "id": 630,
    "transitiveDepSetIds": [631],
    "directArtifactIds": [1236]
  }, {
    "id": 629,
    "transitiveDepSetIds": [630],
    "directArtifactIds": [1238]
  }, {
    "id": 632,
    "directArtifactIds": [1240, 8, 9]
  }, {
    "id": 634,
    "directArtifactIds": [1243, 1244]
  }, {
    "id": 633,
    "transitiveDepSetIds": [634],
    "directArtifactIds": [1245]
  }, {
    "id": 636,
    "directArtifactIds": [1246, 27, 28, 29, 30, 31]
  }, {
    "id": 635,
    "transitiveDepSetIds": [636, 17]
  }, {
    "id": 637,
    "directArtifactIds": [1031]
  }, {
    "id": 638,
    "directArtifactIds": [1248]
  }, {
    "id": 641,
    "directArtifactIds": [1031, 1247]
  }, {
    "id": 640,
    "transitiveDepSetIds": [641],
    "directArtifactIds": [1031]
  }, {
    "id": 639,
    "transitiveDepSetIds": [640],
    "directArtifactIds": [1249]
  }, {
    "id": 642,
    "directArtifactIds": [1252]
  }, {
    "id": 643,
    "directArtifactIds": [1251, 1253]
  }, {
    "id": 644,
    "directArtifactIds": [1254, 8, 9]
  }, {
    "id": 645,
    "directArtifactIds": [1259]
  }, {
    "id": 646,
    "directArtifactIds": [1258, 1260]
  }, {
    "id": 647,
    "directArtifactIds": [1261, 8, 9]
  }, {
    "id": 649,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 648,
    "transitiveDepSetIds": [47, 649],
    "directArtifactIds": [203]
  }, {
    "id": 650,
    "directArtifactIds": [1267, 207]
  }, {
    "id": 651,
    "directArtifactIds": [1270]
  }, {
    "id": 654,
    "directArtifactIds": [1264, 1268]
  }, {
    "id": 653,
    "transitiveDepSetIds": [654, 59],
    "directArtifactIds": [889, 325]
  }, {
    "id": 652,
    "transitiveDepSetIds": [653],
    "directArtifactIds": [1271]
  }, {
    "id": 656,
    "directArtifactIds": [325, 1272, 327]
  }, {
    "id": 655,
    "transitiveDepSetIds": [656],
    "directArtifactIds": [207]
  }, {
    "id": 658,
    "directArtifactIds": [1275, 1276]
  }, {
    "id": 657,
    "transitiveDepSetIds": [658],
    "directArtifactIds": [1277]
  }, {
    "id": 660,
    "directArtifactIds": [1278, 27, 28, 29, 30, 31]
  }, {
    "id": 659,
    "transitiveDepSetIds": [660, 17]
  }, {
    "id": 664,
    "directArtifactIds": [1279, 1280]
  }, {
    "id": 663,
    "transitiveDepSetIds": [664],
    "directArtifactIds": [1281]
  }, {
    "id": 666,
    "directArtifactIds": [1282, 1283]
  }, {
    "id": 665,
    "transitiveDepSetIds": [666],
    "directArtifactIds": [1284]
  }, {
    "id": 662,
    "transitiveDepSetIds": [663, 665]
  }, {
    "id": 661,
    "transitiveDepSetIds": [662],
    "directArtifactIds": [2]
  }, {
    "id": 667,
    "directArtifactIds": [1285]
  }, {
    "id": 668,
    "directArtifactIds": [1287, 1286]
  }, {
    "id": 669,
    "directArtifactIds": [1288, 8, 9]
  }, {
    "id": 670,
    "directArtifactIds": [1292]
  }, {
    "id": 671,
    "directArtifactIds": [1291, 1293]
  }, {
    "id": 672,
    "directArtifactIds": [1294, 8, 9]
  }, {
    "id": 673,
    "directArtifactIds": [1298]
  }, {
    "id": 676,
    "directArtifactIds": [1297, 1300, 487]
  }, {
    "id": 675,
    "transitiveDepSetIds": [676],
    "directArtifactIds": [1297]
  }, {
    "id": 674,
    "transitiveDepSetIds": [675],
    "directArtifactIds": [1299]
  }, {
    "id": 677,
    "directArtifactIds": [1301, 8, 9]
  }, {
    "id": 679,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 678,
    "transitiveDepSetIds": [47, 679],
    "directArtifactIds": [203]
  }, {
    "id": 680,
    "directArtifactIds": [1307, 207]
  }, {
    "id": 681,
    "directArtifactIds": [1310]
  }, {
    "id": 684,
    "directArtifactIds": [1304, 1308]
  }, {
    "id": 683,
    "transitiveDepSetIds": [684, 59],
    "directArtifactIds": [890, 325]
  }, {
    "id": 682,
    "transitiveDepSetIds": [683],
    "directArtifactIds": [1311]
  }, {
    "id": 686,
    "directArtifactIds": [325, 1312, 327]
  }, {
    "id": 685,
    "transitiveDepSetIds": [686],
    "directArtifactIds": [207]
  }, {
    "id": 687,
    "directArtifactIds": [1316]
  }, {
    "id": 688,
    "directArtifactIds": [1315, 1317]
  }, {
    "id": 689,
    "directArtifactIds": [1318, 8, 9]
  }, {
    "id": 691,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 690,
    "transitiveDepSetIds": [47, 691],
    "directArtifactIds": [203]
  }, {
    "id": 692,
    "directArtifactIds": [1324, 207]
  }, {
    "id": 693,
    "directArtifactIds": [1327]
  }, {
    "id": 696,
    "directArtifactIds": [1321, 1325]
  }, {
    "id": 695,
    "transitiveDepSetIds": [696, 59],
    "directArtifactIds": [879, 325]
  }, {
    "id": 694,
    "transitiveDepSetIds": [695],
    "directArtifactIds": [1328]
  }, {
    "id": 698,
    "directArtifactIds": [325, 1329, 327]
  }, {
    "id": 697,
    "transitiveDepSetIds": [698],
    "directArtifactIds": [207]
  }, {
    "id": 699,
    "directArtifactIds": [1332]
  }, {
    "id": 701,
    "directArtifactIds": [522, 1334]
  }, {
    "id": 700,
    "transitiveDepSetIds": [701],
    "directArtifactIds": [1333]
  }, {
    "id": 703,
    "directArtifactIds": [1335, 1338]
  }, {
    "id": 702,
    "transitiveDepSetIds": [703, 177],
    "directArtifactIds": [1333, 1337]
  }, {
    "id": 704,
    "directArtifactIds": [522, 1202]
  }, {
    "id": 705,
    "directArtifactIds": [1341]
  }, {
    "id": 706,
    "directArtifactIds": [1202, 1342]
  }, {
    "id": 707,
    "directArtifactIds": [1344]
  }, {
    "id": 708,
    "directArtifactIds": [1137, 1345]
  }, {
    "id": 709,
    "directArtifactIds": [1348]
  }, {
    "id": 710,
    "directArtifactIds": [1347, 1349]
  }, {
    "id": 711,
    "directArtifactIds": [1352]
  }, {
    "id": 714,
    "directArtifactIds": [1351, 1354, 483]
  }, {
    "id": 713,
    "transitiveDepSetIds": [714],
    "directArtifactIds": [1351]
  }, {
    "id": 712,
    "transitiveDepSetIds": [713],
    "directArtifactIds": [1353]
  }, {
    "id": 715,
    "directArtifactIds": [1355, 8, 9]
  }, {
    "id": 716,
    "directArtifactIds": [1359]
  }, {
    "id": 719,
    "directArtifactIds": [1358, 1361, 388]
  }, {
    "id": 718,
    "transitiveDepSetIds": [719],
    "directArtifactIds": [1358]
  }, {
    "id": 717,
    "transitiveDepSetIds": [718],
    "directArtifactIds": [1360]
  }, {
    "id": 720,
    "directArtifactIds": [1362, 8, 9]
  }, {
    "id": 722,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 721,
    "transitiveDepSetIds": [47, 722],
    "directArtifactIds": [203]
  }, {
    "id": 723,
    "directArtifactIds": [1368, 207]
  }, {
    "id": 724,
    "directArtifactIds": [1371]
  }, {
    "id": 727,
    "directArtifactIds": [1365, 1369]
  }, {
    "id": 729,
    "transitiveDepSetIds": [304],
    "directArtifactIds": [880]
  }, {
    "id": 728,
    "transitiveDepSetIds": [304, 729],
    "directArtifactIds": [372, 324, 882]
  }, {
    "id": 726,
    "transitiveDepSetIds": [727, 728, 59],
    "directArtifactIds": [882, 325]
  }, {
    "id": 725,
    "transitiveDepSetIds": [726],
    "directArtifactIds": [1372]
  }, {
    "id": 731,
    "directArtifactIds": [325, 1373, 327]
  }, {
    "id": 730,
    "transitiveDepSetIds": [731],
    "directArtifactIds": [207]
  }, {
    "id": 735,
    "directArtifactIds": [1376, 1377]
  }, {
    "id": 734,
    "transitiveDepSetIds": [735],
    "directArtifactIds": [1378]
  }, {
    "id": 737,
    "directArtifactIds": [1379, 1380]
  }, {
    "id": 736,
    "transitiveDepSetIds": [737],
    "directArtifactIds": [1381]
  }, {
    "id": 739,
    "directArtifactIds": [1382, 1383]
  }, {
    "id": 738,
    "transitiveDepSetIds": [739],
    "directArtifactIds": [1384]
  }, {
    "id": 741,
    "directArtifactIds": [1385, 1386]
  }, {
    "id": 740,
    "transitiveDepSetIds": [741],
    "directArtifactIds": [1387]
  }, {
    "id": 733,
    "transitiveDepSetIds": [734, 736, 738, 740]
  }, {
    "id": 732,
    "transitiveDepSetIds": [733],
    "directArtifactIds": [2]
  }, {
    "id": 742,
    "directArtifactIds": [1393]
  }, {
    "id": 743,
    "directArtifactIds": [1392, 1394]
  }, {
    "id": 744,
    "directArtifactIds": [1395, 8, 9]
  }, {
    "id": 746,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 745,
    "transitiveDepSetIds": [47, 746],
    "directArtifactIds": [203]
  }, {
    "id": 747,
    "directArtifactIds": [1401, 207]
  }, {
    "id": 748,
    "directArtifactIds": [1404]
  }, {
    "id": 751,
    "directArtifactIds": [1398, 1402]
  }, {
    "id": 750,
    "transitiveDepSetIds": [751, 59],
    "directArtifactIds": [884, 325]
  }, {
    "id": 749,
    "transitiveDepSetIds": [750],
    "directArtifactIds": [1405]
  }, {
    "id": 753,
    "directArtifactIds": [325, 1406, 327]
  }, {
    "id": 752,
    "transitiveDepSetIds": [753],
    "directArtifactIds": [207]
  }, {
    "id": 754,
    "directArtifactIds": [1410]
  }, {
    "id": 757,
    "directArtifactIds": [1409, 1412, 35]
  }, {
    "id": 756,
    "transitiveDepSetIds": [757],
    "directArtifactIds": [1409]
  }, {
    "id": 755,
    "transitiveDepSetIds": [756],
    "directArtifactIds": [1411]
  }, {
    "id": 758,
    "directArtifactIds": [1413, 8, 9]
  }, {
    "id": 759,
    "directArtifactIds": [1417]
  }, {
    "id": 762,
    "directArtifactIds": [683, 926]
  }, {
    "id": 761,
    "transitiveDepSetIds": [762],
    "directArtifactIds": [1416]
  }, {
    "id": 760,
    "transitiveDepSetIds": [761],
    "directArtifactIds": [1418]
  }, {
    "id": 763,
    "directArtifactIds": [1421]
  }, {
    "id": 764,
    "directArtifactIds": [1420, 1422]
  }, {
    "id": 765,
    "directArtifactIds": [1423, 8, 9]
  }, {
    "id": 766,
    "directArtifactIds": [1427]
  }, {
    "id": 767,
    "directArtifactIds": [1426, 1428]
  }, {
    "id": 768,
    "directArtifactIds": [1429, 8, 9]
  }, {
    "id": 769,
    "directArtifactIds": [1432]
  }, {
    "id": 770,
    "directArtifactIds": [1434, 1433]
  }, {
    "id": 771,
    "directArtifactIds": [1435, 8, 9]
  }, {
    "id": 772,
    "directArtifactIds": [1438]
  }, {
    "id": 773,
    "directArtifactIds": [1440]
  }, {
    "id": 776,
    "directArtifactIds": [1438, 1439]
  }, {
    "id": 775,
    "transitiveDepSetIds": [776],
    "directArtifactIds": [639, 1170, 469, 421, 422]
  }, {
    "id": 774,
    "transitiveDepSetIds": [775],
    "directArtifactIds": [1441]
  }, {
    "id": 777,
    "directArtifactIds": [1442, 8, 9]
  }, {
    "id": 778,
    "directArtifactIds": [1446]
  }, {
    "id": 779,
    "directArtifactIds": [1445, 1447]
  }, {
    "id": 780,
    "directArtifactIds": [1448, 8, 9]
  }, {
    "id": 781,
    "directArtifactIds": [1451]
  }, {
    "id": 782,
    "directArtifactIds": [1453, 1452]
  }, {
    "id": 783,
    "directArtifactIds": [1454, 8, 9]
  }, {
    "id": 784,
    "directArtifactIds": [1457]
  }, {
    "id": 785,
    "directArtifactIds": [1459]
  }, {
    "id": 788,
    "directArtifactIds": [1457, 1458]
  }, {
    "id": 789,
    "directArtifactIds": [1388, 1389, 1390, 1391]
  }, {
    "id": 790,
    "directArtifactIds": [933, 1235]
  }, {
    "id": 787,
    "transitiveDepSetIds": [788, 789, 790],
    "directArtifactIds": [1068, 454, 421, 422]
  }, {
    "id": 786,
    "transitiveDepSetIds": [787],
    "directArtifactIds": [1460]
  }, {
    "id": 791,
    "directArtifactIds": [1461, 8, 9]
  }, {
    "id": 792,
    "directArtifactIds": [1465]
  }, {
    "id": 793,
    "directArtifactIds": [1464, 1466]
  }, {
    "id": 794,
    "directArtifactIds": [1467, 8, 9]
  }, {
    "id": 795,
    "directArtifactIds": [1470]
  }, {
    "id": 796,
    "directArtifactIds": [1472]
  }, {
    "id": 799,
    "directArtifactIds": [1470, 1471]
  }, {
    "id": 798,
    "transitiveDepSetIds": [799],
    "directArtifactIds": [1123, 421, 422]
  }, {
    "id": 797,
    "transitiveDepSetIds": [798],
    "directArtifactIds": [1473]
  }, {
    "id": 800,
    "directArtifactIds": [1474, 8, 9]
  }, {
    "id": 801,
    "directArtifactIds": [1478]
  }, {
    "id": 802,
    "directArtifactIds": [1477, 1479]
  }, {
    "id": 803,
    "directArtifactIds": [1480, 8, 9]
  }, {
    "id": 805,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 804,
    "transitiveDepSetIds": [47, 805],
    "directArtifactIds": [203]
  }, {
    "id": 806,
    "directArtifactIds": [1486, 207]
  }, {
    "id": 807,
    "directArtifactIds": [1489]
  }, {
    "id": 810,
    "directArtifactIds": [1483, 1487]
  }, {
    "id": 812,
    "directArtifactIds": [894, 896]
  }, {
    "id": 811,
    "transitiveDepSetIds": [812],
    "directArtifactIds": [887]
  }, {
    "id": 809,
    "transitiveDepSetIds": [810, 811, 59],
    "directArtifactIds": [887, 325]
  }, {
    "id": 808,
    "transitiveDepSetIds": [809],
    "directArtifactIds": [1490]
  }, {
    "id": 814,
    "directArtifactIds": [325, 1491, 327]
  }, {
    "id": 813,
    "transitiveDepSetIds": [814],
    "directArtifactIds": [207]
  }, {
    "id": 815,
    "directArtifactIds": [1495]
  }, {
    "id": 818,
    "directArtifactIds": [1494, 1497]
  }, {
    "id": 817,
    "transitiveDepSetIds": [818],
    "directArtifactIds": [1494]
  }, {
    "id": 816,
    "transitiveDepSetIds": [817],
    "directArtifactIds": [1496]
  }, {
    "id": 819,
    "directArtifactIds": [1498, 8, 9]
  }, {
    "id": 820,
    "directArtifactIds": [1023]
  }, {
    "id": 821,
    "directArtifactIds": [1502]
  }, {
    "id": 824,
    "directArtifactIds": [1023, 1501]
  }, {
    "id": 823,
    "transitiveDepSetIds": [824],
    "directArtifactIds": [1023]
  }, {
    "id": 822,
    "transitiveDepSetIds": [823],
    "directArtifactIds": [1503]
  }, {
    "id": 825,
    "directArtifactIds": [1506]
  }, {
    "id": 828,
    "directArtifactIds": [1505, 1508, 496]
  }, {
    "id": 827,
    "transitiveDepSetIds": [828],
    "directArtifactIds": [1505]
  }, {
    "id": 826,
    "transitiveDepSetIds": [827],
    "directArtifactIds": [1507]
  }, {
    "id": 829,
    "directArtifactIds": [1509, 8, 9]
  }, {
    "id": 831,
    "directArtifactIds": [1049, 815]
  }, {
    "id": 833,
    "directArtifactIds": [1512, 1513]
  }, {
    "id": 832,
    "transitiveDepSetIds": [833],
    "directArtifactIds": [1512, 1513]
  }, {
    "id": 830,
    "transitiveDepSetIds": [831, 832]
  }, {
    "id": 835,
    "directArtifactIds": [522, 1334]
  }, {
    "id": 834,
    "transitiveDepSetIds": [835],
    "directArtifactIds": [1514]
  }, {
    "id": 837,
    "directArtifactIds": [1515, 1338]
  }, {
    "id": 836,
    "transitiveDepSetIds": [837, 177],
    "directArtifactIds": [1514, 1517]
  }, {
    "id": 838,
    "directArtifactIds": [522, 679]
  }, {
    "id": 839,
    "directArtifactIds": [1520]
  }, {
    "id": 840,
    "transitiveDepSetIds": [284],
    "directArtifactIds": [1521]
  }, {
    "id": 842,
    "directArtifactIds": [1523, 1524]
  }, {
    "id": 841,
    "transitiveDepSetIds": [842],
    "directArtifactIds": [1525]
  }, {
    "id": 844,
    "directArtifactIds": [1526, 27, 28, 29, 30, 31]
  }, {
    "id": 843,
    "transitiveDepSetIds": [844, 17]
  }, {
    "id": 845,
    "directArtifactIds": [1528]
  }, {
    "id": 848,
    "directArtifactIds": [1527, 1530, 497]
  }, {
    "id": 847,
    "transitiveDepSetIds": [848],
    "directArtifactIds": [1527]
  }, {
    "id": 846,
    "transitiveDepSetIds": [847],
    "directArtifactIds": [1529]
  }, {
    "id": 849,
    "directArtifactIds": [1531, 8, 9]
  }, {
    "id": 851,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 850,
    "transitiveDepSetIds": [47, 851],
    "directArtifactIds": [203]
  }, {
    "id": 852,
    "directArtifactIds": [1537, 207]
  }, {
    "id": 853,
    "directArtifactIds": [1540]
  }, {
    "id": 856,
    "directArtifactIds": [1534, 1538]
  }, {
    "id": 855,
    "transitiveDepSetIds": [856, 59],
    "directArtifactIds": [881, 325]
  }, {
    "id": 854,
    "transitiveDepSetIds": [855],
    "directArtifactIds": [1541]
  }, {
    "id": 858,
    "directArtifactIds": [325, 1542, 327]
  }, {
    "id": 857,
    "transitiveDepSetIds": [858],
    "directArtifactIds": [207]
  }, {
    "id": 859,
    "directArtifactIds": [522, 1545]
  }, {
    "id": 860,
    "directArtifactIds": [1546, 522, 1548]
  }, {
    "id": 861,
    "transitiveDepSetIds": [177],
    "directArtifactIds": [1546, 1549]
  }, {
    "id": 862,
    "directArtifactIds": [37]
  }, {
    "id": 863,
    "directArtifactIds": [1552]
  }, {
    "id": 864,
    "directArtifactIds": [1551, 1553]
  }, {
    "id": 865,
    "directArtifactIds": [1554, 8, 9]
  }, {
    "id": 867,
    "directArtifactIds": [1557, 1558]
  }, {
    "id": 866,
    "transitiveDepSetIds": [867],
    "directArtifactIds": [1559]
  }, {
    "id": 869,
    "directArtifactIds": [1560, 27, 28, 29, 30, 31]
  }, {
    "id": 868,
    "transitiveDepSetIds": [869, 17]
  }, {
    "id": 870,
    "directArtifactIds": [1562]
  }, {
    "id": 873,
    "directArtifactIds": [683, 825]
  }, {
    "id": 872,
    "transitiveDepSetIds": [873],
    "directArtifactIds": [1561]
  }, {
    "id": 871,
    "transitiveDepSetIds": [872],
    "directArtifactIds": [1563]
  }, {
    "id": 874,
    "directArtifactIds": [1565]
  }, {
    "id": 875,
    "directArtifactIds": [1567, 1566]
  }, {
    "id": 876,
    "directArtifactIds": [1568, 8, 9]
  }, {
    "id": 877,
    "directArtifactIds": [1572]
  }, {
    "id": 878,
    "directArtifactIds": [1571, 1573]
  }, {
    "id": 879,
    "directArtifactIds": [1574, 8, 9]
  }, {
    "id": 881,
    "directArtifactIds": [1577, 1578]
  }, {
    "id": 880,
    "transitiveDepSetIds": [881],
    "directArtifactIds": [1579]
  }, {
    "id": 883,
    "directArtifactIds": [1580, 27, 28, 29, 30, 31]
  }, {
    "id": 882,
    "transitiveDepSetIds": [883, 17]
  }, {
    "id": 885,
    "directArtifactIds": [1581, 1582]
  }, {
    "id": 884,
    "transitiveDepSetIds": [885],
    "directArtifactIds": [1583]
  }, {
    "id": 887,
    "directArtifactIds": [1584, 27, 28, 29, 30, 31]
  }, {
    "id": 886,
    "transitiveDepSetIds": [887, 17]
  }, {
    "id": 889,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 888,
    "transitiveDepSetIds": [47, 889],
    "directArtifactIds": [203]
  }, {
    "id": 890,
    "directArtifactIds": [1588, 207]
  }, {
    "id": 891,
    "directArtifactIds": [1591]
  }, {
    "id": 894,
    "directArtifactIds": [1585, 1589]
  }, {
    "id": 893,
    "transitiveDepSetIds": [894, 469, 59],
    "directArtifactIds": [888, 325]
  }, {
    "id": 892,
    "transitiveDepSetIds": [893],
    "directArtifactIds": [1592]
  }, {
    "id": 896,
    "directArtifactIds": [325, 1593, 327]
  }, {
    "id": 895,
    "transitiveDepSetIds": [896],
    "directArtifactIds": [207]
  }, {
    "id": 897,
    "directArtifactIds": [1596]
  }, {
    "id": 898,
    "directArtifactIds": [1598, 1597]
  }, {
    "id": 899,
    "directArtifactIds": [1599, 8, 9]
  }, {
    "id": 901,
    "directArtifactIds": [1602, 1603]
  }, {
    "id": 900,
    "transitiveDepSetIds": [901],
    "directArtifactIds": [1604]
  }, {
    "id": 903,
    "directArtifactIds": [1605, 27, 28, 29, 30, 31]
  }, {
    "id": 902,
    "transitiveDepSetIds": [903, 17]
  }, {
    "id": 904,
    "directArtifactIds": [1607]
  }, {
    "id": 907,
    "directArtifactIds": [1606, 474, 1257]
  }, {
    "id": 906,
    "transitiveDepSetIds": [907],
    "directArtifactIds": [1606]
  }, {
    "id": 905,
    "transitiveDepSetIds": [906],
    "directArtifactIds": [1608]
  }, {
    "id": 908,
    "directArtifactIds": [1609, 8, 9]
  }, {
    "id": 910,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 909,
    "transitiveDepSetIds": [47, 910],
    "directArtifactIds": [203]
  }, {
    "id": 911,
    "directArtifactIds": [1615, 207]
  }, {
    "id": 912,
    "directArtifactIds": [1618]
  }, {
    "id": 915,
    "directArtifactIds": [1612, 1616]
  }, {
    "id": 914,
    "transitiveDepSetIds": [915, 59],
    "directArtifactIds": [877, 325]
  }, {
    "id": 913,
    "transitiveDepSetIds": [914],
    "directArtifactIds": [1619]
  }, {
    "id": 917,
    "directArtifactIds": [325, 1620, 327]
  }, {
    "id": 916,
    "transitiveDepSetIds": [917],
    "directArtifactIds": [207]
  }, {
    "id": 918,
    "directArtifactIds": [1624]
  }, {
    "id": 919,
    "directArtifactIds": [1623, 1625]
  }, {
    "id": 920,
    "directArtifactIds": [1626, 8, 9]
  }, {
    "id": 921,
    "directArtifactIds": [1630]
  }, {
    "id": 922,
    "directArtifactIds": [1629, 1631]
  }, {
    "id": 923,
    "directArtifactIds": [1632, 8, 9]
  }, {
    "id": 924,
    "directArtifactIds": [1636]
  }, {
    "id": 925,
    "directArtifactIds": [1635, 1637]
  }, {
    "id": 926,
    "directArtifactIds": [1638, 8, 9]
  }, {
    "id": 928,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 927,
    "transitiveDepSetIds": [47, 928],
    "directArtifactIds": [203]
  }, {
    "id": 929,
    "directArtifactIds": [1644, 207]
  }, {
    "id": 930,
    "directArtifactIds": [1647]
  }, {
    "id": 933,
    "directArtifactIds": [1641, 1645]
  }, {
    "id": 932,
    "transitiveDepSetIds": [933, 59],
    "directArtifactIds": [695, 325]
  }, {
    "id": 931,
    "transitiveDepSetIds": [932],
    "directArtifactIds": [1648]
  }, {
    "id": 935,
    "directArtifactIds": [325, 1649, 327]
  }, {
    "id": 934,
    "transitiveDepSetIds": [935],
    "directArtifactIds": [207]
  }, {
    "id": 937,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 936,
    "transitiveDepSetIds": [47, 937],
    "directArtifactIds": [1652]
  }, {
    "id": 938,
    "directArtifactIds": [1655, 207]
  }, {
    "id": 939,
    "directArtifactIds": [1657]
  }, {
    "id": 941,
    "transitiveDepSetIds": [211, 47],
    "directArtifactIds": [891, 325]
  }, {
    "id": 940,
    "transitiveDepSetIds": [941],
    "directArtifactIds": [1658]
  }, {
    "id": 943,
    "directArtifactIds": [325, 577, 1659]
  }, {
    "id": 942,
    "transitiveDepSetIds": [943],
    "directArtifactIds": [207]
  }, {
    "id": 945,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 944,
    "transitiveDepSetIds": [47, 945],
    "directArtifactIds": [1652]
  }, {
    "id": 946,
    "directArtifactIds": [1664, 207]
  }, {
    "id": 947,
    "directArtifactIds": [1666]
  }, {
    "id": 951,
    "directArtifactIds": [695, 708]
  }, {
    "id": 950,
    "transitiveDepSetIds": [951],
    "directArtifactIds": [885]
  }, {
    "id": 949,
    "transitiveDepSetIds": [268, 950, 47],
    "directArtifactIds": [885, 325]
  }, {
    "id": 948,
    "transitiveDepSetIds": [949],
    "directArtifactIds": [1667]
  }, {
    "id": 953,
    "directArtifactIds": [325, 665, 1659]
  }, {
    "id": 952,
    "transitiveDepSetIds": [953],
    "directArtifactIds": [207]
  }, {
    "id": 955,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 954,
    "transitiveDepSetIds": [47, 955],
    "directArtifactIds": [1652]
  }, {
    "id": 956,
    "directArtifactIds": [1672, 207]
  }, {
    "id": 957,
    "directArtifactIds": [1674]
  }, {
    "id": 959,
    "transitiveDepSetIds": [18, 47],
    "directArtifactIds": [1676]
  }, {
    "id": 958,
    "transitiveDepSetIds": [959],
    "directArtifactIds": [1675]
  }, {
    "id": 961,
    "directArtifactIds": [1676, 34, 1659]
  }, {
    "id": 960,
    "transitiveDepSetIds": [961],
    "directArtifactIds": [207]
  }, {
    "id": 963,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 962,
    "transitiveDepSetIds": [47, 963],
    "directArtifactIds": [1652]
  }, {
    "id": 964,
    "directArtifactIds": [1681, 207]
  }, {
    "id": 965,
    "directArtifactIds": [1683]
  }, {
    "id": 967,
    "transitiveDepSetIds": [885, 47],
    "directArtifactIds": [695, 325]
  }, {
    "id": 966,
    "transitiveDepSetIds": [967],
    "directArtifactIds": [1684]
  }, {
    "id": 969,
    "directArtifactIds": [325, 1583, 1659]
  }, {
    "id": 968,
    "transitiveDepSetIds": [969],
    "directArtifactIds": [207]
  }, {
    "id": 971,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 970,
    "transitiveDepSetIds": [47, 971],
    "directArtifactIds": [1652]
  }, {
    "id": 972,
    "directArtifactIds": [1689, 207]
  }, {
    "id": 973,
    "directArtifactIds": [1691]
  }, {
    "id": 977,
    "directArtifactIds": [894, 895]
  }, {
    "id": 976,
    "transitiveDepSetIds": [977],
    "directArtifactIds": [886]
  }, {
    "id": 975,
    "transitiveDepSetIds": [472, 976, 47],
    "directArtifactIds": [886, 325]
  }, {
    "id": 974,
    "transitiveDepSetIds": [975],
    "directArtifactIds": [1692]
  }, {
    "id": 979,
    "directArtifactIds": [325, 1010, 1659]
  }, {
    "id": 978,
    "transitiveDepSetIds": [979],
    "directArtifactIds": [207]
  }, {
    "id": 980,
    "directArtifactIds": [325, 1695]
  }, {
    "id": 981,
    "directArtifactIds": [1282]
  }, {
    "id": 982,
    "directArtifactIds": [1697]
  }, {
    "id": 984,
    "transitiveDepSetIds": [666],
    "directArtifactIds": [1282]
  }, {
    "id": 983,
    "transitiveDepSetIds": [984],
    "directArtifactIds": [1698]
  }, {
    "id": 986,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 985,
    "transitiveDepSetIds": [47, 986],
    "directArtifactIds": [1652]
  }, {
    "id": 987,
    "directArtifactIds": [1701, 207]
  }, {
    "id": 988,
    "directArtifactIds": [1703]
  }, {
    "id": 992,
    "transitiveDepSetIds": [951],
    "directArtifactIds": [880]
  }, {
    "id": 991,
    "transitiveDepSetIds": [951, 992],
    "directArtifactIds": [372, 324, 882]
  }, {
    "id": 990,
    "transitiveDepSetIds": [881, 991, 47],
    "directArtifactIds": [882, 325]
  }, {
    "id": 989,
    "transitiveDepSetIds": [990],
    "directArtifactIds": [1704]
  }, {
    "id": 994,
    "directArtifactIds": [325, 1579, 1659]
  }, {
    "id": 993,
    "transitiveDepSetIds": [994],
    "directArtifactIds": [207]
  }, {
    "id": 996,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 995,
    "transitiveDepSetIds": [47, 996],
    "directArtifactIds": [1652]
  }, {
    "id": 997,
    "directArtifactIds": [1709, 207]
  }, {
    "id": 998,
    "directArtifactIds": [1711]
  }, {
    "id": 1000,
    "transitiveDepSetIds": [634, 47],
    "directArtifactIds": [884, 325]
  }, {
    "id": 999,
    "transitiveDepSetIds": [1000],
    "directArtifactIds": [1712]
  }, {
    "id": 1002,
    "directArtifactIds": [325, 1245, 1659]
  }, {
    "id": 1001,
    "transitiveDepSetIds": [1002],
    "directArtifactIds": [207]
  }, {
    "id": 1004,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1003,
    "transitiveDepSetIds": [47, 1004],
    "directArtifactIds": [1652]
  }, {
    "id": 1005,
    "directArtifactIds": [1717, 207]
  }, {
    "id": 1006,
    "directArtifactIds": [1719]
  }, {
    "id": 1008,
    "transitiveDepSetIds": [658, 47],
    "directArtifactIds": [877, 325]
  }, {
    "id": 1007,
    "transitiveDepSetIds": [1008],
    "directArtifactIds": [1720]
  }, {
    "id": 1010,
    "directArtifactIds": [325, 1277, 1659]
  }, {
    "id": 1009,
    "transitiveDepSetIds": [1010],
    "directArtifactIds": [207]
  }, {
    "id": 1011,
    "directArtifactIds": [1279]
  }, {
    "id": 1012,
    "directArtifactIds": [1723]
  }, {
    "id": 1014,
    "transitiveDepSetIds": [664],
    "directArtifactIds": [1279]
  }, {
    "id": 1013,
    "transitiveDepSetIds": [1014],
    "directArtifactIds": [1724]
  }, {
    "id": 1016,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1015,
    "transitiveDepSetIds": [47, 1016],
    "directArtifactIds": [1652]
  }, {
    "id": 1017,
    "directArtifactIds": [1727, 207]
  }, {
    "id": 1018,
    "directArtifactIds": [1729]
  }, {
    "id": 1020,
    "transitiveDepSetIds": [867, 47],
    "directArtifactIds": [890, 325]
  }, {
    "id": 1019,
    "transitiveDepSetIds": [1020],
    "directArtifactIds": [1730]
  }, {
    "id": 1022,
    "directArtifactIds": [325, 1559, 1659]
  }, {
    "id": 1021,
    "transitiveDepSetIds": [1022],
    "directArtifactIds": [207]
  }, {
    "id": 1024,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1023,
    "transitiveDepSetIds": [47, 1024],
    "directArtifactIds": [1652]
  }, {
    "id": 1025,
    "directArtifactIds": [1735, 207]
  }, {
    "id": 1026,
    "directArtifactIds": [1737]
  }, {
    "id": 1028,
    "transitiveDepSetIds": [530, 47],
    "directArtifactIds": [879, 325]
  }, {
    "id": 1027,
    "transitiveDepSetIds": [1028],
    "directArtifactIds": [1738]
  }, {
    "id": 1030,
    "directArtifactIds": [325, 1090, 1659]
  }, {
    "id": 1029,
    "transitiveDepSetIds": [1030],
    "directArtifactIds": [207]
  }, {
    "id": 1031,
    "directArtifactIds": [1741]
  }, {
    "id": 1033,
    "directArtifactIds": [522, 1742]
  }, {
    "id": 1032,
    "transitiveDepSetIds": [1033],
    "directArtifactIds": [1332]
  }, {
    "id": 1034,
    "directArtifactIds": [1338, 522, 1744]
  }, {
    "id": 1035,
    "transitiveDepSetIds": [177],
    "directArtifactIds": [1338, 1746]
  }, {
    "id": 1036,
    "directArtifactIds": [1747]
  }, {
    "id": 1038,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1037,
    "transitiveDepSetIds": [47, 1038],
    "directArtifactIds": [1652]
  }, {
    "id": 1039,
    "directArtifactIds": [1751, 207]
  }, {
    "id": 1040,
    "directArtifactIds": [1753]
  }, {
    "id": 1042,
    "transitiveDepSetIds": [202, 47],
    "directArtifactIds": [889, 325]
  }, {
    "id": 1041,
    "transitiveDepSetIds": [1042],
    "directArtifactIds": [1754]
  }, {
    "id": 1044,
    "directArtifactIds": [325, 566, 1659]
  }, {
    "id": 1043,
    "transitiveDepSetIds": [1044],
    "directArtifactIds": [207]
  }, {
    "id": 1045,
    "directArtifactIds": [1757]
  }, {
    "id": 1046,
    "directArtifactIds": [1512, 1758]
  }, {
    "id": 1047,
    "directArtifactIds": [1379]
  }, {
    "id": 1048,
    "directArtifactIds": [1759]
  }, {
    "id": 1050,
    "transitiveDepSetIds": [737],
    "directArtifactIds": [1379]
  }, {
    "id": 1049,
    "transitiveDepSetIds": [1050],
    "directArtifactIds": [1760]
  }, {
    "id": 1052,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1051,
    "transitiveDepSetIds": [47, 1052],
    "directArtifactIds": [1652]
  }, {
    "id": 1053,
    "directArtifactIds": [1763, 207]
  }, {
    "id": 1054,
    "directArtifactIds": [1765]
  }, {
    "id": 1056,
    "transitiveDepSetIds": [842, 47],
    "directArtifactIds": [881, 325]
  }, {
    "id": 1055,
    "transitiveDepSetIds": [1056],
    "directArtifactIds": [1766]
  }, {
    "id": 1058,
    "directArtifactIds": [325, 1525, 1659]
  }, {
    "id": 1057,
    "transitiveDepSetIds": [1058],
    "directArtifactIds": [207]
  }, {
    "id": 1059,
    "directArtifactIds": [1385]
  }, {
    "id": 1060,
    "directArtifactIds": [1769]
  }, {
    "id": 1062,
    "transitiveDepSetIds": [741],
    "directArtifactIds": [1385]
  }, {
    "id": 1061,
    "transitiveDepSetIds": [1062],
    "directArtifactIds": [1770]
  }, {
    "id": 1063,
    "directArtifactIds": [1382]
  }, {
    "id": 1064,
    "directArtifactIds": [1771]
  }, {
    "id": 1066,
    "transitiveDepSetIds": [739],
    "directArtifactIds": [1382]
  }, {
    "id": 1065,
    "transitiveDepSetIds": [1066],
    "directArtifactIds": [1772]
  }, {
    "id": 1067,
    "directArtifactIds": [522, 815]
  }, {
    "id": 1068,
    "directArtifactIds": [522, 815]
  }, {
    "id": 1070,
    "directArtifactIds": [522, 527, 528]
  }, {
    "id": 1069,
    "transitiveDepSetIds": [1070],
    "directArtifactIds": [1775, 1777]
  }, {
    "id": 1071,
    "directArtifactIds": [522, 1050]
  }, {
    "id": 1072,
    "directArtifactIds": [1780]
  }, {
    "id": 1073,
    "directArtifactIds": [1050, 1781]
  }, {
    "id": 1075,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1074,
    "transitiveDepSetIds": [47, 1075],
    "directArtifactIds": [1652]
  }, {
    "id": 1076,
    "directArtifactIds": [1784, 207]
  }, {
    "id": 1077,
    "directArtifactIds": [1786]
  }, {
    "id": 1081,
    "directArtifactIds": [894, 896]
  }, {
    "id": 1080,
    "transitiveDepSetIds": [1081],
    "directArtifactIds": [887]
  }, {
    "id": 1079,
    "transitiveDepSetIds": [256, 1080, 47],
    "directArtifactIds": [887, 325]
  }, {
    "id": 1078,
    "transitiveDepSetIds": [1079],
    "directArtifactIds": [1787]
  }, {
    "id": 1083,
    "directArtifactIds": [325, 648, 1659]
  }, {
    "id": 1082,
    "transitiveDepSetIds": [1083],
    "directArtifactIds": [207]
  }, {
    "id": 1084,
    "directArtifactIds": [1376]
  }, {
    "id": 1085,
    "directArtifactIds": [1790]
  }, {
    "id": 1087,
    "transitiveDepSetIds": [735],
    "directArtifactIds": [1376]
  }, {
    "id": 1086,
    "transitiveDepSetIds": [1087],
    "directArtifactIds": [1791]
  }, {
    "id": 1089,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1088,
    "transitiveDepSetIds": [47, 1089],
    "directArtifactIds": [1652]
  }, {
    "id": 1090,
    "directArtifactIds": [1794, 207]
  }, {
    "id": 1091,
    "directArtifactIds": [1796]
  }, {
    "id": 1094,
    "directArtifactIds": [881, 888]
  }, {
    "id": 1093,
    "transitiveDepSetIds": [70, 1094, 47],
    "directArtifactIds": [888, 325]
  }, {
    "id": 1092,
    "transitiveDepSetIds": [1093],
    "directArtifactIds": [1797]
  }, {
    "id": 1096,
    "directArtifactIds": [325, 338, 1659]
  }, {
    "id": 1095,
    "transitiveDepSetIds": [1096],
    "directArtifactIds": [207]
  }, {
    "id": 1098,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1097,
    "transitiveDepSetIds": [47, 1098],
    "directArtifactIds": [1652]
  }, {
    "id": 1099,
    "directArtifactIds": [1802, 207]
  }, {
    "id": 1100,
    "directArtifactIds": [1804]
  }, {
    "id": 1102,
    "transitiveDepSetIds": [108, 47],
    "directArtifactIds": [900, 325]
  }, {
    "id": 1101,
    "transitiveDepSetIds": [1102],
    "directArtifactIds": [1805]
  }, {
    "id": 1104,
    "directArtifactIds": [325, 397, 1659]
  }, {
    "id": 1103,
    "transitiveDepSetIds": [1104],
    "directArtifactIds": [207]
  }, {
    "id": 1106,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1105,
    "transitiveDepSetIds": [47, 1106],
    "directArtifactIds": [1652]
  }, {
    "id": 1107,
    "directArtifactIds": [1810, 207]
  }, {
    "id": 1108,
    "directArtifactIds": [1812]
  }, {
    "id": 1111,
    "directArtifactIds": [695, 696]
  }, {
    "id": 1110,
    "transitiveDepSetIds": [597, 1111, 47],
    "directArtifactIds": [696, 325]
  }, {
    "id": 1109,
    "transitiveDepSetIds": [1110],
    "directArtifactIds": [1813]
  }, {
    "id": 1113,
    "directArtifactIds": [325, 1188, 1659]
  }, {
    "id": 1112,
    "transitiveDepSetIds": [1113],
    "directArtifactIds": [207]
  }, {
    "id": 1115,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1114,
    "transitiveDepSetIds": [47, 1115],
    "directArtifactIds": [1652]
  }, {
    "id": 1116,
    "directArtifactIds": [1818, 207]
  }, {
    "id": 1117,
    "directArtifactIds": [1820]
  }, {
    "id": 1119,
    "transitiveDepSetIds": [580, 47],
    "directArtifactIds": [324, 325]
  }, {
    "id": 1118,
    "transitiveDepSetIds": [1119],
    "directArtifactIds": [1821]
  }, {
    "id": 1121,
    "directArtifactIds": [325, 1160, 1659]
  }, {
    "id": 1120,
    "transitiveDepSetIds": [1121],
    "directArtifactIds": [207]
  }, {
    "id": 1123,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1122,
    "transitiveDepSetIds": [47, 1123],
    "directArtifactIds": [1652]
  }, {
    "id": 1124,
    "directArtifactIds": [1826, 207]
  }, {
    "id": 1125,
    "directArtifactIds": [1828]
  }, {
    "id": 1127,
    "transitiveDepSetIds": [346, 47],
    "directArtifactIds": [372, 325]
  }, {
    "id": 1126,
    "transitiveDepSetIds": [1127],
    "directArtifactIds": [1829]
  }, {
    "id": 1129,
    "directArtifactIds": [325, 772, 1659]
  }, {
    "id": 1128,
    "transitiveDepSetIds": [1129],
    "directArtifactIds": [207]
  }, {
    "id": 1131,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1130,
    "transitiveDepSetIds": [47, 1131],
    "directArtifactIds": [1652]
  }, {
    "id": 1132,
    "directArtifactIds": [1834, 207]
  }, {
    "id": 1133,
    "directArtifactIds": [1836]
  }, {
    "id": 1135,
    "transitiveDepSetIds": [14, 47],
    "directArtifactIds": [609, 325]
  }, {
    "id": 1134,
    "transitiveDepSetIds": [1135],
    "directArtifactIds": [1837]
  }, {
    "id": 1137,
    "directArtifactIds": [325, 25, 1659]
  }, {
    "id": 1136,
    "transitiveDepSetIds": [1137],
    "directArtifactIds": [207]
  }, {
    "id": 1139,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1138,
    "transitiveDepSetIds": [47, 1139],
    "directArtifactIds": [1652]
  }, {
    "id": 1140,
    "directArtifactIds": [1842, 207]
  }, {
    "id": 1141,
    "directArtifactIds": [1844]
  }, {
    "id": 1143,
    "transitiveDepSetIds": [101, 47],
    "directArtifactIds": [675, 325]
  }, {
    "id": 1142,
    "transitiveDepSetIds": [1143],
    "directArtifactIds": [1845]
  }, {
    "id": 1145,
    "directArtifactIds": [325, 386, 1659]
  }, {
    "id": 1144,
    "transitiveDepSetIds": [1145],
    "directArtifactIds": [207]
  }, {
    "id": 1147,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1146,
    "transitiveDepSetIds": [47, 1147],
    "directArtifactIds": [1652]
  }, {
    "id": 1148,
    "directArtifactIds": [1850, 207]
  }, {
    "id": 1149,
    "directArtifactIds": [1852]
  }, {
    "id": 1151,
    "transitiveDepSetIds": [350, 47],
    "directArtifactIds": [621, 325]
  }, {
    "id": 1150,
    "transitiveDepSetIds": [1151],
    "directArtifactIds": [1853]
  }, {
    "id": 1153,
    "directArtifactIds": [325, 776, 1659]
  }, {
    "id": 1152,
    "transitiveDepSetIds": [1153],
    "directArtifactIds": [207]
  }, {
    "id": 1155,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1154,
    "transitiveDepSetIds": [47, 1155],
    "directArtifactIds": [1652]
  }, {
    "id": 1156,
    "directArtifactIds": [1858, 207]
  }, {
    "id": 1157,
    "directArtifactIds": [1860]
  }, {
    "id": 1159,
    "transitiveDepSetIds": [576, 47],
    "directArtifactIds": [756, 325]
  }, {
    "id": 1158,
    "transitiveDepSetIds": [1159],
    "directArtifactIds": [1861]
  }, {
    "id": 1161,
    "directArtifactIds": [325, 1156, 1659]
  }, {
    "id": 1160,
    "transitiveDepSetIds": [1161],
    "directArtifactIds": [207]
  }, {
    "id": 1163,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1162,
    "transitiveDepSetIds": [47, 1163],
    "directArtifactIds": [1652]
  }, {
    "id": 1164,
    "directArtifactIds": [1866, 207]
  }, {
    "id": 1165,
    "directArtifactIds": [1868]
  }, {
    "id": 1167,
    "transitiveDepSetIds": [901, 47],
    "directArtifactIds": [738, 325]
  }, {
    "id": 1166,
    "transitiveDepSetIds": [1167],
    "directArtifactIds": [1869]
  }, {
    "id": 1169,
    "directArtifactIds": [325, 1604, 1659]
  }, {
    "id": 1168,
    "transitiveDepSetIds": [1169],
    "directArtifactIds": [207]
  }, {
    "id": 1171,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1170,
    "transitiveDepSetIds": [47, 1171],
    "directArtifactIds": [1652]
  }, {
    "id": 1172,
    "directArtifactIds": [1874, 207]
  }, {
    "id": 1173,
    "directArtifactIds": [1876]
  }, {
    "id": 1175,
    "transitiveDepSetIds": [83, 951, 47],
    "directArtifactIds": [708, 325]
  }, {
    "id": 1174,
    "transitiveDepSetIds": [1175],
    "directArtifactIds": [1877]
  }, {
    "id": 1177,
    "directArtifactIds": [325, 361, 1659]
  }, {
    "id": 1176,
    "transitiveDepSetIds": [1177],
    "directArtifactIds": [207]
  }, {
    "id": 1179,
    "transitiveDepSetIds": [47],
    "directArtifactIds": [202]
  }, {
    "id": 1178,
    "transitiveDepSetIds": [47, 1179],
    "directArtifactIds": [1652]
  }, {
    "id": 1180,
    "directArtifactIds": [1882, 207]
  }, {
    "id": 1181,
    "directArtifactIds": [1884]
  }, {
    "id": 1184,
    "directArtifactIds": [898, 892]
  }, {
    "id": 1183,
    "transitiveDepSetIds": [513, 1184, 47],
    "directArtifactIds": [892, 325]
  }, {
    "id": 1182,
    "transitiveDepSetIds": [1183],
    "directArtifactIds": [1885]
  }, {
    "id": 1186,
    "directArtifactIds": [325, 1066, 1659]
  }, {
    "id": 1185,
    "transitiveDepSetIds": [1186],
    "directArtifactIds": [207]
  }, {
    "id": 1187,
    "directArtifactIds": [325, 1695]
  }, {
    "id": 1188,
    "directArtifactIds": [1676, 1695]
  }, {
    "id": 1189,
    "directArtifactIds": [1890]
  }, {
    "id": 1190,
    "directArtifactIds": [1385, 1891]
  }, {
    "id": 1191,
    "directArtifactIds": [1893]
  }, {
    "id": 1192,
    "directArtifactIds": [1282, 1894]
  }, {
    "id": 1193,
    "directArtifactIds": [1896]
  }, {
    "id": 1194,
    "directArtifactIds": [1897]
  }, {
    "id": 1195,
    "directArtifactIds": [1376, 1898]
  }, {
    "id": 1196,
    "directArtifactIds": [1900]
  }, {
    "id": 1197,
    "directArtifactIds": [1379, 1901]
  }, {
    "id": 1198,
    "directArtifactIds": [1903]
  }, {
    "id": 1199,
    "directArtifactIds": [1279, 1904]
  }, {
    "id": 1200,
    "directArtifactIds": [1906]
  }, {
    "id": 1201,
    "directArtifactIds": [1382, 1907]
  }],
  "configuration": [{
    "id": 1,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "4e67ca85ce50afa1c60118c9ac5cb28f1e0a8fe7c49020037cc89ebbb414d9ff"
  }, {
    "id": 2,
    "mnemonic": "k8-fastbuild",
    "platformName": "k8",
    "checksum": "6953f50a4ed022a2378305ea5b0bdb7d6e9ee5908a343a30208648fc7160feea"
  }, {
    "id": 3,
    "mnemonic": "k8-opt-exec-2B5CBBC6",
    "platformName": "k8",
    "checksum": "016b1f61418d077200c86faff737efc698bce5e4ca29b59a2a746868ee0b4615",
    "isTool": true
  }],
  "ruleClasses": [{
    "id": 1,
    "name": "genrule"
  }, {
    "id": 2,
    "name": "always_true_match_all_test"
  }, {
    "id": 3,
    "name": "sh_binary"
  }, {
    "id": 4,
    "name": "disjoint_test"
  }, {
    "id": 5,
    "name": "stardoc"
  }, {
    "id": 6,
    "name": "pkg_tar_impl"
  }, {
    "id": 7,
    "name": "split_extension_test"
  }, {
    "id": 8,
    "name": "_write_file"
  }, {
    "id": 9,
    "name": "inspect_actions_test"
  }, {
    "id": 10,
    "name": "is_bool_test"
  }, {
    "id": 11,
    "name": "_empty_test"
  }, {
    "id": 12,
    "name": "change_setting_test"
  }, {
    "id": 13,
    "name": "java_binary"
  }, {
    "id": 14,
    "name": "or_config_setting_group_multiple_conds_match_test"
  }, {
    "id": 15,
    "name": "or_config_setting_group_single_setting_fails_test"
  }, {
    "id": 16,
    "name": "basic_passing_test"
  }, {
    "id": 17,
    "name": "insert_test"
  }, {
    "id": 18,
    "name": "_diff_test"
  }, {
    "id": 19,
    "name": "intersection_test"
  }, {
    "id": 20,
    "name": "replace_extension_test"
  }, {
    "id": 21,
    "name": "sh_test"
  }, {
    "id": 22,
    "name": "or_config_setting_group_all_conds_match_test"
  }, {
    "id": 23,
    "name": "with_or_test"
  }, {
    "id": 24,
    "name": "and_config_setting_group_single_setting_fails_test"
  }, {
    "id": 25,
    "name": "_copy_file"
  }, {
    "id": 26,
    "name": "is_none_test"
  }, {
    "id": 27,
    "name": "_copy_directory"
  }, {
    "id": 28,
    "name": "always_true_match_any_test"
  }, {
    "id": 29,
    "name": "cc_test"
  }, {
    "id": 30,
    "name": "and_config_setting_group_all_matches_fail_test"
  }, {
    "id": 31,
    "name": "_loading_test"
  }, {
    "id": 32,
    "name": "_copy_xfile"
  }, {
    "id": 33,
    "name": "to_list_test"
  }, {
    "id": 34,
    "name": "inspect_actions_fake_rule"
  }, {
    "id": 35,
    "name": "shell_array_literal_test"
  }, {
    "id": 36,
    "name": "is_int_test"
  }, {
    "id": 37,
    "name": "native_test"
  }, {
    "id": 38,
    "name": "or_config_setting_group_no_matches_test"
  }, {
    "id": 39,
    "name": "dirname_test"
  }, {
    "id": 40,
    "name": "make_test"
  }, {
    "id": 41,
    "name": "and_config_setting_group_multiple_matches_fail_test"
  }, {
    "id": 42,
    "name": "parse_test"
  }, {
    "id": 43,
    "name": "shell_quote_test"
  }, {
    "id": 44,
    "name": "is_tuple_test"
  }, {
    "id": 45,
    "name": "contains_test"
  }, {
    "id": 46,
    "name": "cc_binary"
  }, {
    "id": 47,
    "name": "or_config_setting_group_last_cond_matches_test"
  }, {
    "id": 48,
    "name": "inspect_aspect_fake_rule"
  }, {
    "id": 49,
    "name": "and_config_setting_group_last_match_fails_test"
  }, {
    "id": 50,
    "name": "add_test"
  }, {
    "id": 51,
    "name": "basename_test"
  }, {
    "id": 52,
    "name": "or_config_setting_group_middle_cond_matches_test"
  }, {
    "id": 53,
    "name": "and_config_setting_group_single_setting_matches_test"
  }, {
    "id": 54,
    "name": "copy_test"
  }, {
    "id": 55,
    "name": "difference_test"
  }, {
    "id": 56,
    "name": "omit_test"
  }, {
    "id": 57,
    "name": "is_instance_test"
  }, {
    "id": 58,
    "name": "inspect_aspect_test"
  }, {
    "id": 59,
    "name": "version_comparison_test"
  }, {
    "id": 60,
    "name": "is_dict_test"
  }, {
    "id": 61,
    "name": "length_test"
  }, {
    "id": 62,
    "name": "_write_xfile"
  }, {
    "id": 63,
    "name": "join_test"
  }, {
    "id": 64,
    "name": "run_binary"
  }, {
    "id": 65,
    "name": "union_test"
  }, {
    "id": 66,
    "name": "make_call_test"
  }, {
    "id": 67,
    "name": "expand_template"
  }, {
    "id": 68,
    "name": "check_test"
  }, {
    "id": 69,
    "name": "is_function_test"
  }, {
    "id": 70,
    "name": "remove_test"
  }, {
    "id": 71,
    "name": "or_config_setting_group_first_cond_matches_test"
  }, {
    "id": 72,
    "name": "and_config_setting_group_matches_test"
  }, {
    "id": 73,
    "name": "uniq_test"
  }, {
    "id": 74,
    "name": "inspect_output_dirs_test"
  }, {
    "id": 75,
    "name": "is_absolute_test"
  }, {
    "id": 76,
    "name": "is_equal_test"
  }, {
    "id": 77,
    "name": "is_list_test"
  }, {
    "id": 78,
    "name": "change_setting_with_failure_test"
  }, {
    "id": 79,
    "name": "is_depset_test"
  }, {
    "id": 80,
    "name": "repr_str_test"
  }, {
    "id": 81,
    "name": "native_binary"
  }, {
    "id": 82,
    "name": "before_each_test"
  }, {
    "id": 83,
    "name": "relativize_test"
  }, {
    "id": 84,
    "name": "failure_testing_test"
  }, {
    "id": 85,
    "name": "pick_test"
  }, {
    "id": 86,
    "name": "and_config_setting_group_first_match_fails_test"
  }, {
    "id": 87,
    "name": "is_subset_test"
  }, {
    "id": 88,
    "name": "cc_library"
  }, {
    "id": 89,
    "name": "is_string_test"
  }, {
    "id": 90,
    "name": "and_config_setting_group_middle_match_fails_test"
  }, {
    "id": 91,
    "name": "empty_directory"
  }, {
    "id": 92,
    "name": "is_set_test"
  }, {
    "id": 93,
    "name": "or_config_setting_group_single_setting_matches_test"
  }, {
    "id": 94,
    "name": "after_each_test"
  }, {
    "id": 95,
    "name": "basic_passing_short_timeout_test"
  }, {
    "id": 96,
    "name": "normalize_test"
  }, {
    "id": 97,
    "name": "java_import"
  }],
  "pathFragments": [{
    "id": 1,
    "label": "WORKSPACE"
  }, {
    "id": 6,
    "label": "external"
  }, {
    "id": 5,
    "label": "bazel_tools",
    "parentId": 6
  }, {
    "id": 4,
    "label": "tools",
    "parentId": 5
  }, {
    "id": 3,
    "label": "genrule",
    "parentId": 4
  }, {
    "id": 2,
    "label": "genrule-setup.sh",
    "parentId": 3
  }, {
    "id": 11,
    "label": "bazel-out"
  }, {
    "id": 10,
    "label": "k8-fastbuild",
    "parentId": 11
  }, {
    "id": 9,
    "label": "bin",
    "parentId": 10
  }, {
    "id": 8,
    "label": "distribution",
    "parentId": 9
  }, {
    "id": 7,
    "label": "WORKSPACE",
    "parentId": 8
  }, {
    "id": 13,
    "label": "tests",
    "parentId": 9
  }, {
    "id": 12,
    "label": "always_true_match_all_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 15,
    "label": "always_true_match_all_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 14,
    "label": "MANIFEST",
    "parentId": 15
  }, {
    "id": 16,
    "label": "always_true_match_all_test.sh",
    "parentId": 13
  }, {
    "id": 19,
    "label": "internal",
    "parentId": 10
  }, {
    "id": 18,
    "label": "_middlemen",
    "parentId": 19
  }, {
    "id": 17,
    "label": "tests_Salways_Utrue_Umatch_Uall_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 21,
    "label": "test",
    "parentId": 4
  }, {
    "id": 20,
    "label": "test-setup.sh",
    "parentId": 21
  }, {
    "id": 22,
    "label": "generate-xml.sh",
    "parentId": 21
  }, {
    "id": 26,
    "label": "testlogs",
    "parentId": 10
  }, {
    "id": 25,
    "label": "tests",
    "parentId": 26
  }, {
    "id": 24,
    "label": "always_true_match_all_test",
    "parentId": 25
  }, {
    "id": 23,
    "label": "test.log",
    "parentId": 24
  }, {
    "id": 27,
    "label": "test.cache_status",
    "parentId": 24
  }, {
    "id": 30,
    "label": "copy_file",
    "parentId": 13
  }, {
    "id": 29,
    "label": "xout",
    "parentId": 30
  }, {
    "id": 28,
    "label": "gen-out.sh",
    "parentId": 29
  }, {
    "id": 31,
    "label": "bin_gen",
    "parentId": 30
  }, {
    "id": 32,
    "label": "bin_gen.runfiles_manifest",
    "parentId": 30
  }, {
    "id": 34,
    "label": "bin_gen.runfiles",
    "parentId": 30
  }, {
    "id": 33,
    "label": "MANIFEST",
    "parentId": 34
  }, {
    "id": 35,
    "label": "tests_Scopy_Ufile_Sbin_Ugen-runfiles",
    "parentId": 18
  }, {
    "id": 36,
    "label": "new_sets_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 37,
    "label": "new_sets_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 39,
    "label": "new_sets_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 38,
    "label": "MANIFEST",
    "parentId": 39
  }, {
    "id": 40,
    "label": "tests_Snew_Usets_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 42,
    "label": "new_sets_tests_test_0",
    "parentId": 25
  }, {
    "id": 41,
    "label": "test.log",
    "parentId": 42
  }, {
    "id": 43,
    "label": "test.cache_status",
    "parentId": 42
  }, {
    "id": 47,
    "label": "k8-opt-exec-2B5CBBC6",
    "parentId": 11
  }, {
    "id": 46,
    "label": "bin",
    "parentId": 47
  }, {
    "id": 45,
    "label": "docs",
    "parentId": 46
  }, {
    "id": 44,
    "label": "versions_stardoc.jar",
    "parentId": 45
  }, {
    "id": 48,
    "label": "versions_stardoc",
    "parentId": 45
  }, {
    "id": 51,
    "label": "internal",
    "parentId": 47
  }, {
    "id": 50,
    "label": "_middlemen",
    "parentId": 51
  }, {
    "id": 49,
    "label": "docs_Sversions_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 54,
    "label": "docs",
    "parentId": 9
  }, {
    "id": 53,
    "label": "docs",
    "parentId": 54
  }, {
    "id": 52,
    "label": "versions.raw",
    "parentId": 53
  }, {
    "id": 59,
    "label": "io_bazel_stardoc",
    "parentId": 6
  }, {
    "id": 58,
    "label": "stardoc",
    "parentId": 59
  }, {
    "id": 57,
    "label": "templates",
    "parentId": 58
  }, {
    "id": 56,
    "label": "markdown_tables",
    "parentId": 57
  }, {
    "id": 55,
    "label": "aspect.vm",
    "parentId": 56
  }, {
    "id": 60,
    "label": "header.vm",
    "parentId": 56
  }, {
    "id": 61,
    "label": "func.vm",
    "parentId": 56
  }, {
    "id": 62,
    "label": "provider.vm",
    "parentId": 56
  }, {
    "id": 63,
    "label": "rule.vm",
    "parentId": 56
  }, {
    "id": 67,
    "label": "external",
    "parentId": 46
  }, {
    "id": 66,
    "label": "io_bazel_stardoc",
    "parentId": 67
  }, {
    "id": 65,
    "label": "stardoc",
    "parentId": 66
  }, {
    "id": 64,
    "label": "renderer.jar",
    "parentId": 65
  }, {
    "id": 68,
    "label": "renderer",
    "parentId": 65
  }, {
    "id": 69,
    "label": "external_Sio_Ubazel_Ustardoc_Sstardoc_Srenderer-runfiles",
    "parentId": 50
  }, {
    "id": 70,
    "label": "versions_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 71,
    "label": "libbuild_test__build_target.a",
    "parentId": 13
  }, {
    "id": 72,
    "label": "libbuild_test__build_target.so",
    "parentId": 13
  }, {
    "id": 73,
    "label": "build_test__test_0__deps.out",
    "parentId": 13
  }, {
    "id": 74,
    "label": "bazel-skylib-gazelle-plugin.manifest",
    "parentId": 8
  }, {
    "id": 76,
    "label": "bazel_skylib_gazelle_plugin",
    "parentId": 6
  }, {
    "id": 75,
    "label": "WORKSPACE.bzlmod",
    "parentId": 76
  }, {
    "id": 77,
    "label": "BUILD",
    "parentId": 76
  }, {
    "id": 78,
    "label": "MODULE.bazel",
    "parentId": 76
  }, {
    "id": 79,
    "label": "setup.bzl",
    "parentId": 76
  }, {
    "id": 80,
    "label": "workspace.bzl",
    "parentId": 76
  }, {
    "id": 82,
    "label": "bzl",
    "parentId": 76
  }, {
    "id": 81,
    "label": "gazelle.go",
    "parentId": 82
  }, {
    "id": 83,
    "label": "gazelle_test.go",
    "parentId": 82
  }, {
    "id": 84,
    "label": "BUILD",
    "parentId": 82
  }, {
    "id": 88,
    "label": "external",
    "parentId": 9
  }, {
    "id": 87,
    "label": "bazel_skylib_gazelle_plugin",
    "parentId": 88
  }, {
    "id": 86,
    "label": "bzl",
    "parentId": 87
  }, {
    "id": 85,
    "label": "testdata",
    "parentId": 86
  }, {
    "id": 89,
    "label": "LICENSE"
  }, {
    "id": 94,
    "label": "rules_pkg",
    "parentId": 6
  }, {
    "id": 93,
    "label": "pkg",
    "parentId": 94
  }, {
    "id": 92,
    "label": "private",
    "parentId": 93
  }, {
    "id": 91,
    "label": "tar",
    "parentId": 92
  }, {
    "id": 90,
    "label": "build_tar.py",
    "parentId": 91
  }, {
    "id": 99,
    "label": "rules_pkg",
    "parentId": 67
  }, {
    "id": 98,
    "label": "pkg",
    "parentId": 99
  }, {
    "id": 97,
    "label": "private",
    "parentId": 98
  }, {
    "id": 96,
    "label": "tar",
    "parentId": 97
  }, {
    "id": 95,
    "label": "build_tar",
    "parentId": 96
  }, {
    "id": 100,
    "label": "external_Srules_Upkg_Spkg_Sprivate_Star_Sbuild_Utar-runfiles",
    "parentId": 50
  }, {
    "id": 101,
    "label": "bazel-skylib-gazelle-plugin-1.4.2.tar.gz",
    "parentId": 8
  }, {
    "id": 102,
    "label": "paths_tests_test_7.sh",
    "parentId": 13
  }, {
    "id": 103,
    "label": "paths_tests_test_7.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 105,
    "label": "paths_tests_test_7.sh.runfiles",
    "parentId": 13
  }, {
    "id": 104,
    "label": "MANIFEST",
    "parentId": 105
  }, {
    "id": 106,
    "label": "tests_Spaths_Utests_Utest_U7.sh-runfiles",
    "parentId": 18
  }, {
    "id": 108,
    "label": "paths_tests_test_7",
    "parentId": 25
  }, {
    "id": 107,
    "label": "test.log",
    "parentId": 108
  }, {
    "id": 109,
    "label": "test.cache_status",
    "parentId": 108
  }, {
    "id": 112,
    "label": "write_file",
    "parentId": 13
  }, {
    "id": 111,
    "label": "out",
    "parentId": 112
  }, {
    "id": 110,
    "label": "empty.txt",
    "parentId": 111
  }, {
    "id": 113,
    "label": "inspect_actions_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 115,
    "label": "inspect_actions_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 114,
    "label": "MANIFEST",
    "parentId": 115
  }, {
    "id": 116,
    "label": "inspect_actions_test.sh",
    "parentId": 13
  }, {
    "id": 117,
    "label": "tests_Sinspect_Uactions_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 119,
    "label": "inspect_actions_test",
    "parentId": 25
  }, {
    "id": 118,
    "label": "test.log",
    "parentId": 119
  }, {
    "id": 120,
    "label": "test.cache_status",
    "parentId": 119
  }, {
    "id": 121,
    "label": "a-out-symlink.sh",
    "parentId": 29
  }, {
    "id": 122,
    "label": "bin_src_symlink",
    "parentId": 30
  }, {
    "id": 123,
    "label": "bin_src_symlink.runfiles_manifest",
    "parentId": 30
  }, {
    "id": 125,
    "label": "bin_src_symlink.runfiles",
    "parentId": 30
  }, {
    "id": 124,
    "label": "MANIFEST",
    "parentId": 125
  }, {
    "id": 126,
    "label": "tests_Scopy_Ufile_Sbin_Usrc_Usymlink-runfiles",
    "parentId": 18
  }, {
    "id": 127,
    "label": "types_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 128,
    "label": "types_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 130,
    "label": "types_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 129,
    "label": "MANIFEST",
    "parentId": 130
  }, {
    "id": 131,
    "label": "tests_Stypes_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 133,
    "label": "types_tests_test_2",
    "parentId": 25
  }, {
    "id": 132,
    "label": "test.log",
    "parentId": 133
  }, {
    "id": 134,
    "label": "test.cache_status",
    "parentId": 133
  }, {
    "id": 135,
    "label": "build_test__test.sh",
    "parentId": 13
  }, {
    "id": 136,
    "label": "build_test__test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 138,
    "label": "build_test__test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 137,
    "label": "MANIFEST",
    "parentId": 138
  }, {
    "id": 139,
    "label": "tests_Sbuild_Utest_U_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 141,
    "label": "build_test__test",
    "parentId": 25
  }, {
    "id": 140,
    "label": "test.log",
    "parentId": 141
  }, {
    "id": 142,
    "label": "test.cache_status",
    "parentId": 141
  }, {
    "id": 143,
    "label": "change_setting_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 145,
    "label": "change_setting_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 144,
    "label": "MANIFEST",
    "parentId": 145
  }, {
    "id": 146,
    "label": "change_setting_test.sh",
    "parentId": 13
  }, {
    "id": 147,
    "label": "tests_Schange_Usetting_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 149,
    "label": "change_setting_test",
    "parentId": 25
  }, {
    "id": 148,
    "label": "test.log",
    "parentId": 149
  }, {
    "id": 150,
    "label": "test.cache_status",
    "parentId": 149
  }, {
    "id": 153,
    "label": "remotejdk11_linux",
    "parentId": 6
  }, {
    "id": 152,
    "label": "bin",
    "parentId": 153
  }, {
    "id": 151,
    "label": "jaotc",
    "parentId": 152
  }, {
    "id": 154,
    "label": "jar",
    "parentId": 152
  }, {
    "id": 155,
    "label": "jarsigner",
    "parentId": 152
  }, {
    "id": 156,
    "label": "java",
    "parentId": 152
  }, {
    "id": 157,
    "label": "javac",
    "parentId": 152
  }, {
    "id": 158,
    "label": "javadoc",
    "parentId": 152
  }, {
    "id": 159,
    "label": "javap",
    "parentId": 152
  }, {
    "id": 160,
    "label": "jcmd",
    "parentId": 152
  }, {
    "id": 161,
    "label": "jconsole",
    "parentId": 152
  }, {
    "id": 162,
    "label": "jdb",
    "parentId": 152
  }, {
    "id": 163,
    "label": "jdeprscan",
    "parentId": 152
  }, {
    "id": 164,
    "label": "jdeps",
    "parentId": 152
  }, {
    "id": 165,
    "label": "jfr",
    "parentId": 152
  }, {
    "id": 166,
    "label": "jhsdb",
    "parentId": 152
  }, {
    "id": 167,
    "label": "jimage",
    "parentId": 152
  }, {
    "id": 168,
    "label": "jinfo",
    "parentId": 152
  }, {
    "id": 169,
    "label": "jjs",
    "parentId": 152
  }, {
    "id": 170,
    "label": "jlink",
    "parentId": 152
  }, {
    "id": 171,
    "label": "jmap",
    "parentId": 152
  }, {
    "id": 172,
    "label": "jmod",
    "parentId": 152
  }, {
    "id": 173,
    "label": "jps",
    "parentId": 152
  }, {
    "id": 174,
    "label": "jrunscript",
    "parentId": 152
  }, {
    "id": 175,
    "label": "jshell",
    "parentId": 152
  }, {
    "id": 176,
    "label": "jstack",
    "parentId": 152
  }, {
    "id": 177,
    "label": "jstat",
    "parentId": 152
  }, {
    "id": 178,
    "label": "jstatd",
    "parentId": 152
  }, {
    "id": 179,
    "label": "keytool",
    "parentId": 152
  }, {
    "id": 180,
    "label": "pack200",
    "parentId": 152
  }, {
    "id": 181,
    "label": "rmic",
    "parentId": 152
  }, {
    "id": 182,
    "label": "rmid",
    "parentId": 152
  }, {
    "id": 183,
    "label": "rmiregistry",
    "parentId": 152
  }, {
    "id": 184,
    "label": "serialver",
    "parentId": 152
  }, {
    "id": 185,
    "label": "unpack200",
    "parentId": 152
  }, {
    "id": 187,
    "label": "conf",
    "parentId": 153
  }, {
    "id": 186,
    "label": "logging.properties",
    "parentId": 187
  }, {
    "id": 189,
    "label": "management",
    "parentId": 187
  }, {
    "id": 188,
    "label": "jmxremote.access",
    "parentId": 189
  }, {
    "id": 190,
    "label": "jmxremote.password.template",
    "parentId": 189
  }, {
    "id": 191,
    "label": "management.properties",
    "parentId": 189
  }, {
    "id": 192,
    "label": "net.properties",
    "parentId": 187
  }, {
    "id": 194,
    "label": "security",
    "parentId": 187
  }, {
    "id": 193,
    "label": "java.policy",
    "parentId": 194
  }, {
    "id": 195,
    "label": "java.security",
    "parentId": 194
  }, {
    "id": 197,
    "label": "policy",
    "parentId": 194
  }, {
    "id": 196,
    "label": "README.txt",
    "parentId": 197
  }, {
    "id": 199,
    "label": "limited",
    "parentId": 197
  }, {
    "id": 198,
    "label": "default_US_export.policy",
    "parentId": 199
  }, {
    "id": 200,
    "label": "default_local.policy",
    "parentId": 199
  }, {
    "id": 201,
    "label": "exempt_local.policy",
    "parentId": 199
  }, {
    "id": 203,
    "label": "unlimited",
    "parentId": 197
  }, {
    "id": 202,
    "label": "default_US_export.policy",
    "parentId": 203
  }, {
    "id": 204,
    "label": "default_local.policy",
    "parentId": 203
  }, {
    "id": 205,
    "label": "sound.properties",
    "parentId": 187
  }, {
    "id": 207,
    "label": "include",
    "parentId": 153
  }, {
    "id": 206,
    "label": "classfile_constants.h",
    "parentId": 207
  }, {
    "id": 208,
    "label": "jawt.h",
    "parentId": 207
  }, {
    "id": 209,
    "label": "jdwpTransport.h",
    "parentId": 207
  }, {
    "id": 210,
    "label": "jni.h",
    "parentId": 207
  }, {
    "id": 211,
    "label": "jvmti.h",
    "parentId": 207
  }, {
    "id": 212,
    "label": "jvmticmlr.h",
    "parentId": 207
  }, {
    "id": 214,
    "label": "linux",
    "parentId": 207
  }, {
    "id": 213,
    "label": "jawt_md.h",
    "parentId": 214
  }, {
    "id": 215,
    "label": "jni_md.h",
    "parentId": 214
  }, {
    "id": 217,
    "label": "lib",
    "parentId": 153
  }, {
    "id": 216,
    "label": "classlist",
    "parentId": 217
  }, {
    "id": 218,
    "label": "ct.sym",
    "parentId": 217
  }, {
    "id": 219,
    "label": "jexec",
    "parentId": 217
  }, {
    "id": 221,
    "label": "jfr",
    "parentId": 217
  }, {
    "id": 220,
    "label": "default.jfc",
    "parentId": 221
  }, {
    "id": 222,
    "label": "profile.jfc",
    "parentId": 221
  }, {
    "id": 224,
    "label": "jli",
    "parentId": 217
  }, {
    "id": 223,
    "label": "libjli.so",
    "parentId": 224
  }, {
    "id": 225,
    "label": "jrt-fs.jar",
    "parentId": 217
  }, {
    "id": 226,
    "label": "jspawnhelper",
    "parentId": 217
  }, {
    "id": 227,
    "label": "jvm.cfg",
    "parentId": 217
  }, {
    "id": 228,
    "label": "libattach.so",
    "parentId": 217
  }, {
    "id": 229,
    "label": "libawt.so",
    "parentId": 217
  }, {
    "id": 230,
    "label": "libawt_headless.so",
    "parentId": 217
  }, {
    "id": 231,
    "label": "libawt_xawt.so",
    "parentId": 217
  }, {
    "id": 232,
    "label": "libdt_socket.so",
    "parentId": 217
  }, {
    "id": 233,
    "label": "libextnet.so",
    "parentId": 217
  }, {
    "id": 234,
    "label": "libfontmanager.so",
    "parentId": 217
  }, {
    "id": 235,
    "label": "libfreetype.so",
    "parentId": 217
  }, {
    "id": 236,
    "label": "libinstrument.so",
    "parentId": 217
  }, {
    "id": 237,
    "label": "libj2gss.so",
    "parentId": 217
  }, {
    "id": 238,
    "label": "libj2pcsc.so",
    "parentId": 217
  }, {
    "id": 239,
    "label": "libj2pkcs11.so",
    "parentId": 217
  }, {
    "id": 240,
    "label": "libjaas.so",
    "parentId": 217
  }, {
    "id": 241,
    "label": "libjava.so",
    "parentId": 217
  }, {
    "id": 242,
    "label": "libjavajpeg.so",
    "parentId": 217
  }, {
    "id": 243,
    "label": "libjawt.so",
    "parentId": 217
  }, {
    "id": 244,
    "label": "libjdwp.so",
    "parentId": 217
  }, {
    "id": 245,
    "label": "libjimage.so",
    "parentId": 217
  }, {
    "id": 246,
    "label": "libjsig.so",
    "parentId": 217
  }, {
    "id": 247,
    "label": "libjsound.so",
    "parentId": 217
  }, {
    "id": 248,
    "label": "liblcms.so",
    "parentId": 217
  }, {
    "id": 249,
    "label": "libmanagement.so",
    "parentId": 217
  }, {
    "id": 250,
    "label": "libmanagement_agent.so",
    "parentId": 217
  }, {
    "id": 251,
    "label": "libmanagement_ext.so",
    "parentId": 217
  }, {
    "id": 252,
    "label": "libmlib_image.so",
    "parentId": 217
  }, {
    "id": 253,
    "label": "libnet.so",
    "parentId": 217
  }, {
    "id": 254,
    "label": "libnio.so",
    "parentId": 217
  }, {
    "id": 255,
    "label": "libprefs.so",
    "parentId": 217
  }, {
    "id": 256,
    "label": "librmi.so",
    "parentId": 217
  }, {
    "id": 257,
    "label": "libsaproc.so",
    "parentId": 217
  }, {
    "id": 258,
    "label": "libsctp.so",
    "parentId": 217
  }, {
    "id": 259,
    "label": "libsplashscreen.so",
    "parentId": 217
  }, {
    "id": 260,
    "label": "libsunec.so",
    "parentId": 217
  }, {
    "id": 261,
    "label": "libunpack.so",
    "parentId": 217
  }, {
    "id": 262,
    "label": "libverify.so",
    "parentId": 217
  }, {
    "id": 263,
    "label": "libzip.so",
    "parentId": 217
  }, {
    "id": 264,
    "label": "modules",
    "parentId": 217
  }, {
    "id": 265,
    "label": "psfont.properties.ja",
    "parentId": 217
  }, {
    "id": 266,
    "label": "psfontj2d.properties",
    "parentId": 217
  }, {
    "id": 268,
    "label": "security",
    "parentId": 217
  }, {
    "id": 267,
    "label": "blocked.certs",
    "parentId": 268
  }, {
    "id": 269,
    "label": "cacerts",
    "parentId": 268
  }, {
    "id": 270,
    "label": "default.policy",
    "parentId": 268
  }, {
    "id": 271,
    "label": "public_suffix_list.dat",
    "parentId": 268
  }, {
    "id": 273,
    "label": "server",
    "parentId": 217
  }, {
    "id": 272,
    "label": "Xusage.txt",
    "parentId": 273
  }, {
    "id": 274,
    "label": "libjsig.so",
    "parentId": 273
  }, {
    "id": 275,
    "label": "libjvm.so",
    "parentId": 273
  }, {
    "id": 276,
    "label": "src.zip",
    "parentId": 217
  }, {
    "id": 277,
    "label": "tzdb.dat",
    "parentId": 217
  }, {
    "id": 280,
    "label": "remote_java_tools",
    "parentId": 6
  }, {
    "id": 279,
    "label": "java_tools",
    "parentId": 280
  }, {
    "id": 278,
    "label": "JavaBuilder_deploy.jar",
    "parentId": 279
  }, {
    "id": 284,
    "label": "bazel_tools",
    "parentId": 88
  }, {
    "id": 283,
    "label": "tools",
    "parentId": 284
  }, {
    "id": 282,
    "label": "jdk",
    "parentId": 283
  }, {
    "id": 281,
    "label": "platformclasspath.jar",
    "parentId": 282
  }, {
    "id": 285,
    "label": "types_stardoc.jar",
    "parentId": 54
  }, {
    "id": 286,
    "label": "types_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 287,
    "label": "types_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 293,
    "label": "remote_java_tools_linux",
    "parentId": 6
  }, {
    "id": 292,
    "label": "java_tools",
    "parentId": 293
  }, {
    "id": 291,
    "label": "src",
    "parentId": 292
  }, {
    "id": 290,
    "label": "tools",
    "parentId": 291
  }, {
    "id": 289,
    "label": "singlejar",
    "parentId": 290
  }, {
    "id": 288,
    "label": "singlejar_local",
    "parentId": 289
  }, {
    "id": 294,
    "label": "types_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 295,
    "label": "types_stardoc",
    "parentId": 54
  }, {
    "id": 296,
    "label": "types_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 297,
    "label": "types_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 299,
    "label": "types_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 298,
    "label": "MANIFEST",
    "parentId": 299
  }, {
    "id": 302,
    "label": "local_jdk",
    "parentId": 6
  }, {
    "id": 301,
    "label": "bin",
    "parentId": 302
  }, {
    "id": 300,
    "label": "jar",
    "parentId": 301
  }, {
    "id": 303,
    "label": "jarsigner",
    "parentId": 301
  }, {
    "id": 304,
    "label": "java",
    "parentId": 301
  }, {
    "id": 305,
    "label": "javac",
    "parentId": 301
  }, {
    "id": 306,
    "label": "javadoc",
    "parentId": 301
  }, {
    "id": 307,
    "label": "javap",
    "parentId": 301
  }, {
    "id": 308,
    "label": "jcmd",
    "parentId": 301
  }, {
    "id": 309,
    "label": "jconsole",
    "parentId": 301
  }, {
    "id": 310,
    "label": "jdb",
    "parentId": 301
  }, {
    "id": 311,
    "label": "jdeprscan",
    "parentId": 301
  }, {
    "id": 312,
    "label": "jdeps",
    "parentId": 301
  }, {
    "id": 313,
    "label": "jfr",
    "parentId": 301
  }, {
    "id": 314,
    "label": "jhsdb",
    "parentId": 301
  }, {
    "id": 315,
    "label": "jimage",
    "parentId": 301
  }, {
    "id": 316,
    "label": "jinfo",
    "parentId": 301
  }, {
    "id": 317,
    "label": "jlink",
    "parentId": 301
  }, {
    "id": 318,
    "label": "jmap",
    "parentId": 301
  }, {
    "id": 319,
    "label": "jmod",
    "parentId": 301
  }, {
    "id": 320,
    "label": "jpackage",
    "parentId": 301
  }, {
    "id": 321,
    "label": "jps",
    "parentId": 301
  }, {
    "id": 322,
    "label": "jrunscript",
    "parentId": 301
  }, {
    "id": 323,
    "label": "jshell",
    "parentId": 301
  }, {
    "id": 324,
    "label": "jstack",
    "parentId": 301
  }, {
    "id": 325,
    "label": "jstat",
    "parentId": 301
  }, {
    "id": 326,
    "label": "jstatd",
    "parentId": 301
  }, {
    "id": 327,
    "label": "keytool",
    "parentId": 301
  }, {
    "id": 328,
    "label": "rmiregistry",
    "parentId": 301
  }, {
    "id": 329,
    "label": "serialver",
    "parentId": 301
  }, {
    "id": 331,
    "label": "conf",
    "parentId": 302
  }, {
    "id": 330,
    "label": "accessibility.properties",
    "parentId": 331
  }, {
    "id": 332,
    "label": "logging.properties",
    "parentId": 331
  }, {
    "id": 334,
    "label": "management",
    "parentId": 331
  }, {
    "id": 333,
    "label": "jmxremote.access",
    "parentId": 334
  }, {
    "id": 335,
    "label": "management.properties",
    "parentId": 334
  }, {
    "id": 336,
    "label": "net.properties",
    "parentId": 331
  }, {
    "id": 338,
    "label": "security",
    "parentId": 331
  }, {
    "id": 337,
    "label": "java.policy",
    "parentId": 338
  }, {
    "id": 339,
    "label": "java.security",
    "parentId": 338
  }, {
    "id": 340,
    "label": "nss.cfg",
    "parentId": 338
  }, {
    "id": 342,
    "label": "policy",
    "parentId": 338
  }, {
    "id": 341,
    "label": "README.txt",
    "parentId": 342
  }, {
    "id": 344,
    "label": "limited",
    "parentId": 342
  }, {
    "id": 343,
    "label": "default_US_export.policy",
    "parentId": 344
  }, {
    "id": 345,
    "label": "default_local.policy",
    "parentId": 344
  }, {
    "id": 346,
    "label": "exempt_local.policy",
    "parentId": 344
  }, {
    "id": 348,
    "label": "unlimited",
    "parentId": 342
  }, {
    "id": 347,
    "label": "default_US_export.policy",
    "parentId": 348
  }, {
    "id": 349,
    "label": "default_local.policy",
    "parentId": 348
  }, {
    "id": 350,
    "label": "sound.properties",
    "parentId": 331
  }, {
    "id": 351,
    "label": "swing.properties",
    "parentId": 331
  }, {
    "id": 353,
    "label": "include",
    "parentId": 302
  }, {
    "id": 352,
    "label": "classfile_constants.h",
    "parentId": 353
  }, {
    "id": 354,
    "label": "jawt.h",
    "parentId": 353
  }, {
    "id": 355,
    "label": "jdwpTransport.h",
    "parentId": 353
  }, {
    "id": 356,
    "label": "jni.h",
    "parentId": 353
  }, {
    "id": 357,
    "label": "jvmti.h",
    "parentId": 353
  }, {
    "id": 358,
    "label": "jvmticmlr.h",
    "parentId": 353
  }, {
    "id": 360,
    "label": "linux",
    "parentId": 353
  }, {
    "id": 359,
    "label": "jawt_md.h",
    "parentId": 360
  }, {
    "id": 361,
    "label": "jni_md.h",
    "parentId": 360
  }, {
    "id": 363,
    "label": "lib",
    "parentId": 302
  }, {
    "id": 362,
    "label": "classlist",
    "parentId": 363
  }, {
    "id": 364,
    "label": "ct.sym",
    "parentId": 363
  }, {
    "id": 365,
    "label": "jar.binfmt",
    "parentId": 363
  }, {
    "id": 366,
    "label": "jexec",
    "parentId": 363
  }, {
    "id": 368,
    "label": "jfr",
    "parentId": 363
  }, {
    "id": 367,
    "label": "default.jfc",
    "parentId": 368
  }, {
    "id": 369,
    "label": "profile.jfc",
    "parentId": 368
  }, {
    "id": 370,
    "label": "jrt-fs.jar",
    "parentId": 363
  }, {
    "id": 371,
    "label": "jspawnhelper",
    "parentId": 363
  }, {
    "id": 372,
    "label": "jvm.cfg",
    "parentId": 363
  }, {
    "id": 373,
    "label": "jvm.cfg-default",
    "parentId": 363
  }, {
    "id": 374,
    "label": "libatk-wrapper.so",
    "parentId": 363
  }, {
    "id": 375,
    "label": "libattach.so",
    "parentId": 363
  }, {
    "id": 376,
    "label": "libawt.so",
    "parentId": 363
  }, {
    "id": 377,
    "label": "libawt_headless.so",
    "parentId": 363
  }, {
    "id": 378,
    "label": "libawt_xawt.so",
    "parentId": 363
  }, {
    "id": 379,
    "label": "libdt_socket.so",
    "parentId": 363
  }, {
    "id": 380,
    "label": "libextnet.so",
    "parentId": 363
  }, {
    "id": 381,
    "label": "libfontmanager.so",
    "parentId": 363
  }, {
    "id": 382,
    "label": "libinstrument.so",
    "parentId": 363
  }, {
    "id": 383,
    "label": "libj2gss.so",
    "parentId": 363
  }, {
    "id": 384,
    "label": "libj2pcsc.so",
    "parentId": 363
  }, {
    "id": 385,
    "label": "libj2pkcs11.so",
    "parentId": 363
  }, {
    "id": 386,
    "label": "libjaas.so",
    "parentId": 363
  }, {
    "id": 387,
    "label": "libjava.so",
    "parentId": 363
  }, {
    "id": 388,
    "label": "libjavajpeg.so",
    "parentId": 363
  }, {
    "id": 389,
    "label": "libjawt.so",
    "parentId": 363
  }, {
    "id": 390,
    "label": "libjdwp.so",
    "parentId": 363
  }, {
    "id": 391,
    "label": "libjimage.so",
    "parentId": 363
  }, {
    "id": 392,
    "label": "libjli.so",
    "parentId": 363
  }, {
    "id": 393,
    "label": "libjsig.so",
    "parentId": 363
  }, {
    "id": 394,
    "label": "libjsound.so",
    "parentId": 363
  }, {
    "id": 395,
    "label": "libjsvml.so",
    "parentId": 363
  }, {
    "id": 396,
    "label": "liblcms.so",
    "parentId": 363
  }, {
    "id": 397,
    "label": "libmanagement.so",
    "parentId": 363
  }, {
    "id": 398,
    "label": "libmanagement_agent.so",
    "parentId": 363
  }, {
    "id": 399,
    "label": "libmanagement_ext.so",
    "parentId": 363
  }, {
    "id": 400,
    "label": "libmlib_image.so",
    "parentId": 363
  }, {
    "id": 401,
    "label": "libnet.so",
    "parentId": 363
  }, {
    "id": 402,
    "label": "libnio.so",
    "parentId": 363
  }, {
    "id": 403,
    "label": "libprefs.so",
    "parentId": 363
  }, {
    "id": 404,
    "label": "librmi.so",
    "parentId": 363
  }, {
    "id": 405,
    "label": "libsaproc.so",
    "parentId": 363
  }, {
    "id": 406,
    "label": "libsctp.so",
    "parentId": 363
  }, {
    "id": 407,
    "label": "libsplashscreen.so",
    "parentId": 363
  }, {
    "id": 408,
    "label": "libsyslookup.so",
    "parentId": 363
  }, {
    "id": 409,
    "label": "libverify.so",
    "parentId": 363
  }, {
    "id": 410,
    "label": "libzip.so",
    "parentId": 363
  }, {
    "id": 411,
    "label": "modules",
    "parentId": 363
  }, {
    "id": 412,
    "label": "psfont.properties.ja",
    "parentId": 363
  }, {
    "id": 413,
    "label": "psfontj2d.properties",
    "parentId": 363
  }, {
    "id": 415,
    "label": "security",
    "parentId": 363
  }, {
    "id": 414,
    "label": "blocked.certs",
    "parentId": 415
  }, {
    "id": 416,
    "label": "cacerts",
    "parentId": 415
  }, {
    "id": 417,
    "label": "default.policy",
    "parentId": 415
  }, {
    "id": 418,
    "label": "public_suffix_list.dat",
    "parentId": 415
  }, {
    "id": 420,
    "label": "server",
    "parentId": 363
  }, {
    "id": 419,
    "label": "classes.jsa",
    "parentId": 420
  }, {
    "id": 421,
    "label": "classes_nocoops.jsa",
    "parentId": 420
  }, {
    "id": 422,
    "label": "libjsig.so",
    "parentId": 420
  }, {
    "id": 423,
    "label": "libjvm.so",
    "parentId": 420
  }, {
    "id": 424,
    "label": "tzdb.dat",
    "parentId": 363
  }, {
    "id": 426,
    "label": "lib"
  }, {
    "id": 425,
    "label": "types.bzl",
    "parentId": 426
  }, {
    "id": 427,
    "label": "stardoc_binary.jar",
    "parentId": 58
  }, {
    "id": 428,
    "label": "docs_Stypes_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 430,
    "label": "include",
    "parentId": 10
  }, {
    "id": 429,
    "label": "build-info-redacted.properties",
    "parentId": 430
  }, {
    "id": 431,
    "label": "types_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 432,
    "label": "types_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 433,
    "label": "or_config_setting_group_multiple_conds_match_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 435,
    "label": "or_config_setting_group_multiple_conds_match_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 434,
    "label": "MANIFEST",
    "parentId": 435
  }, {
    "id": 436,
    "label": "or_config_setting_group_multiple_conds_match_test.sh",
    "parentId": 13
  }, {
    "id": 437,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Umultiple_Uconds_Umatch_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 439,
    "label": "or_config_setting_group_multiple_conds_match_test",
    "parentId": 25
  }, {
    "id": 438,
    "label": "test.log",
    "parentId": 439
  }, {
    "id": 440,
    "label": "test.cache_status",
    "parentId": 439
  }, {
    "id": 441,
    "label": "diff_test_stardoc.jar",
    "parentId": 45
  }, {
    "id": 442,
    "label": "diff_test_stardoc",
    "parentId": 45
  }, {
    "id": 443,
    "label": "docs_Sdiff_Utest_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 444,
    "label": "diff_test.raw",
    "parentId": 53
  }, {
    "id": 445,
    "label": "diff_test_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 446,
    "label": "or_config_setting_group_single_setting_fails_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 448,
    "label": "or_config_setting_group_single_setting_fails_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 447,
    "label": "MANIFEST",
    "parentId": 448
  }, {
    "id": 449,
    "label": "or_config_setting_group_single_setting_fails_test.sh",
    "parentId": 13
  }, {
    "id": 450,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Usingle_Usetting_Ufails_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 452,
    "label": "or_config_setting_group_single_setting_fails_test",
    "parentId": 25
  }, {
    "id": 451,
    "label": "test.log",
    "parentId": 452
  }, {
    "id": 453,
    "label": "test.cache_status",
    "parentId": 452
  }, {
    "id": 454,
    "label": "unittest_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 455,
    "label": "unittest_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 457,
    "label": "unittest_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 456,
    "label": "MANIFEST",
    "parentId": 457
  }, {
    "id": 458,
    "label": "tests_Sunittest_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 460,
    "label": "unittest_tests_test_0",
    "parentId": 25
  }, {
    "id": 459,
    "label": "test.log",
    "parentId": 460
  }, {
    "id": 461,
    "label": "test.cache_status",
    "parentId": 460
  }, {
    "id": 462,
    "label": "new_sets_tests_test_9.sh",
    "parentId": 13
  }, {
    "id": 463,
    "label": "new_sets_tests_test_9.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 465,
    "label": "new_sets_tests_test_9.sh.runfiles",
    "parentId": 13
  }, {
    "id": 464,
    "label": "MANIFEST",
    "parentId": 465
  }, {
    "id": 466,
    "label": "tests_Snew_Usets_Utests_Utest_U9.sh-runfiles",
    "parentId": 18
  }, {
    "id": 468,
    "label": "new_sets_tests_test_9",
    "parentId": 25
  }, {
    "id": 467,
    "label": "test.log",
    "parentId": 468
  }, {
    "id": 469,
    "label": "test.cache_status",
    "parentId": 468
  }, {
    "id": 470,
    "label": "new_sets_stardoc.jar",
    "parentId": 45
  }, {
    "id": 471,
    "label": "new_sets_stardoc",
    "parentId": 45
  }, {
    "id": 472,
    "label": "docs_Snew_Usets_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 473,
    "label": "new_sets.raw",
    "parentId": 53
  }, {
    "id": 474,
    "label": "new_sets_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 475,
    "label": "partial_stardoc.jar",
    "parentId": 54
  }, {
    "id": 476,
    "label": "partial_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 477,
    "label": "partial_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 478,
    "label": "partial_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 479,
    "label": "partial_stardoc",
    "parentId": 54
  }, {
    "id": 480,
    "label": "partial_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 481,
    "label": "partial_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 483,
    "label": "partial_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 482,
    "label": "MANIFEST",
    "parentId": 483
  }, {
    "id": 484,
    "label": "partial.bzl",
    "parentId": 426
  }, {
    "id": 485,
    "label": "docs_Spartial_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 486,
    "label": "partial_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 487,
    "label": "partial_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 488,
    "label": "docs_unittest_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 489,
    "label": "docs_unittest_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 491,
    "label": "docs_unittest_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 490,
    "label": "MANIFEST",
    "parentId": 491
  }, {
    "id": 493,
    "label": "docs"
  }, {
    "id": 492,
    "label": "unittest_doc.md",
    "parentId": 493
  }, {
    "id": 494,
    "label": "unittest_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 495,
    "label": "docs_Sdocs_Uunittest_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 498,
    "label": "docs",
    "parentId": 26
  }, {
    "id": 497,
    "label": "docs_unittest_doc-difftest",
    "parentId": 498
  }, {
    "id": 496,
    "label": "test.log",
    "parentId": 497
  }, {
    "id": 499,
    "label": "test.cache_status",
    "parentId": 497
  }, {
    "id": 500,
    "label": "subpackages_stardoc.jar",
    "parentId": 45
  }, {
    "id": 501,
    "label": "subpackages_stardoc",
    "parentId": 45
  }, {
    "id": 502,
    "label": "docs_Ssubpackages_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 503,
    "label": "subpackages.raw",
    "parentId": 53
  }, {
    "id": 504,
    "label": "subpackages_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 505,
    "label": "new_sets_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 506,
    "label": "new_sets_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 508,
    "label": "new_sets_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 507,
    "label": "MANIFEST",
    "parentId": 508
  }, {
    "id": 509,
    "label": "tests_Snew_Usets_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 511,
    "label": "new_sets_tests_test_1",
    "parentId": 25
  }, {
    "id": 510,
    "label": "test.log",
    "parentId": 511
  }, {
    "id": 512,
    "label": "test.cache_status",
    "parentId": 511
  }, {
    "id": 513,
    "label": "bzl_library_stardoc.jar",
    "parentId": 45
  }, {
    "id": 514,
    "label": "bzl_library_stardoc",
    "parentId": 45
  }, {
    "id": 515,
    "label": "docs_Sbzl_Ulibrary_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 516,
    "label": "bzl_library.raw",
    "parentId": 53
  }, {
    "id": 517,
    "label": "bzl_library-docgen.md",
    "parentId": 53
  }, {
    "id": 518,
    "label": "paths_tests_test_6.sh",
    "parentId": 13
  }, {
    "id": 519,
    "label": "paths_tests_test_6.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 521,
    "label": "paths_tests_test_6.sh.runfiles",
    "parentId": 13
  }, {
    "id": 520,
    "label": "MANIFEST",
    "parentId": 521
  }, {
    "id": 522,
    "label": "tests_Spaths_Utests_Utest_U6.sh-runfiles",
    "parentId": 18
  }, {
    "id": 524,
    "label": "paths_tests_test_6",
    "parentId": 25
  }, {
    "id": 523,
    "label": "test.log",
    "parentId": 524
  }, {
    "id": 525,
    "label": "test.cache_status",
    "parentId": 524
  }, {
    "id": 526,
    "label": "docs_common_settings_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 527,
    "label": "docs_common_settings_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 529,
    "label": "docs_common_settings_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 528,
    "label": "MANIFEST",
    "parentId": 529
  }, {
    "id": 530,
    "label": "common_settings_doc.md",
    "parentId": 493
  }, {
    "id": 531,
    "label": "common_settings_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 532,
    "label": "docs_Sdocs_Ucommon_Usettings_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 534,
    "label": "docs_common_settings_doc-difftest",
    "parentId": 498
  }, {
    "id": 533,
    "label": "test.log",
    "parentId": 534
  }, {
    "id": 535,
    "label": "test.cache_status",
    "parentId": 534
  }, {
    "id": 538,
    "label": "tests"
  }, {
    "id": 537,
    "label": "write_file",
    "parentId": 538
  }, {
    "id": 536,
    "label": "write_file_tests.sh",
    "parentId": 537
  }, {
    "id": 539,
    "label": "write_file_tests",
    "parentId": 112
  }, {
    "id": 540,
    "label": "write_file_tests.runfiles_manifest",
    "parentId": 112
  }, {
    "id": 542,
    "label": "write_file_tests.runfiles",
    "parentId": 112
  }, {
    "id": 541,
    "label": "MANIFEST",
    "parentId": 542
  }, {
    "id": 543,
    "label": "empty-bin-out.txt",
    "parentId": 112
  }, {
    "id": 544,
    "label": "nonempty-bin-out.txt",
    "parentId": 112
  }, {
    "id": 545,
    "label": "nonempty.txt",
    "parentId": 111
  }, {
    "id": 546,
    "label": "unittest.bash",
    "parentId": 538
  }, {
    "id": 549,
    "label": "bash",
    "parentId": 4
  }, {
    "id": 548,
    "label": "runfiles",
    "parentId": 549
  }, {
    "id": 547,
    "label": "runfiles.bash",
    "parentId": 548
  }, {
    "id": 550,
    "label": "tests_Swrite_Ufile_Swrite_Ufile_Utests-runfiles",
    "parentId": 18
  }, {
    "id": 553,
    "label": "write_file",
    "parentId": 25
  }, {
    "id": 552,
    "label": "write_file_tests",
    "parentId": 553
  }, {
    "id": 551,
    "label": "test.log",
    "parentId": 552
  }, {
    "id": 554,
    "label": "test.cache_status",
    "parentId": 552
  }, {
    "id": 555,
    "label": "or_config_setting_group_all_conds_match_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 557,
    "label": "or_config_setting_group_all_conds_match_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 556,
    "label": "MANIFEST",
    "parentId": 557
  }, {
    "id": 558,
    "label": "or_config_setting_group_all_conds_match_test.sh",
    "parentId": 13
  }, {
    "id": 559,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Uall_Uconds_Umatch_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 561,
    "label": "or_config_setting_group_all_conds_match_test",
    "parentId": 25
  }, {
    "id": 560,
    "label": "test.log",
    "parentId": 561
  }, {
    "id": 562,
    "label": "test.cache_status",
    "parentId": 561
  }, {
    "id": 563,
    "label": "selects_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 564,
    "label": "selects_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 566,
    "label": "selects_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 565,
    "label": "MANIFEST",
    "parentId": 566
  }, {
    "id": 567,
    "label": "tests_Sselects_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 569,
    "label": "selects_tests_test_0",
    "parentId": 25
  }, {
    "id": 568,
    "label": "test.log",
    "parentId": 569
  }, {
    "id": 570,
    "label": "test.cache_status",
    "parentId": 569
  }, {
    "id": 571,
    "label": "newline_unix_actual.txt",
    "parentId": 111
  }, {
    "id": 572,
    "label": "and_config_setting_group_single_setting_fails_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 574,
    "label": "and_config_setting_group_single_setting_fails_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 573,
    "label": "MANIFEST",
    "parentId": 574
  }, {
    "id": 575,
    "label": "and_config_setting_group_single_setting_fails_test.sh",
    "parentId": 13
  }, {
    "id": 576,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Usingle_Usetting_Ufails_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 578,
    "label": "and_config_setting_group_single_setting_fails_test",
    "parentId": 25
  }, {
    "id": 577,
    "label": "test.log",
    "parentId": 578
  }, {
    "id": 579,
    "label": "test.cache_status",
    "parentId": 578
  }, {
    "id": 580,
    "label": "docs_shell_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 581,
    "label": "docs_shell_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 583,
    "label": "docs_shell_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 582,
    "label": "MANIFEST",
    "parentId": 583
  }, {
    "id": 584,
    "label": "shell_doc.md",
    "parentId": 493
  }, {
    "id": 585,
    "label": "shell_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 586,
    "label": "docs_Sdocs_Ushell_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 588,
    "label": "docs_shell_doc-difftest",
    "parentId": 498
  }, {
    "id": 587,
    "label": "test.log",
    "parentId": 588
  }, {
    "id": 589,
    "label": "test.cache_status",
    "parentId": 588
  }, {
    "id": 590,
    "label": "b.txt",
    "parentId": 30
  }, {
    "id": 592,
    "label": "out",
    "parentId": 30
  }, {
    "id": 591,
    "label": "gen-out-symlink.txt",
    "parentId": 592
  }, {
    "id": 593,
    "label": "unix_line_ending_test-test.sh",
    "parentId": 112
  }, {
    "id": 594,
    "label": "unix_line_ending_test-test.sh.runfiles_manifest",
    "parentId": 112
  }, {
    "id": 596,
    "label": "unix_line_ending_test-test.sh.runfiles",
    "parentId": 112
  }, {
    "id": 595,
    "label": "MANIFEST",
    "parentId": 596
  }, {
    "id": 597,
    "label": "newline_unix_exp.txt",
    "parentId": 111
  }, {
    "id": 598,
    "label": "tests_Swrite_Ufile_Sunix_Uline_Uending_Utest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 600,
    "label": "unix_line_ending_test",
    "parentId": 553
  }, {
    "id": 599,
    "label": "test.log",
    "parentId": 600
  }, {
    "id": 601,
    "label": "test.cache_status",
    "parentId": 600
  }, {
    "id": 602,
    "label": "types_tests_test_3.sh",
    "parentId": 13
  }, {
    "id": 603,
    "label": "types_tests_test_3.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 605,
    "label": "types_tests_test_3.sh.runfiles",
    "parentId": 13
  }, {
    "id": 604,
    "label": "MANIFEST",
    "parentId": 605
  }, {
    "id": 606,
    "label": "tests_Stypes_Utests_Utest_U3.sh-runfiles",
    "parentId": 18
  }, {
    "id": 608,
    "label": "types_tests_test_3",
    "parentId": 25
  }, {
    "id": 607,
    "label": "test.log",
    "parentId": 608
  }, {
    "id": 609,
    "label": "test.cache_status",
    "parentId": 608
  }, {
    "id": 611,
    "label": "copy_directory",
    "parentId": 13
  }, {
    "id": 610,
    "label": "empty_dir",
    "parentId": 611
  }, {
    "id": 612,
    "label": "empty_dir_copy",
    "parentId": 611
  }, {
    "id": 614,
    "label": "diff_test",
    "parentId": 13
  }, {
    "id": 613,
    "label": "same_src_gen-test.sh",
    "parentId": 614
  }, {
    "id": 615,
    "label": "same_src_gen-test.sh.runfiles_manifest",
    "parentId": 614
  }, {
    "id": 617,
    "label": "same_src_gen-test.sh.runfiles",
    "parentId": 614
  }, {
    "id": 616,
    "label": "MANIFEST",
    "parentId": 617
  }, {
    "id": 619,
    "label": "diff_test",
    "parentId": 538
  }, {
    "id": 618,
    "label": "a.txt",
    "parentId": 619
  }, {
    "id": 620,
    "label": "a-gen.txt",
    "parentId": 614
  }, {
    "id": 621,
    "label": "tests_Sdiff_Utest_Ssame_Usrc_Ugen-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 624,
    "label": "diff_test",
    "parentId": 25
  }, {
    "id": 623,
    "label": "same_src_gen",
    "parentId": 624
  }, {
    "id": 622,
    "label": "test.log",
    "parentId": 623
  }, {
    "id": 625,
    "label": "test.cache_status",
    "parentId": 623
  }, {
    "id": 626,
    "label": "update.sh",
    "parentId": 54
  }, {
    "id": 627,
    "label": "update",
    "parentId": 54
  }, {
    "id": 628,
    "label": "update.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 630,
    "label": "update.runfiles",
    "parentId": 54
  }, {
    "id": 629,
    "label": "MANIFEST",
    "parentId": 630
  }, {
    "id": 631,
    "label": "analysis_test_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 632,
    "label": "build_test_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 633,
    "label": "collections_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 634,
    "label": "copy_directory_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 635,
    "label": "copy_file_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 636,
    "label": "dicts_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 637,
    "label": "expand_template_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 638,
    "label": "native_binary_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 639,
    "label": "partial_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 640,
    "label": "paths_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 641,
    "label": "run_binary_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 642,
    "label": "selects_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 643,
    "label": "select_file_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 644,
    "label": "structs_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 645,
    "label": "types_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 646,
    "label": "write_file_doc-docgen.md",
    "parentId": 53
  }, {
    "id": 647,
    "label": "docs_Supdate-runfiles",
    "parentId": 18
  }, {
    "id": 648,
    "label": "newline_win_actual.txt",
    "parentId": 111
  }, {
    "id": 649,
    "label": "always_true_match_any_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 651,
    "label": "always_true_match_any_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 650,
    "label": "MANIFEST",
    "parentId": 651
  }, {
    "id": 652,
    "label": "always_true_match_any_test.sh",
    "parentId": 13
  }, {
    "id": 653,
    "label": "tests_Salways_Utrue_Umatch_Uany_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 655,
    "label": "always_true_match_any_test",
    "parentId": 25
  }, {
    "id": 654,
    "label": "test.log",
    "parentId": 655
  }, {
    "id": 656,
    "label": "test.cache_status",
    "parentId": 655
  }, {
    "id": 657,
    "label": "docs_expand_template_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 658,
    "label": "docs_expand_template_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 660,
    "label": "docs_expand_template_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 659,
    "label": "MANIFEST",
    "parentId": 660
  }, {
    "id": 661,
    "label": "expand_template_doc.md",
    "parentId": 493
  }, {
    "id": 662,
    "label": "docs_Sdocs_Uexpand_Utemplate_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 664,
    "label": "docs_expand_template_doc-difftest",
    "parentId": 498
  }, {
    "id": 663,
    "label": "test.log",
    "parentId": 664
  }, {
    "id": 665,
    "label": "test.cache_status",
    "parentId": 664
  }, {
    "id": 666,
    "label": "docs_run_binary_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 667,
    "label": "docs_run_binary_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 669,
    "label": "docs_run_binary_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 668,
    "label": "MANIFEST",
    "parentId": 669
  }, {
    "id": 670,
    "label": "run_binary_doc.md",
    "parentId": 493
  }, {
    "id": 671,
    "label": "docs_Sdocs_Urun_Ubinary_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 673,
    "label": "docs_run_binary_doc-difftest",
    "parentId": 498
  }, {
    "id": 672,
    "label": "test.log",
    "parentId": 673
  }, {
    "id": 674,
    "label": "test.cache_status",
    "parentId": 673
  }, {
    "id": 676,
    "label": "expand_template",
    "parentId": 13
  }, {
    "id": 675,
    "label": "version.h",
    "parentId": 676
  }, {
    "id": 677,
    "label": "_S_Stests_Sexpand_Utemplate_Ctest-BazelCppSemantics_build_arch_k8-fastbuild",
    "parentId": 18
  }, {
    "id": 679,
    "label": "local_config_cc",
    "parentId": 6
  }, {
    "id": 678,
    "label": "builtin_include_directory_paths",
    "parentId": 679
  }, {
    "id": 681,
    "label": "expand_template",
    "parentId": 538
  }, {
    "id": 680,
    "label": "test.cc",
    "parentId": 681
  }, {
    "id": 684,
    "label": "_objs",
    "parentId": 676
  }, {
    "id": 683,
    "label": "test",
    "parentId": 684
  }, {
    "id": 682,
    "label": "test.pic.o",
    "parentId": 683
  }, {
    "id": 685,
    "label": "test.pic.d",
    "parentId": 683
  }, {
    "id": 686,
    "label": "test-2.params",
    "parentId": 676
  }, {
    "id": 688,
    "label": "cpp",
    "parentId": 4
  }, {
    "id": 687,
    "label": "build_interface_so",
    "parentId": 688
  }, {
    "id": 689,
    "label": "link_dynamic_library.sh",
    "parentId": 688
  }, {
    "id": 690,
    "label": "test",
    "parentId": 676
  }, {
    "id": 691,
    "label": "test.stripped",
    "parentId": 676
  }, {
    "id": 692,
    "label": "test.dwp",
    "parentId": 676
  }, {
    "id": 693,
    "label": "test.runfiles_manifest",
    "parentId": 676
  }, {
    "id": 695,
    "label": "test.runfiles",
    "parentId": 676
  }, {
    "id": 694,
    "label": "MANIFEST",
    "parentId": 695
  }, {
    "id": 696,
    "label": "tests_Sexpand_Utemplate_Stest-runfiles",
    "parentId": 18
  }, {
    "id": 699,
    "label": "expand_template",
    "parentId": 25
  }, {
    "id": 698,
    "label": "test",
    "parentId": 699
  }, {
    "id": 697,
    "label": "test.log",
    "parentId": 698
  }, {
    "id": 700,
    "label": "test.cache_status",
    "parentId": 698
  }, {
    "id": 701,
    "label": "and_config_setting_group_all_matches_fail_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 703,
    "label": "and_config_setting_group_all_matches_fail_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 702,
    "label": "MANIFEST",
    "parentId": 703
  }, {
    "id": 704,
    "label": "and_config_setting_group_all_matches_fail_test.sh",
    "parentId": 13
  }, {
    "id": 705,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Uall_Umatches_Ufail_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 707,
    "label": "and_config_setting_group_all_matches_fail_test",
    "parentId": 25
  }, {
    "id": 706,
    "label": "test.log",
    "parentId": 707
  }, {
    "id": 708,
    "label": "test.cache_status",
    "parentId": 707
  }, {
    "id": 709,
    "label": "docs_copy_file_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 710,
    "label": "docs_copy_file_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 712,
    "label": "docs_copy_file_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 711,
    "label": "MANIFEST",
    "parentId": 712
  }, {
    "id": 713,
    "label": "copy_file_doc.md",
    "parentId": 493
  }, {
    "id": 714,
    "label": "docs_Sdocs_Ucopy_Ufile_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 716,
    "label": "docs_copy_file_doc-difftest",
    "parentId": 498
  }, {
    "id": 715,
    "label": "test.log",
    "parentId": 716
  }, {
    "id": 717,
    "label": "test.cache_status",
    "parentId": 716
  }, {
    "id": 718,
    "label": "docs_structs_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 719,
    "label": "docs_structs_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 721,
    "label": "docs_structs_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 720,
    "label": "MANIFEST",
    "parentId": 721
  }, {
    "id": 722,
    "label": "structs_doc.md",
    "parentId": 493
  }, {
    "id": 723,
    "label": "docs_Sdocs_Ustructs_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 725,
    "label": "docs_structs_doc-difftest",
    "parentId": 498
  }, {
    "id": 724,
    "label": "test.log",
    "parentId": 725
  }, {
    "id": 726,
    "label": "test.cache_status",
    "parentId": 725
  }, {
    "id": 727,
    "label": "docs_new_sets_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 728,
    "label": "docs_new_sets_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 730,
    "label": "docs_new_sets_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 729,
    "label": "MANIFEST",
    "parentId": 730
  }, {
    "id": 731,
    "label": "new_sets_doc.md",
    "parentId": 493
  }, {
    "id": 732,
    "label": "docs_Sdocs_Unew_Usets_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 734,
    "label": "docs_new_sets_doc-difftest",
    "parentId": 498
  }, {
    "id": 733,
    "label": "test.log",
    "parentId": 734
  }, {
    "id": 735,
    "label": "test.cache_status",
    "parentId": 734
  }, {
    "id": 736,
    "label": "expand_template_stardoc.jar",
    "parentId": 45
  }, {
    "id": 737,
    "label": "expand_template_stardoc",
    "parentId": 45
  }, {
    "id": 738,
    "label": "docs_Sexpand_Utemplate_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 739,
    "label": "expand_template.raw",
    "parentId": 53
  }, {
    "id": 740,
    "label": "docs_native_binary_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 741,
    "label": "docs_native_binary_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 743,
    "label": "docs_native_binary_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 742,
    "label": "MANIFEST",
    "parentId": 743
  }, {
    "id": 744,
    "label": "native_binary_doc.md",
    "parentId": 493
  }, {
    "id": 745,
    "label": "docs_Sdocs_Unative_Ubinary_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 747,
    "label": "docs_native_binary_doc-difftest",
    "parentId": 498
  }, {
    "id": 746,
    "label": "test.log",
    "parentId": 747
  }, {
    "id": 748,
    "label": "test.cache_status",
    "parentId": 747
  }, {
    "id": 749,
    "label": "select_file_stardoc.jar",
    "parentId": 45
  }, {
    "id": 750,
    "label": "select_file_stardoc",
    "parentId": 45
  }, {
    "id": 751,
    "label": "docs_Sselect_Ufile_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 752,
    "label": "select_file.raw",
    "parentId": 53
  }, {
    "id": 753,
    "label": "win_line_ending_test-test.sh",
    "parentId": 112
  }, {
    "id": 754,
    "label": "win_line_ending_test-test.sh.runfiles_manifest",
    "parentId": 112
  }, {
    "id": 756,
    "label": "win_line_ending_test-test.sh.runfiles",
    "parentId": 112
  }, {
    "id": 755,
    "label": "MANIFEST",
    "parentId": 756
  }, {
    "id": 757,
    "label": "newline_win_exp.txt",
    "parentId": 111
  }, {
    "id": 758,
    "label": "tests_Swrite_Ufile_Swin_Uline_Uending_Utest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 760,
    "label": "win_line_ending_test",
    "parentId": 553
  }, {
    "id": 759,
    "label": "test.log",
    "parentId": 760
  }, {
    "id": 761,
    "label": "test.cache_status",
    "parentId": 760
  }, {
    "id": 762,
    "label": "loading_test_selftest_self_glob.sh",
    "parentId": 13
  }, {
    "id": 763,
    "label": "loading_test_selftest_self_glob.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 765,
    "label": "loading_test_selftest_self_glob.sh.runfiles",
    "parentId": 13
  }, {
    "id": 764,
    "label": "MANIFEST",
    "parentId": 765
  }, {
    "id": 766,
    "label": "tests_Sloading_Utest_Uselftest_Uself_Uglob.sh-runfiles",
    "parentId": 18
  }, {
    "id": 768,
    "label": "selftest_self_glob",
    "parentId": 25
  }, {
    "id": 767,
    "label": "test.log",
    "parentId": 768
  }, {
    "id": 769,
    "label": "test.cache_status",
    "parentId": 768
  }, {
    "id": 770,
    "label": "gen-out.sh.runfiles_manifest",
    "parentId": 29
  }, {
    "id": 772,
    "label": "gen-out.sh.runfiles",
    "parentId": 29
  }, {
    "id": 771,
    "label": "MANIFEST",
    "parentId": 772
  }, {
    "id": 773,
    "label": "tests_Scopy_Ufile_Sxout_Sgen-out.sh-runfiles",
    "parentId": 18
  }, {
    "id": 774,
    "label": "new_sets_tests_test_6.sh",
    "parentId": 13
  }, {
    "id": 775,
    "label": "new_sets_tests_test_6.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 777,
    "label": "new_sets_tests_test_6.sh.runfiles",
    "parentId": 13
  }, {
    "id": 776,
    "label": "MANIFEST",
    "parentId": 777
  }, {
    "id": 778,
    "label": "tests_Snew_Usets_Utests_Utest_U6.sh-runfiles",
    "parentId": 18
  }, {
    "id": 780,
    "label": "new_sets_tests_test_6",
    "parentId": 25
  }, {
    "id": 779,
    "label": "test.log",
    "parentId": 780
  }, {
    "id": 781,
    "label": "test.cache_status",
    "parentId": 780
  }, {
    "id": 782,
    "label": "versions_stardoc.jar",
    "parentId": 54
  }, {
    "id": 783,
    "label": "versions_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 784,
    "label": "versions_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 785,
    "label": "versions_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 786,
    "label": "versions_stardoc",
    "parentId": 54
  }, {
    "id": 787,
    "label": "versions_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 788,
    "label": "versions_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 790,
    "label": "versions_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 789,
    "label": "MANIFEST",
    "parentId": 790
  }, {
    "id": 791,
    "label": "versions.bzl",
    "parentId": 426
  }, {
    "id": 792,
    "label": "docs_Sversions_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 793,
    "label": "versions_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 794,
    "label": "versions_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 795,
    "label": "common_settings_stardoc.jar",
    "parentId": 54
  }, {
    "id": 796,
    "label": "common_settings_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 797,
    "label": "common_settings_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 798,
    "label": "common_settings_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 799,
    "label": "common_settings_stardoc",
    "parentId": 54
  }, {
    "id": 800,
    "label": "common_settings_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 801,
    "label": "common_settings_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 803,
    "label": "common_settings_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 802,
    "label": "MANIFEST",
    "parentId": 803
  }, {
    "id": 805,
    "label": "rules"
  }, {
    "id": 804,
    "label": "common_settings.bzl",
    "parentId": 805
  }, {
    "id": 806,
    "label": "docs_Scommon_Usettings_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 807,
    "label": "common_settings_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 808,
    "label": "common_settings_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 809,
    "label": "out.txt",
    "parentId": 13
  }, {
    "id": 810,
    "label": "loading_test_selftest_test_exists.sh",
    "parentId": 13
  }, {
    "id": 811,
    "label": "loading_test_selftest_test_exists.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 813,
    "label": "loading_test_selftest_test_exists.sh.runfiles",
    "parentId": 13
  }, {
    "id": 812,
    "label": "MANIFEST",
    "parentId": 813
  }, {
    "id": 814,
    "label": "tests_Sloading_Utest_Uselftest_Utest_Uexists.sh-runfiles",
    "parentId": 18
  }, {
    "id": 816,
    "label": "selftest_test_exists",
    "parentId": 25
  }, {
    "id": 815,
    "label": "test.log",
    "parentId": 816
  }, {
    "id": 817,
    "label": "test.cache_status",
    "parentId": 816
  }, {
    "id": 818,
    "label": "shell_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 819,
    "label": "shell_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 821,
    "label": "shell_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 820,
    "label": "MANIFEST",
    "parentId": 821
  }, {
    "id": 822,
    "label": "tests_Sshell_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 824,
    "label": "shell_tests_test_0",
    "parentId": 25
  }, {
    "id": 823,
    "label": "test.log",
    "parentId": 824
  }, {
    "id": 825,
    "label": "test.cache_status",
    "parentId": 824
  }, {
    "id": 827,
    "label": "copy_directory",
    "parentId": 538
  }, {
    "id": 826,
    "label": "dir_with_subdir",
    "parentId": 827
  }, {
    "id": 828,
    "label": "dir_copy",
    "parentId": 611
  }, {
    "id": 829,
    "label": "loading_test_subpackages_all.sh",
    "parentId": 13
  }, {
    "id": 830,
    "label": "loading_test_subpackages_all.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 832,
    "label": "loading_test_subpackages_all.sh.runfiles",
    "parentId": 13
  }, {
    "id": 831,
    "label": "MANIFEST",
    "parentId": 832
  }, {
    "id": 833,
    "label": "tests_Sloading_Utest_Usubpackages_Uall.sh-runfiles",
    "parentId": 18
  }, {
    "id": 835,
    "label": "subpackages_all",
    "parentId": 25
  }, {
    "id": 834,
    "label": "test.log",
    "parentId": 835
  }, {
    "id": 836,
    "label": "test.cache_status",
    "parentId": 835
  }, {
    "id": 837,
    "label": "copy_file_stardoc.jar",
    "parentId": 45
  }, {
    "id": 838,
    "label": "copy_file_stardoc",
    "parentId": 45
  }, {
    "id": 839,
    "label": "docs_Scopy_Ufile_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 840,
    "label": "copy_file.raw",
    "parentId": 53
  }, {
    "id": 841,
    "label": "docs_analysis_test_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 842,
    "label": "docs_analysis_test_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 844,
    "label": "docs_analysis_test_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 843,
    "label": "MANIFEST",
    "parentId": 844
  }, {
    "id": 845,
    "label": "analysis_test_doc.md",
    "parentId": 493
  }, {
    "id": 846,
    "label": "docs_Sdocs_Uanalysis_Utest_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 848,
    "label": "docs_analysis_test_doc-difftest",
    "parentId": 498
  }, {
    "id": 847,
    "label": "test.log",
    "parentId": 848
  }, {
    "id": 849,
    "label": "test.cache_status",
    "parentId": 848
  }, {
    "id": 850,
    "label": "types_tests_test_4.sh",
    "parentId": 13
  }, {
    "id": 851,
    "label": "types_tests_test_4.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 853,
    "label": "types_tests_test_4.sh.runfiles",
    "parentId": 13
  }, {
    "id": 852,
    "label": "MANIFEST",
    "parentId": 853
  }, {
    "id": 854,
    "label": "tests_Stypes_Utests_Utest_U4.sh-runfiles",
    "parentId": 18
  }, {
    "id": 856,
    "label": "types_tests_test_4",
    "parentId": 25
  }, {
    "id": 855,
    "label": "test.log",
    "parentId": 856
  }, {
    "id": 857,
    "label": "test.cache_status",
    "parentId": 856
  }, {
    "id": 858,
    "label": "build_test_stardoc.jar",
    "parentId": 45
  }, {
    "id": 859,
    "label": "build_test_stardoc",
    "parentId": 45
  }, {
    "id": 860,
    "label": "docs_Sbuild_Utest_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 861,
    "label": "build_test.raw",
    "parentId": 53
  }, {
    "id": 862,
    "label": "subpackages_stardoc.jar",
    "parentId": 54
  }, {
    "id": 863,
    "label": "subpackages_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 864,
    "label": "subpackages_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 865,
    "label": "subpackages_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 866,
    "label": "subpackages_stardoc",
    "parentId": 54
  }, {
    "id": 867,
    "label": "subpackages_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 868,
    "label": "subpackages_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 870,
    "label": "subpackages_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 869,
    "label": "MANIFEST",
    "parentId": 870
  }, {
    "id": 871,
    "label": "subpackages.bzl",
    "parentId": 426
  }, {
    "id": 872,
    "label": "docs_Ssubpackages_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 873,
    "label": "subpackages_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 874,
    "label": "subpackages_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 876,
    "label": "native_binary",
    "parentId": 13
  }, {
    "id": 875,
    "label": "assertdata_with_runfiles",
    "parentId": 876
  }, {
    "id": 877,
    "label": "data_from_binary_test.exe",
    "parentId": 876
  }, {
    "id": 878,
    "label": "data_from_binary_test.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 880,
    "label": "data_from_binary_test.exe.runfiles",
    "parentId": 876
  }, {
    "id": 879,
    "label": "MANIFEST",
    "parentId": 880
  }, {
    "id": 882,
    "label": "native_binary",
    "parentId": 538
  }, {
    "id": 881,
    "label": "testdata.txt",
    "parentId": 882
  }, {
    "id": 883,
    "label": "tests_Snative_Ubinary_Sdata_Ufrom_Ubinary_Utest.exe-runfiles",
    "parentId": 18
  }, {
    "id": 886,
    "label": "native_binary",
    "parentId": 25
  }, {
    "id": 885,
    "label": "data_from_binary_test",
    "parentId": 886
  }, {
    "id": 884,
    "label": "test.log",
    "parentId": 885
  }, {
    "id": 887,
    "label": "test.cache_status",
    "parentId": 885
  }, {
    "id": 888,
    "label": "run_binary_stardoc.jar",
    "parentId": 54
  }, {
    "id": 889,
    "label": "run_binary_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 890,
    "label": "run_binary_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 891,
    "label": "run_binary_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 892,
    "label": "run_binary_stardoc",
    "parentId": 54
  }, {
    "id": 893,
    "label": "run_binary_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 894,
    "label": "run_binary_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 896,
    "label": "run_binary_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 895,
    "label": "MANIFEST",
    "parentId": 896
  }, {
    "id": 897,
    "label": "dicts.bzl",
    "parentId": 426
  }, {
    "id": 898,
    "label": "run_binary.bzl",
    "parentId": 805
  }, {
    "id": 899,
    "label": "docs_Srun_Ubinary_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 900,
    "label": "run_binary_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 901,
    "label": "run_binary_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 902,
    "label": "new_sets_stardoc.jar",
    "parentId": 54
  }, {
    "id": 903,
    "label": "new_sets_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 904,
    "label": "new_sets_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 905,
    "label": "new_sets_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 906,
    "label": "new_sets_stardoc",
    "parentId": 54
  }, {
    "id": 907,
    "label": "new_sets_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 908,
    "label": "new_sets_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 910,
    "label": "new_sets_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 909,
    "label": "MANIFEST",
    "parentId": 910
  }, {
    "id": 911,
    "label": "new_sets.bzl",
    "parentId": 426
  }, {
    "id": 912,
    "label": "docs_Snew_Usets_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 913,
    "label": "new_sets_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 914,
    "label": "new_sets_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 916,
    "label": "copy_file",
    "parentId": 538
  }, {
    "id": 915,
    "label": "a.txt",
    "parentId": 916
  }, {
    "id": 917,
    "label": "a-out.sh",
    "parentId": 29
  }, {
    "id": 918,
    "label": "a-out.sh.runfiles_manifest",
    "parentId": 29
  }, {
    "id": 920,
    "label": "a-out.sh.runfiles",
    "parentId": 29
  }, {
    "id": 919,
    "label": "MANIFEST",
    "parentId": 920
  }, {
    "id": 921,
    "label": "tests_Scopy_Ufile_Sxout_Sa-out.sh-runfiles",
    "parentId": 18
  }, {
    "id": 922,
    "label": "or_config_setting_group_no_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 924,
    "label": "or_config_setting_group_no_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 923,
    "label": "MANIFEST",
    "parentId": 924
  }, {
    "id": 925,
    "label": "or_config_setting_group_no_matches_test.sh",
    "parentId": 13
  }, {
    "id": 926,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Uno_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 928,
    "label": "or_config_setting_group_no_matches_test",
    "parentId": 25
  }, {
    "id": 927,
    "label": "test.log",
    "parentId": 928
  }, {
    "id": 929,
    "label": "test.cache_status",
    "parentId": 928
  }, {
    "id": 931,
    "label": "select_file",
    "parentId": 13
  }, {
    "id": 930,
    "label": "selected_inner-test.sh",
    "parentId": 931
  }, {
    "id": 932,
    "label": "selected_inner-test.sh.runfiles_manifest",
    "parentId": 931
  }, {
    "id": 934,
    "label": "selected_inner-test.sh.runfiles",
    "parentId": 931
  }, {
    "id": 933,
    "label": "MANIFEST",
    "parentId": 934
  }, {
    "id": 937,
    "label": "select_file",
    "parentId": 538
  }, {
    "id": 936,
    "label": "subdir",
    "parentId": 937
  }, {
    "id": 935,
    "label": "inner.txt",
    "parentId": 936
  }, {
    "id": 938,
    "label": "tests_Sselect_Ufile_Sselected_Uinner-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 941,
    "label": "select_file",
    "parentId": 25
  }, {
    "id": 940,
    "label": "selected_inner",
    "parentId": 941
  }, {
    "id": 939,
    "label": "test.log",
    "parentId": 940
  }, {
    "id": 942,
    "label": "test.cache_status",
    "parentId": 940
  }, {
    "id": 943,
    "label": "selects_stardoc.jar",
    "parentId": 54
  }, {
    "id": 944,
    "label": "selects_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 945,
    "label": "selects_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 946,
    "label": "selects_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 947,
    "label": "selects_stardoc",
    "parentId": 54
  }, {
    "id": 948,
    "label": "selects_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 949,
    "label": "selects_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 951,
    "label": "selects_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 950,
    "label": "MANIFEST",
    "parentId": 951
  }, {
    "id": 952,
    "label": "selects.bzl",
    "parentId": 426
  }, {
    "id": 953,
    "label": "docs_Sselects_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 954,
    "label": "selects_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 955,
    "label": "selects_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 956,
    "label": "paths_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 957,
    "label": "paths_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 959,
    "label": "paths_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 958,
    "label": "MANIFEST",
    "parentId": 959
  }, {
    "id": 960,
    "label": "tests_Spaths_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 962,
    "label": "paths_tests_test_1",
    "parentId": 25
  }, {
    "id": 961,
    "label": "test.log",
    "parentId": 962
  }, {
    "id": 963,
    "label": "test.cache_status",
    "parentId": 962
  }, {
    "id": 964,
    "label": "structs_stardoc.jar",
    "parentId": 54
  }, {
    "id": 965,
    "label": "structs_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 966,
    "label": "structs_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 967,
    "label": "structs_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 968,
    "label": "structs_stardoc",
    "parentId": 54
  }, {
    "id": 969,
    "label": "structs_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 970,
    "label": "structs_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 972,
    "label": "structs_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 971,
    "label": "MANIFEST",
    "parentId": 972
  }, {
    "id": 973,
    "label": "structs.bzl",
    "parentId": 426
  }, {
    "id": 974,
    "label": "docs_Sstructs_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 975,
    "label": "structs_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 976,
    "label": "structs_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 977,
    "label": "a_with_exec_bit.txt",
    "parentId": 916
  }, {
    "id": 978,
    "label": "a-out-symlink.sh.runfiles_manifest",
    "parentId": 29
  }, {
    "id": 980,
    "label": "a-out-symlink.sh.runfiles",
    "parentId": 29
  }, {
    "id": 979,
    "label": "MANIFEST",
    "parentId": 980
  }, {
    "id": 981,
    "label": "tests_Scopy_Ufile_Sxout_Sa-out-symlink.sh-runfiles",
    "parentId": 18
  }, {
    "id": 982,
    "label": "new_sets_tests_test_7.sh",
    "parentId": 13
  }, {
    "id": 983,
    "label": "new_sets_tests_test_7.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 985,
    "label": "new_sets_tests_test_7.sh.runfiles",
    "parentId": 13
  }, {
    "id": 984,
    "label": "MANIFEST",
    "parentId": 985
  }, {
    "id": 986,
    "label": "tests_Snew_Usets_Utests_Utest_U7.sh-runfiles",
    "parentId": 18
  }, {
    "id": 988,
    "label": "new_sets_tests_test_7",
    "parentId": 25
  }, {
    "id": 987,
    "label": "test.log",
    "parentId": 988
  }, {
    "id": 989,
    "label": "test.cache_status",
    "parentId": 988
  }, {
    "id": 990,
    "label": "partial_stardoc.jar",
    "parentId": 45
  }, {
    "id": 991,
    "label": "partial_stardoc",
    "parentId": 45
  }, {
    "id": 992,
    "label": "docs_Spartial_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 993,
    "label": "partial.raw",
    "parentId": 53
  }, {
    "id": 994,
    "label": "common_settings_stardoc.jar",
    "parentId": 45
  }, {
    "id": 995,
    "label": "common_settings_stardoc",
    "parentId": 45
  }, {
    "id": 996,
    "label": "docs_Scommon_Usettings_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 997,
    "label": "common_settings.raw",
    "parentId": 53
  }, {
    "id": 998,
    "label": "and_config_setting_group_multiple_matches_fail_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1000,
    "label": "and_config_setting_group_multiple_matches_fail_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 999,
    "label": "MANIFEST",
    "parentId": 1000
  }, {
    "id": 1001,
    "label": "and_config_setting_group_multiple_matches_fail_test.sh",
    "parentId": 13
  }, {
    "id": 1002,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Umultiple_Umatches_Ufail_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1004,
    "label": "and_config_setting_group_multiple_matches_fail_test",
    "parentId": 25
  }, {
    "id": 1003,
    "label": "test.log",
    "parentId": 1004
  }, {
    "id": 1005,
    "label": "test.cache_status",
    "parentId": 1004
  }, {
    "id": 1006,
    "label": "versions_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1007,
    "label": "versions_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1009,
    "label": "versions_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1008,
    "label": "MANIFEST",
    "parentId": 1009
  }, {
    "id": 1010,
    "label": "tests_Sversions_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1012,
    "label": "versions_tests_test_0",
    "parentId": 25
  }, {
    "id": 1011,
    "label": "test.log",
    "parentId": 1012
  }, {
    "id": 1013,
    "label": "test.cache_status",
    "parentId": 1012
  }, {
    "id": 1014,
    "label": "shell_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1015,
    "label": "shell_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1017,
    "label": "shell_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1016,
    "label": "MANIFEST",
    "parentId": 1017
  }, {
    "id": 1018,
    "label": "tests_Sshell_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1020,
    "label": "shell_tests_test_1",
    "parentId": 25
  }, {
    "id": 1019,
    "label": "test.log",
    "parentId": 1020
  }, {
    "id": 1021,
    "label": "test.cache_status",
    "parentId": 1020
  }, {
    "id": 1022,
    "label": "types_tests_test_5.sh",
    "parentId": 13
  }, {
    "id": 1023,
    "label": "types_tests_test_5.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1025,
    "label": "types_tests_test_5.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1024,
    "label": "MANIFEST",
    "parentId": 1025
  }, {
    "id": 1026,
    "label": "tests_Stypes_Utests_Utest_U5.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1028,
    "label": "types_tests_test_5",
    "parentId": 25
  }, {
    "id": 1027,
    "label": "test.log",
    "parentId": 1028
  }, {
    "id": 1029,
    "label": "test.cache_status",
    "parentId": 1028
  }, {
    "id": 1030,
    "label": "docs_partial_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1031,
    "label": "docs_partial_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1033,
    "label": "docs_partial_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1032,
    "label": "MANIFEST",
    "parentId": 1033
  }, {
    "id": 1034,
    "label": "partial_doc.md",
    "parentId": 493
  }, {
    "id": 1035,
    "label": "docs_Sdocs_Upartial_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1037,
    "label": "docs_partial_doc-difftest",
    "parentId": 498
  }, {
    "id": 1036,
    "label": "test.log",
    "parentId": 1037
  }, {
    "id": 1038,
    "label": "test.cache_status",
    "parentId": 1037
  }, {
    "id": 1039,
    "label": "new_sets_tests_test_10.sh",
    "parentId": 13
  }, {
    "id": 1040,
    "label": "new_sets_tests_test_10.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1042,
    "label": "new_sets_tests_test_10.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1041,
    "label": "MANIFEST",
    "parentId": 1042
  }, {
    "id": 1043,
    "label": "tests_Snew_Usets_Utests_Utest_U10.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1045,
    "label": "new_sets_tests_test_10",
    "parentId": 25
  }, {
    "id": 1044,
    "label": "test.log",
    "parentId": 1045
  }, {
    "id": 1046,
    "label": "test.cache_status",
    "parentId": 1045
  }, {
    "id": 1048,
    "label": "run_binary",
    "parentId": 538
  }, {
    "id": 1047,
    "label": "printargs.cc",
    "parentId": 1048
  }, {
    "id": 1052,
    "label": "run_binary",
    "parentId": 13
  }, {
    "id": 1051,
    "label": "_objs",
    "parentId": 1052
  }, {
    "id": 1050,
    "label": "printargs",
    "parentId": 1051
  }, {
    "id": 1049,
    "label": "printargs.pic.o",
    "parentId": 1050
  }, {
    "id": 1053,
    "label": "printargs.pic.d",
    "parentId": 1050
  }, {
    "id": 1054,
    "label": "printargs-2.params",
    "parentId": 1052
  }, {
    "id": 1055,
    "label": "printargs",
    "parentId": 1052
  }, {
    "id": 1056,
    "label": "printargs.stripped",
    "parentId": 1052
  }, {
    "id": 1057,
    "label": "printargs.dwp",
    "parentId": 1052
  }, {
    "id": 1058,
    "label": "printargs.runfiles_manifest",
    "parentId": 1052
  }, {
    "id": 1060,
    "label": "printargs.runfiles",
    "parentId": 1052
  }, {
    "id": 1059,
    "label": "MANIFEST",
    "parentId": 1060
  }, {
    "id": 1061,
    "label": "tests_Srun_Ubinary_Sprintargs-runfiles",
    "parentId": 18
  }, {
    "id": 1062,
    "label": "assertdata_copy.exe",
    "parentId": 876
  }, {
    "id": 1063,
    "label": "data_test.exe",
    "parentId": 876
  }, {
    "id": 1064,
    "label": "data_test.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1066,
    "label": "data_test.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1065,
    "label": "MANIFEST",
    "parentId": 1066
  }, {
    "id": 1067,
    "label": "tests_Snative_Ubinary_Sdata_Utest.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1069,
    "label": "data_test",
    "parentId": 886
  }, {
    "id": 1068,
    "label": "test.log",
    "parentId": 1069
  }, {
    "id": 1070,
    "label": "test.cache_status",
    "parentId": 1069
  }, {
    "id": 1071,
    "label": "or_config_setting_group_last_cond_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1073,
    "label": "or_config_setting_group_last_cond_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1072,
    "label": "MANIFEST",
    "parentId": 1073
  }, {
    "id": 1074,
    "label": "or_config_setting_group_last_cond_matches_test.sh",
    "parentId": 13
  }, {
    "id": 1075,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Ulast_Ucond_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1077,
    "label": "or_config_setting_group_last_cond_matches_test",
    "parentId": 25
  }, {
    "id": 1076,
    "label": "test.log",
    "parentId": 1077
  }, {
    "id": 1078,
    "label": "test.cache_status",
    "parentId": 1077
  }, {
    "id": 1079,
    "label": "and_config_setting_group_last_match_fails_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1081,
    "label": "and_config_setting_group_last_match_fails_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1080,
    "label": "MANIFEST",
    "parentId": 1081
  }, {
    "id": 1082,
    "label": "and_config_setting_group_last_match_fails_test.sh",
    "parentId": 13
  }, {
    "id": 1083,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Ulast_Umatch_Ufails_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1085,
    "label": "and_config_setting_group_last_match_fails_test",
    "parentId": 25
  }, {
    "id": 1084,
    "label": "test.log",
    "parentId": 1085
  }, {
    "id": 1086,
    "label": "test.cache_status",
    "parentId": 1085
  }, {
    "id": 1087,
    "label": "structs_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1088,
    "label": "structs_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1090,
    "label": "structs_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1089,
    "label": "MANIFEST",
    "parentId": 1090
  }, {
    "id": 1091,
    "label": "tests_Sstructs_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1093,
    "label": "structs_tests_test_0",
    "parentId": 25
  }, {
    "id": 1092,
    "label": "test.log",
    "parentId": 1093
  }, {
    "id": 1094,
    "label": "test.cache_status",
    "parentId": 1093
  }, {
    "id": 1095,
    "label": "docs_copy_directory_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1096,
    "label": "docs_copy_directory_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1098,
    "label": "docs_copy_directory_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1097,
    "label": "MANIFEST",
    "parentId": 1098
  }, {
    "id": 1099,
    "label": "copy_directory_doc.md",
    "parentId": 493
  }, {
    "id": 1100,
    "label": "docs_Sdocs_Ucopy_Udirectory_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1102,
    "label": "docs_copy_directory_doc-difftest",
    "parentId": 498
  }, {
    "id": 1101,
    "label": "test.log",
    "parentId": 1102
  }, {
    "id": 1103,
    "label": "test.cache_status",
    "parentId": 1102
  }, {
    "id": 1104,
    "label": "paths_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1105,
    "label": "paths_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1107,
    "label": "paths_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1106,
    "label": "MANIFEST",
    "parentId": 1107
  }, {
    "id": 1108,
    "label": "tests_Spaths_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1110,
    "label": "paths_tests_test_0",
    "parentId": 25
  }, {
    "id": 1109,
    "label": "test.log",
    "parentId": 1110
  }, {
    "id": 1111,
    "label": "test.cache_status",
    "parentId": 1110
  }, {
    "id": 1112,
    "label": "or_config_setting_group_middle_cond_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1114,
    "label": "or_config_setting_group_middle_cond_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1113,
    "label": "MANIFEST",
    "parentId": 1114
  }, {
    "id": 1115,
    "label": "or_config_setting_group_middle_cond_matches_test.sh",
    "parentId": 13
  }, {
    "id": 1116,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Umiddle_Ucond_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1118,
    "label": "or_config_setting_group_middle_cond_matches_test",
    "parentId": 25
  }, {
    "id": 1117,
    "label": "test.log",
    "parentId": 1118
  }, {
    "id": 1119,
    "label": "test.cache_status",
    "parentId": 1118
  }, {
    "id": 1120,
    "label": "bazel-skylib.manifest",
    "parentId": 8
  }, {
    "id": 1121,
    "label": "MODULE.bazel",
    "parentId": 8
  }, {
    "id": 1122,
    "label": "BUILD"
  }, {
    "id": 1123,
    "label": "CODEOWNERS"
  }, {
    "id": 1124,
    "label": "CONTRIBUTORS"
  }, {
    "id": 1125,
    "label": "WORKSPACE.bzlmod"
  }, {
    "id": 1126,
    "label": "BUILD",
    "parentId": 426
  }, {
    "id": 1127,
    "label": "collections.bzl",
    "parentId": 426
  }, {
    "id": 1128,
    "label": "old_sets.bzl",
    "parentId": 426
  }, {
    "id": 1129,
    "label": "paths.bzl",
    "parentId": 426
  }, {
    "id": 1130,
    "label": "sets.bzl",
    "parentId": 426
  }, {
    "id": 1131,
    "label": "shell.bzl",
    "parentId": 426
  }, {
    "id": 1132,
    "label": "unittest.bzl",
    "parentId": 426
  }, {
    "id": 1133,
    "label": "BUILD",
    "parentId": 805
  }, {
    "id": 1134,
    "label": "analysis_test.bzl",
    "parentId": 805
  }, {
    "id": 1135,
    "label": "build_test.bzl",
    "parentId": 805
  }, {
    "id": 1136,
    "label": "copy_directory.bzl",
    "parentId": 805
  }, {
    "id": 1137,
    "label": "copy_file.bzl",
    "parentId": 805
  }, {
    "id": 1138,
    "label": "diff_test.bzl",
    "parentId": 805
  }, {
    "id": 1139,
    "label": "expand_template.bzl",
    "parentId": 805
  }, {
    "id": 1140,
    "label": "native_binary.bzl",
    "parentId": 805
  }, {
    "id": 1141,
    "label": "select_file.bzl",
    "parentId": 805
  }, {
    "id": 1142,
    "label": "write_file.bzl",
    "parentId": 805
  }, {
    "id": 1144,
    "label": "private",
    "parentId": 805
  }, {
    "id": 1143,
    "label": "BUILD",
    "parentId": 1144
  }, {
    "id": 1145,
    "label": "copy_common.bzl",
    "parentId": 1144
  }, {
    "id": 1146,
    "label": "copy_directory_private.bzl",
    "parentId": 1144
  }, {
    "id": 1147,
    "label": "copy_file_private.bzl",
    "parentId": 1144
  }, {
    "id": 1148,
    "label": "maprule_util.bzl",
    "parentId": 1144
  }, {
    "id": 1149,
    "label": "write_file_private.bzl",
    "parentId": 1144
  }, {
    "id": 1152,
    "label": "toolchains"
  }, {
    "id": 1151,
    "label": "unittest",
    "parentId": 1152
  }, {
    "id": 1150,
    "label": "BUILD",
    "parentId": 1151
  }, {
    "id": 1153,
    "label": "bzl_library.bzl"
  }, {
    "id": 1154,
    "label": "lib.bzl"
  }, {
    "id": 1155,
    "label": "skylark_library.bzl"
  }, {
    "id": 1156,
    "label": "version.bzl"
  }, {
    "id": 1157,
    "label": "workspace.bzl"
  }, {
    "id": 1158,
    "label": "bazel-skylib-1.4.2.tar.gz",
    "parentId": 8
  }, {
    "id": 1159,
    "label": "docs_bzl_library-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1160,
    "label": "docs_bzl_library-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1162,
    "label": "docs_bzl_library-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1161,
    "label": "MANIFEST",
    "parentId": 1162
  }, {
    "id": 1163,
    "label": "bzl_library.md",
    "parentId": 493
  }, {
    "id": 1164,
    "label": "docs_Sdocs_Ubzl_Ulibrary-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1166,
    "label": "docs_bzl_library-difftest",
    "parentId": 498
  }, {
    "id": 1165,
    "label": "test.log",
    "parentId": 1166
  }, {
    "id": 1167,
    "label": "test.cache_status",
    "parentId": 1166
  }, {
    "id": 1168,
    "label": "run_script.expected",
    "parentId": 1052
  }, {
    "id": 1169,
    "label": "and_config_setting_group_single_setting_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1171,
    "label": "and_config_setting_group_single_setting_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1170,
    "label": "MANIFEST",
    "parentId": 1171
  }, {
    "id": 1172,
    "label": "and_config_setting_group_single_setting_matches_test.sh",
    "parentId": 13
  }, {
    "id": 1173,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Usingle_Usetting_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1175,
    "label": "and_config_setting_group_single_setting_matches_test",
    "parentId": 25
  }, {
    "id": 1174,
    "label": "test.log",
    "parentId": 1175
  }, {
    "id": 1176,
    "label": "test.cache_status",
    "parentId": 1175
  }, {
    "id": 1177,
    "label": "loading_test_subpackages_exists_no.sh",
    "parentId": 13
  }, {
    "id": 1178,
    "label": "loading_test_subpackages_exists_no.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1180,
    "label": "loading_test_subpackages_exists_no.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1179,
    "label": "MANIFEST",
    "parentId": 1180
  }, {
    "id": 1181,
    "label": "tests_Sloading_Utest_Usubpackages_Uexists_Uno.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1183,
    "label": "subpackages_exists_no",
    "parentId": 25
  }, {
    "id": 1182,
    "label": "test.log",
    "parentId": 1183
  }, {
    "id": 1184,
    "label": "test.cache_status",
    "parentId": 1183
  }, {
    "id": 1185,
    "label": "assertarg_copy.exe",
    "parentId": 876
  }, {
    "id": 1186,
    "label": "args_test.exe",
    "parentId": 876
  }, {
    "id": 1187,
    "label": "args_test.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1189,
    "label": "args_test.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1188,
    "label": "MANIFEST",
    "parentId": 1189
  }, {
    "id": 1190,
    "label": "tests_Snative_Ubinary_Sargs_Utest.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1192,
    "label": "args_test",
    "parentId": 886
  }, {
    "id": 1191,
    "label": "test.log",
    "parentId": 1192
  }, {
    "id": 1193,
    "label": "test.cache_status",
    "parentId": 1192
  }, {
    "id": 1194,
    "label": "a-out.txt",
    "parentId": 592
  }, {
    "id": 1195,
    "label": "new_sets_tests_test_8.sh",
    "parentId": 13
  }, {
    "id": 1196,
    "label": "new_sets_tests_test_8.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1198,
    "label": "new_sets_tests_test_8.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1197,
    "label": "MANIFEST",
    "parentId": 1198
  }, {
    "id": 1199,
    "label": "tests_Snew_Usets_Utests_Utest_U8.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1201,
    "label": "new_sets_tests_test_8",
    "parentId": 25
  }, {
    "id": 1200,
    "label": "test.log",
    "parentId": 1201
  }, {
    "id": 1202,
    "label": "test.cache_status",
    "parentId": 1201
  }, {
    "id": 1203,
    "label": "write_file_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1204,
    "label": "write_file_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1205,
    "label": "write_file_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1206,
    "label": "write_file_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1207,
    "label": "write_file_stardoc",
    "parentId": 54
  }, {
    "id": 1208,
    "label": "write_file_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1209,
    "label": "write_file_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1211,
    "label": "write_file_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1210,
    "label": "MANIFEST",
    "parentId": 1211
  }, {
    "id": 1212,
    "label": "docs_Swrite_Ufile_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1213,
    "label": "write_file_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1214,
    "label": "write_file_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1215,
    "label": "new_sets_tests_test_4.sh",
    "parentId": 13
  }, {
    "id": 1216,
    "label": "new_sets_tests_test_4.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1218,
    "label": "new_sets_tests_test_4.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1217,
    "label": "MANIFEST",
    "parentId": 1218
  }, {
    "id": 1219,
    "label": "tests_Snew_Usets_Utests_Utest_U4.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1221,
    "label": "new_sets_tests_test_4",
    "parentId": 25
  }, {
    "id": 1220,
    "label": "test.log",
    "parentId": 1221
  }, {
    "id": 1222,
    "label": "test.cache_status",
    "parentId": 1221
  }, {
    "id": 1223,
    "label": "dicts_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1224,
    "label": "dicts_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1226,
    "label": "dicts_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1225,
    "label": "MANIFEST",
    "parentId": 1226
  }, {
    "id": 1227,
    "label": "tests_Sdicts_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1229,
    "label": "dicts_tests_test_1",
    "parentId": 25
  }, {
    "id": 1228,
    "label": "test.log",
    "parentId": 1229
  }, {
    "id": 1230,
    "label": "test.cache_status",
    "parentId": 1229
  }, {
    "id": 1231,
    "label": "run_script_test-test.sh",
    "parentId": 1052
  }, {
    "id": 1232,
    "label": "run_script_test-test.sh.runfiles_manifest",
    "parentId": 1052
  }, {
    "id": 1234,
    "label": "run_script_test-test.sh.runfiles",
    "parentId": 1052
  }, {
    "id": 1233,
    "label": "MANIFEST",
    "parentId": 1234
  }, {
    "id": 1235,
    "label": "run_script.out",
    "parentId": 1052
  }, {
    "id": 1236,
    "label": "tests_Srun_Ubinary_Srun_Uscript_Utest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1239,
    "label": "run_binary",
    "parentId": 25
  }, {
    "id": 1238,
    "label": "run_script_test",
    "parentId": 1239
  }, {
    "id": 1237,
    "label": "test.log",
    "parentId": 1238
  }, {
    "id": 1240,
    "label": "test.cache_status",
    "parentId": 1238
  }, {
    "id": 1241,
    "label": "partial_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1242,
    "label": "partial_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1244,
    "label": "partial_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1243,
    "label": "MANIFEST",
    "parentId": 1244
  }, {
    "id": 1245,
    "label": "tests_Spartial_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1247,
    "label": "partial_tests_test_1",
    "parentId": 25
  }, {
    "id": 1246,
    "label": "test.log",
    "parentId": 1247
  }, {
    "id": 1248,
    "label": "test.cache_status",
    "parentId": 1247
  }, {
    "id": 1249,
    "label": "inspect_aspect_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1251,
    "label": "inspect_aspect_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1250,
    "label": "MANIFEST",
    "parentId": 1251
  }, {
    "id": 1252,
    "label": "inspect_aspect_test.sh",
    "parentId": 13
  }, {
    "id": 1253,
    "label": "tests_Sinspect_Uaspect_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1255,
    "label": "inspect_aspect_test",
    "parentId": 25
  }, {
    "id": 1254,
    "label": "test.log",
    "parentId": 1255
  }, {
    "id": 1256,
    "label": "test.cache_status",
    "parentId": 1255
  }, {
    "id": 1257,
    "label": "versions_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1258,
    "label": "versions_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1260,
    "label": "versions_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1259,
    "label": "MANIFEST",
    "parentId": 1260
  }, {
    "id": 1261,
    "label": "tests_Sversions_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1263,
    "label": "versions_tests_test_1",
    "parentId": 25
  }, {
    "id": 1262,
    "label": "test.log",
    "parentId": 1263
  }, {
    "id": 1264,
    "label": "test.cache_status",
    "parentId": 1263
  }, {
    "id": 1265,
    "label": "types_tests_test_6.sh",
    "parentId": 13
  }, {
    "id": 1266,
    "label": "types_tests_test_6.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1268,
    "label": "types_tests_test_6.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1267,
    "label": "MANIFEST",
    "parentId": 1268
  }, {
    "id": 1269,
    "label": "tests_Stypes_Utests_Utest_U6.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1271,
    "label": "types_tests_test_6",
    "parentId": 25
  }, {
    "id": 1270,
    "label": "test.log",
    "parentId": 1271
  }, {
    "id": 1272,
    "label": "test.cache_status",
    "parentId": 1271
  }, {
    "id": 1273,
    "label": "same_src_src-test.sh",
    "parentId": 614
  }, {
    "id": 1274,
    "label": "same_src_src-test.sh.runfiles_manifest",
    "parentId": 614
  }, {
    "id": 1276,
    "label": "same_src_src-test.sh.runfiles",
    "parentId": 614
  }, {
    "id": 1275,
    "label": "MANIFEST",
    "parentId": 1276
  }, {
    "id": 1277,
    "label": "aa.txt",
    "parentId": 619
  }, {
    "id": 1278,
    "label": "tests_Sdiff_Utest_Ssame_Usrc_Usrc-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1280,
    "label": "same_src_src",
    "parentId": 624
  }, {
    "id": 1279,
    "label": "test.log",
    "parentId": 1280
  }, {
    "id": 1281,
    "label": "test.cache_status",
    "parentId": 1280
  }, {
    "id": 1282,
    "label": "diff_test_tests.sh",
    "parentId": 619
  }, {
    "id": 1283,
    "label": "diff_test_tests",
    "parentId": 614
  }, {
    "id": 1284,
    "label": "diff_test_tests.runfiles_manifest",
    "parentId": 614
  }, {
    "id": 1286,
    "label": "diff_test_tests.runfiles",
    "parentId": 614
  }, {
    "id": 1285,
    "label": "MANIFEST",
    "parentId": 1286
  }, {
    "id": 1287,
    "label": "tests_Sdiff_Utest_Sdiff_Utest_Utests-runfiles",
    "parentId": 18
  }, {
    "id": 1289,
    "label": "diff_test_tests",
    "parentId": 624
  }, {
    "id": 1288,
    "label": "test.log",
    "parentId": 1289
  }, {
    "id": 1290,
    "label": "test.cache_status",
    "parentId": 1289
  }, {
    "id": 1291,
    "label": "copy_directory_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1292,
    "label": "copy_directory_stardoc",
    "parentId": 45
  }, {
    "id": 1293,
    "label": "docs_Scopy_Udirectory_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1294,
    "label": "copy_directory.raw",
    "parentId": 53
  }, {
    "id": 1295,
    "label": "new_sets_tests_test_11.sh",
    "parentId": 13
  }, {
    "id": 1296,
    "label": "new_sets_tests_test_11.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1298,
    "label": "new_sets_tests_test_11.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1297,
    "label": "MANIFEST",
    "parentId": 1298
  }, {
    "id": 1299,
    "label": "tests_Snew_Usets_Utests_Utest_U11.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1301,
    "label": "new_sets_tests_test_11",
    "parentId": 25
  }, {
    "id": 1300,
    "label": "test.log",
    "parentId": 1301
  }, {
    "id": 1302,
    "label": "test.cache_status",
    "parentId": 1301
  }, {
    "id": 1303,
    "label": "assertarg",
    "parentId": 876
  }, {
    "id": 1304,
    "label": "assertarg_copy.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1306,
    "label": "assertarg_copy.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1305,
    "label": "MANIFEST",
    "parentId": 1306
  }, {
    "id": 1307,
    "label": "tests_Snative_Ubinary_Sassertarg_Ucopy.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1308,
    "label": "MODULE.bazel"
  }, {
    "id": 1309,
    "label": "gen-out-symlink.sh",
    "parentId": 29
  }, {
    "id": 1310,
    "label": "gen-out-symlink.sh.runfiles_manifest",
    "parentId": 29
  }, {
    "id": 1312,
    "label": "gen-out-symlink.sh.runfiles",
    "parentId": 29
  }, {
    "id": 1311,
    "label": "MANIFEST",
    "parentId": 1312
  }, {
    "id": 1313,
    "label": "tests_Scopy_Ufile_Sxout_Sgen-out-symlink.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1314,
    "label": "bin_src",
    "parentId": 30
  }, {
    "id": 1315,
    "label": "bin_src.runfiles_manifest",
    "parentId": 30
  }, {
    "id": 1317,
    "label": "bin_src.runfiles",
    "parentId": 30
  }, {
    "id": 1316,
    "label": "MANIFEST",
    "parentId": 1317
  }, {
    "id": 1318,
    "label": "tests_Scopy_Ufile_Sbin_Usrc-runfiles",
    "parentId": 18
  }, {
    "id": 1319,
    "label": "empty.sh",
    "parentId": 111
  }, {
    "id": 1320,
    "label": "empty.sh.runfiles_manifest",
    "parentId": 111
  }, {
    "id": 1322,
    "label": "empty.sh.runfiles",
    "parentId": 111
  }, {
    "id": 1321,
    "label": "MANIFEST",
    "parentId": 1322
  }, {
    "id": 1323,
    "label": "tests_Swrite_Ufile_Sout_Sempty.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1324,
    "label": "docs_diff_test_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1325,
    "label": "docs_diff_test_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1327,
    "label": "docs_diff_test_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1326,
    "label": "MANIFEST",
    "parentId": 1327
  }, {
    "id": 1328,
    "label": "diff_test_doc.md",
    "parentId": 493
  }, {
    "id": 1329,
    "label": "docs_Sdocs_Udiff_Utest_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1331,
    "label": "docs_diff_test_doc-difftest",
    "parentId": 498
  }, {
    "id": 1330,
    "label": "test.log",
    "parentId": 1331
  }, {
    "id": 1332,
    "label": "test.cache_status",
    "parentId": 1331
  }, {
    "id": 1333,
    "label": "run_bin.expected",
    "parentId": 1052
  }, {
    "id": 1334,
    "label": "paths_tests_test_3.sh",
    "parentId": 13
  }, {
    "id": 1335,
    "label": "paths_tests_test_3.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1337,
    "label": "paths_tests_test_3.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1336,
    "label": "MANIFEST",
    "parentId": 1337
  }, {
    "id": 1338,
    "label": "tests_Spaths_Utests_Utest_U3.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1340,
    "label": "paths_tests_test_3",
    "parentId": 25
  }, {
    "id": 1339,
    "label": "test.log",
    "parentId": 1340
  }, {
    "id": 1341,
    "label": "test.cache_status",
    "parentId": 1340
  }, {
    "id": 1342,
    "label": "BUILD",
    "parentId": 1048
  }, {
    "id": 1345,
    "label": "tests",
    "parentId": 46
  }, {
    "id": 1344,
    "label": "run_binary",
    "parentId": 1345
  }, {
    "id": 1343,
    "label": "printargs",
    "parentId": 1344
  }, {
    "id": 1346,
    "label": "tests_Srun_Ubinary_Sprintargs-runfiles",
    "parentId": 50
  }, {
    "id": 1347,
    "label": "run_bin.out",
    "parentId": 1052
  }, {
    "id": 1348,
    "label": "select_file_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1349,
    "label": "select_file_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1350,
    "label": "select_file_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1351,
    "label": "select_file_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1352,
    "label": "select_file_stardoc",
    "parentId": 54
  }, {
    "id": 1353,
    "label": "select_file_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1354,
    "label": "select_file_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1356,
    "label": "select_file_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1355,
    "label": "MANIFEST",
    "parentId": 1356
  }, {
    "id": 1357,
    "label": "docs_Sselect_Ufile_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1358,
    "label": "select_file_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1359,
    "label": "select_file_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1360,
    "label": "write_file_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1361,
    "label": "write_file_stardoc",
    "parentId": 45
  }, {
    "id": 1362,
    "label": "docs_Swrite_Ufile_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1363,
    "label": "write_file.raw",
    "parentId": 53
  }, {
    "id": 1364,
    "label": "gen-out.txt",
    "parentId": 592
  }, {
    "id": 1365,
    "label": "run_bin_test-test.sh",
    "parentId": 1052
  }, {
    "id": 1366,
    "label": "run_bin_test-test.sh.runfiles_manifest",
    "parentId": 1052
  }, {
    "id": 1368,
    "label": "run_bin_test-test.sh.runfiles",
    "parentId": 1052
  }, {
    "id": 1367,
    "label": "MANIFEST",
    "parentId": 1368
  }, {
    "id": 1369,
    "label": "tests_Srun_Ubinary_Srun_Ubin_Utest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1371,
    "label": "run_bin_test",
    "parentId": 1239
  }, {
    "id": 1370,
    "label": "test.log",
    "parentId": 1371
  }, {
    "id": 1372,
    "label": "test.cache_status",
    "parentId": 1371
  }, {
    "id": 1373,
    "label": "new_sets_tests_test_5.sh",
    "parentId": 13
  }, {
    "id": 1374,
    "label": "new_sets_tests_test_5.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1376,
    "label": "new_sets_tests_test_5.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1375,
    "label": "MANIFEST",
    "parentId": 1376
  }, {
    "id": 1377,
    "label": "tests_Snew_Usets_Utests_Utest_U5.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1379,
    "label": "new_sets_tests_test_5",
    "parentId": 25
  }, {
    "id": 1378,
    "label": "test.log",
    "parentId": 1379
  }, {
    "id": 1380,
    "label": "test.cache_status",
    "parentId": 1379
  }, {
    "id": 1381,
    "label": "docs_selects_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1382,
    "label": "docs_selects_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1384,
    "label": "docs_selects_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1383,
    "label": "MANIFEST",
    "parentId": 1384
  }, {
    "id": 1385,
    "label": "selects_doc.md",
    "parentId": 493
  }, {
    "id": 1386,
    "label": "docs_Sdocs_Uselects_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1388,
    "label": "docs_selects_doc-difftest",
    "parentId": 498
  }, {
    "id": 1387,
    "label": "test.log",
    "parentId": 1388
  }, {
    "id": 1389,
    "label": "test.cache_status",
    "parentId": 1388
  }, {
    "id": 1390,
    "label": "paths_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1391,
    "label": "paths_stardoc",
    "parentId": 45
  }, {
    "id": 1392,
    "label": "docs_Spaths_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1393,
    "label": "paths.raw",
    "parentId": 53
  }, {
    "id": 1394,
    "label": "docs_select_file_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1395,
    "label": "docs_select_file_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1397,
    "label": "docs_select_file_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1396,
    "label": "MANIFEST",
    "parentId": 1397
  }, {
    "id": 1398,
    "label": "select_file_doc.md",
    "parentId": 493
  }, {
    "id": 1399,
    "label": "docs_Sdocs_Uselect_Ufile_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1401,
    "label": "docs_select_file_doc-difftest",
    "parentId": 498
  }, {
    "id": 1400,
    "label": "test.log",
    "parentId": 1401
  }, {
    "id": 1402,
    "label": "test.cache_status",
    "parentId": 1401
  }, {
    "id": 1403,
    "label": "partial_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1404,
    "label": "partial_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1406,
    "label": "partial_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1405,
    "label": "MANIFEST",
    "parentId": 1406
  }, {
    "id": 1407,
    "label": "tests_Spartial_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1409,
    "label": "partial_tests_test_0",
    "parentId": 25
  }, {
    "id": 1408,
    "label": "test.log",
    "parentId": 1409
  }, {
    "id": 1410,
    "label": "test.cache_status",
    "parentId": 1409
  }, {
    "id": 1411,
    "label": "copy_directory_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1412,
    "label": "copy_directory_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1413,
    "label": "copy_directory_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1414,
    "label": "copy_directory_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1415,
    "label": "copy_directory_stardoc",
    "parentId": 54
  }, {
    "id": 1416,
    "label": "copy_directory_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1417,
    "label": "copy_directory_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1419,
    "label": "copy_directory_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1418,
    "label": "MANIFEST",
    "parentId": 1419
  }, {
    "id": 1420,
    "label": "docs_Scopy_Udirectory_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1421,
    "label": "copy_directory_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1422,
    "label": "copy_directory_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1423,
    "label": "dicts_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1424,
    "label": "dicts_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1426,
    "label": "dicts_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1425,
    "label": "MANIFEST",
    "parentId": 1426
  }, {
    "id": 1427,
    "label": "tests_Sdicts_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1429,
    "label": "dicts_tests_test_0",
    "parentId": 25
  }, {
    "id": 1428,
    "label": "test.log",
    "parentId": 1429
  }, {
    "id": 1430,
    "label": "test.cache_status",
    "parentId": 1429
  }, {
    "id": 1431,
    "label": "test.tpl.yaml",
    "parentId": 681
  }, {
    "id": 1433,
    "label": "foo",
    "parentId": 676
  }, {
    "id": 1432,
    "label": "test.yaml",
    "parentId": 1433
  }, {
    "id": 1434,
    "label": "docs_collections_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1435,
    "label": "docs_collections_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1437,
    "label": "docs_collections_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1436,
    "label": "MANIFEST",
    "parentId": 1437
  }, {
    "id": 1438,
    "label": "collections_doc.md",
    "parentId": 493
  }, {
    "id": 1439,
    "label": "docs_Sdocs_Ucollections_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1441,
    "label": "docs_collections_doc-difftest",
    "parentId": 498
  }, {
    "id": 1440,
    "label": "test.log",
    "parentId": 1441
  }, {
    "id": 1442,
    "label": "test.cache_status",
    "parentId": 1441
  }, {
    "id": 1443,
    "label": "versions_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 1444,
    "label": "versions_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1446,
    "label": "versions_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1445,
    "label": "MANIFEST",
    "parentId": 1446
  }, {
    "id": 1447,
    "label": "tests_Sversions_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1449,
    "label": "versions_tests_test_2",
    "parentId": 25
  }, {
    "id": 1448,
    "label": "test.log",
    "parentId": 1449
  }, {
    "id": 1450,
    "label": "test.cache_status",
    "parentId": 1449
  }, {
    "id": 1451,
    "label": "nonempty.sh",
    "parentId": 111
  }, {
    "id": 1452,
    "label": "bin_nonempty",
    "parentId": 112
  }, {
    "id": 1453,
    "label": "bin_nonempty.runfiles_manifest",
    "parentId": 112
  }, {
    "id": 1455,
    "label": "bin_nonempty.runfiles",
    "parentId": 112
  }, {
    "id": 1454,
    "label": "MANIFEST",
    "parentId": 1455
  }, {
    "id": 1456,
    "label": "tests_Swrite_Ufile_Sbin_Unonempty-runfiles",
    "parentId": 18
  }, {
    "id": 1457,
    "label": "types_tests_test_7.sh",
    "parentId": 13
  }, {
    "id": 1458,
    "label": "types_tests_test_7.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1460,
    "label": "types_tests_test_7.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1459,
    "label": "MANIFEST",
    "parentId": 1460
  }, {
    "id": 1461,
    "label": "tests_Stypes_Utests_Utest_U7.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1463,
    "label": "types_tests_test_7",
    "parentId": 25
  }, {
    "id": 1462,
    "label": "test.log",
    "parentId": 1463
  }, {
    "id": 1464,
    "label": "test.cache_status",
    "parentId": 1463
  }, {
    "id": 1465,
    "label": "new_sets_tests_test_12.sh",
    "parentId": 13
  }, {
    "id": 1466,
    "label": "new_sets_tests_test_12.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1468,
    "label": "new_sets_tests_test_12.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1467,
    "label": "MANIFEST",
    "parentId": 1468
  }, {
    "id": 1469,
    "label": "tests_Snew_Usets_Utests_Utest_U12.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1471,
    "label": "new_sets_tests_test_12",
    "parentId": 25
  }, {
    "id": 1470,
    "label": "test.log",
    "parentId": 1471
  }, {
    "id": 1472,
    "label": "test.cache_status",
    "parentId": 1471
  }, {
    "id": 1473,
    "label": "structs_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1474,
    "label": "structs_stardoc",
    "parentId": 45
  }, {
    "id": 1475,
    "label": "docs_Sstructs_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1476,
    "label": "structs.raw",
    "parentId": 53
  }, {
    "id": 1477,
    "label": "types_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1478,
    "label": "types_stardoc",
    "parentId": 45
  }, {
    "id": 1479,
    "label": "docs_Stypes_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1480,
    "label": "types.raw",
    "parentId": 53
  }, {
    "id": 1481,
    "label": "or_config_setting_group_first_cond_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1483,
    "label": "or_config_setting_group_first_cond_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1482,
    "label": "MANIFEST",
    "parentId": 1483
  }, {
    "id": 1484,
    "label": "or_config_setting_group_first_cond_matches_test.sh",
    "parentId": 13
  }, {
    "id": 1485,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Ufirst_Ucond_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1487,
    "label": "or_config_setting_group_first_cond_matches_test",
    "parentId": 25
  }, {
    "id": 1486,
    "label": "test.log",
    "parentId": 1487
  }, {
    "id": 1488,
    "label": "test.cache_status",
    "parentId": 1487
  }, {
    "id": 1489,
    "label": "version.h.in",
    "parentId": 681
  }, {
    "id": 1490,
    "label": "dir_with_symlink",
    "parentId": 827
  }, {
    "id": 1491,
    "label": "dir_with_symlink_copy",
    "parentId": 611
  }, {
    "id": 1492,
    "label": "assertarg.cc",
    "parentId": 882
  }, {
    "id": 1495,
    "label": "_objs",
    "parentId": 876
  }, {
    "id": 1494,
    "label": "assertarg",
    "parentId": 1495
  }, {
    "id": 1493,
    "label": "assertarg.pic.o",
    "parentId": 1494
  }, {
    "id": 1496,
    "label": "assertarg.pic.d",
    "parentId": 1494
  }, {
    "id": 1497,
    "label": "assertarg-2.params",
    "parentId": 876
  }, {
    "id": 1498,
    "label": "assertarg.stripped",
    "parentId": 876
  }, {
    "id": 1499,
    "label": "assertarg.dwp",
    "parentId": 876
  }, {
    "id": 1500,
    "label": "assertarg.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1502,
    "label": "assertarg.runfiles",
    "parentId": 876
  }, {
    "id": 1501,
    "label": "MANIFEST",
    "parentId": 1502
  }, {
    "id": 1503,
    "label": "tests_Snative_Ubinary_Sassertarg-runfiles",
    "parentId": 18
  }, {
    "id": 1504,
    "label": "loading_test_subpackages_all_not_fully_qualified.sh",
    "parentId": 13
  }, {
    "id": 1505,
    "label": "loading_test_subpackages_all_not_fully_qualified.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1507,
    "label": "loading_test_subpackages_all_not_fully_qualified.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1506,
    "label": "MANIFEST",
    "parentId": 1507
  }, {
    "id": 1508,
    "label": "tests_Sloading_Utest_Usubpackages_Uall_Unot_Ufully_Uqualified.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1510,
    "label": "subpackages_all_not_fully_qualified",
    "parentId": 25
  }, {
    "id": 1509,
    "label": "test.log",
    "parentId": 1510
  }, {
    "id": 1511,
    "label": "test.cache_status",
    "parentId": 1510
  }, {
    "id": 1512,
    "label": "run_binary_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1513,
    "label": "run_binary_stardoc",
    "parentId": 45
  }, {
    "id": 1514,
    "label": "docs_Srun_Ubinary_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1515,
    "label": "run_binary.raw",
    "parentId": 53
  }, {
    "id": 1516,
    "label": "and_config_setting_group_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1518,
    "label": "and_config_setting_group_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1517,
    "label": "MANIFEST",
    "parentId": 1518
  }, {
    "id": 1519,
    "label": "and_config_setting_group_matches_test.sh",
    "parentId": 13
  }, {
    "id": 1520,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1522,
    "label": "and_config_setting_group_matches_test",
    "parentId": 25
  }, {
    "id": 1521,
    "label": "test.log",
    "parentId": 1522
  }, {
    "id": 1523,
    "label": "test.cache_status",
    "parentId": 1522
  }, {
    "id": 1524,
    "label": "loading_test_subpackages_exists_yes.sh",
    "parentId": 13
  }, {
    "id": 1525,
    "label": "loading_test_subpackages_exists_yes.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1527,
    "label": "loading_test_subpackages_exists_yes.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1526,
    "label": "MANIFEST",
    "parentId": 1527
  }, {
    "id": 1528,
    "label": "tests_Sloading_Utest_Usubpackages_Uexists_Uyes.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1530,
    "label": "subpackages_exists_yes",
    "parentId": 25
  }, {
    "id": 1529,
    "label": "test.log",
    "parentId": 1530
  }, {
    "id": 1531,
    "label": "test.cache_status",
    "parentId": 1530
  }, {
    "id": 1532,
    "label": "assertdata",
    "parentId": 876
  }, {
    "id": 1533,
    "label": "assertdata_copy.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1535,
    "label": "assertdata_copy.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1534,
    "label": "MANIFEST",
    "parentId": 1535
  }, {
    "id": 1536,
    "label": "tests_Snative_Ubinary_Sassertdata_Ucopy.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1537,
    "label": "collections_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 1538,
    "label": "collections_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1540,
    "label": "collections_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1539,
    "label": "MANIFEST",
    "parentId": 1540
  }, {
    "id": 1541,
    "label": "tests_Scollections_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1543,
    "label": "collections_tests_test_2",
    "parentId": 25
  }, {
    "id": 1542,
    "label": "test.log",
    "parentId": 1543
  }, {
    "id": 1544,
    "label": "test.cache_status",
    "parentId": 1543
  }, {
    "id": 1545,
    "label": "inspect_output_dirs_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1547,
    "label": "inspect_output_dirs_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1546,
    "label": "MANIFEST",
    "parentId": 1547
  }, {
    "id": 1548,
    "label": "inspect_output_dirs_test.sh",
    "parentId": 13
  }, {
    "id": 1549,
    "label": "tests_Sinspect_Uoutput_Udirs_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1551,
    "label": "inspect_output_dirs_test",
    "parentId": 25
  }, {
    "id": 1550,
    "label": "test.log",
    "parentId": 1551
  }, {
    "id": 1552,
    "label": "test.cache_status",
    "parentId": 1551
  }, {
    "id": 1553,
    "label": "paths_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 1554,
    "label": "paths_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1556,
    "label": "paths_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1555,
    "label": "MANIFEST",
    "parentId": 1556
  }, {
    "id": 1557,
    "label": "tests_Spaths_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1559,
    "label": "paths_tests_test_2",
    "parentId": 25
  }, {
    "id": 1558,
    "label": "test.log",
    "parentId": 1559
  }, {
    "id": 1560,
    "label": "test.cache_status",
    "parentId": 1559
  }, {
    "id": 1561,
    "label": "build_test_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1562,
    "label": "build_test_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1563,
    "label": "build_test_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1564,
    "label": "build_test_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1565,
    "label": "build_test_stardoc",
    "parentId": 54
  }, {
    "id": 1566,
    "label": "build_test_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1567,
    "label": "build_test_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1569,
    "label": "build_test_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1568,
    "label": "MANIFEST",
    "parentId": 1569
  }, {
    "id": 1570,
    "label": "docs_Sbuild_Utest_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1571,
    "label": "build_test_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1572,
    "label": "build_test_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1573,
    "label": "a-out-symlink.txt",
    "parentId": 592
  }, {
    "id": 1574,
    "label": "docs_paths_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1575,
    "label": "docs_paths_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1577,
    "label": "docs_paths_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1576,
    "label": "MANIFEST",
    "parentId": 1577
  }, {
    "id": 1578,
    "label": "paths_doc.md",
    "parentId": 493
  }, {
    "id": 1579,
    "label": "docs_Sdocs_Upaths_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1581,
    "label": "docs_paths_doc-difftest",
    "parentId": 498
  }, {
    "id": 1580,
    "label": "test.log",
    "parentId": 1581
  }, {
    "id": 1582,
    "label": "test.cache_status",
    "parentId": 1581
  }, {
    "id": 1583,
    "label": "analysis_test_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1584,
    "label": "analysis_test_stardoc",
    "parentId": 45
  }, {
    "id": 1585,
    "label": "docs_Sanalysis_Utest_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1586,
    "label": "analysis_test.raw",
    "parentId": 53
  }, {
    "id": 1587,
    "label": "bin_empty",
    "parentId": 112
  }, {
    "id": 1588,
    "label": "bin_empty.runfiles_manifest",
    "parentId": 112
  }, {
    "id": 1590,
    "label": "bin_empty.runfiles",
    "parentId": 112
  }, {
    "id": 1589,
    "label": "MANIFEST",
    "parentId": 1590
  }, {
    "id": 1591,
    "label": "tests_Swrite_Ufile_Sbin_Uempty-runfiles",
    "parentId": 18
  }, {
    "id": 1592,
    "label": "new_sets_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 1593,
    "label": "new_sets_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1595,
    "label": "new_sets_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1594,
    "label": "MANIFEST",
    "parentId": 1595
  }, {
    "id": 1596,
    "label": "tests_Snew_Usets_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1598,
    "label": "new_sets_tests_test_2",
    "parentId": 25
  }, {
    "id": 1597,
    "label": "test.log",
    "parentId": 1598
  }, {
    "id": 1599,
    "label": "test.cache_status",
    "parentId": 1598
  }, {
    "id": 1600,
    "label": "aa-gen.txt",
    "parentId": 614
  }, {
    "id": 1601,
    "label": "types_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 1602,
    "label": "types_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1604,
    "label": "types_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1603,
    "label": "MANIFEST",
    "parentId": 1604
  }, {
    "id": 1605,
    "label": "tests_Stypes_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1607,
    "label": "types_tests_test_0",
    "parentId": 25
  }, {
    "id": 1606,
    "label": "test.log",
    "parentId": 1607
  }, {
    "id": 1608,
    "label": "test.cache_status",
    "parentId": 1607
  }, {
    "id": 1609,
    "label": "expand_template_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1610,
    "label": "expand_template_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1611,
    "label": "expand_template_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1612,
    "label": "expand_template_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1613,
    "label": "expand_template_stardoc",
    "parentId": 54
  }, {
    "id": 1614,
    "label": "expand_template_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1615,
    "label": "expand_template_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1617,
    "label": "expand_template_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1616,
    "label": "MANIFEST",
    "parentId": 1617
  }, {
    "id": 1618,
    "label": "docs_Sexpand_Utemplate_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1619,
    "label": "expand_template_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1620,
    "label": "expand_template_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1621,
    "label": "collections_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1622,
    "label": "collections_stardoc",
    "parentId": 45
  }, {
    "id": 1623,
    "label": "docs_Scollections_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1624,
    "label": "collections.raw",
    "parentId": 53
  }, {
    "id": 1627,
    "label": "write_file",
    "parentId": 1345
  }, {
    "id": 1626,
    "label": "out",
    "parentId": 1627
  }, {
    "id": 1625,
    "label": "empty.sh",
    "parentId": 1626
  }, {
    "id": 1628,
    "label": "bin_empty",
    "parentId": 1627
  }, {
    "id": 1629,
    "label": "tests_Swrite_Ufile_Sbin_Uempty-runfiles",
    "parentId": 50
  }, {
    "id": 1630,
    "label": "nonempty.sh",
    "parentId": 1626
  }, {
    "id": 1631,
    "label": "bin_nonempty",
    "parentId": 1627
  }, {
    "id": 1632,
    "label": "tests_Swrite_Ufile_Sbin_Unonempty-runfiles",
    "parentId": 50
  }, {
    "id": 1633,
    "label": "change_setting_with_failure_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1635,
    "label": "change_setting_with_failure_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1634,
    "label": "MANIFEST",
    "parentId": 1635
  }, {
    "id": 1636,
    "label": "change_setting_with_failure_test.sh",
    "parentId": 13
  }, {
    "id": 1637,
    "label": "tests_Schange_Usetting_Uwith_Ufailure_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1639,
    "label": "change_setting_with_failure_test",
    "parentId": 25
  }, {
    "id": 1638,
    "label": "test.log",
    "parentId": 1639
  }, {
    "id": 1640,
    "label": "test.cache_status",
    "parentId": 1639
  }, {
    "id": 1641,
    "label": "types_tests_test_8.sh",
    "parentId": 13
  }, {
    "id": 1642,
    "label": "types_tests_test_8.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1644,
    "label": "types_tests_test_8.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1643,
    "label": "MANIFEST",
    "parentId": 1644
  }, {
    "id": 1645,
    "label": "tests_Stypes_Utests_Utest_U8.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1647,
    "label": "types_tests_test_8",
    "parentId": 25
  }, {
    "id": 1646,
    "label": "test.log",
    "parentId": 1647
  }, {
    "id": 1648,
    "label": "test.cache_status",
    "parentId": 1647
  }, {
    "id": 1649,
    "label": "docs_dicts_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1650,
    "label": "docs_dicts_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1652,
    "label": "docs_dicts_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1651,
    "label": "MANIFEST",
    "parentId": 1652
  }, {
    "id": 1653,
    "label": "dicts_doc.md",
    "parentId": 493
  }, {
    "id": 1654,
    "label": "docs_Sdocs_Udicts_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1656,
    "label": "docs_dicts_doc-difftest",
    "parentId": 498
  }, {
    "id": 1655,
    "label": "test.log",
    "parentId": 1656
  }, {
    "id": 1657,
    "label": "test.cache_status",
    "parentId": 1656
  }, {
    "id": 1658,
    "label": "native_binary_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1659,
    "label": "native_binary_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1660,
    "label": "native_binary_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1661,
    "label": "native_binary_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1662,
    "label": "native_binary_stardoc",
    "parentId": 54
  }, {
    "id": 1663,
    "label": "native_binary_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1664,
    "label": "native_binary_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1666,
    "label": "native_binary_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1665,
    "label": "MANIFEST",
    "parentId": 1666
  }, {
    "id": 1667,
    "label": "docs_Snative_Ubinary_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1668,
    "label": "native_binary_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1669,
    "label": "native_binary_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1670,
    "label": "new_sets_tests_test_13.sh",
    "parentId": 13
  }, {
    "id": 1671,
    "label": "new_sets_tests_test_13.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1673,
    "label": "new_sets_tests_test_13.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1672,
    "label": "MANIFEST",
    "parentId": 1673
  }, {
    "id": 1674,
    "label": "tests_Snew_Usets_Utests_Utest_U13.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1676,
    "label": "new_sets_tests_test_13",
    "parentId": 25
  }, {
    "id": 1675,
    "label": "test.log",
    "parentId": 1676
  }, {
    "id": 1677,
    "label": "test.cache_status",
    "parentId": 1676
  }, {
    "id": 1678,
    "label": "paths_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1679,
    "label": "paths_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1680,
    "label": "paths_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1681,
    "label": "paths_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1682,
    "label": "paths_stardoc",
    "parentId": 54
  }, {
    "id": 1683,
    "label": "paths_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1684,
    "label": "paths_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1686,
    "label": "paths_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1685,
    "label": "MANIFEST",
    "parentId": 1686
  }, {
    "id": 1687,
    "label": "docs_Spaths_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1688,
    "label": "paths_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1689,
    "label": "paths_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1690,
    "label": "@bazel_Utools_S_Stools_Scpp_Srunfiles_Crunfiles-cc_library-compile",
    "parentId": 18
  }, {
    "id": 1691,
    "label": "_S_Stests_Snative_Ubinary_Cassertdata-BazelCppSemantics_build_arch_k8-fastbuild",
    "parentId": 18
  }, {
    "id": 1692,
    "label": "assertdata.cc",
    "parentId": 882
  }, {
    "id": 1694,
    "label": "assertdata",
    "parentId": 1495
  }, {
    "id": 1693,
    "label": "assertdata.pic.o",
    "parentId": 1694
  }, {
    "id": 1695,
    "label": "assertdata.pic.d",
    "parentId": 1694
  }, {
    "id": 1696,
    "label": "assertdata-2.params",
    "parentId": 876
  }, {
    "id": 1701,
    "label": "cpp",
    "parentId": 283
  }, {
    "id": 1700,
    "label": "runfiles",
    "parentId": 1701
  }, {
    "id": 1699,
    "label": "_objs",
    "parentId": 1700
  }, {
    "id": 1698,
    "label": "runfiles",
    "parentId": 1699
  }, {
    "id": 1697,
    "label": "runfiles.pic.o",
    "parentId": 1698
  }, {
    "id": 1702,
    "label": "assertdata.stripped",
    "parentId": 876
  }, {
    "id": 1703,
    "label": "assertdata.dwp",
    "parentId": 876
  }, {
    "id": 1704,
    "label": "assertdata.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1706,
    "label": "assertdata.runfiles",
    "parentId": 876
  }, {
    "id": 1705,
    "label": "MANIFEST",
    "parentId": 1706
  }, {
    "id": 1707,
    "label": "tests_Snative_Ubinary_Sassertdata-runfiles",
    "parentId": 18
  }, {
    "id": 1708,
    "label": "nonempty.sh.runfiles_manifest",
    "parentId": 111
  }, {
    "id": 1710,
    "label": "nonempty.sh.runfiles",
    "parentId": 111
  }, {
    "id": 1709,
    "label": "MANIFEST",
    "parentId": 1710
  }, {
    "id": 1711,
    "label": "tests_Swrite_Ufile_Sout_Snonempty.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1712,
    "label": "script.bat",
    "parentId": 1052
  }, {
    "id": 1713,
    "label": "script.bat.runfiles_manifest",
    "parentId": 1052
  }, {
    "id": 1715,
    "label": "script.bat.runfiles",
    "parentId": 1052
  }, {
    "id": 1714,
    "label": "MANIFEST",
    "parentId": 1715
  }, {
    "id": 1716,
    "label": "tests_Srun_Ubinary_Sscript.bat-runfiles",
    "parentId": 18
  }, {
    "id": 1717,
    "label": "docs_build_test_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1718,
    "label": "docs_build_test_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1720,
    "label": "docs_build_test_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1719,
    "label": "MANIFEST",
    "parentId": 1720
  }, {
    "id": 1721,
    "label": "build_test_doc.md",
    "parentId": 493
  }, {
    "id": 1722,
    "label": "docs_Sdocs_Ubuild_Utest_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1724,
    "label": "docs_build_test_doc-difftest",
    "parentId": 498
  }, {
    "id": 1723,
    "label": "test.log",
    "parentId": 1724
  }, {
    "id": 1725,
    "label": "test.cache_status",
    "parentId": 1724
  }, {
    "id": 1726,
    "label": "docs_subpackages_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1727,
    "label": "docs_subpackages_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1729,
    "label": "docs_subpackages_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1728,
    "label": "MANIFEST",
    "parentId": 1729
  }, {
    "id": 1730,
    "label": "subpackages_doc.md",
    "parentId": 493
  }, {
    "id": 1731,
    "label": "docs_Sdocs_Usubpackages_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1733,
    "label": "docs_subpackages_doc-difftest",
    "parentId": 498
  }, {
    "id": 1732,
    "label": "test.log",
    "parentId": 1733
  }, {
    "id": 1734,
    "label": "test.cache_status",
    "parentId": 1733
  }, {
    "id": 1735,
    "label": "unittest_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1736,
    "label": "unittest_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1737,
    "label": "unittest_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1738,
    "label": "unittest_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1739,
    "label": "unittest_stardoc",
    "parentId": 54
  }, {
    "id": 1740,
    "label": "unittest_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1741,
    "label": "unittest_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1743,
    "label": "unittest_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1742,
    "label": "MANIFEST",
    "parentId": 1743
  }, {
    "id": 1744,
    "label": "docs_Sunittest_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1745,
    "label": "unittest_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1746,
    "label": "unittest_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1749,
    "label": "copy_file",
    "parentId": 1345
  }, {
    "id": 1748,
    "label": "xout",
    "parentId": 1749
  }, {
    "id": 1747,
    "label": "gen-out.sh",
    "parentId": 1748
  }, {
    "id": 1750,
    "label": "bin_gen",
    "parentId": 1749
  }, {
    "id": 1751,
    "label": "tests_Scopy_Ufile_Sbin_Ugen-runfiles",
    "parentId": 50
  }, {
    "id": 1752,
    "label": "gen-out-symlink.sh",
    "parentId": 1748
  }, {
    "id": 1753,
    "label": "bin_gen_symlink",
    "parentId": 1749
  }, {
    "id": 1754,
    "label": "tests_Scopy_Ufile_Sbin_Ugen_Usymlink-runfiles",
    "parentId": 50
  }, {
    "id": 1755,
    "label": "a-out.sh",
    "parentId": 1748
  }, {
    "id": 1756,
    "label": "bin_src",
    "parentId": 1749
  }, {
    "id": 1757,
    "label": "tests_Scopy_Ufile_Sbin_Usrc-runfiles",
    "parentId": 50
  }, {
    "id": 1758,
    "label": "a-out-symlink.sh",
    "parentId": 1748
  }, {
    "id": 1759,
    "label": "bin_src_symlink",
    "parentId": 1749
  }, {
    "id": 1760,
    "label": "tests_Scopy_Ufile_Sbin_Usrc_Usymlink-runfiles",
    "parentId": 50
  }, {
    "id": 1761,
    "label": "xsrc-out-symlink.txt",
    "parentId": 30
  }, {
    "id": 1762,
    "label": "xgen-out-symlink.txt",
    "parentId": 30
  }, {
    "id": 1763,
    "label": "xsrc-out.txt",
    "parentId": 30
  }, {
    "id": 1764,
    "label": "xgen-out.txt",
    "parentId": 30
  }, {
    "id": 1765,
    "label": "loading_test_subpackages_all_w_exclude.sh",
    "parentId": 13
  }, {
    "id": 1766,
    "label": "loading_test_subpackages_all_w_exclude.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1768,
    "label": "loading_test_subpackages_all_w_exclude.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1767,
    "label": "MANIFEST",
    "parentId": 1768
  }, {
    "id": 1769,
    "label": "tests_Sloading_Utest_Usubpackages_Uall_Uw_Uexclude.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1771,
    "label": "subpackages_all_w_exclude",
    "parentId": 25
  }, {
    "id": 1770,
    "label": "test.log",
    "parentId": 1771
  }, {
    "id": 1772,
    "label": "test.cache_status",
    "parentId": 1771
  }, {
    "id": 1773,
    "label": "analysis_test_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1774,
    "label": "analysis_test_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1775,
    "label": "analysis_test_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1776,
    "label": "analysis_test_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1777,
    "label": "analysis_test_stardoc",
    "parentId": 54
  }, {
    "id": 1778,
    "label": "analysis_test_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1779,
    "label": "analysis_test_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1781,
    "label": "analysis_test_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1780,
    "label": "MANIFEST",
    "parentId": 1781
  }, {
    "id": 1782,
    "label": "docs_Sanalysis_Utest_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1783,
    "label": "analysis_test_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1784,
    "label": "analysis_test_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1785,
    "label": "docs_versions_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1786,
    "label": "docs_versions_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1788,
    "label": "docs_versions_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1787,
    "label": "MANIFEST",
    "parentId": 1788
  }, {
    "id": 1789,
    "label": "versions_doc.md",
    "parentId": 493
  }, {
    "id": 1790,
    "label": "docs_Sdocs_Uversions_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1792,
    "label": "docs_versions_doc-difftest",
    "parentId": 498
  }, {
    "id": 1791,
    "label": "test.log",
    "parentId": 1792
  }, {
    "id": 1793,
    "label": "test.cache_status",
    "parentId": 1792
  }, {
    "id": 1794,
    "label": "args_bin.exe",
    "parentId": 876
  }, {
    "id": 1795,
    "label": "args_bin.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1797,
    "label": "args_bin.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1796,
    "label": "MANIFEST",
    "parentId": 1797
  }, {
    "id": 1798,
    "label": "tests_Snative_Ubinary_Sargs_Ubin.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1799,
    "label": "collections_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1800,
    "label": "collections_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1802,
    "label": "collections_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1801,
    "label": "MANIFEST",
    "parentId": 1802
  }, {
    "id": 1803,
    "label": "tests_Scollections_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1805,
    "label": "collections_tests_test_1",
    "parentId": 25
  }, {
    "id": 1804,
    "label": "test.log",
    "parentId": 1805
  }, {
    "id": 1806,
    "label": "test.cache_status",
    "parentId": 1805
  }, {
    "id": 1807,
    "label": "paths_tests_test_5.sh",
    "parentId": 13
  }, {
    "id": 1808,
    "label": "paths_tests_test_5.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1810,
    "label": "paths_tests_test_5.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1809,
    "label": "MANIFEST",
    "parentId": 1810
  }, {
    "id": 1811,
    "label": "tests_Spaths_Utests_Utest_U5.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1813,
    "label": "paths_tests_test_5",
    "parentId": 25
  }, {
    "id": 1812,
    "label": "test.log",
    "parentId": 1813
  }, {
    "id": 1814,
    "label": "test.cache_status",
    "parentId": 1813
  }, {
    "id": 1815,
    "label": "failure_testing_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1817,
    "label": "failure_testing_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1816,
    "label": "MANIFEST",
    "parentId": 1817
  }, {
    "id": 1818,
    "label": "failure_testing_test.sh",
    "parentId": 13
  }, {
    "id": 1819,
    "label": "tests_Sfailure_Utesting_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1821,
    "label": "failure_testing_test",
    "parentId": 25
  }, {
    "id": 1820,
    "label": "test.log",
    "parentId": 1821
  }, {
    "id": 1822,
    "label": "test.cache_status",
    "parentId": 1821
  }, {
    "id": 1823,
    "label": "copy_directory_tests.sh",
    "parentId": 827
  }, {
    "id": 1824,
    "label": "copy_directory_tests",
    "parentId": 611
  }, {
    "id": 1825,
    "label": "copy_directory_tests.runfiles_manifest",
    "parentId": 611
  }, {
    "id": 1827,
    "label": "copy_directory_tests.runfiles",
    "parentId": 611
  }, {
    "id": 1826,
    "label": "MANIFEST",
    "parentId": 1827
  }, {
    "id": 1828,
    "label": "tests_Scopy_Udirectory_Scopy_Udirectory_Utests-runfiles",
    "parentId": 18
  }, {
    "id": 1831,
    "label": "copy_directory",
    "parentId": 25
  }, {
    "id": 1830,
    "label": "copy_directory_tests",
    "parentId": 1831
  }, {
    "id": 1829,
    "label": "test.log",
    "parentId": 1830
  }, {
    "id": 1832,
    "label": "test.cache_status",
    "parentId": 1830
  }, {
    "id": 1833,
    "label": "dicts_tests_test_2.sh",
    "parentId": 13
  }, {
    "id": 1834,
    "label": "dicts_tests_test_2.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1836,
    "label": "dicts_tests_test_2.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1835,
    "label": "MANIFEST",
    "parentId": 1836
  }, {
    "id": 1837,
    "label": "tests_Sdicts_Utests_Utest_U2.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1839,
    "label": "dicts_tests_test_2",
    "parentId": 25
  }, {
    "id": 1838,
    "label": "test.log",
    "parentId": 1839
  }, {
    "id": 1840,
    "label": "test.cache_status",
    "parentId": 1839
  }, {
    "id": 1841,
    "label": "and_config_setting_group_first_match_fails_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1843,
    "label": "and_config_setting_group_first_match_fails_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1842,
    "label": "MANIFEST",
    "parentId": 1843
  }, {
    "id": 1844,
    "label": "and_config_setting_group_first_match_fails_test.sh",
    "parentId": 13
  }, {
    "id": 1845,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Ufirst_Umatch_Ufails_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1847,
    "label": "and_config_setting_group_first_match_fails_test",
    "parentId": 25
  }, {
    "id": 1846,
    "label": "test.log",
    "parentId": 1847
  }, {
    "id": 1848,
    "label": "test.cache_status",
    "parentId": 1847
  }, {
    "id": 1849,
    "label": "copy_file_tests.sh",
    "parentId": 916
  }, {
    "id": 1850,
    "label": "copy_file_tests",
    "parentId": 30
  }, {
    "id": 1851,
    "label": "copy_file_tests.runfiles_manifest",
    "parentId": 30
  }, {
    "id": 1853,
    "label": "copy_file_tests.runfiles",
    "parentId": 30
  }, {
    "id": 1852,
    "label": "MANIFEST",
    "parentId": 1853
  }, {
    "id": 1854,
    "label": "tests_Scopy_Ufile_Scopy_Ufile_Utests-runfiles",
    "parentId": 18
  }, {
    "id": 1857,
    "label": "copy_file",
    "parentId": 25
  }, {
    "id": 1856,
    "label": "copy_file_tests",
    "parentId": 1857
  }, {
    "id": 1855,
    "label": "test.log",
    "parentId": 1856
  }, {
    "id": 1858,
    "label": "test.cache_status",
    "parentId": 1856
  }, {
    "id": 1859,
    "label": "loading_test_selftest_suite_exists.sh",
    "parentId": 13
  }, {
    "id": 1860,
    "label": "loading_test_selftest_suite_exists.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1862,
    "label": "loading_test_selftest_suite_exists.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1861,
    "label": "MANIFEST",
    "parentId": 1862
  }, {
    "id": 1863,
    "label": "tests_Sloading_Utest_Uselftest_Usuite_Uexists.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1865,
    "label": "selftest_suite_exists",
    "parentId": 25
  }, {
    "id": 1864,
    "label": "test.log",
    "parentId": 1865
  }, {
    "id": 1866,
    "label": "test.cache_status",
    "parentId": 1865
  }, {
    "id": 1867,
    "label": "template_test.sh",
    "parentId": 681
  }, {
    "id": 1868,
    "label": "template_test",
    "parentId": 676
  }, {
    "id": 1869,
    "label": "template_test.runfiles_manifest",
    "parentId": 676
  }, {
    "id": 1871,
    "label": "template_test.runfiles",
    "parentId": 676
  }, {
    "id": 1870,
    "label": "MANIFEST",
    "parentId": 1871
  }, {
    "id": 1872,
    "label": "tests_Sexpand_Utemplate_Stemplate_Utest-runfiles",
    "parentId": 18
  }, {
    "id": 1874,
    "label": "template_test",
    "parentId": 699
  }, {
    "id": 1873,
    "label": "test.log",
    "parentId": 1874
  }, {
    "id": 1875,
    "label": "test.cache_status",
    "parentId": 1874
  }, {
    "id": 1876,
    "label": "new_sets_tests_test_3.sh",
    "parentId": 13
  }, {
    "id": 1877,
    "label": "new_sets_tests_test_3.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1879,
    "label": "new_sets_tests_test_3.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1878,
    "label": "MANIFEST",
    "parentId": 1879
  }, {
    "id": 1880,
    "label": "tests_Snew_Usets_Utests_Utest_U3.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1882,
    "label": "new_sets_tests_test_3",
    "parentId": 25
  }, {
    "id": 1881,
    "label": "test.log",
    "parentId": 1882
  }, {
    "id": 1883,
    "label": "test.cache_status",
    "parentId": 1882
  }, {
    "id": 1884,
    "label": "copy_file_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1885,
    "label": "copy_file_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1886,
    "label": "copy_file_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1887,
    "label": "copy_file_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1888,
    "label": "copy_file_stardoc",
    "parentId": 54
  }, {
    "id": 1889,
    "label": "copy_file_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1890,
    "label": "copy_file_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1892,
    "label": "copy_file_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1891,
    "label": "MANIFEST",
    "parentId": 1892
  }, {
    "id": 1893,
    "label": "docs_Scopy_Ufile_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1894,
    "label": "copy_file_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1895,
    "label": "copy_file_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1896,
    "label": "selected_me-test.sh",
    "parentId": 931
  }, {
    "id": 1897,
    "label": "selected_me-test.sh.runfiles_manifest",
    "parentId": 931
  }, {
    "id": 1899,
    "label": "selected_me-test.sh.runfiles",
    "parentId": 931
  }, {
    "id": 1898,
    "label": "MANIFEST",
    "parentId": 1899
  }, {
    "id": 1900,
    "label": "select_me.txt",
    "parentId": 937
  }, {
    "id": 1901,
    "label": "tests_Sselect_Ufile_Sselected_Ume-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1903,
    "label": "selected_me",
    "parentId": 941
  }, {
    "id": 1902,
    "label": "test.log",
    "parentId": 1903
  }, {
    "id": 1904,
    "label": "test.cache_status",
    "parentId": 1903
  }, {
    "id": 1905,
    "label": "bin_gen_symlink",
    "parentId": 30
  }, {
    "id": 1906,
    "label": "bin_gen_symlink.runfiles_manifest",
    "parentId": 30
  }, {
    "id": 1908,
    "label": "bin_gen_symlink.runfiles",
    "parentId": 30
  }, {
    "id": 1907,
    "label": "MANIFEST",
    "parentId": 1908
  }, {
    "id": 1909,
    "label": "tests_Scopy_Ufile_Sbin_Ugen_Usymlink-runfiles",
    "parentId": 18
  }, {
    "id": 1910,
    "label": "docs_types_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1911,
    "label": "docs_types_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1913,
    "label": "docs_types_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1912,
    "label": "MANIFEST",
    "parentId": 1913
  }, {
    "id": 1914,
    "label": "types_doc.md",
    "parentId": 493
  }, {
    "id": 1915,
    "label": "docs_Sdocs_Utypes_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1917,
    "label": "docs_types_doc-difftest",
    "parentId": 498
  }, {
    "id": 1916,
    "label": "test.log",
    "parentId": 1917
  }, {
    "id": 1918,
    "label": "test.cache_status",
    "parentId": 1917
  }, {
    "id": 1919,
    "label": "script.bat",
    "parentId": 1344
  }, {
    "id": 1920,
    "label": "tests_Srun_Ubinary_Sscript.bat-runfiles",
    "parentId": 50
  }, {
    "id": 1921,
    "label": "_S_Stests_Snative_Ubinary_Cassertdata_Uwith_Urunfiles-BazelCppSemantics_build_arch_k8-fastbuild",
    "parentId": 18
  }, {
    "id": 1923,
    "label": "assertdata_with_runfiles",
    "parentId": 1495
  }, {
    "id": 1922,
    "label": "assertdata.pic.o",
    "parentId": 1923
  }, {
    "id": 1924,
    "label": "assertdata.pic.d",
    "parentId": 1923
  }, {
    "id": 1925,
    "label": "assertdata_with_runfiles-2.params",
    "parentId": 876
  }, {
    "id": 1926,
    "label": "assertdata_with_runfiles.stripped",
    "parentId": 876
  }, {
    "id": 1927,
    "label": "assertdata_with_runfiles.dwp",
    "parentId": 876
  }, {
    "id": 1928,
    "label": "assertdata_with_runfiles.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1930,
    "label": "assertdata_with_runfiles.runfiles",
    "parentId": 876
  }, {
    "id": 1929,
    "label": "MANIFEST",
    "parentId": 1930
  }, {
    "id": 1931,
    "label": "tests_Snative_Ubinary_Sassertdata_Uwith_Urunfiles-runfiles",
    "parentId": 18
  }, {
    "id": 1932,
    "label": "shell_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1933,
    "label": "shell_stardoc",
    "parentId": 45
  }, {
    "id": 1934,
    "label": "docs_Sshell_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1935,
    "label": "shell.raw",
    "parentId": 53
  }, {
    "id": 1936,
    "label": "docs_write_file_doc-difftest-test.sh",
    "parentId": 54
  }, {
    "id": 1937,
    "label": "docs_write_file_doc-difftest-test.sh.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1939,
    "label": "docs_write_file_doc-difftest-test.sh.runfiles",
    "parentId": 54
  }, {
    "id": 1938,
    "label": "MANIFEST",
    "parentId": 1939
  }, {
    "id": 1940,
    "label": "write_file_doc.md",
    "parentId": 493
  }, {
    "id": 1941,
    "label": "docs_Sdocs_Uwrite_Ufile_Udoc-difftest-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1943,
    "label": "docs_write_file_doc-difftest",
    "parentId": 498
  }, {
    "id": 1942,
    "label": "test.log",
    "parentId": 1943
  }, {
    "id": 1944,
    "label": "test.cache_status",
    "parentId": 1943
  }, {
    "id": 1945,
    "label": "shell_stardoc.jar",
    "parentId": 54
  }, {
    "id": 1946,
    "label": "shell_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 1947,
    "label": "shell_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 1948,
    "label": "shell_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 1949,
    "label": "shell_stardoc",
    "parentId": 54
  }, {
    "id": 1950,
    "label": "shell_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 1951,
    "label": "shell_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 1953,
    "label": "shell_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 1952,
    "label": "MANIFEST",
    "parentId": 1953
  }, {
    "id": 1954,
    "label": "docs_Sshell_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 1955,
    "label": "shell_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 1956,
    "label": "shell_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 1957,
    "label": "build_test__src.cc",
    "parentId": 13
  }, {
    "id": 1960,
    "label": "_objs",
    "parentId": 13
  }, {
    "id": 1959,
    "label": "build_test__build_target",
    "parentId": 1960
  }, {
    "id": 1958,
    "label": "build_test__src.pic.o",
    "parentId": 1959
  }, {
    "id": 1961,
    "label": "build_test__src.pic.d",
    "parentId": 1959
  }, {
    "id": 1962,
    "label": "libbuild_test__build_target.a-2.params",
    "parentId": 13
  }, {
    "id": 1963,
    "label": "libbuild_test__build_target.so-2.params",
    "parentId": 13
  }, {
    "id": 1965,
    "label": "_solib_k8",
    "parentId": 9
  }, {
    "id": 1964,
    "label": "libtests_Slibbuild_Utest_U_Ubuild_Utarget.so",
    "parentId": 1965
  }, {
    "id": 1966,
    "label": "types_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 1967,
    "label": "types_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1969,
    "label": "types_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1968,
    "label": "MANIFEST",
    "parentId": 1969
  }, {
    "id": 1970,
    "label": "tests_Stypes_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1972,
    "label": "types_tests_test_1",
    "parentId": 25
  }, {
    "id": 1971,
    "label": "test.log",
    "parentId": 1972
  }, {
    "id": 1973,
    "label": "test.cache_status",
    "parentId": 1972
  }, {
    "id": 1974,
    "label": "native_binary_stardoc.jar",
    "parentId": 45
  }, {
    "id": 1975,
    "label": "native_binary_stardoc",
    "parentId": 45
  }, {
    "id": 1976,
    "label": "docs_Snative_Ubinary_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 1977,
    "label": "native_binary.raw",
    "parentId": 53
  }, {
    "id": 1978,
    "label": "data_bin.exe",
    "parentId": 876
  }, {
    "id": 1979,
    "label": "data_bin.exe.runfiles_manifest",
    "parentId": 876
  }, {
    "id": 1981,
    "label": "data_bin.exe.runfiles",
    "parentId": 876
  }, {
    "id": 1980,
    "label": "MANIFEST",
    "parentId": 1981
  }, {
    "id": 1982,
    "label": "tests_Snative_Ubinary_Sdata_Ubin.exe-runfiles",
    "parentId": 18
  }, {
    "id": 1983,
    "label": "and_config_setting_group_middle_match_fails_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1985,
    "label": "and_config_setting_group_middle_match_fails_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1984,
    "label": "MANIFEST",
    "parentId": 1985
  }, {
    "id": 1986,
    "label": "and_config_setting_group_middle_match_fails_test.sh",
    "parentId": 13
  }, {
    "id": 1987,
    "label": "tests_Sand_Uconfig_Usetting_Ugroup_Umiddle_Umatch_Ufails_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1989,
    "label": "and_config_setting_group_middle_match_fails_test",
    "parentId": 25
  }, {
    "id": 1988,
    "label": "test.log",
    "parentId": 1989
  }, {
    "id": 1990,
    "label": "test.cache_status",
    "parentId": 1989
  }, {
    "id": 1991,
    "label": "types_tests_test_9.sh",
    "parentId": 13
  }, {
    "id": 1992,
    "label": "types_tests_test_9.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 1994,
    "label": "types_tests_test_9.sh.runfiles",
    "parentId": 13
  }, {
    "id": 1993,
    "label": "MANIFEST",
    "parentId": 1994
  }, {
    "id": 1995,
    "label": "tests_Stypes_Utests_Utest_U9.sh-runfiles",
    "parentId": 18
  }, {
    "id": 1997,
    "label": "types_tests_test_9",
    "parentId": 25
  }, {
    "id": 1996,
    "label": "test.log",
    "parentId": 1997
  }, {
    "id": 1998,
    "label": "test.cache_status",
    "parentId": 1997
  }, {
    "id": 1999,
    "label": "unittest_stardoc.jar",
    "parentId": 45
  }, {
    "id": 2000,
    "label": "unittest_stardoc",
    "parentId": 45
  }, {
    "id": 2001,
    "label": "docs_Sunittest_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 2002,
    "label": "unittest.raw",
    "parentId": 53
  }, {
    "id": 2003,
    "label": "dicts_stardoc.jar",
    "parentId": 45
  }, {
    "id": 2004,
    "label": "dicts_stardoc",
    "parentId": 45
  }, {
    "id": 2005,
    "label": "docs_Sdicts_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 2006,
    "label": "dicts.raw",
    "parentId": 53
  }, {
    "id": 2007,
    "label": "diff_test_stardoc.jar",
    "parentId": 54
  }, {
    "id": 2008,
    "label": "diff_test_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 2009,
    "label": "diff_test_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 2010,
    "label": "diff_test_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 2011,
    "label": "diff_test_stardoc",
    "parentId": 54
  }, {
    "id": 2012,
    "label": "diff_test_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 2013,
    "label": "diff_test_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 2015,
    "label": "diff_test_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 2014,
    "label": "MANIFEST",
    "parentId": 2015
  }, {
    "id": 2016,
    "label": "docs_Sdiff_Utest_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 2017,
    "label": "diff_test_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 2018,
    "label": "diff_test_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 2019,
    "label": "or_config_setting_group_single_setting_matches_test.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 2021,
    "label": "or_config_setting_group_single_setting_matches_test.sh.runfiles",
    "parentId": 13
  }, {
    "id": 2020,
    "label": "MANIFEST",
    "parentId": 2021
  }, {
    "id": 2022,
    "label": "or_config_setting_group_single_setting_matches_test.sh",
    "parentId": 13
  }, {
    "id": 2023,
    "label": "tests_Sor_Uconfig_Usetting_Ugroup_Usingle_Usetting_Umatches_Utest.sh-runfiles",
    "parentId": 18
  }, {
    "id": 2025,
    "label": "or_config_setting_group_single_setting_matches_test",
    "parentId": 25
  }, {
    "id": 2024,
    "label": "test.log",
    "parentId": 2025
  }, {
    "id": 2026,
    "label": "test.cache_status",
    "parentId": 2025
  }, {
    "id": 2027,
    "label": "selects_stardoc.jar",
    "parentId": 45
  }, {
    "id": 2028,
    "label": "selects_stardoc",
    "parentId": 45
  }, {
    "id": 2029,
    "label": "docs_Sselects_Ustardoc-runfiles",
    "parentId": 50
  }, {
    "id": 2030,
    "label": "selects.raw",
    "parentId": 53
  }, {
    "id": 2031,
    "label": "same_gen_gen-test.sh",
    "parentId": 614
  }, {
    "id": 2032,
    "label": "same_gen_gen-test.sh.runfiles_manifest",
    "parentId": 614
  }, {
    "id": 2034,
    "label": "same_gen_gen-test.sh.runfiles",
    "parentId": 614
  }, {
    "id": 2033,
    "label": "MANIFEST",
    "parentId": 2034
  }, {
    "id": 2035,
    "label": "tests_Sdiff_Utest_Ssame_Ugen_Ugen-test.sh-runfiles",
    "parentId": 18
  }, {
    "id": 2037,
    "label": "same_gen_gen",
    "parentId": 624
  }, {
    "id": 2036,
    "label": "test.log",
    "parentId": 2037
  }, {
    "id": 2038,
    "label": "test.cache_status",
    "parentId": 2037
  }, {
    "id": 2039,
    "label": "collections_stardoc.jar",
    "parentId": 54
  }, {
    "id": 2040,
    "label": "collections_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 2041,
    "label": "collections_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 2042,
    "label": "collections_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 2043,
    "label": "collections_stardoc",
    "parentId": 54
  }, {
    "id": 2044,
    "label": "collections_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 2045,
    "label": "collections_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 2047,
    "label": "collections_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 2046,
    "label": "MANIFEST",
    "parentId": 2047
  }, {
    "id": 2048,
    "label": "docs_Scollections_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 2049,
    "label": "collections_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 2050,
    "label": "collections_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 2051,
    "label": "collections_tests_test_0.sh",
    "parentId": 13
  }, {
    "id": 2052,
    "label": "collections_tests_test_0.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 2054,
    "label": "collections_tests_test_0.sh.runfiles",
    "parentId": 13
  }, {
    "id": 2053,
    "label": "MANIFEST",
    "parentId": 2054
  }, {
    "id": 2055,
    "label": "tests_Scollections_Utests_Utest_U0.sh-runfiles",
    "parentId": 18
  }, {
    "id": 2057,
    "label": "collections_tests_test_0",
    "parentId": 25
  }, {
    "id": 2056,
    "label": "test.log",
    "parentId": 2057
  }, {
    "id": 2058,
    "label": "test.cache_status",
    "parentId": 2057
  }, {
    "id": 2059,
    "label": "unittest_tests_test_1.sh",
    "parentId": 13
  }, {
    "id": 2060,
    "label": "unittest_tests_test_1.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 2062,
    "label": "unittest_tests_test_1.sh.runfiles",
    "parentId": 13
  }, {
    "id": 2061,
    "label": "MANIFEST",
    "parentId": 2062
  }, {
    "id": 2063,
    "label": "tests_Sunittest_Utests_Utest_U1.sh-runfiles",
    "parentId": 18
  }, {
    "id": 2065,
    "label": "unittest_tests_test_1",
    "parentId": 25
  }, {
    "id": 2064,
    "label": "test.log",
    "parentId": 2065
  }, {
    "id": 2066,
    "label": "test.cache_status",
    "parentId": 2065
  }, {
    "id": 2067,
    "label": "paths_tests_test_4.sh",
    "parentId": 13
  }, {
    "id": 2068,
    "label": "paths_tests_test_4.sh.runfiles_manifest",
    "parentId": 13
  }, {
    "id": 2070,
    "label": "paths_tests_test_4.sh.runfiles",
    "parentId": 13
  }, {
    "id": 2069,
    "label": "MANIFEST",
    "parentId": 2070
  }, {
    "id": 2071,
    "label": "tests_Spaths_Utests_Utest_U4.sh-runfiles",
    "parentId": 18
  }, {
    "id": 2073,
    "label": "paths_tests_test_4",
    "parentId": 25
  }, {
    "id": 2072,
    "label": "test.log",
    "parentId": 2073
  }, {
    "id": 2074,
    "label": "test.cache_status",
    "parentId": 2073
  }, {
    "id": 2075,
    "label": "dicts_stardoc.jar",
    "parentId": 54
  }, {
    "id": 2076,
    "label": "dicts_stardoc-native-header.jar",
    "parentId": 54
  }, {
    "id": 2077,
    "label": "dicts_stardoc.jar_manifest_proto",
    "parentId": 54
  }, {
    "id": 2078,
    "label": "dicts_stardoc-src.jar",
    "parentId": 54
  }, {
    "id": 2079,
    "label": "dicts_stardoc",
    "parentId": 54
  }, {
    "id": 2080,
    "label": "dicts_stardoc_deploy-src.jar",
    "parentId": 54
  }, {
    "id": 2081,
    "label": "dicts_stardoc.runfiles_manifest",
    "parentId": 54
  }, {
    "id": 2083,
    "label": "dicts_stardoc.runfiles",
    "parentId": 54
  }, {
    "id": 2082,
    "label": "MANIFEST",
    "parentId": 2083
  }, {
    "id": 2084,
    "label": "docs_Sdicts_Ustardoc-runfiles",
    "parentId": 18
  }, {
    "id": 2085,
    "label": "dicts_stardoc_deploy.jar",
    "parentId": 54
  }, {
    "id": 2086,
    "label": "dicts_stardoc_deploy.jar.unstripped",
    "parentId": 54
  }, {
    "id": 2090,
    "label": "bazel_tools",
    "parentId": 67
  }, {
    "id": 2089,
    "label": "tools",
    "parentId": 2090
  }, {
    "id": 2088,
    "label": "jdk",
    "parentId": 2089
  }, {
    "id": 2087,
    "label": "platformclasspath.jar",
    "parentId": 2088
  }, {
    "id": 2091,
    "label": "select_file_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2092,
    "label": "select_file_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2093,
    "label": "select_file_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2094,
    "label": "select_file_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2095,
    "label": "select_file_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2097,
    "label": "select_file_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2096,
    "label": "MANIFEST",
    "parentId": 2097
  }, {
    "id": 2099,
    "label": "include",
    "parentId": 47
  }, {
    "id": 2098,
    "label": "build-info-redacted.properties",
    "parentId": 2099
  }, {
    "id": 2100,
    "label": "select_file_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2101,
    "label": "select_file_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2102,
    "label": "build_test_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2103,
    "label": "build_test_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2104,
    "label": "build_test_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2105,
    "label": "build_test_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2106,
    "label": "build_test_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2108,
    "label": "build_test_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2107,
    "label": "MANIFEST",
    "parentId": 2108
  }, {
    "id": 2109,
    "label": "build_test_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2110,
    "label": "build_test_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2111,
    "label": "renderer-native-header.jar",
    "parentId": 65
  }, {
    "id": 2112,
    "label": "renderer.jar_manifest_proto",
    "parentId": 65
  }, {
    "id": 2113,
    "label": "renderer-src.jar",
    "parentId": 65
  }, {
    "id": 2114,
    "label": "renderer_deploy-src.jar",
    "parentId": 65
  }, {
    "id": 2115,
    "label": "renderer.runfiles_manifest",
    "parentId": 65
  }, {
    "id": 2117,
    "label": "renderer.runfiles",
    "parentId": 65
  }, {
    "id": 2116,
    "label": "MANIFEST",
    "parentId": 2117
  }, {
    "id": 2118,
    "label": "renderer_binary.jar",
    "parentId": 58
  }, {
    "id": 2119,
    "label": "renderer_deploy.jar",
    "parentId": 65
  }, {
    "id": 2120,
    "label": "renderer_deploy.jar.unstripped",
    "parentId": 65
  }, {
    "id": 2121,
    "label": "dicts_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2122,
    "label": "dicts_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2123,
    "label": "dicts_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2124,
    "label": "dicts_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2125,
    "label": "dicts_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2127,
    "label": "dicts_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2126,
    "label": "MANIFEST",
    "parentId": 2127
  }, {
    "id": 2128,
    "label": "dicts_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2129,
    "label": "dicts_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2130,
    "label": "copy_directory_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2131,
    "label": "copy_directory_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2132,
    "label": "copy_directory_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2133,
    "label": "copy_directory_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2134,
    "label": "copy_directory_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2136,
    "label": "copy_directory_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2135,
    "label": "MANIFEST",
    "parentId": 2136
  }, {
    "id": 2137,
    "label": "copy_directory_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2138,
    "label": "copy_directory_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2140,
    "label": "ijar",
    "parentId": 292
  }, {
    "id": 2139,
    "label": "ijar",
    "parentId": 2140
  }, {
    "id": 2146,
    "label": "io_bazel_stardoc",
    "parentId": 88
  }, {
    "id": 2145,
    "label": "stardoc",
    "parentId": 2146
  }, {
    "id": 2144,
    "label": "_ijar",
    "parentId": 2145
  }, {
    "id": 2143,
    "label": "prebuilt_stardoc_binary",
    "parentId": 2144
  }, {
    "id": 2142,
    "label": "stardoc",
    "parentId": 2143
  }, {
    "id": 2141,
    "label": "stardoc_binary-ijar.jar",
    "parentId": 2142
  }, {
    "id": 2147,
    "label": "bin_nonempty.runfiles_manifest",
    "parentId": 1627
  }, {
    "id": 2149,
    "label": "bin_nonempty.runfiles",
    "parentId": 1627
  }, {
    "id": 2148,
    "label": "MANIFEST",
    "parentId": 2149
  }, {
    "id": 2150,
    "label": "unittest_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2151,
    "label": "unittest_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2152,
    "label": "unittest_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2153,
    "label": "unittest_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2154,
    "label": "unittest_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2156,
    "label": "unittest_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2155,
    "label": "MANIFEST",
    "parentId": 2156
  }, {
    "id": 2157,
    "label": "unittest_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2158,
    "label": "unittest_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2159,
    "label": "analysis_test_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2160,
    "label": "analysis_test_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2161,
    "label": "analysis_test_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2162,
    "label": "analysis_test_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2163,
    "label": "analysis_test_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2165,
    "label": "analysis_test_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2164,
    "label": "MANIFEST",
    "parentId": 2165
  }, {
    "id": 2166,
    "label": "analysis_test_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2167,
    "label": "analysis_test_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2168,
    "label": "collections_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2169,
    "label": "collections_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2170,
    "label": "collections_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2171,
    "label": "collections_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2172,
    "label": "collections_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2174,
    "label": "collections_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2173,
    "label": "MANIFEST",
    "parentId": 2174
  }, {
    "id": 2175,
    "label": "collections_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2176,
    "label": "collections_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2177,
    "label": "bin_empty.runfiles_manifest",
    "parentId": 1627
  }, {
    "id": 2179,
    "label": "bin_empty.runfiles",
    "parentId": 1627
  }, {
    "id": 2178,
    "label": "MANIFEST",
    "parentId": 2179
  }, {
    "id": 2180,
    "label": "native_binary_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2181,
    "label": "native_binary_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2182,
    "label": "native_binary_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2183,
    "label": "native_binary_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2184,
    "label": "native_binary_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2186,
    "label": "native_binary_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2185,
    "label": "MANIFEST",
    "parentId": 2186
  }, {
    "id": 2187,
    "label": "native_binary_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2188,
    "label": "native_binary_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2189,
    "label": "paths_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2190,
    "label": "paths_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2191,
    "label": "paths_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2192,
    "label": "paths_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2193,
    "label": "paths_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2195,
    "label": "paths_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2194,
    "label": "MANIFEST",
    "parentId": 2195
  }, {
    "id": 2196,
    "label": "paths_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2197,
    "label": "paths_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2199,
    "label": "runfiles",
    "parentId": 688
  }, {
    "id": 2198,
    "label": "runfiles.h",
    "parentId": 2199
  }, {
    "id": 2200,
    "label": "runfiles.cc",
    "parentId": 2199
  }, {
    "id": 2201,
    "label": "runfiles.pic.d",
    "parentId": 1698
  }, {
    "id": 2202,
    "label": "librunfiles.a-2.params",
    "parentId": 1700
  }, {
    "id": 2203,
    "label": "librunfiles.a",
    "parentId": 1700
  }, {
    "id": 2204,
    "label": "librunfiles.so-2.params",
    "parentId": 1700
  }, {
    "id": 2205,
    "label": "librunfiles.so",
    "parentId": 1700
  }, {
    "id": 2206,
    "label": "libexternal_Sbazel_Utools_Stools_Scpp_Srunfiles_Slibrunfiles.so",
    "parentId": 1965
  }, {
    "id": 2207,
    "label": "expand_template_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2208,
    "label": "expand_template_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2209,
    "label": "expand_template_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2210,
    "label": "expand_template_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2211,
    "label": "expand_template_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2213,
    "label": "expand_template_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2212,
    "label": "MANIFEST",
    "parentId": 2213
  }, {
    "id": 2214,
    "label": "expand_template_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2215,
    "label": "expand_template_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2216,
    "label": "script.bat.runfiles_manifest",
    "parentId": 1344
  }, {
    "id": 2218,
    "label": "script.bat.runfiles",
    "parentId": 1344
  }, {
    "id": 2217,
    "label": "MANIFEST",
    "parentId": 2218
  }, {
    "id": 2219,
    "label": "bin_gen_symlink.runfiles_manifest",
    "parentId": 1749
  }, {
    "id": 2221,
    "label": "bin_gen_symlink.runfiles",
    "parentId": 1749
  }, {
    "id": 2220,
    "label": "MANIFEST",
    "parentId": 2221
  }, {
    "id": 2222,
    "label": "shell_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2223,
    "label": "shell_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2224,
    "label": "shell_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2225,
    "label": "shell_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2226,
    "label": "shell_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2228,
    "label": "shell_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2227,
    "label": "MANIFEST",
    "parentId": 2228
  }, {
    "id": 2229,
    "label": "shell_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2230,
    "label": "shell_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2231,
    "label": "bin_src_symlink.runfiles_manifest",
    "parentId": 1749
  }, {
    "id": 2233,
    "label": "bin_src_symlink.runfiles",
    "parentId": 1749
  }, {
    "id": 2232,
    "label": "MANIFEST",
    "parentId": 2233
  }, {
    "id": 2234,
    "label": "bin_src.runfiles_manifest",
    "parentId": 1749
  }, {
    "id": 2236,
    "label": "bin_src.runfiles",
    "parentId": 1749
  }, {
    "id": 2235,
    "label": "MANIFEST",
    "parentId": 2236
  }, {
    "id": 2239,
    "label": "_objs",
    "parentId": 1344
  }, {
    "id": 2238,
    "label": "printargs",
    "parentId": 2239
  }, {
    "id": 2237,
    "label": "printargs.pic.o",
    "parentId": 2238
  }, {
    "id": 2240,
    "label": "printargs.pic.d",
    "parentId": 2238
  }, {
    "id": 2241,
    "label": "printargs.o",
    "parentId": 2238
  }, {
    "id": 2242,
    "label": "printargs.d",
    "parentId": 2238
  }, {
    "id": 2243,
    "label": "printargs-2.params",
    "parentId": 1344
  }, {
    "id": 2244,
    "label": "printargs.stripped",
    "parentId": 1344
  }, {
    "id": 2245,
    "label": "printargs.dwp",
    "parentId": 1344
  }, {
    "id": 2246,
    "label": "printargs.runfiles_manifest",
    "parentId": 1344
  }, {
    "id": 2248,
    "label": "printargs.runfiles",
    "parentId": 1344
  }, {
    "id": 2247,
    "label": "MANIFEST",
    "parentId": 2248
  }, {
    "id": 2249,
    "label": "copy_file_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2250,
    "label": "copy_file_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2251,
    "label": "copy_file_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2252,
    "label": "copy_file_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2253,
    "label": "copy_file_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2255,
    "label": "copy_file_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2254,
    "label": "MANIFEST",
    "parentId": 2255
  }, {
    "id": 2256,
    "label": "copy_file_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2257,
    "label": "copy_file_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2258,
    "label": "bin_gen.runfiles_manifest",
    "parentId": 1749
  }, {
    "id": 2260,
    "label": "bin_gen.runfiles",
    "parentId": 1749
  }, {
    "id": 2259,
    "label": "MANIFEST",
    "parentId": 2260
  }, {
    "id": 2261,
    "label": "diff_test_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2262,
    "label": "diff_test_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2263,
    "label": "diff_test_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2264,
    "label": "diff_test_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2265,
    "label": "diff_test_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2267,
    "label": "diff_test_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2266,
    "label": "MANIFEST",
    "parentId": 2267
  }, {
    "id": 2268,
    "label": "diff_test_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2269,
    "label": "diff_test_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2270,
    "label": "bzl_library_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2271,
    "label": "bzl_library_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2272,
    "label": "bzl_library_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2273,
    "label": "bzl_library_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2274,
    "label": "bzl_library_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2276,
    "label": "bzl_library_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2275,
    "label": "MANIFEST",
    "parentId": 2276
  }, {
    "id": 2277,
    "label": "bzl_library_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2278,
    "label": "bzl_library_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2279,
    "label": "run_binary_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2280,
    "label": "run_binary_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2281,
    "label": "run_binary_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2282,
    "label": "run_binary_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2283,
    "label": "run_binary_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2285,
    "label": "run_binary_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2284,
    "label": "MANIFEST",
    "parentId": 2285
  }, {
    "id": 2286,
    "label": "run_binary_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2287,
    "label": "run_binary_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2288,
    "label": "types_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2289,
    "label": "types_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2290,
    "label": "types_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2291,
    "label": "types_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2292,
    "label": "types_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2294,
    "label": "types_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2293,
    "label": "MANIFEST",
    "parentId": 2294
  }, {
    "id": 2295,
    "label": "types_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2296,
    "label": "types_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2297,
    "label": "partial_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2298,
    "label": "partial_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2299,
    "label": "partial_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2300,
    "label": "partial_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2301,
    "label": "partial_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2303,
    "label": "partial_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2302,
    "label": "MANIFEST",
    "parentId": 2303
  }, {
    "id": 2304,
    "label": "partial_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2305,
    "label": "partial_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2306,
    "label": "versions_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2307,
    "label": "versions_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2308,
    "label": "versions_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2309,
    "label": "versions_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2310,
    "label": "versions_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2312,
    "label": "versions_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2311,
    "label": "MANIFEST",
    "parentId": 2312
  }, {
    "id": 2313,
    "label": "versions_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2314,
    "label": "versions_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2315,
    "label": "subpackages_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2316,
    "label": "subpackages_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2317,
    "label": "subpackages_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2318,
    "label": "subpackages_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2319,
    "label": "subpackages_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2321,
    "label": "subpackages_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2320,
    "label": "MANIFEST",
    "parentId": 2321
  }, {
    "id": 2322,
    "label": "subpackages_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2323,
    "label": "subpackages_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2324,
    "label": "common_settings_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2325,
    "label": "common_settings_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2326,
    "label": "common_settings_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2327,
    "label": "common_settings_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2328,
    "label": "common_settings_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2330,
    "label": "common_settings_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2329,
    "label": "MANIFEST",
    "parentId": 2330
  }, {
    "id": 2331,
    "label": "common_settings_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2332,
    "label": "common_settings_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2333,
    "label": "structs_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2334,
    "label": "structs_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2335,
    "label": "structs_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2336,
    "label": "structs_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2337,
    "label": "structs_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2339,
    "label": "structs_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2338,
    "label": "MANIFEST",
    "parentId": 2339
  }, {
    "id": 2340,
    "label": "structs_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2341,
    "label": "structs_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2342,
    "label": "selects_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2343,
    "label": "selects_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2344,
    "label": "selects_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2345,
    "label": "selects_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2346,
    "label": "selects_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2348,
    "label": "selects_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2347,
    "label": "MANIFEST",
    "parentId": 2348
  }, {
    "id": 2349,
    "label": "selects_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2350,
    "label": "selects_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2351,
    "label": "new_sets_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2352,
    "label": "new_sets_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2353,
    "label": "new_sets_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2354,
    "label": "new_sets_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2355,
    "label": "new_sets_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2357,
    "label": "new_sets_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2356,
    "label": "MANIFEST",
    "parentId": 2357
  }, {
    "id": 2358,
    "label": "new_sets_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2359,
    "label": "new_sets_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2360,
    "label": "write_file_stardoc-native-header.jar",
    "parentId": 45
  }, {
    "id": 2361,
    "label": "write_file_stardoc.jar_manifest_proto",
    "parentId": 45
  }, {
    "id": 2362,
    "label": "write_file_stardoc-src.jar",
    "parentId": 45
  }, {
    "id": 2363,
    "label": "write_file_stardoc_deploy-src.jar",
    "parentId": 45
  }, {
    "id": 2364,
    "label": "write_file_stardoc.runfiles_manifest",
    "parentId": 45
  }, {
    "id": 2366,
    "label": "write_file_stardoc.runfiles",
    "parentId": 45
  }, {
    "id": 2365,
    "label": "MANIFEST",
    "parentId": 2366
  }, {
    "id": 2367,
    "label": "write_file_stardoc_deploy.jar",
    "parentId": 45
  }, {
    "id": 2368,
    "label": "write_file_stardoc_deploy.jar.unstripped",
    "parentId": 45
  }, {
    "id": 2372,
    "label": "_ijar",
    "parentId": 65
  }, {
    "id": 2371,
    "label": "prebuilt_stardoc_binary",
    "parentId": 2372
  }, {
    "id": 2370,
    "label": "stardoc",
    "parentId": 2371
  }, {
    "id": 2369,
    "label": "stardoc_binary-ijar.jar",
    "parentId": 2370
  }, {
    "id": 2375,
    "label": "prebuilt_renderer_binary",
    "parentId": 2372
  }, {
    "id": 2374,
    "label": "stardoc",
    "parentId": 2375
  }, {
    "id": 2373,
    "label": "renderer_binary-ijar.jar",
    "parentId": 2374
  }, {
    "id": 2376,
    "label": "a-out-symlink.sh.runfiles_manifest",
    "parentId": 1748
  }, {
    "id": 2378,
    "label": "a-out-symlink.sh.runfiles",
    "parentId": 1748
  }, {
    "id": 2377,
    "label": "MANIFEST",
    "parentId": 2378
  }, {
    "id": 2379,
    "label": "tests_Scopy_Ufile_Sxout_Sa-out-symlink.sh-runfiles",
    "parentId": 50
  }, {
    "id": 2380,
    "label": "nonempty.sh.runfiles_manifest",
    "parentId": 1626
  }, {
    "id": 2382,
    "label": "nonempty.sh.runfiles",
    "parentId": 1626
  }, {
    "id": 2381,
    "label": "MANIFEST",
    "parentId": 2382
  }, {
    "id": 2383,
    "label": "tests_Swrite_Ufile_Sout_Snonempty.sh-runfiles",
    "parentId": 50
  }, {
    "id": 2384,
    "label": "b.txt",
    "parentId": 1749
  }, {
    "id": 2385,
    "label": "gen-out.sh.runfiles_manifest",
    "parentId": 1748
  }, {
    "id": 2387,
    "label": "gen-out.sh.runfiles",
    "parentId": 1748
  }, {
    "id": 2386,
    "label": "MANIFEST",
    "parentId": 2387
  }, {
    "id": 2388,
    "label": "tests_Scopy_Ufile_Sxout_Sgen-out.sh-runfiles",
    "parentId": 50
  }, {
    "id": 2389,
    "label": "gen-out-symlink.sh.runfiles_manifest",
    "parentId": 1748
  }, {
    "id": 2391,
    "label": "gen-out-symlink.sh.runfiles",
    "parentId": 1748
  }, {
    "id": 2390,
    "label": "MANIFEST",
    "parentId": 2391
  }, {
    "id": 2392,
    "label": "tests_Scopy_Ufile_Sxout_Sgen-out-symlink.sh-runfiles",
    "parentId": 50
  }, {
    "id": 2393,
    "label": "empty.sh.runfiles_manifest",
    "parentId": 1626
  }, {
    "id": 2395,
    "label": "empty.sh.runfiles",
    "parentId": 1626
  }, {
    "id": 2394,
    "label": "MANIFEST",
    "parentId": 2395
  }, {
    "id": 2396,
    "label": "tests_Swrite_Ufile_Sout_Sempty.sh-runfiles",
    "parentId": 50
  }, {
    "id": 2397,
    "label": "a-out.sh.runfiles_manifest",
    "parentId": 1748
  }, {
    "id": 2399,
    "label": "a-out.sh.runfiles",
    "parentId": 1748
  }, {
    "id": 2398,
    "label": "MANIFEST",
    "parentId": 2399
  }, {
    "id": 2400,
    "label": "tests_Scopy_Ufile_Sxout_Sa-out.sh-runfiles",
    "parentId": 50
  }]
}
